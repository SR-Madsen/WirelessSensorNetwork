
STM32F769I_DISCOVERY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010240  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010ab8  08010440  08010440  00020440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020ef8  08020ef8  00030ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020f00  08020f00  00030f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020f04  08020f04  00030f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b4  20000000  08020f08  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00010d68  200000b4  08020fbc  000400b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20010e1c  08020fbc  00040e1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY
 10 .debug_line   00036bec  00000000  00000000  000400e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00060160  00000000  00000000  00076cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000bcc1  00000000  00000000  000d6e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002570  00000000  00000000  000e2af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0014ca89  00000000  00000000  000e5060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000038a0  00000000  00000000  00231af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0002351c  00000000  00000000  00235390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00040919  00000000  00000000  002588ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002991c5  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007b74  00000000  00000000  00299240  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .RxDecripSection 00000080  2007c000  2007c000  0004c000  2**2
                  ALLOC
 21 .RxarraySection 000017d0  2007c100  2007c100  0004c100  2**0
                  ALLOC
 22 .TxDescripSection 00000080  2007c080  2007c080  0004c080  2**2
                  ALLOC
 23 .TxarraySection 000017d0  2007d8d0  2007d8d0  0004d8d0  2**0
                  ALLOC

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b4 	.word	0x200000b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08010428 	.word	0x08010428

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b8 	.word	0x200000b8
 800023c:	08010428 	.word	0x08010428

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000616:	e003      	b.n	8000620 <LoopCopyDataInit>

08000618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800061a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800061c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800061e:	3104      	adds	r1, #4

08000620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000620:	480b      	ldr	r0, [pc, #44]	; (8000650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000628:	d3f6      	bcc.n	8000618 <CopyDataInit>
  ldr  r2, =_sbss
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800062c:	e002      	b.n	8000634 <LoopFillZerobss>

0800062e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800062e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000630:	f842 3b04 	str.w	r3, [r2], #4

08000634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000638:	d3f9      	bcc.n	800062e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800063a:	f001 fda5 	bl	8002188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063e:	f00e fd45 	bl	800f0cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000642:	f000 fc5b 	bl	8000efc <main>
  bx  lr    
 8000646:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000648:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800064c:	08020f08 	.word	0x08020f08
  ldr  r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000654:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8000658:	200000b4 	.word	0x200000b4
  ldr  r3, = _ebss
 800065c:	20010e1c 	.word	0x20010e1c

08000660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC_IRQHandler>
	...

08000664 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8000664:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <_sbrk+0x34>)
{
 8000668:	4602      	mov	r2, r0
	if (heap_end == 0)
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	b909      	cbnz	r1, 8000672 <_sbrk+0xe>
		heap_end = &end;
 800066e:	490b      	ldr	r1, [pc, #44]	; (800069c <_sbrk+0x38>)
 8000670:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000672:	490b      	ldr	r1, [pc, #44]	; (80006a0 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8000674:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8000676:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8000678:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800067a:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800067c:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8000680:	428a      	cmp	r2, r1
 8000682:	d906      	bls.n	8000692 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000684:	f00e fd1c 	bl	800f0c0 <__errno>
 8000688:	230c      	movs	r3, #12
 800068a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800068c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000690:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8000692:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000694:	e7fc      	b.n	8000690 <_sbrk+0x2c>
 8000696:	bf00      	nop
 8000698:	200000d0 	.word	0x200000d0
 800069c:	20010e20 	.word	0x20010e20
 80006a0:	e000ed08 	.word	0xe000ed08

080006a4 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	460e      	mov	r6, r1
 80006a8:	4615      	mov	r5, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	460c      	mov	r4, r1
 80006ac:	1ba3      	subs	r3, r4, r6
 80006ae:	429d      	cmp	r5, r3
 80006b0:	dc01      	bgt.n	80006b6 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 80006b2:	4628      	mov	r0, r5
 80006b4:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 80006b6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80006ba:	f000 fe29 	bl	8001310 <__io_putchar>
 80006be:	e7f5      	b.n	80006ac <_write+0x8>

080006c0 <_close>:

int _close(int file)
{
	return -1;
}
 80006c0:	f04f 30ff 	mov.w	r0, #4294967295
 80006c4:	4770      	bx	lr

080006c6 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80006c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80006ca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80006cc:	604b      	str	r3, [r1, #4]
}
 80006ce:	4770      	bx	lr

080006d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80006d0:	2001      	movs	r0, #1
 80006d2:	4770      	bx	lr

080006d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80006d4:	2000      	movs	r0, #0
 80006d6:	4770      	bx	lr

080006d8 <_read>:

int _read(int file, char *ptr, int len)
{
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	460e      	mov	r6, r1
 80006dc:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006de:	460c      	mov	r4, r1
 80006e0:	1ba3      	subs	r3, r4, r6
 80006e2:	429d      	cmp	r5, r3
 80006e4:	dc01      	bgt.n	80006ea <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 80006e6:	4628      	mov	r0, r5
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 80006ea:	f3af 8000 	nop.w
 80006ee:	f804 0b01 	strb.w	r0, [r4], #1
 80006f2:	e7f5      	b.n	80006e0 <_read+0x8>

080006f4 <User_notification>:
  * @param  netif: the network interface
  * @retval None
  */
void User_notification(struct netif *netif) 
{
  if (netif_is_up(netif))
 80006f4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 80006f8:	f013 0f01 	tst.w	r3, #1
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <User_notification+0x24>)
 80006fe:	d002      	beq.n	8000706 <User_notification+0x12>
  {
#ifdef USE_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
    /* Update DHCP state machine */
    DHCP_state = DHCP_LINK_DOWN;
#endif  /* USE_DHCP */
    LCD_UsrLog ("The network cable is not connected \n");
  } 
}
 8000704:	4770      	bx	lr
    DHCP_state = DHCP_LINK_DOWN;
 8000706:	2205      	movs	r2, #5
    LCD_UsrLog ("The network cable is not connected \n");
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <User_notification+0x28>)
    DHCP_state = DHCP_LINK_DOWN;
 800070a:	701a      	strb	r2, [r3, #0]
    LCD_UsrLog ("The network cable is not connected \n");
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <User_notification+0x2c>)
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <User_notification+0x30>)
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	f00e bdaf 	b.w	800f274 <puts>
 8000716:	bf00      	nop
 8000718:	200000d4 	.word	0x200000d4
 800071c:	0801d797 	.word	0x0801d797
 8000720:	2000a6fc 	.word	0x2000a6fc
 8000724:	ff000080 	.word	0xff000080

08000728 <DHCP_thread>:
  * @brief  DHCP Process
  * @param  argument: network interface
  * @retval None
  */
void DHCP_thread(void const * argument)
{
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	4604      	mov	r4, r0
 800072e:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp;
  uint8_t iptxt[20];
  
  for (;;)
  {
    switch (DHCP_state)
 8000730:	4d31      	ldr	r5, [pc, #196]	; (80007f8 <DHCP_thread+0xd0>)
            
            /* Stop DHCP */
            dhcp_stop(netif);
            
            /* Static address used */
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 8000732:	4e32      	ldr	r6, [pc, #200]	; (80007fc <DHCP_thread+0xd4>)
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000734:	4f32      	ldr	r7, [pc, #200]	; (8000800 <DHCP_thread+0xd8>)
    switch (DHCP_state)
 8000736:	782b      	ldrb	r3, [r5, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b02      	cmp	r3, #2
 800073c:	d016      	beq.n	800076c <DHCP_thread+0x44>
 800073e:	2b05      	cmp	r3, #5
 8000740:	d053      	beq.n	80007ea <DHCP_thread+0xc2>
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10e      	bne.n	8000764 <DHCP_thread+0x3c>
        ip_addr_set_zero_ip4(&netif->ip_addr);
 8000746:	2300      	movs	r3, #0
        dhcp_start(netif);
 8000748:	4620      	mov	r0, r4
        ip_addr_set_zero_ip4(&netif->netmask);
 800074a:	e9c4 3301 	strd	r3, r3, [r4, #4]
        ip_addr_set_zero_ip4(&netif->gw);       
 800074e:	60e3      	str	r3, [r4, #12]
        dhcp_start(netif);
 8000750:	f008 fa24 	bl	8008b9c <dhcp_start>
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000754:	2302      	movs	r3, #2
        LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 8000756:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <DHCP_thread+0xdc>)
        DHCP_state = DHCP_WAIT_ADDRESS;
 8000758:	702b      	strb	r3, [r5, #0]
        LCD_UsrLog ("  State: Looking for DHCP server ...\n");
 800075a:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <DHCP_thread+0xe0>)
 800075c:	482b      	ldr	r0, [pc, #172]	; (800080c <DHCP_thread+0xe4>)
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	f00e fd88 	bl	800f274 <puts>
    break;
    default: break;
    }
    
    /* wait 250 ms */
    osDelay(250);
 8000764:	20fa      	movs	r0, #250	; 0xfa
 8000766:	f005 fbae 	bl	8005ec6 <osDelay>
    switch (DHCP_state)
 800076a:	e7e4      	b.n	8000736 <DHCP_thread+0xe>
        if (dhcp_supplied_address(netif)) 
 800076c:	4620      	mov	r0, r4
 800076e:	f008 f9a5 	bl	8008abc <dhcp_supplied_address>
 8000772:	b180      	cbz	r0, 8000796 <DHCP_thread+0x6e>
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 8000774:	2303      	movs	r3, #3
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));   
 8000776:	1d20      	adds	r0, r4, #4
          DHCP_state = DHCP_ADDRESS_ASSIGNED;	
 8000778:	702b      	strb	r3, [r5, #0]
          sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));   
 800077a:	f009 f9fb 	bl	8009b74 <ip4addr_ntoa>
 800077e:	4601      	mov	r1, r0
 8000780:	a803      	add	r0, sp, #12
 8000782:	f00e fde2 	bl	800f34a <strcpy>
          LCD_UsrLog ("IP address assigned by a DHCP server: %s\n", iptxt);
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <DHCP_thread+0xe0>)
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <DHCP_thread+0xdc>)
 800078a:	a903      	add	r1, sp, #12
 800078c:	4820      	ldr	r0, [pc, #128]	; (8000810 <DHCP_thread+0xe8>)
 800078e:	601a      	str	r2, [r3, #0]
            LCD_UsrLog ("Static IP address: %s\n", iptxt);  
 8000790:	f00e fcfc 	bl	800f18c <iprintf>
 8000794:	e7e6      	b.n	8000764 <DHCP_thread+0x3c>
          if (dhcp->tries > MAX_DHCP_TRIES)
 8000796:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000798:	799b      	ldrb	r3, [r3, #6]
 800079a:	2b04      	cmp	r3, #4
 800079c:	d9e2      	bls.n	8000764 <DHCP_thread+0x3c>
            DHCP_state = DHCP_TIMEOUT;
 800079e:	2304      	movs	r3, #4
            dhcp_stop(netif);
 80007a0:	4620      	mov	r0, r4
            LCD_UsrLog ("DHCP Timeout !! \n");
 80007a2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8000808 <DHCP_thread+0xe0>
            DHCP_state = DHCP_TIMEOUT;
 80007a6:	702b      	strb	r3, [r5, #0]
            dhcp_stop(netif);
 80007a8:	f008 fb44 	bl	8008e34 <dhcp_stop>
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80007ac:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80007b0:	aa01      	add	r2, sp, #4
 80007b2:	4669      	mov	r1, sp
 80007b4:	4620      	mov	r0, r4
            IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1, NETMASK_ADDR2, NETMASK_ADDR3);
 80007b6:	9301      	str	r3, [sp, #4]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80007b8:	ab08      	add	r3, sp, #32
            IP_ADDR4(&ipaddr, IP_ADDR0 ,IP_ADDR1 , IP_ADDR2 , IP_ADDR3 );
 80007ba:	9600      	str	r6, [sp, #0]
            IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 80007bc:	f843 7d18 	str.w	r7, [r3, #-24]!
            netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask), ip_2_ip4(&gw));
 80007c0:	f00a f946 	bl	800aa50 <netif_set_addr>
            sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80007c4:	1d20      	adds	r0, r4, #4
 80007c6:	f009 f9d5 	bl	8009b74 <ip4addr_ntoa>
            LCD_UsrLog ("DHCP Timeout !! \n");
 80007ca:	f8df 9038 	ldr.w	r9, [pc, #56]	; 8000804 <DHCP_thread+0xdc>
            sprintf((char *)iptxt, "%s", ip4addr_ntoa((const ip4_addr_t *)&netif->ip_addr));
 80007ce:	4601      	mov	r1, r0
 80007d0:	a803      	add	r0, sp, #12
 80007d2:	f00e fdba 	bl	800f34a <strcpy>
            LCD_UsrLog ("DHCP Timeout !! \n");
 80007d6:	480f      	ldr	r0, [pc, #60]	; (8000814 <DHCP_thread+0xec>)
 80007d8:	f8c8 9000 	str.w	r9, [r8]
 80007dc:	f00e fd4a 	bl	800f274 <puts>
            LCD_UsrLog ("Static IP address: %s\n", iptxt);  
 80007e0:	f8c8 9000 	str.w	r9, [r8]
 80007e4:	a903      	add	r1, sp, #12
 80007e6:	480c      	ldr	r0, [pc, #48]	; (8000818 <DHCP_thread+0xf0>)
 80007e8:	e7d2      	b.n	8000790 <DHCP_thread+0x68>
      dhcp_stop(netif);
 80007ea:	4620      	mov	r0, r4
 80007ec:	f008 fb22 	bl	8008e34 <dhcp_stop>
      DHCP_state = DHCP_OFF; 
 80007f0:	2300      	movs	r3, #0
 80007f2:	702b      	strb	r3, [r5, #0]
    break;
 80007f4:	e7b6      	b.n	8000764 <DHCP_thread+0x3c>
 80007f6:	bf00      	nop
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	0a00a8c0 	.word	0x0a00a8c0
 8000800:	0100a8c0 	.word	0x0100a8c0
 8000804:	ff000080 	.word	0xff000080
 8000808:	2000a6fc 	.word	0x2000a6fc
 800080c:	0801d7bb 	.word	0x0801d7bb
 8000810:	0801d7e0 	.word	0x0801d7e0
 8000814:	0801d80a 	.word	0x0801d80a
 8000818:	0801d81b 	.word	0x0801d81b

0800081c <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800081c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000820:	4a24      	ldr	r2, [pc, #144]	; (80008b4 <low_level_output+0x98>)
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;

  DmaTxDesc = EthHandle.TxDesc;
  bufferoffset = 0;
 8000822:	f04f 0800 	mov.w	r8, #0
{
 8000826:	460c      	mov	r4, r1
    /* Get bytes in current lwIP buffer */
    byteslefttocopy = q->len;
    payloadoffset = 0;
    
    /* Check if the length of data to copy is bigger than Tx buffer size*/
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000828:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 800082c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800082e:	4647      	mov	r7, r8
 8000830:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(EthHandle.TxDesc->Buffer1Addr);
 8000832:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 8000834:	b92c      	cbnz	r4, 8000842 <low_level_output+0x26>
    bufferoffset = bufferoffset + byteslefttocopy;
    framelength = framelength + byteslefttocopy;
  }
 
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&EthHandle, framelength);
 8000836:	4639      	mov	r1, r7
 8000838:	481e      	ldr	r0, [pc, #120]	; (80008b4 <low_level_output+0x98>)
 800083a:	f002 fb8d 	bl	8002f58 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800083e:	4620      	mov	r0, r4
 8000840:	e004      	b.n	800084c <low_level_output+0x30>
    if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000842:	6832      	ldr	r2, [r6, #0]
 8000844:	2a00      	cmp	r2, #0
 8000846:	da11      	bge.n	800086c <low_level_output+0x50>
      errval = ERR_USE;
 8000848:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((EthHandle.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800084c:	9b00      	ldr	r3, [sp, #0]
 800084e:	f241 0214 	movw	r2, #4116	; 0x1014
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	5899      	ldr	r1, [r3, r2]
 8000856:	0689      	lsls	r1, r1, #26
 8000858:	d505      	bpl.n	8000866 <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    EthHandle.Instance->DMASR = ETH_DMASR_TUS;
 800085a:	2120      	movs	r1, #32
 800085c:	5099      	str	r1, [r3, r2]
    
    /* Resume DMA transmission*/
    EthHandle.Instance->DMATPDR = 0;
 800085e:	f241 0204 	movw	r2, #4100	; 0x1004
 8000862:	2100      	movs	r1, #0
 8000864:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 8000866:	b003      	add	sp, #12
 8000868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    byteslefttocopy = q->len;
 800086c:	f8b4 900a 	ldrh.w	r9, [r4, #10]
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000870:	4645      	mov	r5, r8
    payloadoffset = 0;
 8000872:	f04f 0a00 	mov.w	sl, #0
    while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000876:	eb05 0809 	add.w	r8, r5, r9
 800087a:	6861      	ldr	r1, [r4, #4]
 800087c:	1958      	adds	r0, r3, r5
 800087e:	45d8      	cmp	r8, fp
 8000880:	4451      	add	r1, sl
 8000882:	d807      	bhi.n	8000894 <low_level_output+0x78>
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000884:	464a      	mov	r2, r9
 8000886:	9301      	str	r3, [sp, #4]
    framelength = framelength + byteslefttocopy;
 8000888:	444f      	add	r7, r9
    memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800088a:	f00e fc52 	bl	800f132 <memcpy>
  for(q = p; q != NULL; q = q->next)
 800088e:	6824      	ldr	r4, [r4, #0]
 8000890:	9b01      	ldr	r3, [sp, #4]
 8000892:	e7cf      	b.n	8000834 <low_level_output+0x18>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8000894:	ebab 0505 	sub.w	r5, fp, r5
 8000898:	462a      	mov	r2, r5
 800089a:	f00e fc4a 	bl	800f132 <memcpy>
      DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800089e:	68f6      	ldr	r6, [r6, #12]
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80008a0:	6833      	ldr	r3, [r6, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	dbd0      	blt.n	8000848 <low_level_output+0x2c>
      payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80008a6:	44aa      	add	sl, r5
      framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80008a8:	442f      	add	r7, r5
      buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80008aa:	68b3      	ldr	r3, [r6, #8]
      byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80008ac:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
      bufferoffset = 0;
 80008b0:	2500      	movs	r5, #0
 80008b2:	e7e0      	b.n	8000876 <low_level_output+0x5a>
 80008b4:	200069d8 	.word	0x200069d8

080008b8 <RMII_Thread>:
  (void) argument; 
  
  for(;;)
  {
    /* some unicast good packets are received */
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80008b8:	4d10      	ldr	r5, [pc, #64]	; (80008fc <RMII_Thread+0x44>)
      osThreadTerminate(NULL);
    }    
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80008ba:	4c11      	ldr	r4, [pc, #68]	; (8000900 <RMII_Thread+0x48>)
{
 80008bc:	b508      	push	{r3, lr}
    if(EthHandle.Instance->MMCRGUFCR > 0U)
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80008c4:	b11a      	cbz	r2, 80008ce <RMII_Thread+0x16>
      osThreadTerminate(NULL);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f005 faf8 	bl	8005ebc <osThreadTerminate>
 80008cc:	e7f7      	b.n	80008be <RMII_Thread+0x6>
    else if(EthHandle.Instance->MMCRFCECR > 10U) 
 80008ce:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 80008d2:	2a0a      	cmp	r2, #10
 80008d4:	d90e      	bls.n	80008f4 <RMII_Thread+0x3c>
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80008d6:	6862      	ldr	r2, [r4, #4]
 80008d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80008dc:	6062      	str	r2, [r4, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80008de:	6862      	ldr	r2, [r4, #4]
 80008e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80008e4:	6062      	str	r2, [r4, #4]
    
      EthHandle.Instance->MMCCR |= ETH_MMCCR_CR;
 80008e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80008ea:	f042 0201 	orr.w	r2, r2, #1
 80008ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80008f2:	e7e4      	b.n	80008be <RMII_Thread+0x6>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80008f4:	20c8      	movs	r0, #200	; 0xc8
 80008f6:	f005 fae6 	bl	8005ec6 <osDelay>
 80008fa:	e7e0      	b.n	80008be <RMII_Thread+0x6>
 80008fc:	200069d8 	.word	0x200069d8
 8000900:	40013800 	.word	0x40013800

08000904 <ethernetif_input>:
{
 8000904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000908:	4683      	mov	fp, r0
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800090a:	4c3b      	ldr	r4, [pc, #236]	; (80009f8 <ethernetif_input+0xf4>)
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	6820      	ldr	r0, [r4, #0]
 8000912:	f005 fb4d 	bl	8005fb0 <osSemaphoreWait>
 8000916:	2800      	cmp	r0, #0
 8000918:	d1f8      	bne.n	800090c <ethernetif_input+0x8>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 800091a:	4d38      	ldr	r5, [pc, #224]	; (80009fc <ethernetif_input+0xf8>)
        LOCK_TCPIP_CORE();
 800091c:	4838      	ldr	r0, [pc, #224]	; (8000a00 <ethernetif_input+0xfc>)
 800091e:	f00e fb82 	bl	800f026 <sys_mutex_lock>
  if(HAL_ETH_GetReceivedFrame_IT(&EthHandle) != HAL_OK)
 8000922:	4628      	mov	r0, r5
 8000924:	f002 fb8a 	bl	800303c <HAL_ETH_GetReceivedFrame_IT>
 8000928:	4607      	mov	r7, r0
 800092a:	b130      	cbz	r0, 800093a <ethernetif_input+0x36>
    return NULL;
 800092c:	2400      	movs	r4, #0
        UNLOCK_TCPIP_CORE();
 800092e:	4834      	ldr	r0, [pc, #208]	; (8000a00 <ethernetif_input+0xfc>)
 8000930:	f00e fb7e 	bl	800f030 <sys_mutex_unlock>
      }while(p!=NULL);
 8000934:	2c00      	cmp	r4, #0
 8000936:	d1f0      	bne.n	800091a <ethernetif_input+0x16>
 8000938:	e7e7      	b.n	800090a <ethernetif_input+0x6>
  len = EthHandle.RxFrameInfos.length;
 800093a:	8fa9      	ldrh	r1, [r5, #60]	; 0x3c
  if (len > 0)
 800093c:	2900      	cmp	r1, #0
 800093e:	d051      	beq.n	80009e4 <ethernetif_input+0xe0>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000940:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 8000944:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000946:	f00a faa3 	bl	800ae90 <pbuf_alloc>
  if (p != NULL)
 800094a:	4604      	mov	r4, r0
 800094c:	2800      	cmp	r0, #0
 800094e:	d049      	beq.n	80009e4 <ethernetif_input+0xe0>
    dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000950:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8000954:	4680      	mov	r8, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000956:	f240 59f4 	movw	r9, #1524	; 0x5f4
  buffer = (uint8_t *)EthHandle.RxFrameInfos.buffer;
 800095a:	9600      	str	r6, [sp, #0]
      byteslefttocopy = q->len;
 800095c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 8000960:	463e      	mov	r6, r7
      payloadoffset = 0;
 8000962:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000964:	18b7      	adds	r7, r6, r2
 8000966:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800096a:	9900      	ldr	r1, [sp, #0]
 800096c:	454f      	cmp	r7, r9
 800096e:	4418      	add	r0, r3
 8000970:	4431      	add	r1, r6
 8000972:	d826      	bhi.n	80009c2 <ethernetif_input+0xbe>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000974:	f00e fbdd 	bl	800f132 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8000978:	f8d8 8000 	ldr.w	r8, [r8]
 800097c:	f1b8 0f00 	cmp.w	r8, #0
 8000980:	d1ec      	bne.n	800095c <ethernetif_input+0x58>
  dmarxdesc = EthHandle.RxFrameInfos.FSRxDesc;
 8000982:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 8000984:	2200      	movs	r2, #0
 8000986:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8000988:	4282      	cmp	r2, r0
 800098a:	d12d      	bne.n	80009e8 <ethernetif_input+0xe4>
  EthHandle.RxFrameInfos.SegCount =0;
 800098c:	2300      	movs	r3, #0
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800098e:	f241 0214 	movw	r2, #4116	; 0x1014
  EthHandle.RxFrameInfos.SegCount =0;
 8000992:	63ab      	str	r3, [r5, #56]	; 0x38
  if ((EthHandle.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000994:	682b      	ldr	r3, [r5, #0]
 8000996:	5899      	ldr	r1, [r3, r2]
 8000998:	0609      	lsls	r1, r1, #24
 800099a:	d505      	bpl.n	80009a8 <ethernetif_input+0xa4>
    EthHandle.Instance->DMASR = ETH_DMASR_RBUS;
 800099c:	2180      	movs	r1, #128	; 0x80
 800099e:	5099      	str	r1, [r3, r2]
    EthHandle.Instance->DMARPDR = 0;
 80009a0:	f241 0208 	movw	r2, #4104	; 0x1008
 80009a4:	2100      	movs	r1, #0
 80009a6:	5099      	str	r1, [r3, r2]
        if (p != NULL)
 80009a8:	2c00      	cmp	r4, #0
 80009aa:	d0bf      	beq.n	800092c <ethernetif_input+0x28>
          if (netif->input( p, netif) != ERR_OK )
 80009ac:	f8db 3010 	ldr.w	r3, [fp, #16]
 80009b0:	4659      	mov	r1, fp
 80009b2:	4620      	mov	r0, r4
 80009b4:	4798      	blx	r3
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d0b9      	beq.n	800092e <ethernetif_input+0x2a>
            pbuf_free(p);
 80009ba:	4620      	mov	r0, r4
 80009bc:	f00a fa00 	bl	800adc0 <pbuf_free>
 80009c0:	e7b5      	b.n	800092e <ethernetif_input+0x2a>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80009c2:	eba9 0606 	sub.w	r6, r9, r6
 80009c6:	9301      	str	r3, [sp, #4]
 80009c8:	4632      	mov	r2, r6
 80009ca:	f00e fbb2 	bl	800f132 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80009ce:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80009d2:	f2a7 52f4 	subw	r2, r7, #1524	; 0x5f4
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80009d6:	f8da 3008 	ldr.w	r3, [sl, #8]
 80009da:	9300      	str	r3, [sp, #0]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80009dc:	9b01      	ldr	r3, [sp, #4]
 80009de:	4433      	add	r3, r6
        bufferoffset = 0;
 80009e0:	2600      	movs	r6, #0
 80009e2:	e7bf      	b.n	8000964 <ethernetif_input+0x60>
  struct pbuf *p = NULL, *q = NULL;
 80009e4:	2400      	movs	r4, #0
 80009e6:	e7cc      	b.n	8000982 <ethernetif_input+0x7e>
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80009e8:	6819      	ldr	r1, [r3, #0]
  for (i=0; i< EthHandle.RxFrameInfos.SegCount; i++)
 80009ea:	3201      	adds	r2, #1
    dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80009ec:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80009f0:	6019      	str	r1, [r3, #0]
    dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	e7c8      	b.n	8000988 <ethernetif_input+0x84>
 80009f6:	bf00      	nop
 80009f8:	200000d8 	.word	0x200000d8
 80009fc:	200069d8 	.word	0x200069d8
 8000a00:	2000a898 	.word	0x2000a898

08000a04 <HAL_ETH_MspInit>:
{
 8000a04:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4c2f      	ldr	r4, [pc, #188]	; (8000ac4 <HAL_ETH_MspInit+0xc0>)
{
 8000a08:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000a0a:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a0c:	482e      	ldr	r0, [pc, #184]	; (8000ac8 <HAL_ETH_MspInit+0xc4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000a10:	ad0c      	add	r5, sp, #48	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6323      	str	r3, [r4, #48]	; 0x30
 8000a18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6323      	str	r3, [r4, #48]	; 0x30
 8000a2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a2c:	f003 0304 	and.w	r3, r3, #4
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8000a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a42:	9303      	str	r3, [sp, #12]
 8000a44:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e9cd 3608 	strd	r3, r6, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 8000a50:	230b      	movs	r3, #11
 8000a52:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000a54:	2386      	movs	r3, #134	; 0x86
 8000a56:	f845 3d14 	str.w	r3, [r5, #-20]!
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	f002 fd16 	bl	800348c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a60:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a62:	4629      	mov	r1, r5
 8000a64:	4819      	ldr	r0, [pc, #100]	; (8000acc <HAL_ETH_MspInit+0xc8>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a66:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a68:	f002 fd10 	bl	800348c <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a6c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a70:	4629      	mov	r1, r5
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <HAL_ETH_MspInit+0xcc>)
  GPIO_InitStructure.Pin =  GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8000a74:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000a76:	f002 fd09 	bl	800348c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000a7a:	4632      	mov	r2, r6
 8000a7c:	2107      	movs	r1, #7
 8000a7e:	203d      	movs	r0, #61	; 0x3d
 8000a80:	f001 fbfc 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a84:	203d      	movs	r0, #61	; 0x3d
 8000a86:	f001 fc2b 	bl	80022e0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH_CLK_ENABLE();
 8000a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a90:	6323      	str	r3, [r4, #48]	; 0x30
 8000a92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a98:	9304      	str	r3, [sp, #16]
 8000a9a:	9b04      	ldr	r3, [sp, #16]
 8000a9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000a9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aa2:	6323      	str	r3, [r4, #48]	; 0x30
 8000aa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aaa:	9305      	str	r3, [sp, #20]
 8000aac:	9b05      	ldr	r3, [sp, #20]
 8000aae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ab4:	6323      	str	r3, [r4, #48]	; 0x30
 8000ab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000abc:	9306      	str	r3, [sp, #24]
 8000abe:	9b06      	ldr	r3, [sp, #24]
}
 8000ac0:	b00c      	add	sp, #48	; 0x30
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020800 	.word	0x40020800
 8000ad0:	40021800 	.word	0x40021800

08000ad4 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8000ad4:	4b01      	ldr	r3, [pc, #4]	; (8000adc <HAL_ETH_RxCpltCallback+0x8>)
 8000ad6:	6818      	ldr	r0, [r3, #0]
 8000ad8:	f005 ba90 	b.w	8005ffc <osSemaphoreRelease>
 8000adc:	200000d8 	.word	0x200000d8

08000ae0 <ethernetif_init>:
{
 8000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000ae2:	4605      	mov	r5, r0
{
 8000ae4:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000ae6:	b930      	cbnz	r0, 8000af6 <ethernetif_init+0x16>
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <ethernetif_init+0xe8>)
 8000aea:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 8000aee:	4937      	ldr	r1, [pc, #220]	; (8000bcc <ethernetif_init+0xec>)
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <ethernetif_init+0xf0>)
 8000af2:	f00e fb4b 	bl	800f18c <iprintf>
  EthHandle.Instance = ETH;  
 8000af6:	4837      	ldr	r0, [pc, #220]	; (8000bd4 <ethernetif_init+0xf4>)
  netif->name[0] = IFNAME0;
 8000af8:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Instance = ETH;  
 8000afc:	4a36      	ldr	r2, [pc, #216]	; (8000bd8 <ethernetif_init+0xf8>)
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  netif->name[0] = IFNAME0;
 8000b02:	866b      	strh	r3, [r5, #50]	; 0x32
  EthHandle.Instance = ETH;  
 8000b04:	6002      	str	r2, [r0, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000b06:	aa02      	add	r2, sp, #8
  netif->output = etharp_output;
 8000b08:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <ethernetif_init+0xfc>)
 8000b0a:	616b      	str	r3, [r5, #20]
  netif->linkoutput = low_level_output;
 8000b0c:	4b34      	ldr	r3, [pc, #208]	; (8000be0 <ethernetif_init+0x100>)
  EthHandle.Init.MACAddr = macaddress;
 8000b0e:	6142      	str	r2, [r0, #20]
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000b10:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 8000b12:	61ab      	str	r3, [r5, #24]
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b14:	2302      	movs	r3, #2
  EthHandle.Init.Speed = ETH_SPEED_100M;
 8000b16:	e9c0 2101 	strd	r2, r1, [r0, #4]
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	2300      	movs	r3, #0
  EthHandle.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000b22:	60c1      	str	r1, [r0, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000b24:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  uint8_t macaddress[6]= { MAC_ADDR0, MAC_ADDR1, MAC_ADDR2, MAC_ADDR3, MAC_ADDR4, MAC_ADDR5 };
 8000b28:	f8ad 300c 	strh.w	r3, [sp, #12]
  EthHandle.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000b2c:	6201      	str	r1, [r0, #32]
  EthHandle.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000b2e:	8203      	strh	r3, [r0, #16]
  EthHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000b30:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_ETH_Init(&EthHandle) == HAL_OK)
 8000b34:	f002 fb72 	bl	800321c <HAL_ETH_Init>
 8000b38:	b928      	cbnz	r0, 8000b46 <ethernetif_init+0x66>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000b3a:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000b46:	2304      	movs	r3, #4
 8000b48:	4a26      	ldr	r2, [pc, #152]	; (8000be4 <ethernetif_init+0x104>)
 8000b4a:	4927      	ldr	r1, [pc, #156]	; (8000be8 <ethernetif_init+0x108>)
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b4c:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000b4e:	4821      	ldr	r0, [pc, #132]	; (8000bd4 <ethernetif_init+0xf4>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b50:	ae04      	add	r6, sp, #16
  HAL_ETH_DMATxDescListInit(&EthHandle, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000b52:	f002 f98b 	bl	8002e6c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&EthHandle, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8000b56:	4a25      	ldr	r2, [pc, #148]	; (8000bec <ethernetif_init+0x10c>)
 8000b58:	2304      	movs	r3, #4
 8000b5a:	4925      	ldr	r1, [pc, #148]	; (8000bf0 <ethernetif_init+0x110>)
 8000b5c:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <ethernetif_init+0xf4>)
 8000b5e:	f002 f9c1 	bl	8002ee4 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <ethernetif_init+0x114>)
  osSemaphoreDef(SEM);
 8000b64:	a80e      	add	r0, sp, #56	; 0x38
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000b66:	2101      	movs	r1, #1
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b68:	4c23      	ldr	r4, [pc, #140]	; (8000bf8 <ethernetif_init+0x118>)
  osSemaphoreDef(SEM);
 8000b6a:	f840 7d34 	str.w	r7, [r0, #-52]!
  netif->hwaddr[1] =  MAC_ADDR1;
 8000b6e:	e9c5 370a 	strd	r3, r7, [r5, #40]	; 0x28
  netif->hwaddr[5] =  MAC_ADDR5;
 8000b72:	2306      	movs	r3, #6
 8000b74:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000b78:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 8000b7c:	f043 030a 	orr.w	r3, r3, #10
 8000b80:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8000b84:	f005 f9fe 	bl	8005f84 <osSemaphoreCreate>
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <ethernetif_init+0x11c>)
 8000b8a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b8e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000b90:	6823      	ldr	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000b92:	4629      	mov	r1, r5
 8000b94:	a804      	add	r0, sp, #16
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000b96:	6033      	str	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000b98:	f005 f978 	bl	8005e8c <osThreadCreate>
  HAL_ETH_Start(&EthHandle);
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <ethernetif_init+0xf4>)
 8000b9e:	f002 fc37 	bl	8003410 <HAL_ETH_Start>
  if(HAL_GetREVID() == 0x1000)
 8000ba2:	f001 fb53 	bl	800224c <HAL_GetREVID>
 8000ba6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000baa:	d109      	bne.n	8000bc0 <ethernetif_init+0xe0>
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000bac:	3404      	adds	r4, #4
 8000bae:	ad09      	add	r5, sp, #36	; 0x24
 8000bb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb4:	6823      	ldr	r3, [r4, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8000bb6:	4639      	mov	r1, r7
 8000bb8:	a809      	add	r0, sp, #36	; 0x24
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8000bba:	602b      	str	r3, [r5, #0]
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8000bbc:	f005 f966 	bl	8005e8c <osThreadCreate>
}
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	b00f      	add	sp, #60	; 0x3c
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	0801d832 	.word	0x0801d832
 8000bcc:	0801e7a9 	.word	0x0801e7a9
 8000bd0:	0801d8d1 	.word	0x0801d8d1
 8000bd4:	200069d8 	.word	0x200069d8
 8000bd8:	40028000 	.word	0x40028000
 8000bdc:	08009465 	.word	0x08009465
 8000be0:	0800081d 	.word	0x0800081d
 8000be4:	2007d8d0 	.word	0x2007d8d0
 8000be8:	2007c080 	.word	0x2007c080
 8000bec:	2007c100 	.word	0x2007c100
 8000bf0:	2007c000 	.word	0x2007c000
 8000bf4:	000205dc 	.word	0x000205dc
 8000bf8:	08010440 	.word	0x08010440
 8000bfc:	200000d8 	.word	0x200000d8

08000c00 <sys_now>:
  return HAL_GetTick();
 8000c00:	f001 bb0c 	b.w	800221c <HAL_GetTick>

08000c04 <http_server_netconn_init>:
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000c04:	2301      	movs	r3, #1
{
 8000c06:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	4904      	ldr	r1, [pc, #16]	; (8000c20 <http_server_netconn_init+0x1c>)
 8000c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c12:	4804      	ldr	r0, [pc, #16]	; (8000c24 <http_server_netconn_init+0x20>)
 8000c14:	f00e fa0f 	bl	800f036 <sys_thread_new>
}
 8000c18:	b003      	add	sp, #12
 8000c1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000c1e:	bf00      	nop
 8000c20:	08000cd9 	.word	0x08000cd9
 8000c24:	0801d90d 	.word	0x0801d90d

08000c28 <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 8000c2a:	2400      	movs	r4, #0
{
 8000c2c:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000c30:	4605      	mov	r5, r0

  memset(PAGE_BODY, 0,512);
 8000c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c36:	4621      	mov	r1, r4
 8000c38:	a806      	add	r0, sp, #24
  portCHAR pagehits[10] = {0};
 8000c3a:	f8ad 4014 	strh.w	r4, [sp, #20]
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000c3e:	4e1f      	ldr	r6, [pc, #124]	; (8000cbc <DynWebPage+0x94>)
  portCHAR pagehits[10] = {0};
 8000c40:	e9cd 4403 	strd	r4, r4, [sp, #12]
  memset(PAGE_BODY, 0,512);
 8000c44:	f00e fa99 	bl	800f17a <memset>
  nPageHits++;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <DynWebPage+0x98>)
  sprintf(pagehits, "%d", (int)nPageHits);
 8000c4a:	491e      	ldr	r1, [pc, #120]	; (8000cc4 <DynWebPage+0x9c>)
 8000c4c:	a803      	add	r0, sp, #12
  nPageHits++;
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	3201      	adds	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8000c54:	f00e fb4a 	bl	800f2ec <siprintf>
  strcat(PAGE_BODY, pagehits);
 8000c58:	a903      	add	r1, sp, #12
 8000c5a:	a806      	add	r0, sp, #24
 8000c5c:	f00e fb66 	bl	800f32c <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8000c60:	4919      	ldr	r1, [pc, #100]	; (8000cc8 <DynWebPage+0xa0>)
 8000c62:	a806      	add	r0, sp, #24
 8000c64:	f00e fb62 	bl	800f32c <strcat>
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 8000c68:	4918      	ldr	r1, [pc, #96]	; (8000ccc <DynWebPage+0xa4>)
 8000c6a:	a806      	add	r0, sp, #24
 8000c6c:	f00e fb5e 	bl	800f32c <strcat>
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8000c70:	a806      	add	r0, sp, #24
 8000c72:	f7ff faef 	bl	8000254 <strlen>
 8000c76:	ab06      	add	r3, sp, #24
 8000c78:	4418      	add	r0, r3
 8000c7a:	f005 fa35 	bl	80060e8 <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8000c7e:	4914      	ldr	r1, [pc, #80]	; (8000cd0 <DynWebPage+0xa8>)
 8000c80:	a806      	add	r0, sp, #24
 8000c82:	f00e fb53 	bl	800f32c <strcat>
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000c86:	4913      	ldr	r1, [pc, #76]	; (8000cd4 <DynWebPage+0xac>)
 8000c88:	a806      	add	r0, sp, #24
 8000c8a:	f00e fb4f 	bl	800f32c <strcat>
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f7ff fae0 	bl	8000254 <strlen>
 8000c94:	4631      	mov	r1, r6
 8000c96:	4602      	mov	r2, r0
 8000c98:	2301      	movs	r3, #1
 8000c9a:	9400      	str	r4, [sp, #0]
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f005 fe0b 	bl	80068b8 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8000ca2:	a806      	add	r0, sp, #24
 8000ca4:	f7ff fad6 	bl	8000254 <strlen>
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4602      	mov	r2, r0
 8000cac:	a906      	add	r1, sp, #24
 8000cae:	9400      	str	r4, [sp, #0]
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	f005 fe01 	bl	80068b8 <netconn_write_partly>
}
 8000cb6:	f50d 7d06 	add.w	sp, sp, #536	; 0x218
 8000cba:	bd70      	pop	{r4, r5, r6, pc}
 8000cbc:	08010468 	.word	0x08010468
 8000cc0:	200000dc 	.word	0x200000dc
 8000cc4:	0801d912 	.word	0x0801d912
 8000cc8:	0801d915 	.word	0x0801d915
 8000ccc:	0801d949 	.word	0x0801d949
 8000cd0:	0801d97f 	.word	0x0801d97f
 8000cd4:	0801d9b5 	.word	0x0801d9b5

08000cd8 <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2010      	movs	r0, #16
{ 
 8000cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 8000ce0:	4611      	mov	r1, r2
{ 
 8000ce2:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 8000ce4:	f005 fcb4 	bl	8006650 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 8000ce8:	4607      	mov	r7, r0
 8000cea:	2800      	cmp	r0, #0
 8000cec:	f000 8083 	beq.w	8000df6 <http_server_netconn_thread+0x11e>
    err = netconn_bind(conn, NULL, 80);
 8000cf0:	2250      	movs	r2, #80	; 0x50
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f005 fd24 	bl	8006740 <netconn_bind>
    if (err == ERR_OK)
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d17c      	bne.n	8000df6 <http_server_netconn_thread+0x11e>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000cfc:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8000e20 <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 8000d00:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8000d02:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000e24 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 8000d06:	4638      	mov	r0, r7
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8000d08:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8000e28 <http_server_netconn_thread+0x150>
      netconn_listen(conn);
 8000d0c:	f005 fd3e 	bl	800678c <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 8000d10:	a904      	add	r1, sp, #16
 8000d12:	4638      	mov	r0, r7
 8000d14:	f005 fdee 	bl	80068f4 <netconn_accept>
        if(accept_err == ERR_OK)
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d1f9      	bne.n	8000d10 <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8000d1c:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8000d1e:	a905      	add	r1, sp, #20
 8000d20:	4620      	mov	r0, r4
 8000d22:	f005 ff17 	bl	8006b54 <netconn_recv>
  if (recv_err == ERR_OK)
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d146      	bne.n	8000db8 <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f005 fdd3 	bl	80068d6 <netconn_err>
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d141      	bne.n	8000db8 <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000d34:	f10d 020e 	add.w	r2, sp, #14
 8000d38:	a906      	add	r1, sp, #24
 8000d3a:	9805      	ldr	r0, [sp, #20]
 8000d3c:	f006 fefe 	bl	8007b3c <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000d40:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000d44:	2b04      	cmp	r3, #4
 8000d46:	d937      	bls.n	8000db8 <http_server_netconn_thread+0xe0>
 8000d48:	9d06      	ldr	r5, [sp, #24]
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	4628      	mov	r0, r5
 8000d50:	f00e fb03 	bl	800f35a <strncmp>
 8000d54:	bb80      	cbnz	r0, 8000db8 <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32F7xx_files/ST.gif",27)==0)
 8000d56:	221b      	movs	r2, #27
 8000d58:	4649      	mov	r1, r9
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	f00e fafd 	bl	800f35a <strncmp>
 8000d60:	4606      	mov	r6, r0
 8000d62:	b970      	cbnz	r0, 8000d82 <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32F7xx_files/ST.gif"); 
 8000d64:	4925      	ldr	r1, [pc, #148]	; (8000dfc <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8000d66:	a807      	add	r0, sp, #28
 8000d68:	f00e f988 	bl	800f07c <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d6c:	4633      	mov	r3, r6
 8000d6e:	9600      	str	r6, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d70:	4620      	mov	r0, r4
 8000d72:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000d76:	f005 fd9f 	bl	80068b8 <netconn_write_partly>
          fs_close(&file);
 8000d7a:	a807      	add	r0, sp, #28
 8000d7c:	f00e f99e 	bl	800f0bc <fs_close>
 8000d80:	e01a      	b.n	8000db8 <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/stm32.jpg",30)==0)
 8000d82:	221e      	movs	r2, #30
 8000d84:	4651      	mov	r1, sl
 8000d86:	4628      	mov	r0, r5
 8000d88:	f00e fae7 	bl	800f35a <strncmp>
 8000d8c:	4606      	mov	r6, r0
 8000d8e:	b908      	cbnz	r0, 8000d94 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32F7xx_files/stm32.jpg"); 
 8000d90:	491b      	ldr	r1, [pc, #108]	; (8000e00 <http_server_netconn_thread+0x128>)
 8000d92:	e7e8      	b.n	8000d66 <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32F7xx_files/logo.jpg", 29) == 0)                                           
 8000d94:	221d      	movs	r2, #29
 8000d96:	491b      	ldr	r1, [pc, #108]	; (8000e04 <http_server_netconn_thread+0x12c>)
 8000d98:	4628      	mov	r0, r5
 8000d9a:	f00e fade 	bl	800f35a <strncmp>
 8000d9e:	4606      	mov	r6, r0
 8000da0:	b908      	cbnz	r0, 8000da6 <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32F7xx_files/logo.jpg"); 
 8000da2:	4919      	ldr	r1, [pc, #100]	; (8000e08 <http_server_netconn_thread+0x130>)
 8000da4:	e7df      	b.n	8000d66 <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32F7xxTASKS.html", 24) == 0)
 8000da6:	2218      	movs	r2, #24
 8000da8:	4918      	ldr	r1, [pc, #96]	; (8000e0c <http_server_netconn_thread+0x134>)
 8000daa:	4628      	mov	r0, r5
 8000dac:	f00e fad5 	bl	800f35a <strncmp>
 8000db0:	b960      	cbnz	r0, 8000dcc <http_server_netconn_thread+0xf4>
           DynWebPage(conn);
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ff38 	bl	8000c28 <DynWebPage>
  netconn_close(conn);
 8000db8:	4620      	mov	r0, r4
 8000dba:	f005 fd89 	bl	80068d0 <netconn_close>
  netbuf_delete(inbuf);
 8000dbe:	9805      	ldr	r0, [sp, #20]
 8000dc0:	f006 feaa 	bl	8007b18 <netbuf_delete>
          netconn_delete(newconn);
 8000dc4:	9804      	ldr	r0, [sp, #16]
 8000dc6:	f005 fcad 	bl	8006724 <netconn_delete>
 8000dca:	e7a1      	b.n	8000d10 <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /STM32F7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000dcc:	2213      	movs	r2, #19
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <http_server_netconn_thread+0x138>)
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	f00e fac2 	bl	800f35a <strncmp>
 8000dd6:	b128      	cbz	r0, 8000de4 <http_server_netconn_thread+0x10c>
 8000dd8:	2206      	movs	r2, #6
 8000dda:	490e      	ldr	r1, [pc, #56]	; (8000e14 <http_server_netconn_thread+0x13c>)
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f00e fabc 	bl	800f35a <strncmp>
 8000de2:	b930      	cbnz	r0, 8000df2 <http_server_netconn_thread+0x11a>
          fs_open(&file, "/STM32F7xx.html"); 
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <http_server_netconn_thread+0x140>)
          fs_open(&file, "/404.html"); 
 8000de6:	a807      	add	r0, sp, #28
 8000de8:	f00e f948 	bl	800f07c <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000dec:	2300      	movs	r3, #0
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	e7be      	b.n	8000d70 <http_server_netconn_thread+0x98>
          fs_open(&file, "/404.html"); 
 8000df2:	490a      	ldr	r1, [pc, #40]	; (8000e1c <http_server_netconn_thread+0x144>)
 8000df4:	e7f7      	b.n	8000de6 <http_server_netconn_thread+0x10e>
}
 8000df6:	b00c      	add	sp, #48	; 0x30
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	0801d9fa 	.word	0x0801d9fa
 8000e00:	0801da16 	.word	0x0801da16
 8000e04:	0801da31 	.word	0x0801da31
 8000e08:	0801da35 	.word	0x0801da35
 8000e0c:	0801da4f 	.word	0x0801da4f
 8000e10:	0801da68 	.word	0x0801da68
 8000e14:	0801da7c 	.word	0x0801da7c
 8000e18:	0801da6c 	.word	0x0801da6c
 8000e1c:	0801da83 	.word	0x0801da83
 8000e20:	0801d9f0 	.word	0x0801d9f0
 8000e24:	0801d9f6 	.word	0x0801d9f6
 8000e28:	0801da12 	.word	0x0801da12

08000e2c <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{ 
 8000e2c:	b500      	push	{lr}
 8000e2e:	b08d      	sub	sp, #52	; 0x34
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
#endif /* USE_DHCP */
  
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e30:	4c28      	ldr	r4, [pc, #160]	; (8000ed4 <StartThread+0xa8>)
  * @retval None
  */
static void BSP_Config(void)
{
  /* Initialize the LCD */
  BSP_LCD_Init();
 8000e32:	f000 ff8b 	bl	8001d4c <BSP_LCD_Init>
  
  /* Initialize the LCD Layers */
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000e36:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000e3a:	2001      	movs	r0, #1
  ip_addr_set_zero_ip4(&gw);
 8000e3c:	ae0c      	add	r6, sp, #48	; 0x30
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8000e3e:	f000 fdbd 	bl	80019bc <BSP_LCD_LayerDefaultInit>
  
  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f000 fdf0 	bl	8001a28 <BSP_LCD_SelectLayer>
  
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8000e48:	4823      	ldr	r0, [pc, #140]	; (8000ed8 <StartThread+0xac>)
 8000e4a:	f000 fe07 	bl	8001a5c <BSP_LCD_SetFont>
  
  /* Initialize LCD Log module */
  LCD_LOG_Init();
 8000e4e:	f000 f99d 	bl	800118c <LCD_LOG_Init>
  
  /* Show Header and Footer texts */
  LCD_LOG_SetHeader((uint8_t *)"Webserver Application Netconn API");
 8000e52:	4822      	ldr	r0, [pc, #136]	; (8000edc <StartThread+0xb0>)
 8000e54:	f000 f9a4 	bl	80011a0 <LCD_LOG_SetHeader>
  LCD_LOG_SetFooter((uint8_t *)"STM32F769I-DISCO board");
 8000e58:	4821      	ldr	r0, [pc, #132]	; (8000ee0 <StartThread+0xb4>)
 8000e5a:	f000 f9d7 	bl	800120c <LCD_LOG_SetFooter>
  
  LCD_UsrLog ((char *)"  State: Ethernet Initialization ...\n");
 8000e5e:	4b21      	ldr	r3, [pc, #132]	; (8000ee4 <StartThread+0xb8>)
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <StartThread+0xbc>)
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <StartThread+0xc0>)
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	f00e fa05 	bl	800f274 <puts>
  tcpip_init(NULL, NULL);
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	f006 ff3f 	bl	8007cf0 <tcpip_init>
  ip_addr_set_zero_ip4(&ipaddr);
 8000e72:	2300      	movs	r3, #0
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e74:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <StartThread+0xc4>)
 8000e76:	a905      	add	r1, sp, #20
  ip_addr_set_zero_ip4(&gw);
 8000e78:	f846 3d14 	str.w	r3, [r6, #-20]!
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	9202      	str	r2, [sp, #8]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <StartThread+0xc8>)
  ip_addr_set_zero_ip4(&netmask);
 8000e82:	e9cd 3305 	strd	r3, r3, [sp, #20]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000e86:	e9cd 3200 	strd	r3, r2, [sp]
 8000e8a:	4633      	mov	r3, r6
 8000e8c:	aa06      	add	r2, sp, #24
 8000e8e:	f009 fe0b 	bl	800aaa8 <netif_add>
  netif_set_default(&gnetif);
 8000e92:	4620      	mov	r0, r4
 8000e94:	f009 fea0 	bl	800abd8 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8000e98:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    netif_set_up(&gnetif);
 8000e9c:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 8000e9e:	075b      	lsls	r3, r3, #29
 8000ea0:	d514      	bpl.n	8000ecc <StartThread+0xa0>
    netif_set_up(&gnetif);
 8000ea2:	f009 fe9f 	bl	800abe4 <netif_set_up>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000ea6:	4d14      	ldr	r5, [pc, #80]	; (8000ef8 <StartThread+0xcc>)
  http_server_netconn_init();
 8000ea8:	f7ff feac 	bl	8000c04 <http_server_netconn_init>
  User_notification(&gnetif);
 8000eac:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <StartThread+0xa8>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000eae:	4634      	mov	r4, r6
  User_notification(&gnetif);
 8000eb0:	f7ff fc20 	bl	80006f4 <User_notification>
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eb8:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000eba:	4630      	mov	r0, r6
 8000ebc:	4905      	ldr	r1, [pc, #20]	; (8000ed4 <StartThread+0xa8>)
  osThreadDef(DHCP, DHCP_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8000ebe:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(DHCP), &gnetif);
 8000ec0:	f004 ffe4 	bl	8005e8c <osThreadCreate>
    osThreadTerminate(NULL);
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f004 fff9 	bl	8005ebc <osThreadTerminate>
 8000eca:	e7fb      	b.n	8000ec4 <StartThread+0x98>
    netif_set_down(&gnetif);
 8000ecc:	f009 fea4 	bl	800ac18 <netif_set_down>
 8000ed0:	e7e9      	b.n	8000ea6 <StartThread+0x7a>
 8000ed2:	bf00      	nop
 8000ed4:	20006a20 	.word	0x20006a20
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	0801da8d 	.word	0x0801da8d
 8000ee0:	0801daaf 	.word	0x0801daaf
 8000ee4:	2000a6fc 	.word	0x2000a6fc
 8000ee8:	ff000080 	.word	0xff000080
 8000eec:	0801dac6 	.word	0x0801dac6
 8000ef0:	08007cb5 	.word	0x08007cb5
 8000ef4:	08000ae1 	.word	0x08000ae1
 8000ef8:	08010aa4 	.word	0x08010aa4

08000efc <main>:
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b094      	sub	sp, #80	; 0x50
  /* Disable the MPU */
  HAL_MPU_Disable();
  
  /* Configure the MPU as Normal Non Cacheable for Ethernet Buffers in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x2007C000;
 8000f00:	4c56      	ldr	r4, [pc, #344]	; (800105c <main+0x160>)
  HAL_MPU_Disable();
 8000f02:	f001 f9fb 	bl	80022fc <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f06:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f08:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0a:	f8ad 301c 	strh.w	r3, [sp, #28]
  MPU_InitStruct.BaseAddress = 0x2007C000;
 8000f0e:	4b54      	ldr	r3, [pc, #336]	; (8001060 <main+0x164>)
 8000f10:	e9cd 4308 	strd	r4, r3, [sp, #32]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	930a      	str	r3, [sp, #40]	; 0x28
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f1a:	f001 fa11 	bl	8002340 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU as Device for Ethernet Descriptors in the SRAM2 */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f1e:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.BaseAddress = 0x2007C000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f22:	f8df c150 	ldr.w	ip, [pc, #336]	; 8001074 <main+0x178>
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f26:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x2007C000;
 8000f28:	9408      	str	r4, [sp, #32]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f2a:	f8ad 301c 	strh.w	r3, [sp, #28]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f2e:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8000f32:	e9cd c309 	strd	ip, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f36:	f001 fa03 	bl	8002340 <HAL_MPU_ConfigRegion>
  
  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f3a:	2004      	movs	r0, #4
 8000f3c:	f001 f9ee 	bl	800231c <HAL_MPU_Enable>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f44:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f48:	4b46      	ldr	r3, [pc, #280]	; (8001064 <main+0x168>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f54:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f5e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f64:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f68:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6c:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f70:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f74:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f78:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f7c:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8000f80:	07a5      	lsls	r5, r4, #30
 8000f82:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f84:	ea02 0c06 	and.w	ip, r2, r6
 8000f88:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f8a:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f8c:	ea4c 0700 	orr.w	r7, ip, r0
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f90:	3901      	subs	r1, #1
 8000f92:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f96:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8000f9a:	1c4f      	adds	r7, r1, #1
 8000f9c:	d1f6      	bne.n	8000f8c <main+0x90>
 8000f9e:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8000fa0:	f112 0f20 	cmn.w	r2, #32
 8000fa4:	d1ee      	bne.n	8000f84 <main+0x88>
 8000fa6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000faa:	695a      	ldr	r2, [r3, #20]
 8000fac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fb6:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000fba:	f001 f90d 	bl	80021d8 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <main+0x16c>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fc0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc2:	2402      	movs	r4, #2
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8000fc6:	2019      	movs	r0, #25
  RCC_OscInitStruct.PLL.PLLR = 7;  
 8000fc8:	2507      	movs	r5, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fce:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <main+0x170>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe6:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);  
 8000fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ff8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffc:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;  
 8001000:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001004:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 7;  
 8001008:	2309      	movs	r3, #9
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800100a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 7;  
 800100c:	e9cd 3512 	strd	r3, r5, [sp, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001010:	f002 fca4 	bl	800395c <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8001014:	b100      	cbz	r0, 8001018 <main+0x11c>
 8001016:	e7fe      	b.n	8001016 <main+0x11a>
  ret = HAL_PWREx_EnableOverDrive();
 8001018:	f002 fc68 	bl	80038ec <HAL_PWREx_EnableOverDrive>
  if(ret != HAL_OK)
 800101c:	b100      	cbz	r0, 8001020 <main+0x124>
 800101e:	e7fe      	b.n	800101e <main+0x122>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001020:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 8001022:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001026:	9004      	str	r0, [sp, #16]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001028:	4629      	mov	r1, r5
 800102a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; 
 8001030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001034:	e9cd 2305 	strd	r2, r3, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001038:	f002 fe82 	bl	8003d40 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800103c:	4606      	mov	r6, r0
 800103e:	b100      	cbz	r0, 8001042 <main+0x146>
 8001040:	e7fe      	b.n	8001040 <main+0x144>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001042:	4d0b      	ldr	r5, [pc, #44]	; (8001070 <main+0x174>)
 8001044:	ac07      	add	r4, sp, #28
 8001046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104a:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 800104c:	4631      	mov	r1, r6
 800104e:	a807      	add	r0, sp, #28
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 5);
 8001050:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001052:	f004 ff1b 	bl	8005e8c <osThreadCreate>
  osKernelStart();
 8001056:	f004 ff0d 	bl	8005e74 <osKernelStart>
 800105a:	e7fe      	b.n	800105a <main+0x15e>
 800105c:	2007c000 	.word	0x2007c000
 8001060:	0301000d 	.word	0x0301000d
 8001064:	e000ed00 	.word	0xe000ed00
 8001068:	40023800 	.word	0x40023800
 800106c:	40007000 	.word	0x40007000
 8001070:	08010ab8 	.word	0x08010ab8
 8001074:	03000007 	.word	0x03000007

08001078 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8001078:	b510      	push	{r4, lr}
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800107a:	4601      	mov	r1, r0
{
 800107c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800107e:	2200      	movs	r2, #0
 8001080:	2036      	movs	r0, #54	; 0x36
 8001082:	f001 f8fb 	bl	800227c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001086:	2036      	movs	r0, #54	; 0x36
 8001088:	f001 f92a 	bl	80022e0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_InitTick+0x74>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800108e:	a901      	add	r1, sp, #4
 8001090:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001094:	f042 0210 	orr.w	r2, r2, #16
 8001098:	641a      	str	r2, [r3, #64]	; 0x40
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 0310 	and.w	r3, r3, #16
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a4:	f002 ff00 	bl	8003ea8 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80010a8:	9b06      	ldr	r3, [sp, #24]
 80010aa:	b9c3      	cbnz	r3, 80010de <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010ac:	f002 feec 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80010b0:	4c0f      	ldr	r4, [pc, #60]	; (80010f0 <HAL_InitTick+0x78>)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_InitTick+0x7c>)
 80010b4:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80010b6:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010ba:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010bc:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_InitTick+0x80>)
 80010be:	fbb0 f0f3 	udiv	r0, r0, r3
 80010c2:	3801      	subs	r0, #1
  TimHandle.Init.Prescaler = uwPrescalerValue;
  TimHandle.Init.ClockDivision = 0;
 80010c4:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80010c6:	6060      	str	r0, [r4, #4]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80010c8:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 80010ca:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80010ce:	f003 fb33 	bl	8004738 <HAL_TIM_Base_Init>
 80010d2:	b940      	cbnz	r0, 80010e6 <HAL_InitTick+0x6e>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80010d4:	4620      	mov	r0, r4
 80010d6:	f003 f9ff 	bl	80044d8 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80010da:	b008      	add	sp, #32
 80010dc:	bd10      	pop	{r4, pc}
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80010de:	f002 fed3 	bl	8003e88 <HAL_RCC_GetPCLK1Freq>
 80010e2:	0040      	lsls	r0, r0, #1
 80010e4:	e7e4      	b.n	80010b0 <HAL_InitTick+0x38>
  return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
 80010e8:	e7f7      	b.n	80010da <HAL_InitTick+0x62>
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800
 80010f0:	20006a58 	.word	0x20006a58
 80010f4:	40001000 	.word	0x40001000
 80010f8:	000f4240 	.word	0x000f4240

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  HAL_IncTick();
 80010fc:	f001 b882 	b.w	8002204 <HAL_IncTick>

08001100 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8001100:	4801      	ldr	r0, [pc, #4]	; (8001108 <TIM6_DAC_IRQHandler+0x8>)
 8001102:	f003 ba03 	b.w	800450c <HAL_TIM_IRQHandler>
 8001106:	bf00      	nop
 8001108:	20006a58 	.word	0x20006a58

0800110c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800110c:	4770      	bx	lr

0800110e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800110e:	e7fe      	b.n	800110e <HardFault_Handler>

08001110 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler>

08001112 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler>

08001114 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler>

08001116 <DebugMon_Handler>:
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8001118:	f004 bfdc 	b.w	80060d4 <osSystickHandler>

0800111c <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 800111c:	4801      	ldr	r0, [pc, #4]	; (8001124 <ETH_IRQHandler+0x8>)
 800111e:	f001 bfd4 	b.w	80030ca <HAL_ETH_IRQHandler>
 8001122:	bf00      	nop
 8001124:	200069d8 	.word	0x200069d8

08001128 <LCD_LOG_DeInit>:
  * @param  None
  * @retval None
  */
void LCD_LOG_DeInit(void)
{
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <LCD_LOG_DeInit+0x34>)
  LCD_CacheBuffer_yptr_bottom = 0;
  
  LCD_CacheBuffer_yptr_top_bak = 0;
  LCD_CacheBuffer_yptr_bottom_bak = 0;
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 800112a:	2101      	movs	r1, #1
  LCD_LineColor = LCD_LOG_TEXT_COLOR;
 800112c:	4a0c      	ldr	r2, [pc, #48]	; (8001160 <LCD_LOG_DeInit+0x38>)
 800112e:	601a      	str	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <LCD_LOG_DeInit+0x3c>)
 8001134:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8001136:	4a0c      	ldr	r2, [pc, #48]	; (8001168 <LCD_LOG_DeInit+0x40>)
 8001138:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 800113a:	4a0c      	ldr	r2, [pc, #48]	; (800116c <LCD_LOG_DeInit+0x44>)
 800113c:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_top_bak = 0;
 800113e:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <LCD_LOG_DeInit+0x48>)
 8001140:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8001142:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <LCD_LOG_DeInit+0x4c>)
 8001144:	8013      	strh	r3, [r2, #0]
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <LCD_LOG_DeInit+0x50>)
 8001148:	7011      	strb	r1, [r2, #0]
  LCD_ScrollActive = DISABLE;
 800114a:	4a0c      	ldr	r2, [pc, #48]	; (800117c <LCD_LOG_DeInit+0x54>)
 800114c:	7013      	strb	r3, [r2, #0]
  LCD_Lock = DISABLE;
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <LCD_LOG_DeInit+0x58>)
 8001150:	7013      	strb	r3, [r2, #0]
  LCD_Scrolled = DISABLE;
 8001152:	4a0c      	ldr	r2, [pc, #48]	; (8001184 <LCD_LOG_DeInit+0x5c>)
 8001154:	7013      	strb	r3, [r2, #0]
  LCD_ScrollBackStep = 0;
 8001156:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <LCD_LOG_DeInit+0x60>)
 8001158:	8013      	strh	r3, [r2, #0]
}
 800115a:	4770      	bx	lr
 800115c:	2000a6fc 	.word	0x2000a6fc
 8001160:	ff000080 	.word	0xff000080
 8001164:	20006a9e 	.word	0x20006a9e
 8001168:	20006aa4 	.word	0x20006aa4
 800116c:	20006a9c 	.word	0x20006a9c
 8001170:	20006a9a 	.word	0x20006a9a
 8001174:	20006a98 	.word	0x20006a98
 8001178:	20006aa0 	.word	0x20006aa0
 800117c:	20006aa6 	.word	0x20006aa6
 8001180:	20006aa1 	.word	0x20006aa1
 8001184:	20006aa2 	.word	0x20006aa2
 8001188:	2000a700 	.word	0x2000a700

0800118c <LCD_LOG_Init>:
{
 800118c:	b508      	push	{r3, lr}
  LCD_LOG_DeInit();
 800118e:	f7ff ffcb 	bl	8001128 <LCD_LOG_DeInit>
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 8001192:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LCD_Clear(LCD_LOG_BACKGROUND_COLOR);  
 800119a:	f000 bc73 	b.w	8001a84 <BSP_LCD_Clear>
	...

080011a0 <LCD_LOG_SetHeader>:
  * @brief  Display the application header on the LCD screen 
  * @param  header: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetHeader (uint8_t *header)
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80011a2:	4c16      	ldr	r4, [pc, #88]	; (80011fc <LCD_LOG_SetHeader+0x5c>)
{
 80011a4:	4606      	mov	r6, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80011a6:	4d16      	ldr	r5, [pc, #88]	; (8001200 <LCD_LOG_SetHeader+0x60>)
  BSP_LCD_SetFont (&LCD_LOG_HEADER_FONT);
 80011a8:	4620      	mov	r0, r4
 80011aa:	f000 fc57 	bl	8001a5c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80011ae:	4628      	mov	r0, r5
 80011b0:	f000 fc40 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, 0, BSP_LCD_GetXSize(), LCD_LOG_HEADER_FONT.Height * 3);
 80011b4:	f000 fbf6 	bl	80019a4 <BSP_LCD_GetXSize>
 80011b8:	88e3      	ldrh	r3, [r4, #6]
 80011ba:	2100      	movs	r1, #0
 80011bc:	b282      	uxth	r2, r0
 80011be:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011c2:	4608      	mov	r0, r1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	f000 fc77 	bl	8001ab8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f000 fc31 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 80011d2:	4628      	mov	r0, r5
 80011d4:	f000 fc38 	bl	8001a48 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, LCD_LOG_HEADER_FONT.Height, header, CENTER_MODE);
 80011d8:	4632      	mov	r2, r6
 80011da:	88e1      	ldrh	r1, [r4, #6]
 80011dc:	2301      	movs	r3, #1
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fe28 	bl	8001e34 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f000 fc2e 	bl	8001a48 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <LCD_LOG_SetHeader+0x64>)
 80011ee:	f000 fc21 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <LCD_LOG_SetHeader+0x68>)
}
 80011f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 80011f8:	f000 bc30 	b.w	8001a5c <BSP_LCD_SetFont>
 80011fc:	20000020 	.word	0x20000020
 8001200:	ff0000ff 	.word	0xff0000ff
 8001204:	ff000080 	.word	0xff000080
 8001208:	20000018 	.word	0x20000018

0800120c <LCD_LOG_SetFooter>:
  * @brief  Display the application footer on the LCD screen 
  * @param  footer: pointer to the string to be displayed
  * @retval None
  */
void LCD_LOG_SetFooter(uint8_t *footer)
{
 800120c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Set the LCD Font */
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 800120e:	4d1c      	ldr	r5, [pc, #112]	; (8001280 <LCD_LOG_SetFooter+0x74>)
{
 8001210:	4606      	mov	r6, r0

  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 8001212:	4f1c      	ldr	r7, [pc, #112]	; (8001284 <LCD_LOG_SetFooter+0x78>)
  BSP_LCD_SetFont (&LCD_LOG_FOOTER_FONT);
 8001214:	4628      	mov	r0, r5
 8001216:	f000 fc21 	bl	8001a5c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800121a:	4638      	mov	r0, r7
 800121c:	f000 fc0a 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height - 4, BSP_LCD_GetXSize(), LCD_LOG_FOOTER_FONT.Height + 4);
 8001220:	f000 fbc6 	bl	80019b0 <BSP_LCD_GetYSize>
 8001224:	88e9      	ldrh	r1, [r5, #6]
 8001226:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
 800122a:	31fc      	adds	r1, #252	; 0xfc
 800122c:	4401      	add	r1, r0
 800122e:	b28c      	uxth	r4, r1
 8001230:	f000 fbb8 	bl	80019a4 <BSP_LCD_GetXSize>
 8001234:	88eb      	ldrh	r3, [r5, #6]
 8001236:	b282      	uxth	r2, r0
 8001238:	4621      	mov	r1, r4
 800123a:	3304      	adds	r3, #4
 800123c:	2000      	movs	r0, #0
 800123e:	b29b      	uxth	r3, r3
 8001240:	f000 fc3a 	bl	8001ab8 <BSP_LCD_FillRect>
  
  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_LOG_SOLID_TEXT_COLOR);
 8001244:	f04f 30ff 	mov.w	r0, #4294967295
 8001248:	f000 fbf4 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_LOG_SOLID_BACKGROUND_COLOR);
 800124c:	4638      	mov	r0, r7
 800124e:	f000 fbfb 	bl	8001a48 <BSP_LCD_SetBackColor>

  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - LCD_LOG_FOOTER_FONT.Height, footer, CENTER_MODE);
 8001252:	f000 fbad 	bl	80019b0 <BSP_LCD_GetYSize>
 8001256:	88e9      	ldrh	r1, [r5, #6]
 8001258:	2301      	movs	r3, #1
 800125a:	4632      	mov	r2, r6
 800125c:	1a41      	subs	r1, r0, r1
 800125e:	2000      	movs	r0, #0
 8001260:	b289      	uxth	r1, r1
 8001262:	f000 fde7 	bl	8001e34 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetBackColor(LCD_LOG_BACKGROUND_COLOR);
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	f000 fbed 	bl	8001a48 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_LOG_TEXT_COLOR);
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <LCD_LOG_SetFooter+0x7c>)
 8001270:	f000 fbe0 	bl	8001a34 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 8001274:	4628      	mov	r0, r5
}
 8001276:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_SetFont (&LCD_LOG_TEXT_FONT);
 800127a:	f000 bbef 	b.w	8001a5c <BSP_LCD_SetFont>
 800127e:	bf00      	nop
 8001280:	20000018 	.word	0x20000018
 8001284:	ff0000ff 	.word	0xff0000ff
 8001288:	ff000080 	.word	0xff000080

0800128c <LCD_LOG_UpdateDisplay>:
  * @brief  Update the text area display
  * @param  None
  * @retval None
  */
void LCD_LOG_UpdateDisplay (void)
{
 800128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t cnt = 0 ;
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001290:	4d1c      	ldr	r5, [pc, #112]	; (8001304 <LCD_LOG_UpdateDisplay+0x78>)
 8001292:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <LCD_LOG_UpdateDisplay+0x7c>)
 8001294:	882b      	ldrh	r3, [r5, #0]
 8001296:	8812      	ldrh	r2, [r2, #0]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	4f1c      	ldr	r7, [pc, #112]	; (800130c <LCD_LOG_UpdateDisplay+0x80>)
 800129c:	d811      	bhi.n	80012c2 <LCD_LOG_UpdateDisplay+0x36>
 800129e:	4293      	cmp	r3, r2
 80012a0:	d311      	bcc.n	80012c6 <LCD_LOG_UpdateDisplay+0x3a>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    BSP_LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 80012a2:	2484      	movs	r4, #132	; 0x84
 80012a4:	fb04 7303 	mla	r3, r4, r3, r7
 80012a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80012ac:	f000 fbc2 	bl	8001a34 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80012b0:	8829      	ldrh	r1, [r5, #0]
 80012b2:	1d08      	adds	r0, r1, #4
 80012b4:	fb04 7101 	mla	r1, r4, r1, r7
 80012b8:	b280      	uxth	r0, r0
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 80012ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    BSP_LCD_DisplayStringAtLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom),
 80012be:	f000 be03 	b.w	8001ec8 <BSP_LCD_DisplayStringAtLine>
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d201      	bcs.n	80012ca <LCD_LOG_UpdateDisplay+0x3e>
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80012c6:	3375      	adds	r3, #117	; 0x75
 80012c8:	b29b      	uxth	r3, r3
    ptr = length - YWINDOW_SIZE + 1;
 80012ca:	3b10      	subs	r3, #16
 80012cc:	2600      	movs	r6, #0
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80012ce:	f04f 0875 	mov.w	r8, #117	; 0x75
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80012d2:	f04f 0984 	mov.w	r9, #132	; 0x84
    ptr = length - YWINDOW_SIZE + 1;
 80012d6:	b29c      	uxth	r4, r3
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80012d8:	19a1      	adds	r1, r4, r6
 80012da:	fb91 f5f8 	sdiv	r5, r1, r8
 80012de:	fb08 1515 	mls	r5, r8, r5, r1
      BSP_LCD_SetTextColor(LCD_CacheBuffer[index].color);
 80012e2:	fb09 7505 	mla	r5, r9, r5, r7
 80012e6:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80012ea:	f000 fba3 	bl	8001a34 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAtLine ((cnt + YWINDOW_MIN), 
 80012ee:	1d30      	adds	r0, r6, #4
 80012f0:	3601      	adds	r6, #1
 80012f2:	4629      	mov	r1, r5
 80012f4:	b280      	uxth	r0, r0
 80012f6:	f000 fde7 	bl	8001ec8 <BSP_LCD_DisplayStringAtLine>
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80012fa:	2e11      	cmp	r6, #17
 80012fc:	d1ec      	bne.n	80012d8 <LCD_LOG_UpdateDisplay+0x4c>
}
 80012fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001302:	bf00      	nop
 8001304:	20006a9c 	.word	0x20006a9c
 8001308:	20006aa4 	.word	0x20006aa4
 800130c:	20006aa8 	.word	0x20006aa8

08001310 <__io_putchar>:
{
 8001310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001314:	4607      	mov	r7, r0
  sFONT *cFont = BSP_LCD_GetFont();
 8001316:	f000 fbab 	bl	8001a70 <BSP_LCD_GetFont>
  if(LCD_Lock == DISABLE)
 800131a:	4b3e      	ldr	r3, [pc, #248]	; (8001414 <__io_putchar+0x104>)
  sFONT *cFont = BSP_LCD_GetFont();
 800131c:	4680      	mov	r8, r0
  if(LCD_Lock == DISABLE)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	bb43      	cbnz	r3, 8001374 <__io_putchar+0x64>
    if(LCD_ScrollActive == ENABLE)
 8001322:	4a3d      	ldr	r2, [pc, #244]	; (8001418 <__io_putchar+0x108>)
 8001324:	4c3d      	ldr	r4, [pc, #244]	; (800141c <__io_putchar+0x10c>)
 8001326:	7811      	ldrb	r1, [r2, #0]
 8001328:	2901      	cmp	r1, #1
 800132a:	d10b      	bne.n	8001344 <__io_putchar+0x34>
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 800132c:	493c      	ldr	r1, [pc, #240]	; (8001420 <__io_putchar+0x110>)
      LCD_ScrollActive = DISABLE;
 800132e:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001330:	8809      	ldrh	r1, [r1, #0]
      LCD_Scrolled = DISABLE;
 8001332:	4a3c      	ldr	r2, [pc, #240]	; (8001424 <__io_putchar+0x114>)
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8001334:	8021      	strh	r1, [r4, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001336:	493c      	ldr	r1, [pc, #240]	; (8001428 <__io_putchar+0x118>)
      LCD_Scrolled = DISABLE;
 8001338:	7013      	strb	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800133a:	8808      	ldrh	r0, [r1, #0]
      LCD_ScrollBackStep = 0;
 800133c:	4a3b      	ldr	r2, [pc, #236]	; (800142c <__io_putchar+0x11c>)
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 800133e:	493c      	ldr	r1, [pc, #240]	; (8001430 <__io_putchar+0x120>)
      LCD_ScrollBackStep = 0;
 8001340:	8013      	strh	r3, [r2, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8001342:	8008      	strh	r0, [r1, #0]
    if(( LCD_CacheBuffer_xptr < (BSP_LCD_GetXSize()) /cFont->Width ) &&  ( ch != '\n'))
 8001344:	4e3b      	ldr	r6, [pc, #236]	; (8001434 <__io_putchar+0x124>)
 8001346:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8001440 <__io_putchar+0x130>
 800134a:	8835      	ldrh	r5, [r6, #0]
 800134c:	f000 fb2a 	bl	80019a4 <BSP_LCD_GetXSize>
 8001350:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8001354:	fbb0 f0f3 	udiv	r0, r0, r3
 8001358:	4285      	cmp	r5, r0
 800135a:	4635      	mov	r5, r6
 800135c:	d20e      	bcs.n	800137c <__io_putchar+0x6c>
 800135e:	2f0a      	cmp	r7, #10
 8001360:	d00c      	beq.n	800137c <__io_putchar+0x6c>
 8001362:	8832      	ldrh	r2, [r6, #0]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8001364:	8823      	ldrh	r3, [r4, #0]
 8001366:	1c51      	adds	r1, r2, #1
 8001368:	8031      	strh	r1, [r6, #0]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800136a:	2184      	movs	r1, #132	; 0x84
 800136c:	fb01 9903 	mla	r9, r1, r3, r9
 8001370:	f809 7002 	strb.w	r7, [r9, r2]
}
 8001374:	4638      	mov	r0, r7
 8001376:	b003      	add	sp, #12
 8001378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 800137c:	4e2c      	ldr	r6, [pc, #176]	; (8001430 <__io_putchar+0x120>)
 800137e:	8822      	ldrh	r2, [r4, #0]
 8001380:	8833      	ldrh	r3, [r6, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	d809      	bhi.n	800139a <__io_putchar+0x8a>
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8001386:	4a2c      	ldr	r2, [pc, #176]	; (8001438 <__io_putchar+0x128>)
 8001388:	7811      	ldrb	r1, [r2, #0]
 800138a:	2900      	cmp	r1, #0
 800138c:	d136      	bne.n	80013fc <__io_putchar+0xec>
          LCD_CacheBuffer_yptr_top++;
 800138e:	3301      	adds	r3, #1
 8001390:	b29b      	uxth	r3, r3
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8001392:	2b75      	cmp	r3, #117	; 0x75
          LCD_CacheBuffer_yptr_top++;
 8001394:	bf14      	ite	ne
 8001396:	8033      	strhne	r3, [r6, #0]
            LCD_CacheBuffer_yptr_top = 0;  
 8001398:	8031      	strheq	r1, [r6, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 800139a:	f8b5 a000 	ldrh.w	sl, [r5]
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800139e:	f04f 0b84 	mov.w	fp, #132	; 0x84
 80013a2:	2220      	movs	r2, #32
 80013a4:	9201      	str	r2, [sp, #4]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80013a6:	f000 fafd 	bl	80019a4 <BSP_LCD_GetXSize>
 80013aa:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80013ae:	9a01      	ldr	r2, [sp, #4]
 80013b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80013b4:	4550      	cmp	r0, sl
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 80013b6:	8823      	ldrh	r3, [r4, #0]
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 80013b8:	d823      	bhi.n	8001402 <__io_putchar+0xf2>
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80013ba:	2284      	movs	r2, #132	; 0x84
      LCD_CacheBuffer_xptr = 0;
 80013bc:	f04f 0800 	mov.w	r8, #0
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80013c0:	fb02 9303 	mla	r3, r2, r3, r9
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <__io_putchar+0x12c>)
      LCD_CacheBuffer_xptr = 0;
 80013c6:	f8a5 8000 	strh.w	r8, [r5]
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      LCD_LOG_UpdateDisplay (); 
 80013d0:	f7ff ff5c 	bl	800128c <LCD_LOG_UpdateDisplay>
      LCD_CacheBuffer_yptr_bottom ++; 
 80013d4:	8823      	ldrh	r3, [r4, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	b29b      	uxth	r3, r3
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 80013da:	2b75      	cmp	r3, #117	; 0x75
        LCD_CacheBuffer_yptr_top = 1;    
 80013dc:	bf05      	ittet	eq
 80013de:	2301      	moveq	r3, #1
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80013e0:	4a15      	ldreq	r2, [pc, #84]	; (8001438 <__io_putchar+0x128>)
      LCD_CacheBuffer_yptr_bottom ++; 
 80013e2:	8023      	strhne	r3, [r4, #0]
        LCD_CacheBuffer_yptr_bottom = 0;
 80013e4:	f8a4 8000 	strheq.w	r8, [r4]
        LCD_CacheBuffer_yptr_top = 1;    
 80013e8:	bf04      	itt	eq
 80013ea:	8033      	strheq	r3, [r6, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 80013ec:	7013      	strbeq	r3, [r2, #0]
      if( ch != '\n')
 80013ee:	2f0a      	cmp	r7, #10
 80013f0:	d0c0      	beq.n	8001374 <__io_putchar+0x64>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 80013f2:	882a      	ldrh	r2, [r5, #0]
 80013f4:	8823      	ldrh	r3, [r4, #0]
 80013f6:	1c51      	adds	r1, r2, #1
 80013f8:	8029      	strh	r1, [r5, #0]
 80013fa:	e7b6      	b.n	800136a <__io_putchar+0x5a>
          LCD_CacheBuffer_yptr_invert= DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	7013      	strb	r3, [r2, #0]
 8001400:	e7cb      	b.n	800139a <__io_putchar+0x8a>
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8001402:	8829      	ldrh	r1, [r5, #0]
 8001404:	fb0b 9303 	mla	r3, fp, r3, r9
      for(idx = LCD_CacheBuffer_xptr ; idx < (BSP_LCD_GetXSize()) /cFont->Width; idx++)
 8001408:	f10a 0a01 	add.w	sl, sl, #1
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 800140c:	1c48      	adds	r0, r1, #1
 800140e:	545a      	strb	r2, [r3, r1]
 8001410:	8028      	strh	r0, [r5, #0]
 8001412:	e7c7      	b.n	80013a4 <__io_putchar+0x94>
 8001414:	20006aa1 	.word	0x20006aa1
 8001418:	20006aa6 	.word	0x20006aa6
 800141c:	20006a9c 	.word	0x20006a9c
 8001420:	20006a98 	.word	0x20006a98
 8001424:	20006aa2 	.word	0x20006aa2
 8001428:	20006a9a 	.word	0x20006a9a
 800142c:	2000a700 	.word	0x2000a700
 8001430:	20006aa4 	.word	0x20006aa4
 8001434:	20006a9e 	.word	0x20006a9e
 8001438:	20006aa0 	.word	0x20006aa0
 800143c:	2000a6fc 	.word	0x2000a6fc
 8001440:	20006aa8 	.word	0x20006aa8

08001444 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4604      	mov	r4, r0
 8001448:	460d      	mov	r5, r1
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800144a:	2000      	movs	r0, #0
 800144c:	49cb      	ldr	r1, [pc, #812]	; (800177c <OTM8009A_Init+0x338>)
 800144e:	f000 fb55 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8001452:	49cb      	ldr	r1, [pc, #812]	; (8001780 <OTM8009A_Init+0x33c>)
 8001454:	2003      	movs	r0, #3
 8001456:	f000 fb51 	bl	8001afc <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800145a:	49ca      	ldr	r1, [pc, #808]	; (8001784 <OTM8009A_Init+0x340>)
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fb4d 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8001462:	49c9      	ldr	r1, [pc, #804]	; (8001788 <OTM8009A_Init+0x344>)
 8001464:	2002      	movs	r0, #2
 8001466:	f000 fb49 	bl	8001afc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800146a:	49c6      	ldr	r1, [pc, #792]	; (8001784 <OTM8009A_Init+0x340>)
 800146c:	2000      	movs	r0, #0
 800146e:	f000 fb45 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8001472:	49c6      	ldr	r1, [pc, #792]	; (800178c <OTM8009A_Init+0x348>)
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fb41 	bl	8001afc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f000 fa2e 	bl	80018dc <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8001480:	49c3      	ldr	r1, [pc, #780]	; (8001790 <OTM8009A_Init+0x34c>)
 8001482:	2000      	movs	r0, #0
 8001484:	f000 fb3a 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8001488:	49c2      	ldr	r1, [pc, #776]	; (8001794 <OTM8009A_Init+0x350>)
 800148a:	2000      	movs	r0, #0
 800148c:	f000 fb36 	bl	8001afc <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8001490:	200a      	movs	r0, #10
 8001492:	f000 fa23 	bl	80018dc <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8001496:	49c0      	ldr	r1, [pc, #768]	; (8001798 <OTM8009A_Init+0x354>)
 8001498:	2000      	movs	r0, #0
 800149a:	f000 fb2f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800149e:	49bf      	ldr	r1, [pc, #764]	; (800179c <OTM8009A_Init+0x358>)
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 fb2b 	bl	8001afc <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80014a6:	49be      	ldr	r1, [pc, #760]	; (80017a0 <OTM8009A_Init+0x35c>)
 80014a8:	2000      	movs	r0, #0
 80014aa:	f000 fb27 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80014ae:	49bd      	ldr	r1, [pc, #756]	; (80017a4 <OTM8009A_Init+0x360>)
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 fb23 	bl	8001afc <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80014b6:	49bc      	ldr	r1, [pc, #752]	; (80017a8 <OTM8009A_Init+0x364>)
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 fb1f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80014be:	49bb      	ldr	r1, [pc, #748]	; (80017ac <OTM8009A_Init+0x368>)
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 fb1b 	bl	8001afc <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80014c6:	49ad      	ldr	r1, [pc, #692]	; (800177c <OTM8009A_Init+0x338>)
 80014c8:	2000      	movs	r0, #0
 80014ca:	f000 fb17 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80014ce:	49b8      	ldr	r1, [pc, #736]	; (80017b0 <OTM8009A_Init+0x36c>)
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 fb13 	bl	8001afc <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80014d6:	49b7      	ldr	r1, [pc, #732]	; (80017b4 <OTM8009A_Init+0x370>)
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 fb0f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80014de:	49b6      	ldr	r1, [pc, #728]	; (80017b8 <OTM8009A_Init+0x374>)
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 fb0b 	bl	8001afc <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80014e6:	49b5      	ldr	r1, [pc, #724]	; (80017bc <OTM8009A_Init+0x378>)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 fb07 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80014ee:	49b4      	ldr	r1, [pc, #720]	; (80017c0 <OTM8009A_Init+0x37c>)
 80014f0:	2000      	movs	r0, #0
 80014f2:	f000 fb03 	bl	8001afc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80014f6:	49b3      	ldr	r1, [pc, #716]	; (80017c4 <OTM8009A_Init+0x380>)
 80014f8:	2000      	movs	r0, #0
 80014fa:	f000 faff 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80014fe:	49b2      	ldr	r1, [pc, #712]	; (80017c8 <OTM8009A_Init+0x384>)
 8001500:	2000      	movs	r0, #0
 8001502:	f000 fafb 	bl	8001afc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8001506:	49b1      	ldr	r1, [pc, #708]	; (80017cc <OTM8009A_Init+0x388>)
 8001508:	2000      	movs	r0, #0
 800150a:	f000 faf7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800150e:	49a5      	ldr	r1, [pc, #660]	; (80017a4 <OTM8009A_Init+0x360>)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 faf3 	bl	8001afc <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001516:	4999      	ldr	r1, [pc, #612]	; (800177c <OTM8009A_Init+0x338>)
 8001518:	2000      	movs	r0, #0
 800151a:	f000 faef 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 800151e:	49ac      	ldr	r1, [pc, #688]	; (80017d0 <OTM8009A_Init+0x38c>)
 8001520:	2002      	movs	r0, #2
 8001522:	f000 faeb 	bl	8001afc <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8001526:	49ab      	ldr	r1, [pc, #684]	; (80017d4 <OTM8009A_Init+0x390>)
 8001528:	2000      	movs	r0, #0
 800152a:	f000 fae7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800152e:	49aa      	ldr	r1, [pc, #680]	; (80017d8 <OTM8009A_Init+0x394>)
 8001530:	2000      	movs	r0, #0
 8001532:	f000 fae3 	bl	8001afc <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8001536:	49a9      	ldr	r1, [pc, #676]	; (80017dc <OTM8009A_Init+0x398>)
 8001538:	2000      	movs	r0, #0
 800153a:	f000 fadf 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800153e:	49a8      	ldr	r1, [pc, #672]	; (80017e0 <OTM8009A_Init+0x39c>)
 8001540:	2000      	movs	r0, #0
 8001542:	f000 fadb 	bl	8001afc <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8001546:	49a7      	ldr	r1, [pc, #668]	; (80017e4 <OTM8009A_Init+0x3a0>)
 8001548:	2000      	movs	r0, #0
 800154a:	f000 fad7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800154e:	49a6      	ldr	r1, [pc, #664]	; (80017e8 <OTM8009A_Init+0x3a4>)
 8001550:	2000      	movs	r0, #0
 8001552:	f000 fad3 	bl	8001afc <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8001556:	4997      	ldr	r1, [pc, #604]	; (80017b4 <OTM8009A_Init+0x370>)
 8001558:	2000      	movs	r0, #0
 800155a:	f000 facf 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800155e:	49a3      	ldr	r1, [pc, #652]	; (80017ec <OTM8009A_Init+0x3a8>)
 8001560:	2000      	movs	r0, #0
 8001562:	f000 facb 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8001566:	4995      	ldr	r1, [pc, #596]	; (80017bc <OTM8009A_Init+0x378>)
 8001568:	2000      	movs	r0, #0
 800156a:	f000 fac7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800156e:	49a0      	ldr	r1, [pc, #640]	; (80017f0 <OTM8009A_Init+0x3ac>)
 8001570:	2000      	movs	r0, #0
 8001572:	f000 fac3 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8001576:	499f      	ldr	r1, [pc, #636]	; (80017f4 <OTM8009A_Init+0x3b0>)
 8001578:	2000      	movs	r0, #0
 800157a:	f000 fabf 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800157e:	499e      	ldr	r1, [pc, #632]	; (80017f8 <OTM8009A_Init+0x3b4>)
 8001580:	2002      	movs	r0, #2
 8001582:	f000 fabb 	bl	8001afc <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001586:	497f      	ldr	r1, [pc, #508]	; (8001784 <OTM8009A_Init+0x340>)
 8001588:	2000      	movs	r0, #0
 800158a:	f000 fab7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800158e:	499b      	ldr	r1, [pc, #620]	; (80017fc <OTM8009A_Init+0x3b8>)
 8001590:	2006      	movs	r0, #6
 8001592:	f000 fab3 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001596:	499a      	ldr	r1, [pc, #616]	; (8001800 <OTM8009A_Init+0x3bc>)
 8001598:	2000      	movs	r0, #0
 800159a:	f000 faaf 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800159e:	4999      	ldr	r1, [pc, #612]	; (8001804 <OTM8009A_Init+0x3c0>)
 80015a0:	200e      	movs	r0, #14
 80015a2:	f000 faab 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80015a6:	4998      	ldr	r1, [pc, #608]	; (8001808 <OTM8009A_Init+0x3c4>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f000 faa7 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80015ae:	4997      	ldr	r1, [pc, #604]	; (800180c <OTM8009A_Init+0x3c8>)
 80015b0:	200e      	movs	r0, #14
 80015b2:	f000 faa3 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80015b6:	4996      	ldr	r1, [pc, #600]	; (8001810 <OTM8009A_Init+0x3cc>)
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fa9f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80015be:	4995      	ldr	r1, [pc, #596]	; (8001814 <OTM8009A_Init+0x3d0>)
 80015c0:	200a      	movs	r0, #10
 80015c2:	f000 fa9b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80015c6:	4994      	ldr	r1, [pc, #592]	; (8001818 <OTM8009A_Init+0x3d4>)
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 fa97 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80015ce:	4993      	ldr	r1, [pc, #588]	; (800181c <OTM8009A_Init+0x3d8>)
 80015d0:	2000      	movs	r0, #0
 80015d2:	f000 fa93 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80015d6:	496b      	ldr	r1, [pc, #428]	; (8001784 <OTM8009A_Init+0x340>)
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fa8f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80015de:	4990      	ldr	r1, [pc, #576]	; (8001820 <OTM8009A_Init+0x3dc>)
 80015e0:	200a      	movs	r0, #10
 80015e2:	f000 fa8b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80015e6:	498f      	ldr	r1, [pc, #572]	; (8001824 <OTM8009A_Init+0x3e0>)
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 fa87 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80015ee:	498e      	ldr	r1, [pc, #568]	; (8001828 <OTM8009A_Init+0x3e4>)
 80015f0:	200f      	movs	r0, #15
 80015f2:	f000 fa83 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80015f6:	4982      	ldr	r1, [pc, #520]	; (8001800 <OTM8009A_Init+0x3bc>)
 80015f8:	2000      	movs	r0, #0
 80015fa:	f000 fa7f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80015fe:	498b      	ldr	r1, [pc, #556]	; (800182c <OTM8009A_Init+0x3e8>)
 8001600:	200f      	movs	r0, #15
 8001602:	f000 fa7b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001606:	4980      	ldr	r1, [pc, #512]	; (8001808 <OTM8009A_Init+0x3c4>)
 8001608:	2000      	movs	r0, #0
 800160a:	f000 fa77 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <OTM8009A_Init+0x3ec>)
 8001610:	200a      	movs	r0, #10
 8001612:	f000 fa73 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001616:	497e      	ldr	r1, [pc, #504]	; (8001810 <OTM8009A_Init+0x3cc>)
 8001618:	2000      	movs	r0, #0
 800161a:	f000 fa6f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 800161e:	4985      	ldr	r1, [pc, #532]	; (8001834 <OTM8009A_Init+0x3f0>)
 8001620:	200f      	movs	r0, #15
 8001622:	f000 fa6b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8001626:	497c      	ldr	r1, [pc, #496]	; (8001818 <OTM8009A_Init+0x3d4>)
 8001628:	2000      	movs	r0, #0
 800162a:	f000 fa67 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800162e:	4982      	ldr	r1, [pc, #520]	; (8001838 <OTM8009A_Init+0x3f4>)
 8001630:	200f      	movs	r0, #15
 8001632:	f000 fa63 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8001636:	4981      	ldr	r1, [pc, #516]	; (800183c <OTM8009A_Init+0x3f8>)
 8001638:	2000      	movs	r0, #0
 800163a:	f000 fa5f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800163e:	4980      	ldr	r1, [pc, #512]	; (8001840 <OTM8009A_Init+0x3fc>)
 8001640:	200a      	movs	r0, #10
 8001642:	f000 fa5b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8001646:	497f      	ldr	r1, [pc, #508]	; (8001844 <OTM8009A_Init+0x400>)
 8001648:	2000      	movs	r0, #0
 800164a:	f000 fa57 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800164e:	497e      	ldr	r1, [pc, #504]	; (8001848 <OTM8009A_Init+0x404>)
 8001650:	200a      	movs	r0, #10
 8001652:	f000 fa53 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001656:	494b      	ldr	r1, [pc, #300]	; (8001784 <OTM8009A_Init+0x340>)
 8001658:	2000      	movs	r0, #0
 800165a:	f000 fa4f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800165e:	497b      	ldr	r1, [pc, #492]	; (800184c <OTM8009A_Init+0x408>)
 8001660:	200a      	movs	r0, #10
 8001662:	f000 fa4b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8001666:	496f      	ldr	r1, [pc, #444]	; (8001824 <OTM8009A_Init+0x3e0>)
 8001668:	2000      	movs	r0, #0
 800166a:	f000 fa47 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800166e:	4978      	ldr	r1, [pc, #480]	; (8001850 <OTM8009A_Init+0x40c>)
 8001670:	200f      	movs	r0, #15
 8001672:	f000 fa43 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8001676:	4962      	ldr	r1, [pc, #392]	; (8001800 <OTM8009A_Init+0x3bc>)
 8001678:	2000      	movs	r0, #0
 800167a:	f000 fa3f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800167e:	4975      	ldr	r1, [pc, #468]	; (8001854 <OTM8009A_Init+0x410>)
 8001680:	200f      	movs	r0, #15
 8001682:	f000 fa3b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8001686:	4960      	ldr	r1, [pc, #384]	; (8001808 <OTM8009A_Init+0x3c4>)
 8001688:	2000      	movs	r0, #0
 800168a:	f000 fa37 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800168e:	4972      	ldr	r1, [pc, #456]	; (8001858 <OTM8009A_Init+0x414>)
 8001690:	200a      	movs	r0, #10
 8001692:	f000 fa33 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8001696:	495e      	ldr	r1, [pc, #376]	; (8001810 <OTM8009A_Init+0x3cc>)
 8001698:	2000      	movs	r0, #0
 800169a:	f000 fa2f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800169e:	496f      	ldr	r1, [pc, #444]	; (800185c <OTM8009A_Init+0x418>)
 80016a0:	200f      	movs	r0, #15
 80016a2:	f000 fa2b 	bl	8001afc <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80016a6:	495c      	ldr	r1, [pc, #368]	; (8001818 <OTM8009A_Init+0x3d4>)
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 fa27 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80016ae:	496c      	ldr	r1, [pc, #432]	; (8001860 <OTM8009A_Init+0x41c>)
 80016b0:	200f      	movs	r0, #15
 80016b2:	f000 fa23 	bl	8001afc <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80016b6:	493f      	ldr	r1, [pc, #252]	; (80017b4 <OTM8009A_Init+0x370>)
 80016b8:	2000      	movs	r0, #0
 80016ba:	f000 fa1f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80016be:	4969      	ldr	r1, [pc, #420]	; (8001864 <OTM8009A_Init+0x420>)
 80016c0:	2000      	movs	r0, #0
 80016c2:	f000 fa1b 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80016c6:	4968      	ldr	r1, [pc, #416]	; (8001868 <OTM8009A_Init+0x424>)
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 fa17 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80016ce:	4967      	ldr	r1, [pc, #412]	; (800186c <OTM8009A_Init+0x428>)
 80016d0:	2000      	movs	r0, #0
 80016d2:	f000 fa13 	bl	8001afc <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80016d6:	4966      	ldr	r1, [pc, #408]	; (8001870 <OTM8009A_Init+0x42c>)
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 fa0f 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80016de:	4965      	ldr	r1, [pc, #404]	; (8001874 <OTM8009A_Init+0x430>)
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 fa0b 	bl	8001afc <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80016e6:	4925      	ldr	r1, [pc, #148]	; (800177c <OTM8009A_Init+0x338>)
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 fa07 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80016ee:	4962      	ldr	r1, [pc, #392]	; (8001878 <OTM8009A_Init+0x434>)
 80016f0:	2003      	movs	r0, #3
 80016f2:	f000 fa03 	bl	8001afc <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80016f6:	4921      	ldr	r1, [pc, #132]	; (800177c <OTM8009A_Init+0x338>)
 80016f8:	2000      	movs	r0, #0
 80016fa:	f000 f9ff 	bl	8001afc <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80016fe:	491f      	ldr	r1, [pc, #124]	; (800177c <OTM8009A_Init+0x338>)
 8001700:	2000      	movs	r0, #0
 8001702:	f000 f9fb 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001706:	495d      	ldr	r1, [pc, #372]	; (800187c <OTM8009A_Init+0x438>)
 8001708:	2010      	movs	r0, #16
 800170a:	f000 f9f7 	bl	8001afc <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800170e:	491b      	ldr	r1, [pc, #108]	; (800177c <OTM8009A_Init+0x338>)
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f9f3 	bl	8001afc <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001716:	495a      	ldr	r1, [pc, #360]	; (8001880 <OTM8009A_Init+0x43c>)
 8001718:	2010      	movs	r0, #16
 800171a:	f000 f9ef 	bl	8001afc <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 800171e:	2000      	movs	r0, #0
 8001720:	4958      	ldr	r1, [pc, #352]	; (8001884 <OTM8009A_Init+0x440>)
 8001722:	f000 f9eb 	bl	8001afc <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001726:	2078      	movs	r0, #120	; 0x78
 8001728:	f000 f8d8 	bl	80018dc <OTM8009A_IO_Delay>

  switch(ColorCoding)
 800172c:	2c00      	cmp	r4, #0
 800172e:	f000 80c9 	beq.w	80018c4 <OTM8009A_Init+0x480>
 8001732:	2c02      	cmp	r4, #2
 8001734:	d103      	bne.n	800173e <OTM8009A_Init+0x2fa>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001736:	4954      	ldr	r1, [pc, #336]	; (8001888 <OTM8009A_Init+0x444>)
 8001738:	2000      	movs	r0, #0
    break;
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 800173a:	f000 f9df 	bl	8001afc <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800173e:	2d01      	cmp	r5, #1
 8001740:	d10b      	bne.n	800175a <OTM8009A_Init+0x316>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001742:	4952      	ldr	r1, [pc, #328]	; (800188c <OTM8009A_Init+0x448>)
 8001744:	2000      	movs	r0, #0
 8001746:	f000 f9d9 	bl	8001afc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800174a:	4951      	ldr	r1, [pc, #324]	; (8001890 <OTM8009A_Init+0x44c>)
 800174c:	2004      	movs	r0, #4
 800174e:	f000 f9d5 	bl	8001afc <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001752:	4950      	ldr	r1, [pc, #320]	; (8001894 <OTM8009A_Init+0x450>)
 8001754:	2004      	movs	r0, #4
 8001756:	f000 f9d1 	bl	8001afc <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800175a:	494f      	ldr	r1, [pc, #316]	; (8001898 <OTM8009A_Init+0x454>)
 800175c:	2000      	movs	r0, #0
 800175e:	f000 f9cd 	bl	8001afc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001762:	494e      	ldr	r1, [pc, #312]	; (800189c <OTM8009A_Init+0x458>)
 8001764:	2000      	movs	r0, #0
 8001766:	f000 f9c9 	bl	8001afc <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800176a:	494d      	ldr	r1, [pc, #308]	; (80018a0 <OTM8009A_Init+0x45c>)
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f9c5 	bl	8001afc <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001772:	494c      	ldr	r1, [pc, #304]	; (80018a4 <OTM8009A_Init+0x460>)
 8001774:	2000      	movs	r0, #0
 8001776:	f000 f9c1 	bl	8001afc <DSI_IO_WriteCmd>
 800177a:	e095      	b.n	80018a8 <OTM8009A_Init+0x464>
 800177c:	08010acc 	.word	0x08010acc
 8001780:	08010ace 	.word	0x08010ace
 8001784:	08010ad2 	.word	0x08010ad2
 8001788:	08010ad4 	.word	0x08010ad4
 800178c:	08010ad7 	.word	0x08010ad7
 8001790:	08010ad9 	.word	0x08010ad9
 8001794:	08010adb 	.word	0x08010adb
 8001798:	08010add 	.word	0x08010add
 800179c:	08010adf 	.word	0x08010adf
 80017a0:	08010ae1 	.word	0x08010ae1
 80017a4:	08010ae3 	.word	0x08010ae3
 80017a8:	08010ae5 	.word	0x08010ae5
 80017ac:	08010ae7 	.word	0x08010ae7
 80017b0:	08010ae9 	.word	0x08010ae9
 80017b4:	08010aeb 	.word	0x08010aeb
 80017b8:	08010aed 	.word	0x08010aed
 80017bc:	08010aef 	.word	0x08010aef
 80017c0:	08010af1 	.word	0x08010af1
 80017c4:	08010af3 	.word	0x08010af3
 80017c8:	08010af5 	.word	0x08010af5
 80017cc:	08010af7 	.word	0x08010af7
 80017d0:	08010af9 	.word	0x08010af9
 80017d4:	08010afc 	.word	0x08010afc
 80017d8:	08010afe 	.word	0x08010afe
 80017dc:	08010b00 	.word	0x08010b00
 80017e0:	08010b02 	.word	0x08010b02
 80017e4:	08010b04 	.word	0x08010b04
 80017e8:	08010b06 	.word	0x08010b06
 80017ec:	08010b08 	.word	0x08010b08
 80017f0:	08010b0a 	.word	0x08010b0a
 80017f4:	08010b0c 	.word	0x08010b0c
 80017f8:	08010b0e 	.word	0x08010b0e
 80017fc:	08010b11 	.word	0x08010b11
 8001800:	08010b18 	.word	0x08010b18
 8001804:	08010b1a 	.word	0x08010b1a
 8001808:	08010b29 	.word	0x08010b29
 800180c:	08010b2b 	.word	0x08010b2b
 8001810:	08010b3a 	.word	0x08010b3a
 8001814:	08010b3c 	.word	0x08010b3c
 8001818:	08010b47 	.word	0x08010b47
 800181c:	08010b49 	.word	0x08010b49
 8001820:	08010b4b 	.word	0x08010b4b
 8001824:	08010b56 	.word	0x08010b56
 8001828:	08010b58 	.word	0x08010b58
 800182c:	08010b68 	.word	0x08010b68
 8001830:	08010b78 	.word	0x08010b78
 8001834:	08010b83 	.word	0x08010b83
 8001838:	08010b93 	.word	0x08010b93
 800183c:	08010ba3 	.word	0x08010ba3
 8001840:	08010ba5 	.word	0x08010ba5
 8001844:	08010bb0 	.word	0x08010bb0
 8001848:	08010bb2 	.word	0x08010bb2
 800184c:	08010bbd 	.word	0x08010bbd
 8001850:	08010bc8 	.word	0x08010bc8
 8001854:	08010bd8 	.word	0x08010bd8
 8001858:	08010be8 	.word	0x08010be8
 800185c:	08010bf3 	.word	0x08010bf3
 8001860:	08010c03 	.word	0x08010c03
 8001864:	08010c13 	.word	0x08010c13
 8001868:	08010c15 	.word	0x08010c15
 800186c:	08010c17 	.word	0x08010c17
 8001870:	08010c19 	.word	0x08010c19
 8001874:	08010c1b 	.word	0x08010c1b
 8001878:	08010c1d 	.word	0x08010c1d
 800187c:	08010c21 	.word	0x08010c21
 8001880:	08010c32 	.word	0x08010c32
 8001884:	08010c43 	.word	0x08010c43
 8001888:	08010c45 	.word	0x08010c45
 800188c:	08010c49 	.word	0x08010c49
 8001890:	08010c4b 	.word	0x08010c4b
 8001894:	08010c50 	.word	0x08010c50
 8001898:	08010c55 	.word	0x08010c55
 800189c:	08010c57 	.word	0x08010c57
 80018a0:	08010c59 	.word	0x08010c59
 80018a4:	08010c5b 	.word	0x08010c5b

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 80018a8:	4908      	ldr	r1, [pc, #32]	; (80018cc <OTM8009A_Init+0x488>)
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f926 	bl	8001afc <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <OTM8009A_Init+0x48c>)
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f922 	bl	8001afc <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 80018b8:	4906      	ldr	r1, [pc, #24]	; (80018d4 <OTM8009A_Init+0x490>)
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f91e 	bl	8001afc <DSI_IO_WriteCmd>

  return 0;
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <OTM8009A_Init+0x494>)
 80018c6:	4620      	mov	r0, r4
 80018c8:	e737      	b.n	800173a <OTM8009A_Init+0x2f6>
 80018ca:	bf00      	nop
 80018cc:	08010c5d 	.word	0x08010c5d
 80018d0:	08010acc 	.word	0x08010acc
 80018d4:	08010c5f 	.word	0x08010c5f
 80018d8:	08010c47 	.word	0x08010c47

080018dc <OTM8009A_IO_Delay>:
 80018dc:	f000 bca4 	b.w	8002228 <HAL_Delay>

080018e0 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80018e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80018e4:	4c15      	ldr	r4, [pc, #84]	; (800193c <LL_FillBuffer+0x5c>)
{
 80018e6:	4617      	mov	r7, r2
 80018e8:	4698      	mov	r8, r3
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80018ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80018ee:	2300      	movs	r3, #0
{
 80018f0:	4681      	mov	r9, r0
  hdma2d_discovery.Init.OutputOffset = OffLine;

  hdma2d_discovery.Instance = DMA2D;

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80018f2:	4620      	mov	r0, r4
{
 80018f4:	460e      	mov	r6, r1
 80018f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80018f8:	e9c4 2301 	strd	r2, r3, [r4, #4]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80018fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018fe:	60e3      	str	r3, [r4, #12]
  hdma2d_discovery.Instance = DMA2D;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <LL_FillBuffer+0x60>)
 8001902:	6023      	str	r3, [r4, #0]
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8001904:	f000 fe45 	bl	8002592 <HAL_DMA2D_Init>
 8001908:	b9a0      	cbnz	r0, 8001934 <LL_FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 800190a:	4649      	mov	r1, r9
 800190c:	4620      	mov	r0, r4
 800190e:	f000 ff11 	bl	8002734 <HAL_DMA2D_ConfigLayer>
 8001912:	b978      	cbnz	r0, 8001934 <LL_FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001914:	f8cd 8000 	str.w	r8, [sp]
 8001918:	463b      	mov	r3, r7
 800191a:	4632      	mov	r2, r6
 800191c:	4629      	mov	r1, r5
 800191e:	4620      	mov	r0, r4
 8001920:	f000 fe6d 	bl	80025fe <HAL_DMA2D_Start>
 8001924:	b930      	cbnz	r0, 8001934 <LL_FillBuffer+0x54>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001926:	210a      	movs	r1, #10
 8001928:	4620      	mov	r0, r4
      }
    }
  }
}
 800192a:	b003      	add	sp, #12
 800192c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8001930:	f000 be7f 	b.w	8002632 <HAL_DMA2D_PollForTransfer>
}
 8001934:	b003      	add	sp, #12
 8001936:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800193a:	bf00      	nop
 800193c:	2000a704 	.word	0x2000a704
 8001940:	4002b000 	.word	0x4002b000

08001944 <BSP_LCD_Reset>:
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <BSP_LCD_Reset+0x58>)
 8001946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800194c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800194e:	631a      	str	r2, [r3, #48]	; 0x30
{
 8001950:	b086      	sub	sp, #24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001954:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001958:	4c11      	ldr	r4, [pc, #68]	; (80019a0 <BSP_LCD_Reset+0x5c>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800195a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800195c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001960:	a901      	add	r1, sp, #4
 8001962:	4620      	mov	r0, r4
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001964:	9603      	str	r6, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	9b00      	ldr	r3, [sp, #0]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800196a:	2303      	movs	r3, #3
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800196c:	e9cd 5601 	strd	r5, r6, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001970:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001972:	f001 fd8b 	bl	800348c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001976:	4629      	mov	r1, r5
 8001978:	2200      	movs	r2, #0
 800197a:	4620      	mov	r0, r4
 800197c:	f001 fe6e 	bl	800365c <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 8001980:	2014      	movs	r0, #20
 8001982:	f000 fc51 	bl	8002228 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8001986:	4632      	mov	r2, r6
 8001988:	4629      	mov	r1, r5
 800198a:	4620      	mov	r0, r4
 800198c:	f001 fe66 	bl	800365c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001990:	200a      	movs	r0, #10
 8001992:	f000 fc49 	bl	8002228 <HAL_Delay>
}
 8001996:	b006      	add	sp, #24
 8001998:	bd70      	pop	{r4, r5, r6, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40022400 	.word	0x40022400

080019a4 <BSP_LCD_GetXSize>:
}
 80019a4:	4b01      	ldr	r3, [pc, #4]	; (80019ac <BSP_LCD_GetXSize+0x8>)
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000

080019b0 <BSP_LCD_GetYSize>:
}
 80019b0:	4b01      	ldr	r3, [pc, #4]	; (80019b8 <BSP_LCD_GetYSize+0x8>)
 80019b2:	6858      	ldr	r0, [r3, #4]
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000

080019bc <BSP_LCD_LayerDefaultInit>:
{
 80019bc:	b530      	push	{r4, r5, lr}
  return (lcd_x_size);
 80019be:	4d17      	ldr	r5, [pc, #92]	; (8001a1c <BSP_LCD_LayerDefaultInit+0x60>)
{
 80019c0:	b08f      	sub	sp, #60	; 0x3c
  Layercfg.WindowX0 = 0;
 80019c2:	2300      	movs	r3, #0
{
 80019c4:	4604      	mov	r4, r0
  return (lcd_y_size);
 80019c6:	686a      	ldr	r2, [r5, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 80019c8:	3508      	adds	r5, #8
  return (lcd_x_size);
 80019ca:	f855 0c08 	ldr.w	r0, [r5, #-8]
  Layercfg.FBStartAdress = FB_Address;
 80019ce:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.Alpha = 255;
 80019d0:	21ff      	movs	r1, #255	; 0xff
  Layercfg.WindowX0 = 0;
 80019d2:	9301      	str	r3, [sp, #4]
  Layercfg.Backcolor.Blue = 0;
 80019d4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 80019d8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  Layercfg.WindowY0 = 0;
 80019dc:	e9cd 0302 	strd	r0, r3, [sp, #8]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80019e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  Layercfg.Alpha0 = 0;
 80019e4:	e9cd 1306 	strd	r1, r3, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019e8:	2307      	movs	r3, #7
 80019ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80019ee:	e9cd 020b 	strd	r0, r2, [sp, #44]	; 0x2c
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80019f2:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 80019f6:	4622      	mov	r2, r4
 80019f8:	a901      	add	r1, sp, #4
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <BSP_LCD_LayerDefaultInit+0x64>)
 80019fc:	f001 ff26 	bl	800384c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001a00:	230c      	movs	r3, #12
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <BSP_LCD_LayerDefaultInit+0x68>)
 8001a04:	fb03 0004 	mla	r0, r3, r4, r0
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	6083      	str	r3, [r0, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001a0e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
  DrawProp[LayerIndex].pFont     = &Font24;
 8001a12:	60c5      	str	r5, [r0, #12]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001a14:	6043      	str	r3, [r0, #4]
}
 8001a16:	b00f      	add	sp, #60	; 0x3c
 8001a18:	bd30      	pop	{r4, r5, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	2000a75c 	.word	0x2000a75c
 8001a24:	200000e0 	.word	0x200000e0

08001a28 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001a28:	4b01      	ldr	r3, [pc, #4]	; (8001a30 <BSP_LCD_SelectLayer+0x8>)
 8001a2a:	6018      	str	r0, [r3, #0]
}
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	200000e0 	.word	0x200000e0

08001a34 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001a34:	4a03      	ldr	r2, [pc, #12]	; (8001a44 <BSP_LCD_SetTextColor+0x10>)
 8001a36:	210c      	movs	r1, #12
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	fb01 2303 	mla	r3, r1, r3, r2
 8001a3e:	6058      	str	r0, [r3, #4]
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200000e0 	.word	0x200000e0

08001a48 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <BSP_LCD_SetBackColor+0x10>)
 8001a4a:	210c      	movs	r1, #12
 8001a4c:	6813      	ldr	r3, [r2, #0]
 8001a4e:	fb01 2303 	mla	r3, r1, r3, r2
 8001a52:	6098      	str	r0, [r3, #8]
}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	200000e0 	.word	0x200000e0

08001a5c <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = fonts;
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <BSP_LCD_SetFont+0x10>)
 8001a5e:	210c      	movs	r1, #12
 8001a60:	6813      	ldr	r3, [r2, #0]
 8001a62:	fb01 2303 	mla	r3, r1, r3, r2
 8001a66:	60d8      	str	r0, [r3, #12]
}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	200000e0 	.word	0x200000e0

08001a70 <BSP_LCD_GetFont>:
  return DrawProp[ActiveLayer].pFont;
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <BSP_LCD_GetFont+0x10>)
 8001a72:	210c      	movs	r1, #12
 8001a74:	6813      	ldr	r3, [r2, #0]
 8001a76:	fb01 2303 	mla	r3, r1, r3, r2
}
 8001a7a:	68d8      	ldr	r0, [r3, #12]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200000e0 	.word	0x200000e0

08001a84 <BSP_LCD_Clear>:
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <BSP_LCD_Clear+0x28>)
  return (lcd_y_size);
 8001a86:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <BSP_LCD_Clear+0x2c>)
{
 8001a88:	b513      	push	{r0, r1, r4, lr}
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001a8a:	681c      	ldr	r4, [r3, #0]
 8001a8c:	2134      	movs	r1, #52	; 0x34
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <BSP_LCD_Clear+0x30>)
 8001a90:	9001      	str	r0, [sp, #4]
 8001a92:	4620      	mov	r0, r4
 8001a94:	fb01 3104 	mla	r1, r1, r4, r3
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
 8001a9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8001aa2:	f7ff ff1d 	bl	80018e0 <LL_FillBuffer>
}
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd10      	pop	{r4, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000e0 	.word	0x200000e0
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	2000a75c 	.word	0x2000a75c

08001ab8 <BSP_LCD_FillRect>:
{
 8001ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  return (lcd_x_size);
 8001aba:	4c0d      	ldr	r4, [pc, #52]	; (8001af0 <BSP_LCD_FillRect+0x38>)
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001abc:	2734      	movs	r7, #52	; 0x34
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001abe:	f8df c038 	ldr.w	ip, [pc, #56]	; 8001af8 <BSP_LCD_FillRect+0x40>
 8001ac2:	260c      	movs	r6, #12
  return (lcd_x_size);
 8001ac4:	6824      	ldr	r4, [r4, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ac6:	f8dc 5000 	ldr.w	r5, [ip]
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001aca:	fb04 0101 	mla	r1, r4, r1, r0
 8001ace:	4809      	ldr	r0, [pc, #36]	; (8001af4 <BSP_LCD_FillRect+0x3c>)
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001ad0:	fb06 c605 	mla	r6, r6, r5, ip
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001ad4:	1aa4      	subs	r4, r4, r2
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ad6:	fb07 0705 	mla	r7, r7, r5, r0
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001ada:	6870      	ldr	r0, [r6, #4]
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001adc:	6dff      	ldr	r7, [r7, #92]	; 0x5c
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001ade:	9001      	str	r0, [sp, #4]
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8001ae6:	9400      	str	r4, [sp, #0]
 8001ae8:	f7ff fefa 	bl	80018e0 <LL_FillBuffer>
}
 8001aec:	b003      	add	sp, #12
 8001aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af0:	20000000 	.word	0x20000000
 8001af4:	2000a75c 	.word	0x2000a75c
 8001af8:	200000e0 	.word	0x200000e0

08001afc <DSI_IO_WriteCmd>:
  if(NbrParams <= 1)
 8001afc:	2801      	cmp	r0, #1
{
 8001afe:	4603      	mov	r3, r0
 8001b00:	b507      	push	{r0, r1, r2, lr}
  if(NbrParams <= 1)
 8001b02:	d80a      	bhi.n	8001b1a <DSI_IO_WriteCmd+0x1e>
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 8001b04:	784a      	ldrb	r2, [r1, #1]
 8001b06:	780b      	ldrb	r3, [r1, #0]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	2215      	movs	r2, #21
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <DSI_IO_WriteCmd+0x30>)
 8001b10:	f001 f8ab 	bl	8002c6a <HAL_DSI_ShortWrite>
}
 8001b14:	b003      	add	sp, #12
 8001b16:	f85d fb04 	ldr.w	pc, [sp], #4
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001b1a:	9101      	str	r1, [sp, #4]
 8001b1c:	5c0a      	ldrb	r2, [r1, r0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <DSI_IO_WriteCmd+0x30>)
 8001b22:	9200      	str	r2, [sp, #0]
 8001b24:	2239      	movs	r2, #57	; 0x39
 8001b26:	f001 f8b1 	bl	8002c8c <HAL_DSI_LongWrite>
}
 8001b2a:	e7f3      	b.n	8001b14 <DSI_IO_WriteCmd+0x18>
 8001b2c:	2000a804 	.word	0x2000a804

08001b30 <BSP_LCD_MspInit>:
{
 8001b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b32:	4b27      	ldr	r3, [pc, #156]	; (8001bd0 <BSP_LCD_MspInit+0xa0>)
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001b34:	2103      	movs	r1, #3
 8001b36:	2058      	movs	r0, #88	; 0x58
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b42:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001b46:	9201      	str	r2, [sp, #4]
 8001b48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_LTDC_FORCE_RESET();
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8001b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b54:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
 8001b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b64:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 8001b68:	9202      	str	r2, [sp, #8]
 8001b6a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2D_FORCE_RESET();
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001b72:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001b7a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_DSI_CLK_ENABLE();
 8001b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b7e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
 8001b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b86:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001b8a:	9203      	str	r2, [sp, #12]
 8001b8c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_DSI_FORCE_RESET();
 8001b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b90:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 8001b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b98:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f000 fb6c 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ba4:	2058      	movs	r0, #88	; 0x58
 8001ba6:	f000 fb9b 	bl	80022e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2103      	movs	r1, #3
 8001bae:	205a      	movs	r0, #90	; 0x5a
 8001bb0:	f000 fb64 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001bb4:	205a      	movs	r0, #90	; 0x5a
 8001bb6:	f000 fb93 	bl	80022e0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2103      	movs	r1, #3
 8001bbe:	2062      	movs	r0, #98	; 0x62
 8001bc0:	f000 fb5c 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001bc4:	2062      	movs	r0, #98	; 0x62
}
 8001bc6:	b005      	add	sp, #20
 8001bc8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001bcc:	f000 bb88 	b.w	80022e0 <HAL_NVIC_EnableIRQ>
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <BSP_LCD_InitEx>:
{
 8001bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  hdsi_discovery.Instance = DSI;
 8001bd8:	4c55      	ldr	r4, [pc, #340]	; (8001d30 <BSP_LCD_InitEx+0x15c>)
{
 8001bda:	b085      	sub	sp, #20
 8001bdc:	4680      	mov	r8, r0
  BSP_LCD_Reset();
 8001bde:	f7ff feb1 	bl	8001944 <BSP_LCD_Reset>
  BSP_LCD_MspInit();
 8001be2:	f7ff ffa5 	bl	8001b30 <BSP_LCD_MspInit>
  hdsi_discovery.Instance = DSI;
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <BSP_LCD_InitEx+0x160>)
  HAL_DSI_DeInit(&(hdsi_discovery));
 8001be8:	4620      	mov	r0, r4
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001bea:	2564      	movs	r5, #100	; 0x64
  hdsi_discovery.Instance = DSI;
 8001bec:	6023      	str	r3, [r4, #0]
  HAL_DSI_DeInit(&(hdsi_discovery));
 8001bee:	f000 fec8 	bl	8002982 <HAL_DSI_DeInit>
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001bf2:	2305      	movs	r3, #5
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001bf4:	2601      	movs	r6, #1
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	4f4f      	ldr	r7, [pc, #316]	; (8001d38 <BSP_LCD_InitEx+0x164>)
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001bfa:	e9cd 5301 	strd	r5, r3, [sp, #4]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9303      	str	r3, [sp, #12]
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001c02:	2304      	movs	r3, #4
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001c04:	eb0d 0103 	add.w	r1, sp, r3
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001c08:	e9c4 3602 	strd	r3, r6, [r4, #8]
  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001c0c:	f000 fe08 	bl	8002820 <HAL_DSI_Init>
 8001c10:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c14:	f44f 7248 	mov.w	r2, #800	; 0x320
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001c18:	f1b8 0f00 	cmp.w	r8, #0
 8001c1c:	f040 8085 	bne.w	8001d2a <BSP_LCD_InitEx+0x156>
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001c20:	e9c7 3200 	strd	r3, r2, [r7]
  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8001c24:	4c45      	ldr	r4, [pc, #276]	; (8001d3c <BSP_LCD_InitEx+0x168>)
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001c26:	2500      	movs	r5, #0
 8001c28:	2105      	movs	r1, #5
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001c2a:	2604      	movs	r6, #4
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001c2c:	f04f 0901 	mov.w	r9, #1
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001c30:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001c34:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001c38:	483d      	ldr	r0, [pc, #244]	; (8001d30 <BSP_LCD_InitEx+0x15c>)
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8001c3a:	6425      	str	r5, [r4, #64]	; 0x40
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8001c3c:	66a5      	str	r5, [r4, #104]	; 0x68
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001c3e:	e9c4 5107 	strd	r5, r1, [r4, #28]
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8001c42:	2102      	movs	r1, #2
 8001c44:	62a1      	str	r1, [r4, #40]	; 0x28
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8001c46:	f640 71ff 	movw	r1, #4095	; 0xfff
  VACT = lcd_y_size;
 8001c4a:	e9d7 3200 	ldrd	r3, r2, [r7]
  hdsivideo_handle.NumberOfChunks = 0;
 8001c4e:	e9c4 510c 	strd	r5, r1, [r4, #48]	; 0x30
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001c52:	214d      	movs	r1, #77	; 0x4d
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8001c54:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8001c56:	e9c4 6111 	strd	r6, r1, [r4, #68]	; 0x44
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001c5a:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001c5e:	f24f 4324 	movw	r3, #62500	; 0xf424
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001c62:	4e37      	ldr	r6, [pc, #220]	; (8001d40 <BSP_LCD_InitEx+0x16c>)
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8001c64:	434b      	muls	r3, r1
 8001c66:	f646 3125 	movw	r1, #27429	; 0x6b25
 8001c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c6e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001c70:	230f      	movs	r3, #15
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001c72:	f104 011c 	add.w	r1, r4, #28
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8001c76:	e9c4 9314 	strd	r9, r3, [r4, #80]	; 0x50
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001c7a:	2310      	movs	r3, #16
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8001c7c:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001c84:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8001c90:	e9c4 c31b 	strd	ip, r3, [r4, #108]	; 0x6c
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8001c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c98:	e9c4 e31d 	strd	lr, r3, [r4, #116]	; 0x74
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8001ca0:	e9c4 550e 	strd	r5, r5, [r4, #56]	; 0x38
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8001ca4:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001ca8:	f000 feb6 	bl	8002a18 <HAL_DSI_ConfigVideoMode>
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001cac:	2323      	movs	r3, #35	; 0x23
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001cae:	f104 0088 	add.w	r0, r4, #136	; 0x88
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001cb2:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001cb6:	61f3      	str	r3, [r6, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001cb8:	683b      	ldr	r3, [r7, #0]
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8001cba:	f8c6 9014 	str.w	r9, [r6, #20]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001cbe:	f103 0223 	add.w	r2, r3, #35	; 0x23
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8001cc2:	6633      	str	r3, [r6, #96]	; 0x60
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001cc4:	6272      	str	r2, [r6, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001cc6:	f103 0245 	add.w	r2, r3, #69	; 0x45
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001cca:	687b      	ldr	r3, [r7, #4]
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001ccc:	62f2      	str	r2, [r6, #44]	; 0x2c
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8001cce:	6673      	str	r3, [r6, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001cd6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001cda:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001ce4:	f002 f8fe 	bl	8003ee4 <HAL_RCCEx_PeriphCLKConfig>
  hltdc_discovery.Instance = LTDC;
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <BSP_LCD_InitEx+0x170>)
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001cea:	f104 011c 	add.w	r1, r4, #28
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8001cee:	86b5      	strh	r5, [r6, #52]	; 0x34
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001cf0:	4630      	mov	r0, r6
  hltdc_discovery.Init.Backcolor.Green = 0;
 8001cf2:	f886 5036 	strb.w	r5, [r6, #54]	; 0x36
  hltdc_discovery.Instance = LTDC;
 8001cf6:	6033      	str	r3, [r6, #0]
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001cf8:	6135      	str	r5, [r6, #16]
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8001cfa:	f001 fdd0 	bl	800389e <HAL_LTDCEx_StructInitFromVideoConfig>
  HAL_LTDC_Init(&hltdc_discovery);
 8001cfe:	4630      	mov	r0, r6
 8001d00:	f001 fd38 	bl	8003774 <HAL_LTDC_Init>
  HAL_DSI_Start(&hdsi_discovery);
 8001d04:	480a      	ldr	r0, [pc, #40]	; (8001d30 <BSP_LCD_InitEx+0x15c>)
 8001d06:	f000 ff8d 	bl	8002c24 <HAL_DSI_Start>
  BSP_SDRAM_Init();
 8001d0a:	f000 f9fd 	bl	8002108 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = fonts;
 8001d0e:	6823      	ldr	r3, [r4, #0]
 8001d10:	220c      	movs	r2, #12
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001d12:	4641      	mov	r1, r8
 8001d14:	4628      	mov	r0, r5
  DrawProp[ActiveLayer].pFont = fonts;
 8001d16:	fb02 4403 	mla	r4, r2, r3, r4
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <BSP_LCD_InitEx+0x174>)
 8001d1c:	60e3      	str	r3, [r4, #12]
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8001d1e:	f7ff fb91 	bl	8001444 <OTM8009A_Init>
}
 8001d22:	4628      	mov	r0, r5
 8001d24:	b005      	add	sp, #20
 8001d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001d2a:	e9c7 2300 	strd	r2, r3, [r7]
 8001d2e:	e779      	b.n	8001c24 <BSP_LCD_InitEx+0x50>
 8001d30:	2000a804 	.word	0x2000a804
 8001d34:	40016c00 	.word	0x40016c00
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	200000e0 	.word	0x200000e0
 8001d40:	2000a75c 	.word	0x2000a75c
 8001d44:	40016800 	.word	0x40016800
 8001d48:	20000008 	.word	0x20000008

08001d4c <BSP_LCD_Init>:
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f7ff bf41 	b.w	8001bd4 <BSP_LCD_InitEx>
	...

08001d54 <BSP_LCD_DrawPixel>:
  return (lcd_x_size);
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <BSP_LCD_DrawPixel+0x20>)
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	fb03 0101 	mla	r1, r3, r1, r0
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <BSP_LCD_DrawPixel+0x24>)
 8001d5e:	4807      	ldr	r0, [pc, #28]	; (8001d7c <BSP_LCD_DrawPixel+0x28>)
 8001d60:	681b      	ldr	r3, [r3, #0]
{
 8001d62:	b510      	push	{r4, lr}
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001d64:	2434      	movs	r4, #52	; 0x34
 8001d66:	fb04 0303 	mla	r3, r4, r3, r0
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001d70:	bd10      	pop	{r4, pc}
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000
 8001d78:	200000e0 	.word	0x200000e0
 8001d7c:	2000a75c 	.word	0x2000a75c

08001d80 <BSP_LCD_DisplayChar>:
{
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d84:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d86:	f1a2 0520 	sub.w	r5, r2, #32
  for(i = 0; i < height; i++)
 8001d8a:	f04f 0800 	mov.w	r8, #0
{
 8001d8e:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001d92:	4827      	ldr	r0, [pc, #156]	; (8001e30 <BSP_LCD_DisplayChar+0xb0>)
 8001d94:	210c      	movs	r1, #12
 8001d96:	f8d0 b000 	ldr.w	fp, [r0]
 8001d9a:	fb01 010b 	mla	r1, r1, fp, r0
 8001d9e:	68c9      	ldr	r1, [r1, #12]
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001da0:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 8001da4:	88cb      	ldrh	r3, [r1, #6]
 8001da6:	f10a 0607 	add.w	r6, sl, #7
 8001daa:	680a      	ldr	r2, [r1, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001dac:	435d      	muls	r5, r3
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001dae:	10f6      	asrs	r6, r6, #3
 8001db0:	9300      	str	r3, [sp, #0]
  offset =  8 *((width + 7)/8) -  width ;
 8001db2:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8001db6:	fb06 2505 	mla	r5, r6, r5, r2
      if(line & (1 << (width- j + offset- 1)))
 8001dba:	f10a 32ff 	add.w	r2, sl, #4294967295
 8001dbe:	fa52 f380 	uxtab	r3, r2, r0
 8001dc2:	9303      	str	r3, [sp, #12]
 8001dc4:	9b02      	ldr	r3, [sp, #8]
 8001dc6:	eb03 0908 	add.w	r9, r3, r8
  for(i = 0; i < height; i++)
 8001dca:	9b00      	ldr	r3, [sp, #0]
 8001dcc:	4598      	cmp	r8, r3
 8001dce:	fa1f f989 	uxth.w	r9, r9
 8001dd2:	d302      	bcc.n	8001dda <BSP_LCD_DisplayChar+0x5a>
}
 8001dd4:	b005      	add	sp, #20
 8001dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001dda:	2e01      	cmp	r6, #1
 8001ddc:	782c      	ldrb	r4, [r5, #0]
 8001dde:	d004      	beq.n	8001dea <BSP_LCD_DisplayChar+0x6a>
 8001de0:	2e02      	cmp	r6, #2
 8001de2:	d109      	bne.n	8001df8 <BSP_LCD_DisplayChar+0x78>
      line =  (pchar[0]<< 8) | pchar[1];
 8001de4:	882c      	ldrh	r4, [r5, #0]
 8001de6:	ba64      	rev16	r4, r4
 8001de8:	b2a4      	uxth	r4, r4
    for (j = 0; j < width; j++)
 8001dea:	2700      	movs	r7, #0
 8001dec:	45ba      	cmp	sl, r7
 8001dee:	d80a      	bhi.n	8001e06 <BSP_LCD_DisplayChar+0x86>
  for(i = 0; i < height; i++)
 8001df0:	f108 0801 	add.w	r8, r8, #1
 8001df4:	4435      	add	r5, r6
 8001df6:	e7e5      	b.n	8001dc4 <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001df8:	786a      	ldrb	r2, [r5, #1]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001e00:	78aa      	ldrb	r2, [r5, #2]
 8001e02:	4314      	orrs	r4, r2
 8001e04:	e7f1      	b.n	8001dea <BSP_LCD_DisplayChar+0x6a>
 8001e06:	9b01      	ldr	r3, [sp, #4]
      if(line & (1 << (width- j + offset- 1)))
 8001e08:	2201      	movs	r2, #1
 8001e0a:	19d8      	adds	r0, r3, r7
 8001e0c:	9b03      	ldr	r3, [sp, #12]
 8001e0e:	1bd9      	subs	r1, r3, r7
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <BSP_LCD_DisplayChar+0xb0>)
 8001e12:	b280      	uxth	r0, r0
    for (j = 0; j < width; j++)
 8001e14:	3701      	adds	r7, #1
      if(line & (1 << (width- j + offset- 1)))
 8001e16:	408a      	lsls	r2, r1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e18:	4649      	mov	r1, r9
      if(line & (1 << (width- j + offset- 1)))
 8001e1a:	4222      	tst	r2, r4
 8001e1c:	f04f 020c 	mov.w	r2, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001e20:	fb02 320b 	mla	r2, r2, fp, r3
 8001e24:	bf14      	ite	ne
 8001e26:	6852      	ldrne	r2, [r2, #4]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001e28:	6892      	ldreq	r2, [r2, #8]
 8001e2a:	f7ff ff93 	bl	8001d54 <BSP_LCD_DrawPixel>
 8001e2e:	e7dd      	b.n	8001dec <BSP_LCD_DisplayChar+0x6c>
 8001e30:	200000e0 	.word	0x200000e0

08001e34 <BSP_LCD_DisplayStringAt>:
{
 8001e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e38:	460e      	mov	r6, r1
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	4615      	mov	r5, r2
  uint8_t  *ptr = Text;
 8001e3e:	4611      	mov	r1, r2
 8001e40:	1b48      	subs	r0, r1, r5
  while (*ptr++) size ++ ;
 8001e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d1fa      	bne.n	8001e40 <BSP_LCD_DisplayStringAt+0xc>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001e4a:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <BSP_LCD_DisplayStringAt+0x8c>)
 8001e4c:	270c      	movs	r7, #12
  return (lcd_x_size);
 8001e4e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001ec4 <BSP_LCD_DisplayStringAt+0x90>
  switch (Mode)
 8001e52:	2b01      	cmp	r3, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001e54:	6811      	ldr	r1, [r2, #0]
 8001e56:	fb07 2101 	mla	r1, r7, r1, r2
 8001e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8001e5e:	68cf      	ldr	r7, [r1, #12]
 8001e60:	88b9      	ldrh	r1, [r7, #4]
 8001e62:	fbb2 f2f1 	udiv	r2, r2, r1
  switch (Mode)
 8001e66:	d016      	beq.n	8001e96 <BSP_LCD_DisplayStringAt+0x62>
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d01b      	beq.n	8001ea4 <BSP_LCD_DisplayStringAt+0x70>
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8001e6c:	b223      	sxth	r3, r4
    refcolumn = 1;
 8001e6e:	46a9      	mov	r9, r5
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bfd8      	it	le
 8001e74:	2401      	movle	r4, #1
 8001e76:	eba9 0305 	sub.w	r3, r9, r5
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001e7a:	88b8      	ldrh	r0, [r7, #4]
 8001e7c:	f8d8 1000 	ldr.w	r1, [r8]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f819 2b01 	ldrb.w	r2, [r9], #1
 8001e86:	fb00 1313 	mls	r3, r0, r3, r1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4283      	cmp	r3, r0
 8001e8e:	d300      	bcc.n	8001e92 <BSP_LCD_DisplayStringAt+0x5e>
 8001e90:	b96a      	cbnz	r2, 8001eae <BSP_LCD_DisplayStringAt+0x7a>
}
 8001e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001e96:	1a12      	subs	r2, r2, r0
 8001e98:	fb01 f002 	mul.w	r0, r1, r2
 8001e9c:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001ea0:	b284      	uxth	r4, r0
      break;
 8001ea2:	e7e3      	b.n	8001e6c <BSP_LCD_DisplayStringAt+0x38>
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001ea4:	1a10      	subs	r0, r2, r0
 8001ea6:	fb10 f001 	smulbb	r0, r0, r1
 8001eaa:	1b00      	subs	r0, r0, r4
 8001eac:	e7f8      	b.n	8001ea0 <BSP_LCD_DisplayStringAt+0x6c>
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8001eae:	4620      	mov	r0, r4
 8001eb0:	4631      	mov	r1, r6
 8001eb2:	f7ff ff65 	bl	8001d80 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001eb6:	88b8      	ldrh	r0, [r7, #4]
 8001eb8:	4420      	add	r0, r4
 8001eba:	b284      	uxth	r4, r0
 8001ebc:	e7db      	b.n	8001e76 <BSP_LCD_DisplayStringAt+0x42>
 8001ebe:	bf00      	nop
 8001ec0:	200000e0 	.word	0x200000e0
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <BSP_LCD_DisplayStringAtLine>:
  return DrawProp[ActiveLayer].pFont;
 8001ec8:	4a08      	ldr	r2, [pc, #32]	; (8001eec <BSP_LCD_DisplayStringAtLine+0x24>)
{
 8001eca:	b410      	push	{r4}
  return DrawProp[ActiveLayer].pFont;
 8001ecc:	6813      	ldr	r3, [r2, #0]
 8001ece:	240c      	movs	r4, #12
 8001ed0:	fb04 2303 	mla	r3, r4, r3, r2
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001ed4:	460a      	mov	r2, r1
}
 8001ed6:	f85d 4b04 	ldr.w	r4, [sp], #4
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	88db      	ldrh	r3, [r3, #6]
 8001ede:	fb13 f000 	smulbb	r0, r3, r0
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	b281      	uxth	r1, r0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff bfa4 	b.w	8001e34 <BSP_LCD_DisplayStringAt>
 8001eec:	200000e0 	.word	0x200000e0

08001ef0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t tmpmrd = 0;
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ef4:	4c21      	ldr	r4, [pc, #132]	; (8001f7c <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001ef6:	2601      	movs	r6, #1
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001ef8:	4d21      	ldr	r5, [pc, #132]	; (8001f80 <BSP_SDRAM_Initialization_sequence+0x90>)
  __IO uint32_t tmpmrd = 0;
 8001efa:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001efe:	2710      	movs	r7, #16
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f00:	4621      	mov	r1, r4
{
 8001f02:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f08:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd = 0;
 8001f0a:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f0e:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001f12:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f16:	f002 fab4 	bl	8004482 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f000 f984 	bl	8002228 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f20:	2302      	movs	r3, #2
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f22:	4621      	mov	r1, r4
 8001f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f28:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f2a:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = 0;
 8001f2e:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8001f32:	f002 faa6 	bl	8004482 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f36:	2303      	movs	r3, #3
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3e:	4628      	mov	r0, r5
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f40:	e9c4 3700 	strd	r3, r7, [r4]
  Command.AutoRefreshNumber      = 8;
 8001f44:	2308      	movs	r3, #8
  Command.ModeRegisterDefinition = 0;
 8001f46:	e9c4 3802 	strd	r3, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f4a:	f002 fa9a 	bl	8004482 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f4e:	f44f 730c 	mov.w	r3, #560	; 0x230
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = tmpmrd;

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f52:	4621      	mov	r1, r4
 8001f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001f58:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f5a:	2304      	movs	r3, #4
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f5c:	4628      	mov	r0, r5
  Command.AutoRefreshNumber      = 1;
 8001f5e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f60:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition = tmpmrd;
 8001f64:	9b01      	ldr	r3, [sp, #4]
 8001f66:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001f68:	f002 fa8b 	bl	8004482 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	4628      	mov	r0, r5
}
 8001f70:	b003      	add	sp, #12
 8001f72:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001f76:	f002 ba9b 	b.w	80044b0 <HAL_SDRAM_ProgramRefreshRate>
 8001f7a:	bf00      	nop
 8001f7c:	200001f8 	.word	0x200001f8
 8001f80:	2000a820 	.word	0x2000a820

08001f84 <BSP_SDRAM_MspInit>:
{  
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f84:	4b57      	ldr	r3, [pc, #348]	; (80020e4 <BSP_SDRAM_MspInit+0x160>)
 8001f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f88:	f042 0201 	orr.w	r2, r2, #1
{  
 8001f8c:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
{  
 8001f90:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001f94:	2503      	movs	r5, #3
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001f96:	ac0e      	add	r4, sp, #56	; 0x38
{  
 8001f98:	4606      	mov	r6, r0
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f9a:	f002 0201 	and.w	r2, r2, #1
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001f9e:	4852      	ldr	r0, [pc, #328]	; (80020e8 <BSP_SDRAM_MspInit+0x164>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fa0:	9201      	str	r2, [sp, #4]
 8001fa2:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
 8001fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fae:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001fb2:	9202      	str	r2, [sp, #8]
 8001fb4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb8:	f042 0208 	orr.w	r2, r2, #8
 8001fbc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	f002 0208 	and.w	r2, r2, #8
 8001fc4:	9203      	str	r2, [sp, #12]
 8001fc6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fca:	f042 0210 	orr.w	r2, r2, #16
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fd2:	f002 0210 	and.w	r2, r2, #16
 8001fd6:	9204      	str	r2, [sp, #16]
 8001fd8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe4:	f002 0220 	and.w	r2, r2, #32
 8001fe8:	9205      	str	r2, [sp, #20]
 8001fea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001ffa:	9206      	str	r2, [sp, #24]
 8001ffc:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002000:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002004:	631a      	str	r2, [r3, #48]	; 0x30
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800200c:	9207      	str	r2, [sp, #28]
 800200e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002016:	631a      	str	r2, [r3, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002018:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002020:	9308      	str	r3, [sp, #32]
 8002022:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002024:	2301      	movs	r3, #1
 8002026:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800202a:	230c      	movs	r3, #12
 800202c:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002030:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002034:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002038:	4621      	mov	r1, r4
 800203a:	f001 fa27 	bl	800348c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800203e:	f64f 7383 	movw	r3, #65411	; 0xff83
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002042:	4621      	mov	r1, r4
 8002044:	4829      	ldr	r0, [pc, #164]	; (80020ec <BSP_SDRAM_MspInit+0x168>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002046:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002048:	f001 fa20 	bl	800348c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800204c:	f64f 033f 	movw	r3, #63551	; 0xf83f
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002050:	4621      	mov	r1, r4
 8002052:	4827      	ldr	r0, [pc, #156]	; (80020f0 <BSP_SDRAM_MspInit+0x16c>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002054:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002056:	f001 fa19 	bl	800348c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 800205a:	f248 1337 	movw	r3, #33079	; 0x8137
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800205e:	4621      	mov	r1, r4
 8002060:	4824      	ldr	r0, [pc, #144]	; (80020f4 <BSP_SDRAM_MspInit+0x170>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002062:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002064:	f001 fa12 	bl	800348c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002068:	f64f 732c 	movw	r3, #65324	; 0xff2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800206c:	4621      	mov	r1, r4
 800206e:	4822      	ldr	r0, [pc, #136]	; (80020f8 <BSP_SDRAM_MspInit+0x174>)
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002070:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002072:	f001 fa0b 	bl	800348c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002076:	f240 63ff 	movw	r3, #1791	; 0x6ff
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 800207a:	4621      	mov	r1, r4
 800207c:	481f      	ldr	r0, [pc, #124]	; (80020fc <BSP_SDRAM_MspInit+0x178>)
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800207e:	2400      	movs	r4, #0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002080:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002082:	f001 fa03 	bl	800348c <HAL_GPIO_Init>
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <BSP_SDRAM_MspInit+0x17c>)
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002088:	2280      	movs	r2, #128	; 0x80
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800208a:	f44f 7100 	mov.w	r1, #512	; 0x200
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800208e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  dma_handle.Init.Mode                = DMA_NORMAL;
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002092:	641c      	str	r4, [r3, #64]	; 0x40
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002094:	62dc      	str	r4, [r3, #44]	; 0x2c
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002096:	e9c3 4205 	strd	r4, r2, [r3, #20]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800209a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209e:	e9c3 1207 	strd	r1, r2, [r3, #28]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80020a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a6:	e9c3 0209 	strd	r0, r2, [r3, #36]	; 0x24
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80020aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80020ae:	e9c3 540e 	strd	r5, r4, [r3, #56]	; 0x38
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80020b2:	e9c3 240c 	strd	r2, r4, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80020b6:	461d      	mov	r5, r3
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <BSP_SDRAM_MspInit+0x180>)
 80020ba:	f845 2f10 	str.w	r2, [r5, #16]!
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80020be:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80020c0:	6335      	str	r5, [r6, #48]	; 0x30
 80020c2:	649e      	str	r6, [r3, #72]	; 0x48
  HAL_DMA_DeInit(&dma_handle);
 80020c4:	f000 f9f8 	bl	80024b8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80020c8:	4628      	mov	r0, r5
 80020ca:	f000 f977 	bl	80023bc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80020ce:	4622      	mov	r2, r4
 80020d0:	210f      	movs	r1, #15
 80020d2:	2038      	movs	r0, #56	; 0x38
 80020d4:	f000 f8d2 	bl	800227c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80020d8:	2038      	movs	r0, #56	; 0x38
 80020da:	f000 f901 	bl	80022e0 <HAL_NVIC_EnableIRQ>
}
 80020de:	b00e      	add	sp, #56	; 0x38
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40021400 	.word	0x40021400
 80020f4:	40021800 	.word	0x40021800
 80020f8:	40021c00 	.word	0x40021c00
 80020fc:	40022000 	.word	0x40022000
 8002100:	200001f8 	.word	0x200001f8
 8002104:	40026410 	.word	0x40026410

08002108 <BSP_SDRAM_Init>:
{ 
 8002108:	b538      	push	{r3, r4, r5, lr}
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800210a:	4c1b      	ldr	r4, [pc, #108]	; (8002178 <BSP_SDRAM_Init+0x70>)
  Timing.ExitSelfRefreshDelay = 7;
 800210c:	2107      	movs	r1, #7
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800210e:	4b1b      	ldr	r3, [pc, #108]	; (800217c <BSP_SDRAM_Init+0x74>)
  Timing.SelfRefreshTime      = 4;
 8002110:	2204      	movs	r2, #4
  Timing.LoadToActiveDelay    = 2;
 8002112:	4d1b      	ldr	r5, [pc, #108]	; (8002180 <BSP_SDRAM_Init+0x78>)
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002114:	f44f 6000 	mov.w	r0, #2048	; 0x800
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002118:	6023      	str	r3, [r4, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800211a:	2302      	movs	r3, #2
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800211c:	60e2      	str	r2, [r4, #12]
  Timing.RCDDelay             = 2;
 800211e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
  Timing.ExitSelfRefreshDelay = 7;
 8002122:	e9c5 311c 	strd	r3, r1, [r5, #112]	; 0x70
  Timing.RowCycleDelay        = 7;
 8002126:	e9c5 211e 	strd	r2, r1, [r5, #120]	; 0x78
  Timing.RPDelay              = 2;
 800212a:	e9c5 3320 	strd	r3, r3, [r5, #128]	; 0x80
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800212e:	2220      	movs	r2, #32
 8002130:	2340      	movs	r3, #64	; 0x40
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002132:	2100      	movs	r1, #0
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002134:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002138:	f44f 73c0 	mov.w	r3, #384	; 0x180
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800213c:	62a1      	str	r1, [r4, #40]	; 0x28
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800213e:	e9c4 3106 	strd	r3, r1, [r4, #24]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002146:	e9c4 0308 	strd	r0, r3, [r4, #32]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800214a:	4620      	mov	r0, r4
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800214c:	e9c4 1101 	strd	r1, r1, [r4, #4]
  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002150:	f7ff ff18 	bl	8001f84 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002154:	4620      	mov	r0, r4
 8002156:	f105 0170 	add.w	r1, r5, #112	; 0x70
 800215a:	4c0a      	ldr	r4, [pc, #40]	; (8002184 <BSP_SDRAM_Init+0x7c>)
 800215c:	f002 f971 	bl	8004442 <HAL_SDRAM_Init>
 8002160:	b138      	cbz	r0, 8002172 <BSP_SDRAM_Init+0x6a>
    sdramstatus = SDRAM_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	7023      	strb	r3, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002166:	f240 6003 	movw	r0, #1539	; 0x603
 800216a:	f7ff fec1 	bl	8001ef0 <BSP_SDRAM_Initialization_sequence>
}
 800216e:	7820      	ldrb	r0, [r4, #0]
 8002170:	bd38      	pop	{r3, r4, r5, pc}
    sdramstatus = SDRAM_OK;
 8002172:	7020      	strb	r0, [r4, #0]
 8002174:	e7f7      	b.n	8002166 <BSP_SDRAM_Init+0x5e>
 8002176:	bf00      	nop
 8002178:	2000a820 	.word	0x2000a820
 800217c:	a0000140 	.word	0xa0000140
 8002180:	200001f8 	.word	0x200001f8
 8002184:	20000030 	.word	0x20000030

08002188 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002188:	490f      	ldr	r1, [pc, #60]	; (80021c8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800218a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800218c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <SystemInit+0x44>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021a2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021ae:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <SystemInit+0x48>)
 80021b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ba:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021bc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021c2:	608b      	str	r3, [r1, #8]
#endif
}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00
 80021cc:	40023800 	.word	0x40023800
 80021d0:	24003010 	.word	0x24003010

080021d4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80021d4:	4770      	bx	lr
	...

080021d8 <HAL_Init>:
{
 80021d8:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_Init+0x28>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021dc:	2003      	movs	r0, #3
   __HAL_FLASH_ART_ENABLE();
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021e4:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ec:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ee:	f000 f833 	bl	8002258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80021f2:	200f      	movs	r0, #15
 80021f4:	f7fe ff40 	bl	8001078 <HAL_InitTick>
  HAL_MspInit();
 80021f8:	f7ff ffec 	bl	80021d4 <HAL_MspInit>
}
 80021fc:	2000      	movs	r0, #0
 80021fe:	bd08      	pop	{r3, pc}
 8002200:	40023c00 	.word	0x40023c00

08002204 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002204:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_IncTick+0x10>)
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <HAL_IncTick+0x14>)
 8002208:	6811      	ldr	r1, [r2, #0]
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	440b      	add	r3, r1
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000a854 	.word	0x2000a854
 8002218:	20000038 	.word	0x20000038

0800221c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800221c:	4b01      	ldr	r3, [pc, #4]	; (8002224 <HAL_GetTick+0x8>)
 800221e:	6818      	ldr	r0, [r3, #0]
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	2000a854 	.word	0x2000a854

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff fff6 	bl	800221c <HAL_GetTick>
 8002230:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002234:	bf1e      	ittt	ne
 8002236:	4b04      	ldrne	r3, [pc, #16]	; (8002248 <HAL_Delay+0x20>)
 8002238:	781b      	ldrbne	r3, [r3, #0]
 800223a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	1b40      	subs	r0, r0, r5
 8002242:	42a0      	cmp	r0, r4
 8002244:	d3fa      	bcc.n	800223c <HAL_Delay+0x14>
  {
  }
}
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000038 	.word	0x20000038

0800224c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 800224c:	4b01      	ldr	r3, [pc, #4]	; (8002254 <HAL_GetREVID+0x8>)
 800224e:	6818      	ldr	r0, [r3, #0]
}
 8002250:	0c00      	lsrs	r0, r0, #16
 8002252:	4770      	bx	lr
 8002254:	e0042000 	.word	0xe0042000

08002258 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002274:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800227c:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227e:	b570      	push	{r4, r5, r6, lr}
 8002280:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002282:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002286:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002290:	2d04      	cmp	r5, #4
 8002292:	bf28      	it	cs
 8002294:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229c:	bf8c      	ite	hi
 800229e:	3c03      	subhi	r4, #3
 80022a0:	2400      	movls	r4, #0
  if ((int32_t)(IRQn) >= 0)
 80022a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a4:	ea21 0303 	bic.w	r3, r1, r3
 80022a8:	fa03 f304 	lsl.w	r3, r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	fa06 f404 	lsl.w	r4, r6, r4
 80022b0:	ea22 0404 	bic.w	r4, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	ea43 0304 	orr.w	r3, r3, r4
 80022b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80022bc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80022be:	db06      	blt.n	80022ce <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022c8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	f000 000f 	and.w	r0, r0, #15
 80022d2:	4a02      	ldr	r2, [pc, #8]	; (80022dc <HAL_NVIC_SetPriority+0x60>)
 80022d4:	5413      	strb	r3, [r2, r0]
 80022d6:	e7f9      	b.n	80022cc <HAL_NVIC_SetPriority+0x50>
 80022d8:	e000ed00 	.word	0xe000ed00
 80022dc:	e000ed14 	.word	0xe000ed14

080022e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022e0:	2800      	cmp	r0, #0
 80022e2:	db08      	blt.n	80022f6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e4:	0942      	lsrs	r2, r0, #5
 80022e6:	2301      	movs	r3, #1
 80022e8:	f000 001f 	and.w	r0, r0, #31
 80022ec:	fa03 f000 	lsl.w	r0, r3, r0
 80022f0:	4b01      	ldr	r3, [pc, #4]	; (80022f8 <HAL_NVIC_EnableIRQ+0x18>)
 80022f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100

080022fc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80022fc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002300:	4a04      	ldr	r2, [pc, #16]	; (8002314 <HAL_MPU_Disable+0x18>)
 8002302:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002308:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800230a:	2200      	movs	r2, #0
 800230c:	4b02      	ldr	r3, [pc, #8]	; (8002318 <HAL_MPU_Disable+0x1c>)
 800230e:	605a      	str	r2, [r3, #4]
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	e000ed90 	.word	0xe000ed90

0800231c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800231c:	4a06      	ldr	r2, [pc, #24]	; (8002338 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800231e:	f040 0001 	orr.w	r0, r0, #1
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MPU_Enable+0x20>)
 8002324:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002326:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800232e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002332:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	e000ed90 	.word	0xe000ed90

08002340 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002340:	7843      	ldrb	r3, [r0, #1]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_MPU_ConfigRegion+0x4c>)
{
 8002344:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8002346:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8002348:	7801      	ldrb	r1, [r0, #0]
 800234a:	b1d9      	cbz	r1, 8002384 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 800234c:	6843      	ldr	r3, [r0, #4]
 800234e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002350:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002352:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002354:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002356:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800235a:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800235c:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800235e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002362:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002364:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002368:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800236a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800236e:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002374:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002376:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800237a:	7a01      	ldrb	r1, [r0, #8]
 800237c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002380:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002382:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 8002384:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8002386:	6111      	str	r1, [r2, #16]
}
 8002388:	e7fb      	b.n	8002382 <HAL_MPU_ConfigRegion+0x42>
 800238a:	bf00      	nop
 800238c:	e000ed90 	.word	0xe000ed90

08002390 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002390:	6803      	ldr	r3, [r0, #0]
 8002392:	2118      	movs	r1, #24
 8002394:	b2da      	uxtb	r2, r3
 8002396:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239a:	3a10      	subs	r2, #16
 800239c:	f023 0303 	bic.w	r3, r3, #3
 80023a0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80023a6:	2a03      	cmp	r2, #3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a8:	5c89      	ldrb	r1, [r1, r2]
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023aa:	bf88      	it	hi
 80023ac:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ae:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023b0:	6583      	str	r3, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 80023b2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	08014955 	.word	0x08014955

080023bc <HAL_DMA_Init>:
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023c0:	f7ff ff2c 	bl	800221c <HAL_GetTick>
 80023c4:	4605      	mov	r5, r0
  if(hdma == NULL)
 80023c6:	2c00      	cmp	r4, #0
 80023c8:	d071      	beq.n	80024ae <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80023ca:	2300      	movs	r3, #0
  __HAL_DMA_DISABLE(hdma);
 80023cc:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80023ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	680b      	ldr	r3, [r1, #0]
 80023e4:	07d8      	lsls	r0, r3, #31
 80023e6:	d43c      	bmi.n	8002462 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80023e8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ea:	4d32      	ldr	r5, [pc, #200]	; (80024b4 <HAL_DMA_Init+0xf8>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ec:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ee:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023f0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	68e2      	ldr	r2, [r4, #12]
 80023f8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fa:	6922      	ldr	r2, [r4, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	6962      	ldr	r2, [r4, #20]
 8002400:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002402:	69e2      	ldr	r2, [r4, #28]
 8002404:	4303      	orrs	r3, r0
 8002406:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002408:	6a22      	ldr	r2, [r4, #32]
 800240a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800240e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002410:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002414:	bf02      	ittt	eq
 8002416:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800241a:	4335      	orreq	r5, r6
 800241c:	432b      	orreq	r3, r5
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241e:	2a04      	cmp	r2, #4
  hdma->Instance->CR = tmp;  
 8002420:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002422:	694b      	ldr	r3, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002424:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002428:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800242c:	d10b      	bne.n	8002446 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800242e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002430:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002432:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002434:	b13d      	cbz	r5, 8002446 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002436:	b9f8      	cbnz	r0, 8002478 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8002438:	2a01      	cmp	r2, #1
 800243a:	d02d      	beq.n	8002498 <HAL_DMA_Init+0xdc>
 800243c:	d301      	bcc.n	8002442 <HAL_DMA_Init+0x86>
 800243e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002440:	d101      	bne.n	8002446 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002442:	01ea      	lsls	r2, r5, #7
 8002444:	d42b      	bmi.n	800249e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8002446:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002448:	4620      	mov	r0, r4
 800244a:	f7ff ffa1 	bl	8002390 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002450:	233f      	movs	r3, #63	; 0x3f
 8002452:	4093      	lsls	r3, r2
 8002454:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002458:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800245c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002460:	e009      	b.n	8002476 <HAL_DMA_Init+0xba>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002462:	f7ff fedb 	bl	800221c <HAL_GetTick>
 8002466:	1b40      	subs	r0, r0, r5
 8002468:	2805      	cmp	r0, #5
 800246a:	d9b9      	bls.n	80023e0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246c:	2320      	movs	r3, #32
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246e:	2003      	movs	r0, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002470:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002472:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002476:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002478:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800247c:	d113      	bne.n	80024a6 <HAL_DMA_Init+0xea>
    switch (tmp)
 800247e:	2a03      	cmp	r2, #3
 8002480:	d8e1      	bhi.n	8002446 <HAL_DMA_Init+0x8a>
 8002482:	a001      	add	r0, pc, #4	; (adr r0, 8002488 <HAL_DMA_Init+0xcc>)
 8002484:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002488:	0800249f 	.word	0x0800249f
 800248c:	08002443 	.word	0x08002443
 8002490:	0800249f 	.word	0x0800249f
 8002494:	08002499 	.word	0x08002499
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002498:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800249c:	d1d3      	bne.n	8002446 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249e:	2340      	movs	r3, #64	; 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80024a0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024a2:	6563      	str	r3, [r4, #84]	; 0x54
 80024a4:	e7e5      	b.n	8002472 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80024a6:	2a02      	cmp	r2, #2
 80024a8:	d9f9      	bls.n	800249e <HAL_DMA_Init+0xe2>
 80024aa:	2a03      	cmp	r2, #3
 80024ac:	e7c8      	b.n	8002440 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80024ae:	2001      	movs	r0, #1
 80024b0:	e7e1      	b.n	8002476 <HAL_DMA_Init+0xba>
 80024b2:	bf00      	nop
 80024b4:	e010803f 	.word	0xe010803f

080024b8 <HAL_DMA_DeInit>:
{
 80024b8:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 80024ba:	4605      	mov	r5, r0
 80024bc:	b320      	cbz	r0, 8002508 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80024be:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80024c2:	b2e4      	uxtb	r4, r4
 80024c4:	2c02      	cmp	r4, #2
 80024c6:	d01d      	beq.n	8002504 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 80024c8:	6803      	ldr	r3, [r0, #0]
  hdma->Instance->CR   = 0U;
 80024ca:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80024d4:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80024d6:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80024d8:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80024da:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80024dc:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80024de:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80024e0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024e2:	f7ff ff55 	bl	8002390 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80024e8:	233f      	movs	r3, #63	; 0x3f
 80024ea:	4093      	lsls	r3, r2
 80024ec:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ee:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80024f0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80024f4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80024f8:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80024fc:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8002500:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
    return HAL_BUSY;
 8002504:	4620      	mov	r0, r4
 8002506:	e000      	b.n	800250a <HAL_DMA_DeInit+0x52>
    return HAL_ERROR;
 8002508:	2001      	movs	r0, #1
}
 800250a:	bd38      	pop	{r3, r4, r5, pc}

0800250c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800250c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800250e:	6804      	ldr	r4, [r0, #0]
 8002510:	9d04      	ldr	r5, [sp, #16]
 8002512:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002514:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002518:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 800251c:	4333      	orrs	r3, r6
 800251e:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002520:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002522:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002524:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002528:	d130      	bne.n	800258c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800252a:	6886      	ldr	r6, [r0, #8]
 800252c:	b11e      	cbz	r6, 8002536 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800252e:	2e01      	cmp	r6, #1
 8002530:	d103      	bne.n	800253a <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002532:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002536:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002538:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800253a:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800253c:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002540:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002544:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002546:	d107      	bne.n	8002558 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002548:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 800254a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800254c:	02c9      	lsls	r1, r1, #11
 800254e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002552:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8002556:	e7ee      	b.n	8002536 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002558:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800255a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800255e:	d10a      	bne.n	8002576 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002560:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002562:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002564:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8002566:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002568:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800256c:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 8002570:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002574:	e7df      	b.n	8002536 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002576:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002578:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800257a:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 800257c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800257e:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002582:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8002586:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800258a:	e7d4      	b.n	8002536 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800258c:	60e1      	str	r1, [r4, #12]
}
 800258e:	e7d3      	b.n	8002538 <DMA2D_SetConfig+0x2c>

08002590 <HAL_DMA2D_MspInit>:
}
 8002590:	4770      	bx	lr

08002592 <HAL_DMA2D_Init>:
{
 8002592:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8002594:	4604      	mov	r4, r0
 8002596:	b380      	cbz	r0, 80025fa <HAL_DMA2D_Init+0x68>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002598:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800259c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025a0:	b91b      	cbnz	r3, 80025aa <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 80025a2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_DMA2D_MspInit(hdma2d);
 80025a6:	f7ff fff3 	bl	8002590 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025aa:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025ac:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025ba:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025bc:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80025be:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c2:	f022 0207 	bic.w	r2, r2, #7
 80025c6:	430a      	orrs	r2, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025c8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80025ca:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80025cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ce:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 80025d2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80025d6:	430a      	orrs	r2, r1
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80025da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025dc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80025e0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80025e4:	0552      	lsls	r2, r2, #21
 80025e6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025ea:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
 80025ec:	430a      	orrs	r2, r1
 80025ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025f0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025f2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025f4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80025f8:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80025fa:	2001      	movs	r0, #1
 80025fc:	e7fc      	b.n	80025f8 <HAL_DMA2D_Init+0x66>

080025fe <HAL_DMA2D_Start>:
{
 80025fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002600:	f890 4050 	ldrb.w	r4, [r0, #80]	; 0x50
{
 8002604:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 8002606:	2c01      	cmp	r4, #1
 8002608:	f04f 0402 	mov.w	r4, #2
 800260c:	d00f      	beq.n	800262e <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800260e:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
  __HAL_LOCK(hdma2d);
 8002612:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002614:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002616:	f880 6050 	strb.w	r6, [r0, #80]	; 0x50
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800261a:	9400      	str	r4, [sp, #0]
 800261c:	f7ff ff76 	bl	800250c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002620:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 8002622:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	4333      	orrs	r3, r6
 8002628:	6013      	str	r3, [r2, #0]
}
 800262a:	b002      	add	sp, #8
 800262c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 800262e:	4620      	mov	r0, r4
 8002630:	e7fb      	b.n	800262a <HAL_DMA2D_Start+0x2c>

08002632 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 8002632:	2300      	movs	r3, #0
{
 8002634:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002636:	9301      	str	r3, [sp, #4]
{
 8002638:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800263a:	6803      	ldr	r3, [r0, #0]
{
 800263c:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	07db      	lsls	r3, r3, #31
 8002642:	d417      	bmi.n	8002674 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002644:	6822      	ldr	r2, [r4, #0]
 8002646:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800264a:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 800264c:	069e      	lsls	r6, r3, #26
 800264e:	d506      	bpl.n	800265e <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002650:	f7ff fde4 	bl	800221c <HAL_GetTick>
 8002654:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	06d2      	lsls	r2, r2, #27
 800265c:	d543      	bpl.n	80026e6 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8002662:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002664:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002666:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 8002668:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800266c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002670:	b002      	add	sp, #8
 8002672:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8002674:	f7ff fdd2 	bl	800221c <HAL_GetTick>
 8002678:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	0792      	lsls	r2, r2, #30
 8002680:	d4e0      	bmi.n	8002644 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	f012 0f21 	tst.w	r2, #33	; 0x21
 800268c:	d017      	beq.n	80026be <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800268e:	9a01      	ldr	r2, [sp, #4]
 8002690:	0695      	lsls	r5, r2, #26
 8002692:	d503      	bpl.n	800269c <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002694:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002696:	f042 0202 	orr.w	r2, r2, #2
 800269a:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800269c:	9a01      	ldr	r2, [sp, #4]
 800269e:	07d0      	lsls	r0, r2, #31
 80026a0:	d503      	bpl.n	80026aa <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026a2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80026aa:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80026ac:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80026ae:	2304      	movs	r3, #4
        return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80026b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hdma2d);
 80026b6:	2300      	movs	r3, #0
 80026b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_ERROR;
 80026bc:	e7d8      	b.n	8002670 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 80026be:	1c69      	adds	r1, r5, #1
 80026c0:	d0dc      	beq.n	800267c <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80026c2:	f7ff fdab 	bl	800221c <HAL_GetTick>
 80026c6:	1b80      	subs	r0, r0, r6
 80026c8:	42a8      	cmp	r0, r5
 80026ca:	d801      	bhi.n	80026d0 <HAL_DMA2D_PollForTransfer+0x9e>
 80026cc:	2d00      	cmp	r5, #0
 80026ce:	d1d4      	bne.n	800267a <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80026d2:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026d4:	f043 0320 	orr.w	r3, r3, #32
 80026d8:	6563      	str	r3, [r4, #84]	; 0x54
          __HAL_UNLOCK(hdma2d);
 80026da:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80026dc:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
          __HAL_UNLOCK(hdma2d);
 80026e0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 80026e4:	e7c4      	b.n	8002670 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80026ea:	9a01      	ldr	r2, [sp, #4]
 80026ec:	f012 0f29 	tst.w	r2, #41	; 0x29
 80026f0:	d016      	beq.n	8002720 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80026f2:	9a01      	ldr	r2, [sp, #4]
 80026f4:	0716      	lsls	r6, r2, #28
 80026f6:	d503      	bpl.n	8002700 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80026f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80026fa:	f042 0204 	orr.w	r2, r2, #4
 80026fe:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002700:	9a01      	ldr	r2, [sp, #4]
 8002702:	0695      	lsls	r5, r2, #26
 8002704:	d503      	bpl.n	800270e <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002706:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002708:	f042 0202 	orr.w	r2, r2, #2
 800270c:	6562      	str	r2, [r4, #84]	; 0x54
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800270e:	9a01      	ldr	r2, [sp, #4]
 8002710:	07d0      	lsls	r0, r2, #31
 8002712:	d503      	bpl.n	800271c <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002714:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800271c:	2229      	movs	r2, #41	; 0x29
 800271e:	e7c5      	b.n	80026ac <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8002720:	1c69      	adds	r1, r5, #1
 8002722:	d099      	beq.n	8002658 <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8002724:	f7ff fd7a 	bl	800221c <HAL_GetTick>
 8002728:	1b80      	subs	r0, r0, r6
 800272a:	42a8      	cmp	r0, r5
 800272c:	d8d0      	bhi.n	80026d0 <HAL_DMA2D_PollForTransfer+0x9e>
 800272e:	2d00      	cmp	r5, #0
 8002730:	d191      	bne.n	8002656 <HAL_DMA2D_PollForTransfer+0x24>
 8002732:	e7cd      	b.n	80026d0 <HAL_DMA2D_PollForTransfer+0x9e>

08002734 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8002734:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002738:	2b01      	cmp	r3, #1
 800273a:	f04f 0302 	mov.w	r3, #2
{
 800273e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002740:	d040      	beq.n	80027c4 <HAL_DMA2D_ConfigLayer+0x90>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002742:	2418      	movs	r4, #24
  __HAL_LOCK(hdma2d);
 8002744:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002746:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800274a:	fb04 0401 	mla	r4, r4, r1, r0
 800274e:	4f22      	ldr	r7, [pc, #136]	; (80027d8 <HAL_DMA2D_ConfigLayer+0xa4>)
  __HAL_LOCK(hdma2d);
 8002750:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002754:	6b22      	ldr	r2, [r4, #48]	; 0x30
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002756:	e9d4 5609 	ldrd	r5, r6, [r4, #36]	; 0x24
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800275a:	0513      	lsls	r3, r2, #20
 800275c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800275e:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 8002760:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002764:	432b      	orrs	r3, r5
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002766:	3d09      	subs	r5, #9
 8002768:	2d01      	cmp	r5, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
 800276a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800276e:	6802      	ldr	r2, [r0, #0]
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002770:	d80e      	bhi.n	8002790 <HAL_DMA2D_ConfigLayer+0x5c>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002772:	f004 467f 	and.w	r6, r4, #4278190080	; 0xff000000
 8002776:	4333      	orrs	r3, r6
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002778:	b969      	cbnz	r1, 8002796 <HAL_DMA2D_ConfigLayer+0x62>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800277a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800277c:	4039      	ands	r1, r7
 800277e:	430b      	orrs	r3, r1
 8002780:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002782:	6a03      	ldr	r3, [r0, #32]
 8002784:	6193      	str	r3, [r2, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002786:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800278c:	6293      	str	r3, [r2, #40]	; 0x28
 800278e:	e013      	b.n	80027b8 <HAL_DMA2D_ConfigLayer+0x84>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002790:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002794:	b1c1      	cbz	r1, 80027c8 <HAL_DMA2D_ConfigLayer+0x94>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002796:	69d6      	ldr	r6, [r2, #28]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002798:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800279a:	ea06 0607 	and.w	r6, r6, r7
 800279e:	ea43 0306 	orr.w	r3, r3, r6
 80027a2:	61d3      	str	r3, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80027a4:	f04f 0318 	mov.w	r3, #24
 80027a8:	fb03 0101 	mla	r1, r3, r1, r0
 80027ac:	6a0b      	ldr	r3, [r1, #32]
 80027ae:	6113      	str	r3, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027b0:	d802      	bhi.n	80027b8 <HAL_DMA2D_ConfigLayer+0x84>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80027b2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80027b6:	6214      	str	r4, [r2, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027b8:	2301      	movs	r3, #1
 80027ba:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_UNLOCK(hdma2d);
 80027be:	2300      	movs	r3, #0
 80027c0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  __HAL_LOCK(hdma2d);
 80027c4:	4618      	mov	r0, r3
}
 80027c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80027c8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80027ca:	4039      	ands	r1, r7
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6253      	str	r3, [r2, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80027d0:	6a03      	ldr	r3, [r0, #32]
 80027d2:	6193      	str	r3, [r2, #24]
 80027d4:	e7f0      	b.n	80027b8 <HAL_DMA2D_ConfigLayer+0x84>
 80027d6:	bf00      	nop
 80027d8:	00ccfff0 	.word	0x00ccfff0

080027dc <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80027dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e0:	4607      	mov	r7, r0
 80027e2:	460d      	mov	r5, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	461e      	mov	r6, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80027e8:	f7ff fd18 	bl	800221c <HAL_GetTick>
 80027ec:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80027f2:	07d2      	lsls	r2, r2, #31
 80027f4:	d50a      	bpl.n	800280c <DSI_ShortWrite+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80027f6:	ea44 2106 	orr.w	r1, r4, r6, lsl #8
 80027fa:	9c06      	ldr	r4, [sp, #24]

  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80027fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8002802:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 8002806:	66d9      	str	r1, [r3, #108]	; 0x6c
}
 8002808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800280c:	f7ff fd06 	bl	800221c <HAL_GetTick>
 8002810:	eba0 0008 	sub.w	r0, r0, r8
 8002814:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002818:	d9e9      	bls.n	80027ee <DSI_ShortWrite+0x12>
      return HAL_TIMEOUT;
 800281a:	2003      	movs	r0, #3
 800281c:	e7f4      	b.n	8002808 <DSI_ShortWrite+0x2c>

0800281e <HAL_DSI_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800281e:	4770      	bx	lr

08002820 <HAL_DSI_Init>:
{
 8002820:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002822:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8002824:	4604      	mov	r4, r0
 8002826:	2800      	cmp	r0, #0
 8002828:	f000 80a6 	beq.w	8002978 <HAL_DSI_Init+0x158>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800282c:	7c43      	ldrb	r3, [r0, #17]
 800282e:	b90b      	cbnz	r3, 8002834 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8002830:	f7ff fff5 	bl	800281e <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002834:	2303      	movs	r3, #3
 8002836:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8002838:	2300      	movs	r3, #0
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002842:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002846:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800284a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800284e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8002856:	f7ff fce1 	bl	800221c <HAL_GetTick>
 800285a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8002862:	04d9      	lsls	r1, r3, #19
 8002864:	d577      	bpl.n	8002956 <HAL_DSI_Init+0x136>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002866:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800286a:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800286e:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8002872:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8002876:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 800287a:	e9d5 0300 	ldrd	r0, r3, [r5]
 800287e:	02db      	lsls	r3, r3, #11
 8002880:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8002884:	68a8      	ldr	r0, [r5, #8]
 8002886:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800288a:	430b      	orrs	r3, r1
 800288c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002890:	2300      	movs	r3, #0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 80028a0:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80028ac:	f7ff fcb6 	bl	800221c <HAL_GetTick>
 80028b0:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80028b8:	05d2      	lsls	r2, r2, #23
 80028ba:	d556      	bpl.n	800296a <HAL_DSI_Init+0x14a>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80028bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80028c0:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80028c2:	f042 0206 	orr.w	r2, r2, #6
 80028c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80028ca:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80028ce:	f022 0203 	bic.w	r2, r2, #3
 80028d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80028d6:	6862      	ldr	r2, [r4, #4]
 80028d8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028e2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80028e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80028e8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80028ec:	f022 0203 	bic.w	r2, r2, #3
 80028f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028f4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80028f8:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80028fa:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80028fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002906:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	430a      	orrs	r2, r1
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800290c:	6869      	ldr	r1, [r5, #4]
 800290e:	2900      	cmp	r1, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002910:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002912:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_DSI_Init+0x15c>)
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002914:	bf08      	it	eq
 8002916:	2101      	moveq	r1, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002918:	434a      	muls	r2, r1
 800291a:	68a9      	ldr	r1, [r5, #8]
 800291c:	f001 0103 	and.w	r1, r1, #3
 8002920:	408a      	lsls	r2, r1
 8002922:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002926:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8002928:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800292a:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800292e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002932:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002936:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800293a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 800293e:	430a      	orrs	r2, r1
 8002940:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8002944:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002948:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 800294c:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800294e:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8002950:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8002952:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8002954:	e007      	b.n	8002966 <HAL_DSI_Init+0x146>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002956:	f7ff fc61 	bl	800221c <HAL_GetTick>
 800295a:	1b80      	subs	r0, r0, r6
 800295c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002960:	f67f af7c 	bls.w	800285c <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8002964:	2003      	movs	r0, #3
}
 8002966:	b002      	add	sp, #8
 8002968:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800296a:	f7ff fc57 	bl	800221c <HAL_GetTick>
 800296e:	1b80      	subs	r0, r0, r6
 8002970:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002974:	d99d      	bls.n	80028b2 <HAL_DSI_Init+0x92>
 8002976:	e7f5      	b.n	8002964 <HAL_DSI_Init+0x144>
    return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
 800297a:	e7f4      	b.n	8002966 <HAL_DSI_Init+0x146>
 800297c:	003d0900 	.word	0x003d0900

08002980 <HAL_DSI_MspDeInit>:
 8002980:	4770      	bx	lr

08002982 <HAL_DSI_DeInit>:
{
 8002982:	b530      	push	{r4, r5, lr}
  if (hdsi == NULL)
 8002984:	4605      	mov	r5, r0
{
 8002986:	b085      	sub	sp, #20
  if (hdsi == NULL)
 8002988:	2800      	cmp	r0, #0
 800298a:	d042      	beq.n	8002a12 <HAL_DSI_DeInit+0x90>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800298c:	2303      	movs	r3, #3
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800298e:	2400      	movs	r4, #0
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002990:	7443      	strb	r3, [r0, #17]
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002992:	6803      	ldr	r3, [r0, #0]
 8002994:	9400      	str	r4, [sp, #0]
 8002996:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800299a:	f022 0208 	bic.w	r2, r2, #8
 800299e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80029a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80029a6:	f002 0208 	and.w	r2, r2, #8
 80029aa:	9200      	str	r2, [sp, #0]
 80029ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_DSI_DISABLE(hdsi);
 80029ae:	9401      	str	r4, [sp, #4]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	f002 0201 	and.w	r2, r2, #1
 80029be:	9201      	str	r2, [sp, #4]
 80029c0:	9a01      	ldr	r2, [sp, #4]
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80029c2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80029c6:	f022 0206 	bic.w	r2, r2, #6
 80029ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  __HAL_DSI_PLL_DISABLE(hdsi);
 80029ce:	9402      	str	r4, [sp, #8]
 80029d0:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80029d4:	f022 0201 	bic.w	r2, r2, #1
 80029d8:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80029dc:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80029e0:	f002 0201 	and.w	r2, r2, #1
 80029e4:	9202      	str	r2, [sp, #8]
 80029e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_DSI_REG_DISABLE(hdsi);
 80029e8:	9403      	str	r4, [sp, #12]
 80029ea:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80029ee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80029f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80029f6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80029fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fe:	9303      	str	r3, [sp, #12]
 8002a00:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_MspDeInit(hdsi);
 8002a02:	f7ff ffbd 	bl	8002980 <HAL_DSI_MspDeInit>
  return HAL_OK;
 8002a06:	4620      	mov	r0, r4
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002a08:	616c      	str	r4, [r5, #20]
  __HAL_UNLOCK(hdsi);
 8002a0a:	742c      	strb	r4, [r5, #16]
  hdsi->State = HAL_DSI_STATE_RESET;
 8002a0c:	746c      	strb	r4, [r5, #17]
}
 8002a0e:	b005      	add	sp, #20
 8002a10:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	e7fb      	b.n	8002a0e <HAL_DSI_DeInit+0x8c>
	...

08002a18 <HAL_DSI_ConfigVideoMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002a18:	7c03      	ldrb	r3, [r0, #16]
 8002a1a:	2b01      	cmp	r3, #1
{
 8002a1c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdsi);
 8002a1e:	f000 80f9 	beq.w	8002c14 <HAL_DSI_ConfigVideoMode+0x1fc>
 8002a22:	2301      	movs	r3, #1
  assert_param(IS_DSI_FBTAA(VidCfg->FrameBTAAcknowledgeEnable));
  assert_param(IS_DSI_DE_POLARITY(VidCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(VidCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(VidCfg->HSPolarity));
  /* Check the LooselyPacked variant only in 18-bit mode */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002a24:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002a26:	68cd      	ldr	r5, [r1, #12]
  __HAL_LOCK(hdsi);
 8002a28:	7403      	strb	r3, [r0, #16]
  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002a2a:	2c03      	cmp	r4, #3
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002a2c:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002a2e:	4e7a      	ldr	r6, [pc, #488]	; (8002c18 <HAL_DSI_ConfigVideoMode+0x200>)
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8002a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002a38:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 8002a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a46:	f022 0203 	bic.w	r2, r2, #3
 8002a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4e:	ea42 0205 	orr.w	r2, r2, r5
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002a52:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 8002a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a58:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002a5c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002a60:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 8002a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a64:	ea42 0205 	orr.w	r2, r2, r5
 8002a68:	63da      	str	r2, [r3, #60]	; 0x3c
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002a6a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002a6c:	694a      	ldr	r2, [r1, #20]
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8002a6e:	ea05 0506 	and.w	r5, r5, r6
 8002a72:	641d      	str	r5, [r3, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8002a74:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8002a76:	ea45 0502 	orr.w	r5, r5, r2
 8002a7a:	641d      	str	r5, [r3, #64]	; 0x40
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002a7e:	698d      	ldr	r5, [r1, #24]
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8002a80:	ea02 0206 	and.w	r2, r2, r6
 8002a84:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002a86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a88:	ea42 0205 	orr.w	r2, r2, r5
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002a8c:	680d      	ldr	r5, [r1, #0]
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8002a8e:	645a      	str	r2, [r3, #68]	; 0x44
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	f022 0203 	bic.w	r2, r2, #3
 8002a96:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	ea42 0205 	orr.w	r2, r2, r5
 8002a9e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	f022 0207 	bic.w	r2, r2, #7
 8002aa6:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8002aa8:	695d      	ldr	r5, [r3, #20]
 8002aaa:	e9d1 6208 	ldrd	r6, r2, [r1, #32]
 8002aae:	ea42 0206 	orr.w	r2, r2, r6
 8002ab2:	69ce      	ldr	r6, [r1, #28]
 8002ab4:	ea42 0206 	orr.w	r2, r2, r6
 8002ab8:	ea42 0205 	orr.w	r2, r2, r5
 8002abc:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	f022 020f 	bic.w	r2, r2, #15
 8002ac4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	ea42 0204 	orr.w	r2, r2, r4
 8002acc:	611a      	str	r2, [r3, #16]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8002ace:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ad2:	f022 020e 	bic.w	r2, r2, #14
 8002ad6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8002ada:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ade:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8002ae2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  if (VidCfg->ColorCoding == DSI_RGB666)
 8002ae6:	d107      	bne.n	8002af8 <HAL_DSI_ConfigVideoMode+0xe0>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002ae8:	691a      	ldr	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002aea:	688c      	ldr	r4, [r1, #8]
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8002aec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002af0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4322      	orrs	r2, r4
 8002af6:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002af8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002afa:	4d48      	ldr	r5, [pc, #288]	; (8002c1c <HAL_DSI_ConfigVideoMode+0x204>)
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002afc:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8002afe:	402c      	ands	r4, r5
 8002b00:	649c      	str	r4, [r3, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8002b02:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8002b04:	4314      	orrs	r4, r2
 8002b06:	649c      	str	r4, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002b0a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002b0c:	402a      	ands	r2, r5
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002b0e:	6b4d      	ldr	r5, [r1, #52]	; 0x34
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8002b10:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b14:	4322      	orrs	r2, r4
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002b16:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8002b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8002b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b1c:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002b20:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b28:	4322      	orrs	r2, r4
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002b2a:	4c3d      	ldr	r4, [pc, #244]	; (8002c20 <HAL_DSI_ConfigVideoMode+0x208>)
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8002b2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b30:	4022      	ands	r2, r4
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002b34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b36:	432a      	orrs	r2, r5

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002b38:	6b8d      	ldr	r5, [r1, #56]	; 0x38
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8002b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8002b3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b3e:	4022      	ands	r2, r4
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8002b42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b44:	432a      	orrs	r2, r5
 8002b46:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002b48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b4a:	4022      	ands	r2, r4
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002b4c:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8002b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b52:	4322      	orrs	r2, r4
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8002b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b58:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8002b5c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002b60:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002b62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b64:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8002b66:	4322      	orrs	r2, r4

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002b68:	6c4c      	ldr	r4, [r1, #68]	; 0x44
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8002b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8002b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b72:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b76:	4322      	orrs	r2, r4

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002b78:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8002b82:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002b8a:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8002b8c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002b94:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002b96:	699a      	ldr	r2, [r3, #24]
 8002b98:	4322      	orrs	r2, r4

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002b9a:	6d0c      	ldr	r4, [r1, #80]	; 0x50
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8002b9c:	619a      	str	r2, [r3, #24]
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8002b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba8:	4322      	orrs	r2, r4

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002baa:	6d4c      	ldr	r4, [r1, #84]	; 0x54
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8002bae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	4322      	orrs	r2, r4

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002bba:	6d8c      	ldr	r4, [r1, #88]	; 0x58
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8002bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8002bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8002bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc8:	4322      	orrs	r2, r4
 8002bca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002bce:	6dcc      	ldr	r4, [r1, #92]	; 0x5c
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002bd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd8:	4322      	orrs	r2, r4

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002bda:	6e0c      	ldr	r4, [r1, #96]	; 0x60
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8002bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8002bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be8:	4322      	orrs	r2, r4

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002bea:	6e4c      	ldr	r4, [r1, #100]	; 0x64

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002bec:	6e89      	ldr	r1, [r1, #104]	; 0x68
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8002bf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bf6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8002bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bfa:	4322      	orrs	r2, r4
 8002bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8002bfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c04:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8002c06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002c10:	4618      	mov	r0, r3
}
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdsi);
 8002c14:	2002      	movs	r0, #2
 8002c16:	e7fc      	b.n	8002c12 <HAL_DSI_ConfigVideoMode+0x1fa>
 8002c18:	ffffe000 	.word	0xffffe000
 8002c1c:	fffff000 	.word	0xfffff000
 8002c20:	fffffc00 	.word	0xfffffc00

08002c24 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c24:	7c03      	ldrb	r3, [r0, #16]
{
 8002c26:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d01c      	beq.n	8002c66 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8002c2c:	6802      	ldr	r2, [r0, #0]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	6851      	ldr	r1, [r2, #4]
 8002c34:	f041 0101 	orr.w	r1, r1, #1
 8002c38:	6051      	str	r1, [r2, #4]
 8002c3a:	6851      	ldr	r1, [r2, #4]
 8002c3c:	f001 0101 	and.w	r1, r1, #1
 8002c40:	9100      	str	r1, [sp, #0]
 8002c42:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8002c4a:	f041 0108 	orr.w	r1, r1, #8
 8002c4e:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8002c52:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c56:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002c58:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002c5a:	f002 0208 	and.w	r2, r2, #8
 8002c5e:	9201      	str	r2, [sp, #4]
 8002c60:	9a01      	ldr	r2, [sp, #4]
}
 8002c62:	b002      	add	sp, #8
 8002c64:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8002c66:	2002      	movs	r0, #2
 8002c68:	e7fb      	b.n	8002c62 <HAL_DSI_Start+0x3e>

08002c6a <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8002c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c6c:	7c05      	ldrb	r5, [r0, #16]
{
 8002c6e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8002c70:	2d01      	cmp	r5, #1
 8002c72:	d009      	beq.n	8002c88 <HAL_DSI_ShortWrite+0x1e>
 8002c74:	2501      	movs	r5, #1
 8002c76:	7405      	strb	r5, [r0, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8002c78:	9d06      	ldr	r5, [sp, #24]
 8002c7a:	9500      	str	r5, [sp, #0]
 8002c7c:	f7ff fdae 	bl	80027dc <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002c80:	2300      	movs	r3, #0
 8002c82:	7423      	strb	r3, [r4, #16]

  return status;
}
 8002c84:	b003      	add	sp, #12
 8002c86:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8002c88:	2002      	movs	r0, #2
 8002c8a:	e7fb      	b.n	8002c84 <HAL_DSI_ShortWrite+0x1a>

08002c8c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8002c8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c90:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8002c92:	7c03      	ldrb	r3, [r0, #16]
{
 8002c94:	4606      	mov	r6, r0
 8002c96:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8002c98:	2b01      	cmp	r3, #1
{
 8002c9a:	4615      	mov	r5, r2
 8002c9c:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
  __HAL_LOCK(hdsi);
 8002ca0:	d052      	beq.n	8002d48 <HAL_DSI_LongWrite+0xbc>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca6:	f7ff fab9 	bl	800221c <HAL_GetTick>
 8002caa:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002cac:	6832      	ldr	r2, [r6, #0]
 8002cae:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002cb0:	f013 0a01 	ands.w	sl, r3, #1
 8002cb4:	d019      	beq.n	8002cea <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002cb6:	2c03      	cmp	r4, #3
 8002cb8:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8002cba:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8002cbe:	bf28      	it	cs
 8002cc0:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8002cc2:	4283      	cmp	r3, r0
 8002cc4:	d11d      	bne.n	8002d02 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8002cc6:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8002cc8:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8002cca:	f8c2 9070 	str.w	r9, [r2, #112]	; 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8002cce:	bb10      	cbnz	r0, 8002d16 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8002cd0:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002cd2:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8002cd6:	0223      	lsls	r3, r4, #8
 8002cd8:	0224      	lsls	r4, r4, #8
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8002ce0:	431d      	orrs	r5, r3
 8002ce2:	432c      	orrs	r4, r5
 8002ce4:	66d4      	str	r4, [r2, #108]	; 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002ce6:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8002ce8:	e009      	b.n	8002cfe <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002cea:	f7ff fa97 	bl	800221c <HAL_GetTick>
 8002cee:	eba0 000b 	sub.w	r0, r0, fp
 8002cf2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002cf6:	d9d9      	bls.n	8002cac <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8002cf8:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8002cfa:	f886 a010 	strb.w	sl, [r6, #16]
}
 8002cfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8002d02:	f818 1003 	ldrb.w	r1, [r8, r3]
 8002d06:	3301      	adds	r3, #1
 8002d08:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8002d0c:	fa01 f10c 	lsl.w	r1, r1, ip
 8002d10:	ea49 0901 	orr.w	r9, r9, r1
 8002d14:	e7d5      	b.n	8002cc2 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d16:	2804      	cmp	r0, #4
    fifoword = 0U;
 8002d18:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d1c:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8002d1e:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8002d20:	bf28      	it	cs
 8002d22:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d26:	f813 8001 	ldrb.w	r8, [r3, r1]
 8002d2a:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8002d2e:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d30:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8002d34:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8002d36:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8002d3a:	d1f4      	bne.n	8002d26 <HAL_DSI_LongWrite+0x9a>
    hdsi->Instance->GPDR = fifoword;
 8002d3c:	f8c2 c070 	str.w	ip, [r2, #112]	; 0x70
    uicounter -= nbBytes;
 8002d40:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8002d44:	4473      	add	r3, lr
 8002d46:	e7c2      	b.n	8002cce <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8002d48:	2002      	movs	r0, #2
 8002d4a:	e7d8      	b.n	8002cfe <HAL_DSI_LongWrite+0x72>

08002d4c <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8002d4c:	2300      	movs	r3, #0
{
 8002d4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d50:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8002d54:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d56:	6803      	ldr	r3, [r0, #0]
{
 8002d58:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d5a:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d5c:	591a      	ldr	r2, [r3, r4]
 8002d5e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d62:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8002d64:	591b      	ldr	r3, [r3, r4]
 8002d66:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d68:	f7ff fa5e 	bl	8002228 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d6c:	682b      	ldr	r3, [r5, #0]
 8002d6e:	9a01      	ldr	r2, [sp, #4]
 8002d70:	511a      	str	r2, [r3, r4]
}
 8002d72:	b003      	add	sp, #12
 8002d74:	bd30      	pop	{r4, r5, pc}
	...

08002d78 <ETH_MACDMAConfig>:
{
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002d7c:	b129      	cbz	r1, 8002d8a <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 8002d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d86:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002d8a:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8002d8c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002d8e:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 8002d90:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002d92:	bf0c      	ite	eq
 8002d94:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8002d98:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 8002d9a:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 8002d9e:	4303      	orrs	r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002da0:	482d      	ldr	r0, [pc, #180]	; (8002e58 <ETH_MACDMAConfig+0xe0>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002da6:	4028      	ands	r0, r5
 8002da8:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002daa:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002dac:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002dae:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8002db0:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002db2:	f7ff fa39 	bl	8002228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002db6:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002db8:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dba:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8002dbc:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002dbe:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8002dc0:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc2:	f7ff fa31 	bl	8002228 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002dc6:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dc8:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8002dca:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002dcc:	2500      	movs	r5, #0
 8002dce:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002dd0:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8002dd2:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002dd4:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8002dd8:	0412      	lsls	r2, r2, #16
 8002dda:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002de0:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8002de2:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002de4:	f7ff fa20 	bl	8002228 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002de8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dea:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8002dec:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002dee:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8002df0:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002df2:	f7ff fa19 	bl	8002228 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002df6:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002df8:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002dfa:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8002dfc:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8002dfe:	f241 0518 	movw	r5, #4120	; 0x1018
 8002e02:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002e04:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002e06:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8002e0a:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002e0e:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8002e10:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e12:	f7ff fa09 	bl	8002228 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002e16:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e18:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e1a:	4a11      	ldr	r2, [pc, #68]	; (8002e60 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
 8002e1c:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e22:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8002e24:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e26:	f7ff f9ff 	bl	8002228 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002e30:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002e32:	69a3      	ldr	r3, [r4, #24]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002e38:	f241 011c 	movw	r1, #4124	; 0x101c
 8002e3c:	5853      	ldr	r3, [r2, r1]
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e46:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e48:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002e4c:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002e4e:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002e50:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <ETH_MACDMAConfig+0xf0>)
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
 8002e58:	ff20810f 	.word	0xff20810f
 8002e5c:	f8de3f23 	.word	0xf8de3f23
 8002e60:	02c12080 	.word	0x02c12080
 8002e64:	40028040 	.word	0x40028040
 8002e68:	40028044 	.word	0x40028044

08002e6c <HAL_ETH_DMATxDescListInit>:
{
 8002e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8002e70:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002e74:	2c01      	cmp	r4, #1
 8002e76:	f04f 0402 	mov.w	r4, #2
 8002e7a:	d031      	beq.n	8002ee0 <HAL_ETH_DMATxDescListInit+0x74>
 8002e7c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002e7e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002e82:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
 8002e86:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8002e88:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002e8c:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8002e90:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8002e92:	f103 3eff 	add.w	lr, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 8002e96:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8002e98:	429d      	cmp	r5, r3
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	f241 0310 	movw	r3, #4112	; 0x1010
 8002ea2:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002eb0:	4618      	mov	r0, r3
}
 8002eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002eb6:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002eba:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002ebc:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002ebe:	69c6      	ldr	r6, [r0, #28]
 8002ec0:	b91e      	cbnz	r6, 8002eca <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002ec2:	6826      	ldr	r6, [r4, #0]
 8002ec4:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8002ec8:	6026      	str	r6, [r4, #0]
 8002eca:	f104 0620 	add.w	r6, r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002ece:	45ae      	cmp	lr, r5
 8002ed0:	bf94      	ite	ls
 8002ed2:	4688      	movls	r8, r1
 8002ed4:	46b0      	movhi	r8, r6
 8002ed6:	3501      	adds	r5, #1
 8002ed8:	f8c4 800c 	str.w	r8, [r4, #12]
 8002edc:	4634      	mov	r4, r6
 8002ede:	e7db      	b.n	8002e98 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	e7e6      	b.n	8002eb2 <HAL_ETH_DMATxDescListInit+0x46>

08002ee4 <HAL_ETH_DMARxDescListInit>:
{
 8002ee4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8002ee8:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8002eec:	2c01      	cmp	r4, #1
 8002eee:	f04f 0402 	mov.w	r4, #2
 8002ef2:	d02f      	beq.n	8002f54 <HAL_ETH_DMARxDescListInit+0x70>
 8002ef4:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002ef6:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002efa:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
 8002efe:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8002f00:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f04:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 8002f08:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f0a:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8002f0e:	f103 38ff 	add.w	r8, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 8002f12:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 8002f14:	42ab      	cmp	r3, r5
 8002f16:	d10c      	bne.n	8002f32 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002f18:	6802      	ldr	r2, [r0, #0]
 8002f1a:	f241 030c 	movw	r3, #4108	; 0x100c
 8002f1e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8002f26:	2300      	movs	r3, #0
 8002f28:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8002f2c:	4618      	mov	r0, r3
}
 8002f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f32:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002f36:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f38:	60a6      	str	r6, [r4, #8]
 8002f3a:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f3e:	f8c4 c004 	str.w	ip, [r4, #4]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002f42:	45a8      	cmp	r8, r5
 8002f44:	bf94      	ite	ls
 8002f46:	4689      	movls	r9, r1
 8002f48:	46b1      	movhi	r9, r6
 8002f4a:	3501      	adds	r5, #1
 8002f4c:	f8c4 900c 	str.w	r9, [r4, #12]
 8002f50:	4634      	mov	r4, r6
 8002f52:	e7df      	b.n	8002f14 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 8002f54:	4620      	mov	r0, r4
 8002f56:	e7ea      	b.n	8002f2e <HAL_ETH_DMARxDescListInit+0x4a>

08002f58 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8002f58:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	f04f 0302 	mov.w	r3, #2
{
 8002f62:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8002f64:	d066      	beq.n	8003034 <HAL_ETH_TransmitFrame+0xdc>
 8002f66:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8002f68:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8002f6c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8002f70:	b929      	cbnz	r1, 8002f7e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8002f72:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002f76:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 8002f7a:	4610      	mov	r0, r2
}
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002f80:	681c      	ldr	r4, [r3, #0]
 8002f82:	2c00      	cmp	r4, #0
 8002f84:	da06      	bge.n	8002f94 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002f86:	2312      	movs	r3, #18
 8002f88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8002f92:	e7f2      	b.n	8002f7a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002f94:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8002f98:	42a1      	cmp	r1, r4
 8002f9a:	d92c      	bls.n	8002ff6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002f9c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002fa0:	fb04 1412 	mls	r4, r4, r2, r1
 8002fa4:	b32c      	cbz	r4, 8002ff2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8002fa6:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002fa8:	4c23      	ldr	r4, [pc, #140]	; (8003038 <HAL_ETH_TransmitFrame+0xe0>)
 8002faa:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002fae:	f240 57f4 	movw	r7, #1524	; 0x5f4
      if (i == (bufcount-1))
 8002fb2:	1e56      	subs	r6, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8002fb4:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002fb8:	2400      	movs	r4, #0
 8002fba:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002fbe:	681d      	ldr	r5, [r3, #0]
 8002fc0:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8002fc4:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8002fc6:	b91c      	cbnz	r4, 8002fd0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002fc8:	681d      	ldr	r5, [r3, #0]
 8002fca:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8002fce:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8002fd0:	42a6      	cmp	r6, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002fd2:	605f      	str	r7, [r3, #4]
      if (i == (bufcount-1))
 8002fd4:	d104      	bne.n	8002fe0 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002fd6:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002fd8:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002fda:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002fde:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002fe0:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8002fe2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002fe4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8002fe8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002fea:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002fec:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8002fee:	d1e6      	bne.n	8002fbe <HAL_ETH_TransmitFrame+0x66>
 8002ff0:	e00d      	b.n	800300e <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8002ff2:	2a01      	cmp	r2, #1
 8002ff4:	d1d8      	bne.n	8002fa8 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002ff6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002ff8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002ffc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003000:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003002:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800300a:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003010:	f241 0214 	movw	r2, #4116	; 0x1014
 8003014:	6803      	ldr	r3, [r0, #0]
 8003016:	5899      	ldr	r1, [r3, r2]
 8003018:	0749      	lsls	r1, r1, #29
 800301a:	d505      	bpl.n	8003028 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800301c:	2104      	movs	r1, #4
 800301e:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 8003020:	f241 0204 	movw	r2, #4100	; 0x1004
 8003024:	2100      	movs	r1, #0
 8003026:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 8003028:	2301      	movs	r3, #1
 800302a:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800302e:	2300      	movs	r3, #0
 8003030:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8003034:	4618      	mov	r0, r3
 8003036:	e7a1      	b.n	8002f7c <HAL_ETH_TransmitFrame+0x24>
 8003038:	fffffa0c 	.word	0xfffffa0c

0800303c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800303c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003040:	2b01      	cmp	r3, #1
 8003042:	f04f 0302 	mov.w	r3, #2
{
 8003046:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8003048:	d03b      	beq.n	80030c2 <HAL_ETH_GetReceivedFrame_IT+0x86>
 800304a:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800304c:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 800304e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8003052:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8003054:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003058:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	2a00      	cmp	r2, #0
 800305e:	db01      	blt.n	8003064 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8003060:	3c01      	subs	r4, #1
 8003062:	d106      	bne.n	8003072 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8003064:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8003066:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8003068:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800306c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8003070:	e027      	b.n	80030c2 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68dd      	ldr	r5, [r3, #12]
 8003076:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800307a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800307e:	d103      	bne.n	8003088 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003080:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003082:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003084:	6285      	str	r5, [r0, #40]	; 0x28
 8003086:	e7e7      	b.n	8003058 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003088:	681e      	ldr	r6, [r3, #0]
 800308a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800308c:	f416 7f40 	tst.w	r6, #768	; 0x300
 8003090:	f102 0201 	add.w	r2, r2, #1
 8003094:	d101      	bne.n	800309a <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8003096:	6382      	str	r2, [r0, #56]	; 0x38
 8003098:	e7f4      	b.n	8003084 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1)
 800309a:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 800309c:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80030a0:	bf08      	it	eq
 80030a2:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f3c3 430d 	ubfx	r3, r3, #16, #14
 80030aa:	3b04      	subs	r3, #4
 80030ac:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80030ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80030b0:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80030b2:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80030b4:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80030bc:	2300      	movs	r3, #0
 80030be:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	bd70      	pop	{r4, r5, r6, pc}

080030c6 <HAL_ETH_TxCpltCallback>:
 80030c6:	4770      	bx	lr

080030c8 <HAL_ETH_ErrorCallback>:
 80030c8:	4770      	bx	lr

080030ca <HAL_ETH_IRQHandler>:
{
 80030ca:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80030cc:	6802      	ldr	r2, [r0, #0]
 80030ce:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80030d2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80030d4:	5995      	ldr	r5, [r2, r6]
 80030d6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80030da:	d021      	beq.n	8003120 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 80030dc:	f7fd fcfa 	bl	8000ad4 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	2240      	movs	r2, #64	; 0x40
 80030e4:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80030ec:	2300      	movs	r3, #0
 80030ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f241 0514 	movw	r5, #4116	; 0x1014
 80030f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030fc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80030fe:	595b      	ldr	r3, [r3, r5]
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	d50c      	bpl.n	800311e <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8003104:	4620      	mov	r0, r4
 8003106:	f7ff ffdf 	bl	80030c8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003110:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8003112:	2301      	movs	r3, #1
 8003114:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8003118:	2300      	movs	r3, #0
 800311a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800311e:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003120:	5993      	ldr	r3, [r2, r6]
 8003122:	07da      	lsls	r2, r3, #31
 8003124:	d5e5      	bpl.n	80030f2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8003126:	f7ff ffce 	bl	80030c6 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800312a:	2301      	movs	r3, #1
 800312c:	6822      	ldr	r2, [r4, #0]
 800312e:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8003130:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8003134:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003138:	e7db      	b.n	80030f2 <HAL_ETH_IRQHandler+0x28>

0800313a <HAL_ETH_ReadPHYRegister>:
{
 800313a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800313c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8003140:	4605      	mov	r5, r0
 8003142:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003144:	2b82      	cmp	r3, #130	; 0x82
 8003146:	d030      	beq.n	80031aa <HAL_ETH_ReadPHYRegister+0x70>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003148:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800314a:	018c      	lsls	r4, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800314c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003150:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8003154:	6803      	ldr	r3, [r0, #0]
 8003156:	f044 0401 	orr.w	r4, r4, #1
 800315a:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800315c:	f000 001c 	and.w	r0, r0, #28
 8003160:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003162:	8a2c      	ldrh	r4, [r5, #16]
 8003164:	02e4      	lsls	r4, r4, #11
 8003166:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003168:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 800316a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 800316c:	f7ff f856 	bl	800221c <HAL_GetTick>
 8003170:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003172:	f014 0001 	ands.w	r0, r4, #1
 8003176:	d107      	bne.n	8003188 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003178:	682b      	ldr	r3, [r5, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	b29b      	uxth	r3, r3
 800317e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8003180:	2301      	movs	r3, #1
 8003182:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8003186:	e00c      	b.n	80031a2 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003188:	f7ff f848 	bl	800221c <HAL_GetTick>
 800318c:	1bc0      	subs	r0, r0, r7
 800318e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003192:	d307      	bcc.n	80031a4 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8003194:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8003196:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8003198:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800319c:	2300      	movs	r3, #0
 800319e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 80031a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 80031a4:	682b      	ldr	r3, [r5, #0]
 80031a6:	691c      	ldr	r4, [r3, #16]
 80031a8:	e7e3      	b.n	8003172 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 80031aa:	2002      	movs	r0, #2
 80031ac:	e7f9      	b.n	80031a2 <HAL_ETH_ReadPHYRegister+0x68>

080031ae <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80031ae:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80031b2:	2b42      	cmp	r3, #66	; 0x42
{
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80031b8:	d02e      	beq.n	8003218 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80031ba:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80031bc:	018c      	lsls	r4, r1, #6
 80031be:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80031c0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80031c4:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 80031c8:	6803      	ldr	r3, [r0, #0]
 80031ca:	f044 0403 	orr.w	r4, r4, #3
 80031ce:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80031d0:	f000 001c 	and.w	r0, r0, #28
 80031d4:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80031d6:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80031d8:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80031da:	02e4      	lsls	r4, r4, #11
 80031dc:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80031de:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 80031e0:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 80031e2:	f7ff f81b 	bl	800221c <HAL_GetTick>
 80031e6:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031e8:	f014 0001 	ands.w	r0, r4, #1
 80031ec:	d103      	bne.n	80031f6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 80031f4:	e00c      	b.n	8003210 <HAL_ETH_WritePHYRegister+0x62>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80031f6:	f7ff f811 	bl	800221c <HAL_GetTick>
 80031fa:	1b80      	subs	r0, r0, r6
 80031fc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8003200:	d307      	bcc.n	8003212 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8003202:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8003204:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8003206:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800320a:	2300      	movs	r3, #0
 800320c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8003210:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8003212:	682b      	ldr	r3, [r5, #0]
 8003214:	691c      	ldr	r4, [r3, #16]
 8003216:	e7e7      	b.n	80031e8 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8003218:	2002      	movs	r0, #2
 800321a:	e7f9      	b.n	8003210 <HAL_ETH_WritePHYRegister+0x62>

0800321c <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 800321c:	2300      	movs	r3, #0
{
 800321e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8003220:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8003222:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8003224:	2800      	cmp	r0, #0
 8003226:	f000 80dd 	beq.w	80033e4 <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
 800322a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800322e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003232:	b91b      	cbnz	r3, 800323c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8003234:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8003238:	f7fd fbe4 	bl	8000a04 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323c:	4b6a      	ldr	r3, [pc, #424]	; (80033e8 <HAL_ETH_Init+0x1cc>)
 800323e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003240:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003250:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_ETH_Init+0x1d0>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003258:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	6a21      	ldr	r1, [r4, #32]
 800325e:	430a      	orrs	r2, r1
 8003260:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003270:	f7fe ffd4 	bl	800221c <HAL_GetTick>
 8003274:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	07d0      	lsls	r0, r2, #31
 8003280:	d41d      	bmi.n	80032be <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8003282:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8003284:	f000 fdfa 	bl	8003e7c <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003288:	4b59      	ldr	r3, [pc, #356]	; (80033f0 <HAL_ETH_Init+0x1d4>)
 800328a:	4a5a      	ldr	r2, [pc, #360]	; (80033f4 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800328c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003290:	4403      	add	r3, r0
 8003292:	4293      	cmp	r3, r2
 8003294:	d822      	bhi.n	80032dc <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003296:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800329a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800329c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80032a0:	2100      	movs	r1, #0
 80032a2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80032a4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80032a6:	f7ff ff82 	bl	80031ae <HAL_ETH_WritePHYRegister>
 80032aa:	4605      	mov	r5, r0
 80032ac:	b368      	cbz	r0, 800330a <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 80032ae:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80032b0:	2101      	movs	r1, #1
 80032b2:	4620      	mov	r0, r4
 80032b4:	f7ff fd60 	bl	8002d78 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 80032b8:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 80032bc:	e00b      	b.n	80032d6 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80032be:	f7fe ffad 	bl	800221c <HAL_GetTick>
 80032c2:	1b40      	subs	r0, r0, r5
 80032c4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80032c8:	d9d5      	bls.n	8003276 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032ca:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80032cc:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032ce:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80032d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80032d6:	4628      	mov	r0, r5
 80032d8:	b003      	add	sp, #12
 80032da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_ETH_Init+0x1dc>)
 80032de:	4a47      	ldr	r2, [pc, #284]	; (80033fc <HAL_ETH_Init+0x1e0>)
 80032e0:	4403      	add	r3, r0
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d802      	bhi.n	80032ec <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80032e6:	f045 050c 	orr.w	r5, r5, #12
 80032ea:	e7d6      	b.n	800329a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80032ec:	4b44      	ldr	r3, [pc, #272]	; (8003400 <HAL_ETH_Init+0x1e4>)
 80032ee:	4a45      	ldr	r2, [pc, #276]	; (8003404 <HAL_ETH_Init+0x1e8>)
 80032f0:	4403      	add	r3, r0
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d9d1      	bls.n	800329a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80032f6:	4b44      	ldr	r3, [pc, #272]	; (8003408 <HAL_ETH_Init+0x1ec>)
 80032f8:	4a44      	ldr	r2, [pc, #272]	; (800340c <HAL_ETH_Init+0x1f0>)
 80032fa:	4403      	add	r3, r0
 80032fc:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80032fe:	bf94      	ite	ls
 8003300:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003304:	f045 0510 	orrhi.w	r5, r5, #16
 8003308:	e7c7      	b.n	800329a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 800330a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800330e:	f7fe ff8b 	bl	8002228 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003312:	6863      	ldr	r3, [r4, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d053      	beq.n	80033c0 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8003318:	f7fe ff80 	bl	800221c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800331c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003320:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003322:	466a      	mov	r2, sp
 8003324:	2101      	movs	r1, #1
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff ff07 	bl	800313a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800332c:	f7fe ff76 	bl	800221c <HAL_GetTick>
 8003330:	1b80      	subs	r0, r0, r6
 8003332:	42b8      	cmp	r0, r7
 8003334:	d90b      	bls.n	800334e <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 8003336:	2101      	movs	r1, #1
 8003338:	4620      	mov	r0, r4
 800333a:	f7ff fd1d 	bl	8002d78 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800333e:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8003340:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8003342:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8003346:	2300      	movs	r3, #0
 8003348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800334c:	e7c3      	b.n	80032d6 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800334e:	9b00      	ldr	r3, [sp, #0]
 8003350:	0759      	lsls	r1, r3, #29
 8003352:	d5e6      	bpl.n	8003322 <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003354:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003358:	2100      	movs	r1, #0
 800335a:	4620      	mov	r0, r4
 800335c:	f7ff ff27 	bl	80031ae <HAL_ETH_WritePHYRegister>
 8003360:	2800      	cmp	r0, #0
 8003362:	d1a4      	bne.n	80032ae <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8003364:	f7fe ff5a 	bl	800221c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003368:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800336c:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800336e:	466a      	mov	r2, sp
 8003370:	2101      	movs	r1, #1
 8003372:	4620      	mov	r0, r4
 8003374:	f7ff fee1 	bl	800313a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003378:	f7fe ff50 	bl	800221c <HAL_GetTick>
 800337c:	1b80      	subs	r0, r0, r6
 800337e:	42b8      	cmp	r0, r7
 8003380:	d8d9      	bhi.n	8003336 <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003382:	9b00      	ldr	r3, [sp, #0]
 8003384:	069a      	lsls	r2, r3, #26
 8003386:	d5f2      	bpl.n	800336e <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003388:	466a      	mov	r2, sp
 800338a:	211f      	movs	r1, #31
 800338c:	4620      	mov	r0, r4
 800338e:	f7ff fed4 	bl	800313a <HAL_ETH_ReadPHYRegister>
 8003392:	2800      	cmp	r0, #0
 8003394:	d18b      	bne.n	80032ae <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003396:	9b00      	ldr	r3, [sp, #0]
 8003398:	f013 0210 	ands.w	r2, r3, #16
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800339c:	bf18      	it	ne
 800339e:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80033a2:	075b      	lsls	r3, r3, #29
      (heth->Init).Speed = ETH_SPEED_10M; 
 80033a4:	bf4c      	ite	mi
 80033a6:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 80033a8:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80033ac:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 80033ae:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 80033b0:	2100      	movs	r1, #0
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7ff fce0 	bl	8002d78 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 80033be:	e78a      	b.n	80032d6 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80033c0:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80033c4:	4629      	mov	r1, r5
 80033c6:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80033c8:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80033ca:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 80033ce:	b292      	uxth	r2, r2
 80033d0:	f7ff feed 	bl	80031ae <HAL_ETH_WritePHYRegister>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	f47f af6a 	bne.w	80032ae <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 80033da:	f640 70ff 	movw	r0, #4095	; 0xfff
 80033de:	f7fe ff23 	bl	8002228 <HAL_Delay>
 80033e2:	e7e5      	b.n	80033b0 <HAL_ETH_Init+0x194>
    return HAL_ERROR;
 80033e4:	2501      	movs	r5, #1
 80033e6:	e776      	b.n	80032d6 <HAL_ETH_Init+0xba>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40013800 	.word	0x40013800
 80033f0:	feced300 	.word	0xfeced300
 80033f4:	00e4e1bf 	.word	0x00e4e1bf
 80033f8:	fde9f140 	.word	0xfde9f140
 80033fc:	017d783f 	.word	0x017d783f
 8003400:	fc6c7900 	.word	0xfc6c7900
 8003404:	026259ff 	.word	0x026259ff
 8003408:	fa0a1f00 	.word	0xfa0a1f00
 800340c:	02faf07f 	.word	0x02faf07f

08003410 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8003410:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003414:	2b01      	cmp	r3, #1
{  
 8003416:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003418:	4605      	mov	r5, r0
 800341a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 800341e:	d033      	beq.n	8003488 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8003420:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003422:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8003424:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8003428:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 800342a:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800342c:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800342e:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8003430:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003434:	f042 0208 	orr.w	r2, r2, #8
 8003438:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800343e:	f7fe fef3 	bl	8002228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003442:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003444:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8003446:	682b      	ldr	r3, [r5, #0]
 8003448:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800344a:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	f042 0204 	orr.w	r2, r2, #4
 8003452:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003458:	f7fe fee6 	bl	8002228 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800345c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 800345e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8003460:	9a00      	ldr	r2, [sp, #0]
 8003462:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8003464:	f7ff fc72 	bl	8002d4c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003468:	682a      	ldr	r2, [r5, #0]
 800346a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 800346e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003470:	58d1      	ldr	r1, [r2, r3]
 8003472:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8003476:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003478:	58d1      	ldr	r1, [r2, r3]
 800347a:	f041 0102 	orr.w	r1, r1, #2
 800347e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8003480:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8003484:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8003488:	b002      	add	sp, #8
 800348a:	bd70      	pop	{r4, r5, r6, pc}

0800348c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003490:	680b      	ldr	r3, [r1, #0]
{
 8003492:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003494:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003654 <HAL_GPIO_Init+0x1c8>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003498:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800349a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800349c:	4a6b      	ldr	r2, [pc, #428]	; (800364c <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800349e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8003658 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 80034a2:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a4:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80034a6:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034a8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80034aa:	42ac      	cmp	r4, r5
 80034ac:	f040 80b4 	bne.w	8003618 <HAL_GPIO_Init+0x18c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034b0:	684c      	ldr	r4, [r1, #4]
 80034b2:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80034b6:	2603      	movs	r6, #3
 80034b8:	f024 0c10 	bic.w	ip, r4, #16
 80034bc:	fa06 f60e 	lsl.w	r6, r6, lr
 80034c0:	f10c 37ff 	add.w	r7, ip, #4294967295
 80034c4:	43f6      	mvns	r6, r6
 80034c6:	2f01      	cmp	r7, #1
 80034c8:	d811      	bhi.n	80034ee <HAL_GPIO_Init+0x62>
        temp = GPIOx->OSPEEDR; 
 80034ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80034cc:	ea07 0a06 	and.w	sl, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80034d0:	68cf      	ldr	r7, [r1, #12]
 80034d2:	fa07 f70e 	lsl.w	r7, r7, lr
 80034d6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80034da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80034dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034de:	ea27 0a05 	bic.w	sl, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80034e2:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80034e6:	409f      	lsls	r7, r3
 80034e8:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80034ec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80034ee:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80034f4:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80034f8:	688f      	ldr	r7, [r1, #8]
 80034fa:	fa07 f70e 	lsl.w	r7, r7, lr
 80034fe:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8003502:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003504:	d116      	bne.n	8003534 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3];
 8003506:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800350a:	f003 0b07 	and.w	fp, r3, #7
 800350e:	f04f 0c0f 	mov.w	ip, #15
 8003512:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8003516:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800351a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800351e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8003522:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003526:	690f      	ldr	r7, [r1, #16]
 8003528:	fa07 f70b 	lsl.w	r7, r7, fp
 800352c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8003530:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8003534:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003536:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003538:	f004 0703 	and.w	r7, r4, #3
 800353c:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003540:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8003544:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003546:	00e6      	lsls	r6, r4, #3
 8003548:	d566      	bpl.n	8003618 <HAL_GPIO_Init+0x18c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354a:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 800354e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003552:	f003 0c03 	and.w	ip, r3, #3
 8003556:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800355a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800355e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003562:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 800356a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800356e:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8003572:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003576:	9603      	str	r6, [sp, #12]
 8003578:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800357a:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 800357e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003582:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003586:	4e32      	ldr	r6, [pc, #200]	; (8003650 <HAL_GPIO_Init+0x1c4>)
 8003588:	42b0      	cmp	r0, r6
 800358a:	d04c      	beq.n	8003626 <HAL_GPIO_Init+0x19a>
 800358c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003590:	42b0      	cmp	r0, r6
 8003592:	d04a      	beq.n	800362a <HAL_GPIO_Init+0x19e>
 8003594:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003598:	42b0      	cmp	r0, r6
 800359a:	d048      	beq.n	800362e <HAL_GPIO_Init+0x1a2>
 800359c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035a0:	42b0      	cmp	r0, r6
 80035a2:	d046      	beq.n	8003632 <HAL_GPIO_Init+0x1a6>
 80035a4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035a8:	42b0      	cmp	r0, r6
 80035aa:	d044      	beq.n	8003636 <HAL_GPIO_Init+0x1aa>
 80035ac:	4548      	cmp	r0, r9
 80035ae:	d044      	beq.n	800363a <HAL_GPIO_Init+0x1ae>
 80035b0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80035b4:	42b0      	cmp	r0, r6
 80035b6:	d042      	beq.n	800363e <HAL_GPIO_Init+0x1b2>
 80035b8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035bc:	42b0      	cmp	r0, r6
 80035be:	d040      	beq.n	8003642 <HAL_GPIO_Init+0x1b6>
 80035c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035c4:	42b0      	cmp	r0, r6
 80035c6:	d03e      	beq.n	8003646 <HAL_GPIO_Init+0x1ba>
 80035c8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80035cc:	42b0      	cmp	r0, r6
 80035ce:	bf14      	ite	ne
 80035d0:	260a      	movne	r6, #10
 80035d2:	2609      	moveq	r6, #9
 80035d4:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80035dc:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80035e0:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80035e2:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 80035e6:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80035e8:	bf0c      	ite	eq
 80035ea:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80035ec:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ee:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 80035f2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80035f4:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	bf0c      	ite	eq
 80035f8:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80035fa:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035fc:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8003600:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8003602:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003604:	bf0c      	ite	eq
 8003606:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8003608:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800360a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800360c:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800360e:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8003610:	bf54      	ite	pl
 8003612:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8003614:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8003616:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003618:	3301      	adds	r3, #1
 800361a:	2b10      	cmp	r3, #16
 800361c:	f47f af41 	bne.w	80034a2 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8003620:	b005      	add	sp, #20
 8003622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003626:	2600      	movs	r6, #0
 8003628:	e7d4      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 800362a:	2601      	movs	r6, #1
 800362c:	e7d2      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 800362e:	2602      	movs	r6, #2
 8003630:	e7d0      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 8003632:	2603      	movs	r6, #3
 8003634:	e7ce      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 8003636:	2604      	movs	r6, #4
 8003638:	e7cc      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 800363a:	2605      	movs	r6, #5
 800363c:	e7ca      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 800363e:	2606      	movs	r6, #6
 8003640:	e7c8      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 8003642:	2607      	movs	r6, #7
 8003644:	e7c6      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 8003646:	2608      	movs	r6, #8
 8003648:	e7c4      	b.n	80035d4 <HAL_GPIO_Init+0x148>
 800364a:	bf00      	nop
 800364c:	40013c00 	.word	0x40013c00
 8003650:	40020000 	.word	0x40020000
 8003654:	40023800 	.word	0x40023800
 8003658:	40021400 	.word	0x40021400

0800365c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800365c:	b10a      	cbz	r2, 8003662 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800365e:	6181      	str	r1, [r0, #24]
  }
}
 8003660:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003662:	0409      	lsls	r1, r1, #16
 8003664:	e7fb      	b.n	800365e <HAL_GPIO_WritePin+0x2>

08003666 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003666:	01d2      	lsls	r2, r2, #7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003668:	f8d1 c000 	ldr.w	ip, [r1]
{
 800366c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003670:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003672:	6804      	ldr	r4, [r0, #0]
 8003674:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003676:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800367a:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800367c:	68e5      	ldr	r5, [r4, #12]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800367e:	f04f 0e00 	mov.w	lr, #0
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003682:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003686:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003688:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800368c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003690:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003692:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003694:	68e0      	ldr	r0, [r4, #12]
 8003696:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800369a:	4430      	add	r0, r6
 800369c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036a0:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80036a2:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80036a4:	68e0      	ldr	r0, [r4, #12]
 80036a6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80036aa:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036ac:	6898      	ldr	r0, [r3, #8]
 80036ae:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80036b2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036b4:	6888      	ldr	r0, [r1, #8]
 80036b6:	68e6      	ldr	r6, [r4, #12]
 80036b8:	3001      	adds	r0, #1
 80036ba:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80036be:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036c0:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80036c6:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036c8:	6918      	ldr	r0, [r3, #16]
 80036ca:	f020 0007 	bic.w	r0, r0, #7
 80036ce:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80036d0:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036d2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80036d4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80036d8:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80036dc:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80036e0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80036e4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80036e8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80036ec:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80036f0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80036f2:	6958      	ldr	r0, [r3, #20]
 80036f4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80036f8:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80036fa:	6948      	ldr	r0, [r1, #20]
 80036fc:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80036fe:	69d8      	ldr	r0, [r3, #28]
 8003700:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003704:	f020 0007 	bic.w	r0, r0, #7
 8003708:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800370a:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 800370e:	4305      	orrs	r5, r0
 8003710:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003712:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003714:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003716:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800371a:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800371c:	b31e      	cbz	r6, 8003766 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800371e:	2e01      	cmp	r6, #1
 8003720:	d023      	beq.n	800376a <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003722:	1eb0      	subs	r0, r6, #2
 8003724:	2802      	cmp	r0, #2
 8003726:	d922      	bls.n	800376e <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003728:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800372a:	bf0c      	ite	eq
 800372c:	2002      	moveq	r0, #2
 800372e:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003730:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003732:	eba7 070c 	sub.w	r7, r7, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003736:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800373a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800373c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800373e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003740:	4345      	muls	r5, r0
 8003742:	4378      	muls	r0, r7
 8003744:	3003      	adds	r0, #3
 8003746:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800374a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800374c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800374e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8003752:	f020 0007 	bic.w	r0, r0, #7
 8003756:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003758:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800375a:	58a3      	ldr	r3, [r4, r2]
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	50a3      	str	r3, [r4, r2]
}
 8003762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003766:	2004      	movs	r0, #4
 8003768:	e7e2      	b.n	8003730 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800376a:	2003      	movs	r0, #3
 800376c:	e7e0      	b.n	8003730 <LTDC_SetConfig+0xca>
    tmp = 2U;
 800376e:	2002      	movs	r0, #2
 8003770:	e7de      	b.n	8003730 <LTDC_SetConfig+0xca>

08003772 <HAL_LTDC_MspInit>:
}
 8003772:	4770      	bx	lr

08003774 <HAL_LTDC_Init>:
{
 8003774:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003776:	4604      	mov	r4, r0
 8003778:	2800      	cmp	r0, #0
 800377a:	d063      	beq.n	8003844 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800377c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003780:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003784:	b91b      	cbnz	r3, 800378e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003786:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800378a:	f7ff fff2 	bl	8003772 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800378e:	2302      	movs	r3, #2
 8003790:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	699a      	ldr	r2, [r3, #24]
 8003798:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800379c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800379e:	6999      	ldr	r1, [r3, #24]
 80037a0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80037a4:	4302      	orrs	r2, r0
 80037a6:	68e0      	ldr	r0, [r4, #12]
 80037a8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80037aa:	6920      	ldr	r0, [r4, #16]
 80037ac:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80037ae:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037b0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037b2:	4925      	ldr	r1, [pc, #148]	; (8003848 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80037b4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	400a      	ands	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037c2:	69a0      	ldr	r0, [r4, #24]
 80037c4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80037c6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80037c8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	400a      	ands	r2, r1
 80037ce:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037d6:	6a20      	ldr	r0, [r4, #32]
 80037d8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80037da:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80037dc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	400a      	ands	r2, r1
 80037e2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80037ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80037ec:	4302      	orrs	r2, r0
 80037ee:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	4011      	ands	r1, r2
 80037f4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80037f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003800:	430a      	orrs	r2, r1
 8003802:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003806:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800380a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800380e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003812:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003816:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800381a:	430a      	orrs	r2, r1
 800381c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003820:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003824:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382a:	f042 0206 	orr.w	r2, r2, #6
 800382e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003838:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800383a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800383e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003842:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003844:	2001      	movs	r0, #1
 8003846:	e7fc      	b.n	8003842 <HAL_LTDC_Init+0xce>
 8003848:	f000f800 	.word	0xf000f800

0800384c <HAL_LTDC_ConfigLayer>:
{
 800384c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800384e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8003852:	4606      	mov	r6, r0
 8003854:	468c      	mov	ip, r1
 8003856:	4696      	mov	lr, r2
  __HAL_LOCK(hltdc);
 8003858:	2b01      	cmp	r3, #1
 800385a:	f04f 0002 	mov.w	r0, #2
 800385e:	d01d      	beq.n	800389c <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003860:	2434      	movs	r4, #52	; 0x34
 8003862:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003864:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8003868:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800386a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800386e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003872:	3438      	adds	r4, #56	; 0x38
 8003874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800387c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800387e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003880:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003882:	4630      	mov	r0, r6
 8003884:	4672      	mov	r2, lr
 8003886:	4661      	mov	r1, ip
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003888:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800388a:	f7ff feec 	bl	8003666 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800388e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003890:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003892:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003894:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003898:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800389e <HAL_LTDCEx_StructInitFromVideoConfig>:

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800389e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bf0c      	ite	eq
 80038a4:	2300      	moveq	r3, #0
 80038a6:	f04f 5300 	movne.w	r3, #536870912	; 0x20000000
 80038aa:	60c3      	str	r3, [r0, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80038ac:	6a0b      	ldr	r3, [r1, #32]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf0c      	ite	eq
 80038b2:	f04f 4380 	moveq.w	r3, #1073741824	; 0x40000000
 80038b6:	2300      	movne	r3, #0
 80038b8:	6083      	str	r3, [r0, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80038ba:	69cb      	ldr	r3, [r1, #28]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
 80038c4:	2300      	movne	r3, #0
 80038c6:	6043      	str	r3, [r0, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80038c8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	6182      	str	r2, [r0, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80038ce:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80038d0:	4413      	add	r3, r2
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	6202      	str	r2, [r0, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive - 1U;
 80038d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80038d8:	4413      	add	r3, r2
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	6282      	str	r2, [r0, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80038de:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80038e0:	3a01      	subs	r2, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	6303      	str	r3, [r0, #48]	; 0x30

  return HAL_OK;
}
 80038e6:	2000      	movs	r0, #0
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80038ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038f2:	4c19      	ldr	r4, [pc, #100]	; (8003958 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800390c:	f7fe fc86 	bl	800221c <HAL_GetTick>
 8003910:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003912:	6863      	ldr	r3, [r4, #4]
 8003914:	03da      	lsls	r2, r3, #15
 8003916:	d50c      	bpl.n	8003932 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003920:	f7fe fc7c 	bl	800221c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003924:	4c0c      	ldr	r4, [pc, #48]	; (8003958 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8003926:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003928:	6863      	ldr	r3, [r4, #4]
 800392a:	039b      	lsls	r3, r3, #14
 800392c:	d50a      	bpl.n	8003944 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800392e:	2000      	movs	r0, #0
 8003930:	e006      	b.n	8003940 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003932:	f7fe fc73 	bl	800221c <HAL_GetTick>
 8003936:	1b40      	subs	r0, r0, r5
 8003938:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800393c:	d9e9      	bls.n	8003912 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 800393e:	2003      	movs	r0, #3
}
 8003940:	b003      	add	sp, #12
 8003942:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003944:	f7fe fc6a 	bl	800221c <HAL_GetTick>
 8003948:	1b40      	subs	r0, r0, r5
 800394a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800394e:	d9eb      	bls.n	8003928 <HAL_PWREx_EnableOverDrive+0x3c>
 8003950:	e7f5      	b.n	800393e <HAL_PWREx_EnableOverDrive+0x52>
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	40007000 	.word	0x40007000

0800395c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800395c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003960:	4604      	mov	r4, r0
 8003962:	b908      	cbnz	r0, 8003968 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003964:	2001      	movs	r0, #1
 8003966:	e03f      	b.n	80039e8 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003968:	6803      	ldr	r3, [r0, #0]
 800396a:	07d8      	lsls	r0, r3, #31
 800396c:	d410      	bmi.n	8003990 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	0799      	lsls	r1, r3, #30
 8003972:	d460      	bmi.n	8003a36 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	0719      	lsls	r1, r3, #28
 8003978:	f100 80a5 	bmi.w	8003ac6 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	075a      	lsls	r2, r3, #29
 8003980:	f100 80c6 	bmi.w	8003b10 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003984:	69a0      	ldr	r0, [r4, #24]
 8003986:	2800      	cmp	r0, #0
 8003988:	f040 8130 	bne.w	8003bec <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 800398c:	2000      	movs	r0, #0
 800398e:	e02b      	b.n	80039e8 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003990:	4b94      	ldr	r3, [pc, #592]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	f002 020c 	and.w	r2, r2, #12
 8003998:	2a04      	cmp	r2, #4
 800399a:	d007      	beq.n	80039ac <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	f002 020c 	and.w	r2, r2, #12
 80039a2:	2a08      	cmp	r2, #8
 80039a4:	d10a      	bne.n	80039bc <HAL_RCC_OscConfig+0x60>
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	025a      	lsls	r2, r3, #9
 80039aa:	d507      	bpl.n	80039bc <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b8d      	ldr	r3, [pc, #564]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	039b      	lsls	r3, r3, #14
 80039b2:	d5dc      	bpl.n	800396e <HAL_RCC_OscConfig+0x12>
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1d9      	bne.n	800396e <HAL_RCC_OscConfig+0x12>
 80039ba:	e7d3      	b.n	8003964 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	4d89      	ldr	r5, [pc, #548]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d113      	bne.n	80039ee <HAL_RCC_OscConfig+0x92>
 80039c6:	682b      	ldr	r3, [r5, #0]
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80039ce:	f7fe fc25 	bl	800221c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d2:	4d84      	ldr	r5, [pc, #528]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80039d4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	039f      	lsls	r7, r3, #14
 80039da:	d4c8      	bmi.n	800396e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe fc1e 	bl	800221c <HAL_GetTick>
 80039e0:	1b80      	subs	r0, r0, r6
 80039e2:	2864      	cmp	r0, #100	; 0x64
 80039e4:	d9f7      	bls.n	80039d6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80039e6:	2003      	movs	r0, #3
}
 80039e8:	b002      	add	sp, #8
 80039ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ee:	b99b      	cbnz	r3, 8003a18 <HAL_RCC_OscConfig+0xbc>
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f6:	602b      	str	r3, [r5, #0]
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a00:	f7fe fc0c 	bl	800221c <HAL_GetTick>
 8003a04:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	0398      	lsls	r0, r3, #14
 8003a0a:	d5b0      	bpl.n	800396e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a0c:	f7fe fc06 	bl	800221c <HAL_GetTick>
 8003a10:	1b80      	subs	r0, r0, r6
 8003a12:	2864      	cmp	r0, #100	; 0x64
 8003a14:	d9f7      	bls.n	8003a06 <HAL_RCC_OscConfig+0xaa>
 8003a16:	e7e6      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	d103      	bne.n	8003a28 <HAL_RCC_OscConfig+0xcc>
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	602b      	str	r3, [r5, #0]
 8003a26:	e7ce      	b.n	80039c6 <HAL_RCC_OscConfig+0x6a>
 8003a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	682b      	ldr	r3, [r5, #0]
 8003a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a34:	e7ca      	b.n	80039cc <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a36:	4b6b      	ldr	r3, [pc, #428]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	f012 0f0c 	tst.w	r2, #12
 8003a3e:	d007      	beq.n	8003a50 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	f002 020c 	and.w	r2, r2, #12
 8003a46:	2a08      	cmp	r2, #8
 8003a48:	d111      	bne.n	8003a6e <HAL_RCC_OscConfig+0x112>
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	0259      	lsls	r1, r3, #9
 8003a4e:	d40e      	bmi.n	8003a6e <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a50:	4b64      	ldr	r3, [pc, #400]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	0792      	lsls	r2, r2, #30
 8003a56:	d502      	bpl.n	8003a5e <HAL_RCC_OscConfig+0x102>
 8003a58:	68e2      	ldr	r2, [r4, #12]
 8003a5a:	2a01      	cmp	r2, #1
 8003a5c:	d182      	bne.n	8003964 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	6921      	ldr	r1, [r4, #16]
 8003a62:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a66:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003a6a:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6c:	e782      	b.n	8003974 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a6e:	68e3      	ldr	r3, [r4, #12]
 8003a70:	4d5c      	ldr	r5, [pc, #368]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003a72:	b1bb      	cbz	r3, 8003aa4 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	f043 0301 	orr.w	r3, r3, #1
 8003a7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fbce 	bl	800221c <HAL_GetTick>
 8003a80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	079f      	lsls	r7, r3, #30
 8003a86:	d507      	bpl.n	8003a98 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	6922      	ldr	r2, [r4, #16]
 8003a8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	e76d      	b.n	8003974 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a98:	f7fe fbc0 	bl	800221c <HAL_GetTick>
 8003a9c:	1b80      	subs	r0, r0, r6
 8003a9e:	2802      	cmp	r0, #2
 8003aa0:	d9ef      	bls.n	8003a82 <HAL_RCC_OscConfig+0x126>
 8003aa2:	e7a0      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aac:	f7fe fbb6 	bl	800221c <HAL_GetTick>
 8003ab0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	682b      	ldr	r3, [r5, #0]
 8003ab4:	0798      	lsls	r0, r3, #30
 8003ab6:	f57f af5d 	bpl.w	8003974 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe fbaf 	bl	800221c <HAL_GetTick>
 8003abe:	1b80      	subs	r0, r0, r6
 8003ac0:	2802      	cmp	r0, #2
 8003ac2:	d9f6      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x156>
 8003ac4:	e78f      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ac6:	6963      	ldr	r3, [r4, #20]
 8003ac8:	4d46      	ldr	r5, [pc, #280]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003aca:	b183      	cbz	r3, 8003aee <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8003acc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fba2 	bl	800221c <HAL_GetTick>
 8003ad8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003adc:	079b      	lsls	r3, r3, #30
 8003ade:	f53f af4d 	bmi.w	800397c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae2:	f7fe fb9b 	bl	800221c <HAL_GetTick>
 8003ae6:	1b80      	subs	r0, r0, r6
 8003ae8:	2802      	cmp	r0, #2
 8003aea:	d9f6      	bls.n	8003ada <HAL_RCC_OscConfig+0x17e>
 8003aec:	e77b      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8003aee:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003af6:	f7fe fb91 	bl	800221c <HAL_GetTick>
 8003afa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003afe:	079f      	lsls	r7, r3, #30
 8003b00:	f57f af3c 	bpl.w	800397c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fe fb8a 	bl	800221c <HAL_GetTick>
 8003b08:	1b80      	subs	r0, r0, r6
 8003b0a:	2802      	cmp	r0, #2
 8003b0c:	d9f6      	bls.n	8003afc <HAL_RCC_OscConfig+0x1a0>
 8003b0e:	e76a      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b10:	4b34      	ldr	r3, [pc, #208]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b14:	00d0      	lsls	r0, r2, #3
 8003b16:	d427      	bmi.n	8003b68 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8003b1a:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2c:	4d2e      	ldr	r5, [pc, #184]	; (8003be8 <HAL_RCC_OscConfig+0x28c>)
 8003b2e:	682b      	ldr	r3, [r5, #0]
 8003b30:	05d9      	lsls	r1, r3, #23
 8003b32:	d51b      	bpl.n	8003b6c <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	68a3      	ldr	r3, [r4, #8]
 8003b36:	4d2b      	ldr	r5, [pc, #172]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d127      	bne.n	8003b8c <HAL_RCC_OscConfig+0x230>
 8003b3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003b48:	f7fe fb68 	bl	800221c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4f25      	ldr	r7, [pc, #148]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8003b4e:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b52:	079b      	lsls	r3, r3, #30
 8003b54:	d53f      	bpl.n	8003bd6 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	f43f af14 	beq.w	8003984 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_RCC_OscConfig+0x288>)
 8003b5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	e70d      	b.n	8003984 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8003b68:	2600      	movs	r6, #0
 8003b6a:	e7df      	b.n	8003b2c <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003b74:	f7fe fb52 	bl	800221c <HAL_GetTick>
 8003b78:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	05da      	lsls	r2, r3, #23
 8003b7e:	d4d9      	bmi.n	8003b34 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fe fb4c 	bl	800221c <HAL_GetTick>
 8003b84:	1bc0      	subs	r0, r0, r7
 8003b86:	2864      	cmp	r0, #100	; 0x64
 8003b88:	d9f7      	bls.n	8003b7a <HAL_RCC_OscConfig+0x21e>
 8003b8a:	e72c      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8c:	b9ab      	cbnz	r3, 8003bba <HAL_RCC_OscConfig+0x25e>
 8003b8e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	672b      	str	r3, [r5, #112]	; 0x70
 8003b9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003b9c:	f023 0304 	bic.w	r3, r3, #4
 8003ba0:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003ba2:	f7fe fb3b 	bl	800221c <HAL_GetTick>
 8003ba6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003baa:	0798      	lsls	r0, r3, #30
 8003bac:	d5d3      	bpl.n	8003b56 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bae:	f7fe fb35 	bl	800221c <HAL_GetTick>
 8003bb2:	1bc0      	subs	r0, r0, r7
 8003bb4:	4540      	cmp	r0, r8
 8003bb6:	d9f7      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x24c>
 8003bb8:	e715      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bba:	2b05      	cmp	r3, #5
 8003bbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003bbe:	d103      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x26c>
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	672b      	str	r3, [r5, #112]	; 0x70
 8003bc6:	e7b9      	b.n	8003b3c <HAL_RCC_OscConfig+0x1e0>
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	672b      	str	r3, [r5, #112]	; 0x70
 8003bce:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	e7b5      	b.n	8003b42 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fe fb21 	bl	800221c <HAL_GetTick>
 8003bda:	eba0 0008 	sub.w	r0, r0, r8
 8003bde:	42a8      	cmp	r0, r5
 8003be0:	d9b6      	bls.n	8003b50 <HAL_RCC_OscConfig+0x1f4>
 8003be2:	e700      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
 8003be4:	40023800 	.word	0x40023800
 8003be8:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bec:	4d3c      	ldr	r5, [pc, #240]	; (8003ce0 <HAL_RCC_OscConfig+0x384>)
 8003bee:	68ab      	ldr	r3, [r5, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d042      	beq.n	8003c7e <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8003bf8:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bfa:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003bfc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c00:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c02:	d12f      	bne.n	8003c64 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb0a 	bl	800221c <HAL_GetTick>
 8003c08:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	682b      	ldr	r3, [r5, #0]
 8003c0c:	0199      	lsls	r1, r3, #6
 8003c0e:	d423      	bmi.n	8003c58 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c10:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003c18:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003c1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c1e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003c22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c24:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003c28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4c2d      	ldr	r4, [pc, #180]	; (8003ce0 <HAL_RCC_OscConfig+0x384>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c2c:	0852      	lsrs	r2, r2, #1
 8003c2e:	3a01      	subs	r2, #1
 8003c30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c34:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003c36:	682b      	ldr	r3, [r5, #0]
 8003c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003c3e:	f7fe faed 	bl	800221c <HAL_GetTick>
 8003c42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	019a      	lsls	r2, r3, #6
 8003c48:	f53f aea0 	bmi.w	800398c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7fe fae6 	bl	800221c <HAL_GetTick>
 8003c50:	1b40      	subs	r0, r0, r5
 8003c52:	2802      	cmp	r0, #2
 8003c54:	d9f6      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2e8>
 8003c56:	e6c6      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c58:	f7fe fae0 	bl	800221c <HAL_GetTick>
 8003c5c:	1b80      	subs	r0, r0, r6
 8003c5e:	2802      	cmp	r0, #2
 8003c60:	d9d3      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2ae>
 8003c62:	e6c0      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8003c64:	f7fe fada 	bl	800221c <HAL_GetTick>
 8003c68:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	019b      	lsls	r3, r3, #6
 8003c6e:	f57f ae8d 	bpl.w	800398c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fe fad3 	bl	800221c <HAL_GetTick>
 8003c76:	1b00      	subs	r0, r0, r4
 8003c78:	2802      	cmp	r0, #2
 8003c7a:	d9f6      	bls.n	8003c6a <HAL_RCC_OscConfig+0x30e>
 8003c7c:	e6b3      	b.n	80039e6 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c7e:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8003c80:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c82:	f43f aeb1 	beq.w	80039e8 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8a:	69e1      	ldr	r1, [r4, #28]
 8003c8c:	428a      	cmp	r2, r1
 8003c8e:	f47f ae69 	bne.w	8003964 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	6a21      	ldr	r1, [r4, #32]
 8003c98:	428a      	cmp	r2, r1
 8003c9a:	f47f ae63 	bne.w	8003964 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c9e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ca2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003caa:	f47f ae5b 	bne.w	8003964 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003cb0:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003cb4:	0852      	lsrs	r2, r2, #1
 8003cb6:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003cbc:	f47f ae52 	bne.w	8003964 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003cc6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003cca:	f47f ae4b 	bne.w	8003964 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003cd0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd4:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
    return HAL_ERROR;
 8003cd8:	bf14      	ite	ne
 8003cda:	2001      	movne	r0, #1
 8003cdc:	2000      	moveq	r0, #0
 8003cde:	e683      	b.n	80039e8 <HAL_RCC_OscConfig+0x8c>
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce4:	4913      	ldr	r1, [pc, #76]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003ce6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce8:	688b      	ldr	r3, [r1, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x16>
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf6:	4810      	ldr	r0, [pc, #64]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8003cf8:	e000      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8003cfa:	4810      	ldr	r0, [pc, #64]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x58>)
}
 8003cfc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cfe:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d00:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d02:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003d10:	bf1a      	itte	ne
 8003d12:	480a      	ldrne	r0, [pc, #40]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x58>)
 8003d14:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4808      	ldreq	r0, [pc, #32]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x54>)
 8003d18:	fba1 0100 	umull	r0, r1, r1, r0
 8003d1c:	f7fc faf8 	bl	8000310 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x50>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003d28:	3301      	adds	r3, #1
 8003d2a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8003d2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d30:	e7e4      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x18>
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	017d7840 	.word	0x017d7840

08003d40 <HAL_RCC_ClockConfig>:
{
 8003d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d44:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003d46:	4604      	mov	r4, r0
 8003d48:	b910      	cbnz	r0, 8003d50 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
}
 8003d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d50:	4a45      	ldr	r2, [pc, #276]	; (8003e68 <HAL_RCC_ClockConfig+0x128>)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d328      	bcc.n	8003dae <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	078f      	lsls	r7, r1, #30
 8003d60:	d430      	bmi.n	8003dc4 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d62:	07c8      	lsls	r0, r1, #31
 8003d64:	d443      	bmi.n	8003dee <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <HAL_RCC_ClockConfig+0x128>)
 8003d68:	6813      	ldr	r3, [r2, #0]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	d866      	bhi.n	8003e40 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d72:	6822      	ldr	r2, [r4, #0]
 8003d74:	0751      	lsls	r1, r2, #29
 8003d76:	d46f      	bmi.n	8003e58 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	0713      	lsls	r3, r2, #28
 8003d7a:	d507      	bpl.n	8003d8c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d7c:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	6893      	ldr	r3, [r2, #8]
 8003d82:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d86:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d8a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d8c:	f7ff ffaa 	bl	8003ce4 <HAL_RCC_GetSysClockFreq>
 8003d90:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003d92:	4a37      	ldr	r2, [pc, #220]	; (8003e70 <HAL_RCC_ClockConfig+0x130>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003d9a:	5cd3      	ldrb	r3, [r2, r3]
 8003d9c:	40d8      	lsrs	r0, r3
 8003d9e:	4b35      	ldr	r3, [pc, #212]	; (8003e74 <HAL_RCC_ClockConfig+0x134>)
 8003da0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003da2:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_ClockConfig+0x138>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f7fd f967 	bl	8001078 <HAL_InitTick>
  return HAL_OK;
 8003daa:	2000      	movs	r0, #0
 8003dac:	e7ce      	b.n	8003d4c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	f023 030f 	bic.w	r3, r3, #15
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	428b      	cmp	r3, r1
 8003dc0:	d1c3      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xa>
 8003dc2:	e7cb      	b.n	8003d5c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	f011 0f04 	tst.w	r1, #4
 8003dc8:	4b28      	ldr	r3, [pc, #160]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003dd2:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	070e      	lsls	r6, r1, #28
 8003dd6:	d503      	bpl.n	8003de0 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003dde:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68a0      	ldr	r0, [r4, #8]
 8003de4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003de8:	4302      	orrs	r2, r0
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	e7b9      	b.n	8003d62 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	6861      	ldr	r1, [r4, #4]
 8003df0:	4b1e      	ldr	r3, [pc, #120]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003df2:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df4:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df6:	d11b      	bne.n	8003e30 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	d0a5      	beq.n	8003d4a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e00:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e04:	4e19      	ldr	r6, [pc, #100]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e06:	f022 0203 	bic.w	r2, r2, #3
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003e0e:	f7fe fa05 	bl	800221c <HAL_GetTick>
 8003e12:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e14:	68b3      	ldr	r3, [r6, #8]
 8003e16:	6862      	ldr	r2, [r4, #4]
 8003e18:	f003 030c 	and.w	r3, r3, #12
 8003e1c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003e20:	d0a1      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e22:	f7fe f9fb 	bl	800221c <HAL_GetTick>
 8003e26:	1bc0      	subs	r0, r0, r7
 8003e28:	4540      	cmp	r0, r8
 8003e2a:	d9f3      	bls.n	8003e14 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	e78d      	b.n	8003d4c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e30:	2902      	cmp	r1, #2
 8003e32:	d102      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003e38:	e7e0      	b.n	8003dfc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	f012 0f02 	tst.w	r2, #2
 8003e3e:	e7dd      	b.n	8003dfc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e40:	6813      	ldr	r3, [r2, #0]
 8003e42:	f023 030f 	bic.w	r3, r3, #15
 8003e46:	432b      	orrs	r3, r5
 8003e48:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	6813      	ldr	r3, [r2, #0]
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	42ab      	cmp	r3, r5
 8003e52:	f47f af7a 	bne.w	8003d4a <HAL_RCC_ClockConfig+0xa>
 8003e56:	e78c      	b.n	8003d72 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4904      	ldr	r1, [pc, #16]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003e5a:	68e0      	ldr	r0, [r4, #12]
 8003e5c:	688b      	ldr	r3, [r1, #8]
 8003e5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003e62:	4303      	orrs	r3, r0
 8003e64:	608b      	str	r3, [r1, #8]
 8003e66:	e787      	b.n	8003d78 <HAL_RCC_ClockConfig+0x38>
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	0801493d 	.word	0x0801493d
 8003e74:	20000034 	.word	0x20000034
 8003e78:	2000003c 	.word	0x2000003c

08003e7c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003e7c:	4b01      	ldr	r3, [pc, #4]	; (8003e84 <HAL_RCC_GetHCLKFreq+0x8>)
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000034 	.word	0x20000034

08003e88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e8a:	4a05      	ldr	r2, [pc, #20]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003e92:	5cd3      	ldrb	r3, [r2, r3]
 8003e94:	4a03      	ldr	r2, [pc, #12]	; (8003ea4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003e96:	6810      	ldr	r0, [r2, #0]
}
 8003e98:	40d8      	lsrs	r0, r3
 8003e9a:	4770      	bx	lr
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0801494d 	.word	0x0801494d
 8003ea4:	20000034 	.word	0x20000034

08003ea8 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_GetClockConfig+0x34>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	f002 0203 	and.w	r2, r2, #3
 8003eb4:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003ebc:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003ec4:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	08db      	lsrs	r3, r3, #3
 8003eca:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003ece:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetClockConfig+0x38>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 030f 	and.w	r3, r3, #15
 8003ed8:	600b      	str	r3, [r1, #0]
}
 8003eda:	4770      	bx	lr
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	40023c00 	.word	0x40023c00

08003ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee8:	6802      	ldr	r2, [r0, #0]
{
 8003eea:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003eec:	f012 0601 	ands.w	r6, r2, #1
 8003ef0:	d00b      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ef2:	4bba      	ldr	r3, [pc, #744]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ef4:	6899      	ldr	r1, [r3, #8]
 8003ef6:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8003efa:	6099      	str	r1, [r3, #8]
 8003efc:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f02:	fab6 f686 	clz	r6, r6
 8003f06:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f08:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f0a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f10:	49b2      	ldr	r1, [pc, #712]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f12:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003f14:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f18:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8003f20:	bf08      	it	eq
 8003f22:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f24:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f28:	bf16      	itet	ne
 8003f2a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8003f2e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f30:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f36:	02d7      	lsls	r7, r2, #11
 8003f38:	d510      	bpl.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f3a:	48a8      	ldr	r0, [pc, #672]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f3c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003f3e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f42:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003f4a:	ea43 0301 	orr.w	r3, r3, r1
 8003f4e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f52:	f000 81a9 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8003f56:	2900      	cmp	r1, #0
 8003f58:	bf08      	it	eq
 8003f5a:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8003f5c:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8003f60:	bf18      	it	ne
 8003f62:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f64:	0690      	lsls	r0, r2, #26
 8003f66:	d531      	bpl.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f68:	4b9c      	ldr	r3, [pc, #624]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f6a:	4f9d      	ldr	r7, [pc, #628]	; (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	9301      	str	r3, [sp, #4]
 8003f7c:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f84:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f86:	f7fe f949 	bl	800221c <HAL_GetTick>
 8003f8a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	05d9      	lsls	r1, r3, #23
 8003f90:	f140 818c 	bpl.w	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3c8>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f94:	4f91      	ldr	r7, [pc, #580]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f96:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f9c:	f040 8191 	bne.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fa2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003fa6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003faa:	4a8c      	ldr	r2, [pc, #560]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003fac:	f040 81af 	bne.w	800430e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8003fb0:	6891      	ldr	r1, [r2, #8]
 8003fb2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003fb6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003fba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8003fbe:	4301      	orrs	r1, r0
 8003fc0:	6091      	str	r1, [r2, #8]
 8003fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	06df      	lsls	r7, r3, #27
 8003fd0:	d50c      	bpl.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fd2:	4a82      	ldr	r2, [pc, #520]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003fd4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003fd8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8003fdc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003fe0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003fe4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003fe6:	4301      	orrs	r1, r0
 8003fe8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fec:	0458      	lsls	r0, r3, #17
 8003fee:	d508      	bpl.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff0:	497a      	ldr	r1, [pc, #488]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ff2:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003ff4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003ff8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003ffc:	4302      	orrs	r2, r0
 8003ffe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004002:	0419      	lsls	r1, r3, #16
 8004004:	d508      	bpl.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004006:	4975      	ldr	r1, [pc, #468]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004008:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800400a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800400e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004012:	4302      	orrs	r2, r0
 8004014:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004018:	03da      	lsls	r2, r3, #15
 800401a:	d508      	bpl.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800401c:	496f      	ldr	r1, [pc, #444]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800401e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004020:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004024:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004028:	4302      	orrs	r2, r0
 800402a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402e:	039f      	lsls	r7, r3, #14
 8004030:	d508      	bpl.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004032:	496a      	ldr	r1, [pc, #424]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004034:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004036:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800403a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800403e:	4302      	orrs	r2, r0
 8004040:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004044:	0658      	lsls	r0, r3, #25
 8004046:	d508      	bpl.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004048:	4964      	ldr	r1, [pc, #400]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800404a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800404c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004050:	f022 0203 	bic.w	r2, r2, #3
 8004054:	4302      	orrs	r2, r0
 8004056:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405a:	0619      	lsls	r1, r3, #24
 800405c:	d508      	bpl.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800405e:	495f      	ldr	r1, [pc, #380]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004060:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004062:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004066:	f022 020c 	bic.w	r2, r2, #12
 800406a:	4302      	orrs	r2, r0
 800406c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004070:	05da      	lsls	r2, r3, #23
 8004072:	d508      	bpl.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004074:	4959      	ldr	r1, [pc, #356]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004076:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004078:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800407c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004080:	4302      	orrs	r2, r0
 8004082:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004086:	059f      	lsls	r7, r3, #22
 8004088:	d508      	bpl.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408a:	4954      	ldr	r1, [pc, #336]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800408c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800408e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004092:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004096:	4302      	orrs	r2, r0
 8004098:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800409c:	0558      	lsls	r0, r3, #21
 800409e:	d508      	bpl.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a0:	494e      	ldr	r1, [pc, #312]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80040a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80040a8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80040ac:	4302      	orrs	r2, r0
 80040ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040b2:	0519      	lsls	r1, r3, #20
 80040b4:	d508      	bpl.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040b6:	4949      	ldr	r1, [pc, #292]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80040be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040c2:	4302      	orrs	r2, r0
 80040c4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040c8:	04da      	lsls	r2, r3, #19
 80040ca:	d508      	bpl.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040cc:	4943      	ldr	r1, [pc, #268]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040ce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80040d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80040d4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80040d8:	4302      	orrs	r2, r0
 80040da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040de:	049f      	lsls	r7, r3, #18
 80040e0:	d508      	bpl.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040e2:	493e      	ldr	r1, [pc, #248]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80040e6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80040ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80040ee:	4302      	orrs	r2, r0
 80040f0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f4:	0258      	lsls	r0, r3, #9
 80040f6:	d508      	bpl.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040f8:	4938      	ldr	r1, [pc, #224]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80040fa:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80040fc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004100:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004104:	4302      	orrs	r2, r0
 8004106:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800410a:	0299      	lsls	r1, r3, #10
 800410c:	d50c      	bpl.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800410e:	4833      	ldr	r0, [pc, #204]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004110:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004112:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8004116:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800411a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800411e:	bf08      	it	eq
 8004120:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004122:	430a      	orrs	r2, r1
 8004124:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8004128:	f013 0f08 	tst.w	r3, #8
 800412c:	bf18      	it	ne
 800412e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004130:	035a      	lsls	r2, r3, #13
 8004132:	d508      	bpl.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004134:	4929      	ldr	r1, [pc, #164]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004136:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004138:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800413c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004140:	4302      	orrs	r2, r0
 8004142:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004146:	021f      	lsls	r7, r3, #8
 8004148:	d509      	bpl.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800414a:	4924      	ldr	r1, [pc, #144]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800414c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004150:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8004154:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004158:	4302      	orrs	r2, r0
 800415a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800415e:	0158      	lsls	r0, r3, #5
 8004160:	d509      	bpl.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004162:	491e      	ldr	r1, [pc, #120]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004164:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004168:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800416c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004170:	4302      	orrs	r2, r0
 8004172:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004176:	0119      	lsls	r1, r3, #4
 8004178:	d509      	bpl.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800417a:	4918      	ldr	r1, [pc, #96]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800417c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004180:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8004184:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004188:	4302      	orrs	r2, r0
 800418a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800418e:	00da      	lsls	r2, r3, #3
 8004190:	d509      	bpl.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004192:	4912      	ldr	r1, [pc, #72]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8004194:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8004198:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800419c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80041a0:	4302      	orrs	r2, r0
 80041a2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80041a6:	2e01      	cmp	r6, #1
 80041a8:	f000 80b5 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80041ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041b0:	f000 80b1 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x432>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041b4:	2d01      	cmp	r5, #1
 80041b6:	d175      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041b8:	4d08      	ldr	r5, [pc, #32]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c0:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c2:	f7fe f82b 	bl	800221c <HAL_GetTick>
 80041c6:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	009f      	lsls	r7, r3, #2
 80041cc:	f100 8127 	bmi.w	800441e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d0:	6821      	ldr	r1, [r4, #0]
 80041d2:	030e      	lsls	r6, r1, #12
 80041d4:	d506      	bpl.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80041d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041d8:	b143      	cbz	r3, 80041ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 80041da:	e003      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40007000 	.word	0x40007000
 80041e4:	02cd      	lsls	r5, r1, #11
 80041e6:	d51d      	bpl.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x340>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ea:	b9db      	cbnz	r3, 8004224 <HAL_RCCEx_PeriphCLKConfig+0x340>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ec:	4a93      	ldr	r2, [pc, #588]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80041ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041fa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80041fe:	4303      	orrs	r3, r0
 8004200:	6960      	ldr	r0, [r4, #20]
 8004202:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004206:	69a0      	ldr	r0, [r4, #24]
 8004208:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800420c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004210:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004214:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004216:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800421a:	3801      	subs	r0, #1
 800421c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004220:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004224:	0288      	lsls	r0, r1, #10
 8004226:	d515      	bpl.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8004228:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800422a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422e:	d111      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x370>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004230:	4a82      	ldr	r2, [pc, #520]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8004232:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004236:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800423a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800423e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004242:	4303      	orrs	r3, r0
 8004244:	6960      	ldr	r0, [r4, #20]
 8004246:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800424a:	6a20      	ldr	r0, [r4, #32]
 800424c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004254:	070a      	lsls	r2, r1, #28
 8004256:	d519      	bpl.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004258:	4978      	ldr	r1, [pc, #480]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800425a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800425e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004262:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8004266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426a:	4313      	orrs	r3, r2
 800426c:	6962      	ldr	r2, [r4, #20]
 800426e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004272:	69e2      	ldr	r2, [r4, #28]
 8004274:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800427c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8004280:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004282:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800428c:	4c6b      	ldr	r4, [pc, #428]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004296:	f7fd ffc1 	bl	800221c <HAL_GetTick>
 800429a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	f140 80c4 	bpl.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80042a4:	2000      	movs	r0, #0
 80042a6:	e009      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      plli2sused = 1;
 80042a8:	2601      	movs	r6, #1
 80042aa:	e657      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ac:	f7fd ffb6 	bl	800221c <HAL_GetTick>
 80042b0:	eba0 0008 	sub.w	r0, r0, r8
 80042b4:	2864      	cmp	r0, #100	; 0x64
 80042b6:	f67f ae69 	bls.w	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80042ba:	2003      	movs	r0, #3
}
 80042bc:	b003      	add	sp, #12
 80042be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042c4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80042c8:	429a      	cmp	r2, r3
 80042ca:	f43f ae69 	beq.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80042da:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80042de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80042e2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80042e4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e8:	07da      	lsls	r2, r3, #31
 80042ea:	f57f ae59 	bpl.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80042ee:	f7fd ff95 	bl	800221c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80042f6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fa:	079b      	lsls	r3, r3, #30
 80042fc:	f53f ae50 	bmi.w	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fd ff8c 	bl	800221c <HAL_GetTick>
 8004304:	eba0 0008 	sub.w	r0, r0, r8
 8004308:	4548      	cmp	r0, r9
 800430a:	d9f5      	bls.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800430c:	e7d5      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800430e:	6891      	ldr	r1, [r2, #8]
 8004310:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004314:	e654      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8004316:	4e49      	ldr	r6, [pc, #292]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8004318:	6833      	ldr	r3, [r6, #0]
 800431a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800431e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004320:	f7fd ff7c 	bl	800221c <HAL_GetTick>
 8004324:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004326:	6833      	ldr	r3, [r6, #0]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	d472      	bmi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800432c:	6822      	ldr	r2, [r4, #0]
 800432e:	07d7      	lsls	r7, r2, #31
 8004330:	d512      	bpl.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8004332:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004334:	b983      	cbnz	r3, 8004358 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004336:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800433a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800433e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004342:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004346:	430b      	orrs	r3, r1
 8004348:	6861      	ldr	r1, [r4, #4]
 800434a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800434e:	68a1      	ldr	r1, [r4, #8]
 8004350:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8004354:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004358:	0316      	lsls	r6, r2, #12
 800435a:	d503      	bpl.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800435c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800435e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004362:	d005      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004364:	02d0      	lsls	r0, r2, #11
 8004366:	d51e      	bpl.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800436a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436e:	d11a      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004370:	4932      	ldr	r1, [pc, #200]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8004372:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004376:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800437a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800437e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004382:	4303      	orrs	r3, r0
 8004384:	6860      	ldr	r0, [r4, #4]
 8004386:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800438a:	68e0      	ldr	r0, [r4, #12]
 800438c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004394:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8004398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800439a:	f020 001f 	bic.w	r0, r0, #31
 800439e:	3b01      	subs	r3, #1
 80043a0:	4303      	orrs	r3, r0
 80043a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043a6:	01d1      	lsls	r1, r2, #7
 80043a8:	d511      	bpl.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043aa:	4924      	ldr	r1, [pc, #144]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80043ac:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043b0:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80043b4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80043b8:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80043bc:	4303      	orrs	r3, r0
 80043be:	6860      	ldr	r0, [r4, #4]
 80043c0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80043c4:	6920      	ldr	r0, [r4, #16]
 80043c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80043ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80043ce:	0192      	lsls	r2, r2, #6
 80043d0:	d50d      	bpl.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80043d2:	6923      	ldr	r3, [r4, #16]
 80043d4:	6862      	ldr	r2, [r4, #4]
 80043d6:	041b      	lsls	r3, r3, #16
 80043d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80043dc:	68e2      	ldr	r2, [r4, #12]
 80043de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80043e2:	68a2      	ldr	r2, [r4, #8]
 80043e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80043e8:	4a14      	ldr	r2, [pc, #80]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80043ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80043ee:	4e13      	ldr	r6, [pc, #76]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80043f0:	6833      	ldr	r3, [r6, #0]
 80043f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043f6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80043f8:	f7fd ff10 	bl	800221c <HAL_GetTick>
 80043fc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043fe:	6833      	ldr	r3, [r6, #0]
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	f53f aed7 	bmi.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004406:	f7fd ff09 	bl	800221c <HAL_GetTick>
 800440a:	1bc0      	subs	r0, r0, r7
 800440c:	2864      	cmp	r0, #100	; 0x64
 800440e:	d9f6      	bls.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004410:	e753      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004412:	f7fd ff03 	bl	800221c <HAL_GetTick>
 8004416:	1bc0      	subs	r0, r0, r7
 8004418:	2864      	cmp	r0, #100	; 0x64
 800441a:	d984      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800441c:	e74d      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800441e:	f7fd fefd 	bl	800221c <HAL_GetTick>
 8004422:	1b80      	subs	r0, r0, r6
 8004424:	2864      	cmp	r0, #100	; 0x64
 8004426:	f67f aecf 	bls.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 800442a:	e746      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800442c:	f7fd fef6 	bl	800221c <HAL_GetTick>
 8004430:	1b40      	subs	r0, r0, r5
 8004432:	2864      	cmp	r0, #100	; 0x64
 8004434:	f67f af32 	bls.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8004438:	e73f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800

08004440 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);
 
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8004440:	4770      	bx	lr

08004442 <HAL_SDRAM_Init>:
{   
 8004442:	b538      	push	{r3, r4, r5, lr}
 8004444:	460d      	mov	r5, r1
  if(hsdram == NULL)
 8004446:	4604      	mov	r4, r0
 8004448:	b1c8      	cbz	r0, 800447e <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800444a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800444e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004452:	b91b      	cbnz	r3, 800445c <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004454:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8004458:	f7ff fff2 	bl	8004440 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800445c:	2302      	movs	r3, #2
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800445e:	1d21      	adds	r1, r4, #4
 8004460:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004462:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004466:	f000 f985 	bl	8004774 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800446a:	6862      	ldr	r2, [r4, #4]
 800446c:	4629      	mov	r1, r5
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	f000 f9b6 	bl	80047e0 <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004474:	2301      	movs	r3, #1
  return HAL_OK;
 8004476:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004478:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800447c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800447e:	2001      	movs	r0, #1
 8004480:	e7fc      	b.n	800447c <HAL_SDRAM_Init+0x3a>

08004482 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004482:	b538      	push	{r3, r4, r5, lr}
 8004484:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004486:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800448a:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800448c:	b2c0      	uxtb	r0, r0
 800448e:	2802      	cmp	r0, #2
 8004490:	d00d      	beq.n	80044ae <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004492:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004494:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004496:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800449a:	f000 f9e5 	bl	8004868 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800449e:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80044a0:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80044a2:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80044a4:	bf0c      	ite	eq
 80044a6:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80044a8:	2301      	movne	r3, #1
 80044aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80044ae:	bd38      	pop	{r3, r4, r5, pc}

080044b0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80044b0:	b510      	push	{r4, lr}
 80044b2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80044b4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80044b8:	b2c0      	uxtb	r0, r0
 80044ba:	2802      	cmp	r0, #2
 80044bc:	d009      	beq.n	80044d2 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044be:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80044c0:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80044c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80044c6:	f000 f9e2 	bl	800488e <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80044ca:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80044cc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80044ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80044d2:	bd10      	pop	{r4, pc}

080044d4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d8:	6803      	ldr	r3, [r0, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e2:	4a07      	ldr	r2, [pc, #28]	; (8004500 <HAL_TIM_Base_Start_IT+0x28>)
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e8:	2a06      	cmp	r2, #6
 80044ea:	d006      	beq.n	80044fa <HAL_TIM_Base_Start_IT+0x22>
 80044ec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80044f0:	d003      	beq.n	80044fa <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80044fa:	2000      	movs	r0, #0
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	00010007 	.word	0x00010007

08004504 <HAL_TIM_OC_DelayElapsedCallback>:
 8004504:	4770      	bx	lr

08004506 <HAL_TIM_IC_CaptureCallback>:
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_TriggerCallback>:
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800450c:	6803      	ldr	r3, [r0, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	0791      	lsls	r1, r2, #30
{
 8004512:	b510      	push	{r4, lr}
 8004514:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004516:	d50f      	bpl.n	8004538 <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	0792      	lsls	r2, r2, #30
 800451c:	d50c      	bpl.n	8004538 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800451e:	f06f 0202 	mvn.w	r2, #2
 8004522:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004524:	2201      	movs	r2, #1

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004526:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004528:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800452a:	0799      	lsls	r1, r3, #30
 800452c:	f000 8085 	beq.w	800463a <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004530:	f7ff ffe9 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004534:	2300      	movs	r3, #0
 8004536:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	0752      	lsls	r2, r2, #29
 800453e:	d510      	bpl.n	8004562 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	0750      	lsls	r0, r2, #29
 8004544:	d50d      	bpl.n	8004562 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004546:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800454a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004550:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004552:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004558:	d075      	beq.n	8004646 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800455a:	f7ff ffd4 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800455e:	2300      	movs	r3, #0
 8004560:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	691a      	ldr	r2, [r3, #16]
 8004566:	0711      	lsls	r1, r2, #28
 8004568:	d50f      	bpl.n	800458a <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	0712      	lsls	r2, r2, #28
 800456e:	d50c      	bpl.n	800458a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004570:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004576:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004578:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800457c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457e:	079b      	lsls	r3, r3, #30
 8004580:	d067      	beq.n	8004652 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004582:	f7ff ffc0 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004586:	2300      	movs	r3, #0
 8004588:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	06d0      	lsls	r0, r2, #27
 8004590:	d510      	bpl.n	80045b4 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	06d1      	lsls	r1, r2, #27
 8004596:	d50d      	bpl.n	80045b4 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004598:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800459e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a0:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80045aa:	d058      	beq.n	800465e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80045ac:	f7ff ffab 	bl	8004506 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	2300      	movs	r3, #0
 80045b2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	07d2      	lsls	r2, r2, #31
 80045ba:	d508      	bpl.n	80045ce <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	07d0      	lsls	r0, r2, #31
 80045c0:	d505      	bpl.n	80045ce <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c2:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045c8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045ca:	f7fc fd97 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	691a      	ldr	r2, [r3, #16]
 80045d2:	0611      	lsls	r1, r2, #24
 80045d4:	d508      	bpl.n	80045e8 <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	0612      	lsls	r2, r2, #24
 80045da:	d505      	bpl.n	80045e8 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045e4:	f000 f8c3 	bl	800476e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	05d0      	lsls	r0, r2, #23
 80045ee:	d508      	bpl.n	8004602 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	0611      	lsls	r1, r2, #24
 80045f4:	d505      	bpl.n	8004602 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80045fe:	f000 f8b7 	bl	8004770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	0652      	lsls	r2, r2, #25
 8004608:	d508      	bpl.n	800461c <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	0650      	lsls	r0, r2, #25
 800460e:	d505      	bpl.n	800461c <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004610:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004614:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004616:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004618:	f7ff ff77 	bl	800450a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	0691      	lsls	r1, r2, #26
 8004622:	d522      	bpl.n	800466a <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	0692      	lsls	r2, r2, #26
 8004628:	d51f      	bpl.n	800466a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800462a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004630:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004636:	f000 b899 	b.w	800476c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	f7ff ff63 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463e:	4620      	mov	r0, r4
 8004640:	f7ff ff62 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
 8004644:	e776      	b.n	8004534 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	f7ff ff5d 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff ff5c 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
 8004650:	e785      	b.n	800455e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	f7ff ff57 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004656:	4620      	mov	r0, r4
 8004658:	f7ff ff56 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
 800465c:	e793      	b.n	8004586 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465e:	f7ff ff51 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff ff50 	bl	8004508 <HAL_TIM_PWM_PulseFinishedCallback>
 8004668:	e7a2      	b.n	80045b0 <HAL_TIM_IRQHandler+0xa4>
}
 800466a:	bd10      	pop	{r4, pc}

0800466c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	4a30      	ldr	r2, [pc, #192]	; (8004730 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800466e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004670:	4290      	cmp	r0, r2
 8004672:	d012      	beq.n	800469a <TIM_Base_SetConfig+0x2e>
 8004674:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004678:	d00f      	beq.n	800469a <TIM_Base_SetConfig+0x2e>
 800467a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800467e:	4290      	cmp	r0, r2
 8004680:	d00b      	beq.n	800469a <TIM_Base_SetConfig+0x2e>
 8004682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004686:	4290      	cmp	r0, r2
 8004688:	d007      	beq.n	800469a <TIM_Base_SetConfig+0x2e>
 800468a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800468e:	4290      	cmp	r0, r2
 8004690:	d003      	beq.n	800469a <TIM_Base_SetConfig+0x2e>
 8004692:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004696:	4290      	cmp	r0, r2
 8004698:	d119      	bne.n	80046ce <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800469a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80046a0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046a2:	4a23      	ldr	r2, [pc, #140]	; (8004730 <TIM_Base_SetConfig+0xc4>)
 80046a4:	4290      	cmp	r0, r2
 80046a6:	d029      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80046ac:	d026      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80046b2:	4290      	cmp	r0, r2
 80046b4:	d022      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ba:	4290      	cmp	r0, r2
 80046bc:	d01e      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c2:	4290      	cmp	r0, r2
 80046c4:	d01a      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80046ca:	4290      	cmp	r0, r2
 80046cc:	d016      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <TIM_Base_SetConfig+0xc8>)
 80046d0:	4290      	cmp	r0, r2
 80046d2:	d013      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d8:	4290      	cmp	r0, r2
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046e0:	4290      	cmp	r0, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046e4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80046e8:	4290      	cmp	r0, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f0:	4290      	cmp	r0, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0x90>
 80046f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046f8:	4290      	cmp	r0, r2
 80046fa:	d103      	bne.n	8004704 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004700:	68ca      	ldr	r2, [r1, #12]
 8004702:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004704:	694a      	ldr	r2, [r1, #20]
 8004706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800470c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800470e:	688b      	ldr	r3, [r1, #8]
 8004710:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004712:	680b      	ldr	r3, [r1, #0]
 8004714:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <TIM_Base_SetConfig+0xc4>)
 8004718:	4298      	cmp	r0, r3
 800471a:	d003      	beq.n	8004724 <TIM_Base_SetConfig+0xb8>
 800471c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004720:	4298      	cmp	r0, r3
 8004722:	d101      	bne.n	8004728 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004724:	690b      	ldr	r3, [r1, #16]
 8004726:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004728:	2301      	movs	r3, #1
 800472a:	6143      	str	r3, [r0, #20]
}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40014000 	.word	0x40014000

08004738 <HAL_TIM_Base_Init>:
{
 8004738:	b510      	push	{r4, lr}
  if (htim == NULL)
 800473a:	4604      	mov	r4, r0
 800473c:	b1a0      	cbz	r0, 8004768 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004742:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004746:	b91b      	cbnz	r3, 8004750 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004748:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800474c:	f7ff fec2 	bl	80044d4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 8004756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475a:	f7ff ff87 	bl	800466c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800475e:	2301      	movs	r3, #1
  return HAL_OK;
 8004760:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004762:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004766:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004768:	2001      	movs	r0, #1
 800476a:	e7fc      	b.n	8004766 <HAL_TIM_Base_Init+0x2e>

0800476c <HAL_TIMEx_CommutCallback>:
 800476c:	4770      	bx	lr

0800476e <HAL_TIMEx_BreakCallback>:
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_Break2Callback>:
 8004770:	4770      	bx	lr
	...

08004774 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004778:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800477a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800477e:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004782:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8004786:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800478a:	6809      	ldr	r1, [r1, #0]
 800478c:	4323      	orrs	r3, r4
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800478e:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004790:	2901      	cmp	r1, #1
 8004792:	4912      	ldr	r1, [pc, #72]	; (80047dc <FMC_SDRAM_Init+0x68>)
 8004794:	d00f      	beq.n	80047b6 <FMC_SDRAM_Init+0x42>
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004796:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004798:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800479a:	432a      	orrs	r2, r5
 800479c:	ea42 0308 	orr.w	r3, r2, r8
 80047a0:	ea43 030e 	orr.w	r3, r3, lr
 80047a4:	ea43 030c 	orr.w	r3, r3, ip
 80047a8:	433b      	orrs	r3, r7
 80047aa:	4333      	orrs	r3, r6
 80047ac:	430b      	orrs	r3, r1
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047ae:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80047b0:	2000      	movs	r0, #0
 80047b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80047b6:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80047b8:	6842      	ldr	r2, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80047ba:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80047be:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047c0:	ea45 0208 	orr.w	r2, r5, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80047c4:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047c6:	ea42 020e 	orr.w	r2, r2, lr
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047ca:	6003      	str	r3, [r0, #0]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047cc:	ea42 020c 	orr.w	r2, r2, ip
 80047d0:	433a      	orrs	r2, r7
 80047d2:	4332      	orrs	r2, r6
 80047d4:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80047d6:	6042      	str	r2, [r0, #4]
 80047d8:	e7ea      	b.n	80047b0 <FMC_SDRAM_Init+0x3c>
 80047da:	bf00      	nop
 80047dc:	ffff8000 	.word	0xffff8000

080047e0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80047e0:	68cb      	ldr	r3, [r1, #12]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80047e2:	2a01      	cmp	r2, #1
{
 80047e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e6:	680c      	ldr	r4, [r1, #0]
 80047e8:	f103 37ff 	add.w	r7, r3, #4294967295
 80047ec:	694b      	ldr	r3, [r1, #20]
 80047ee:	688e      	ldr	r6, [r1, #8]
 80047f0:	f104 3cff 	add.w	ip, r4, #4294967295
 80047f4:	690d      	ldr	r5, [r1, #16]
 80047f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80047fa:	684c      	ldr	r4, [r1, #4]
 80047fc:	f106 36ff 	add.w	r6, r6, #4294967295
 8004800:	6989      	ldr	r1, [r1, #24]
 8004802:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004806:	f104 34ff 	add.w	r4, r4, #4294967295
 800480a:	f105 35ff 	add.w	r5, r5, #4294967295
 800480e:	f101 31ff 	add.w	r1, r1, #4294967295
 8004812:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8004816:	ea4f 1404 	mov.w	r4, r4, lsl #4
 800481a:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800481e:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8004822:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  if (Bank != FMC_SDRAM_BANK2) 
 8004826:	d00c      	beq.n	8004842 <FMC_SDRAM_Timing_Init+0x62>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004828:	ea43 030c 	orr.w	r3, r3, ip
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800482c:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800482e:	4323      	orrs	r3, r4
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004830:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004834:	4333      	orrs	r3, r6
 8004836:	432b      	orrs	r3, r5
 8004838:	430b      	orrs	r3, r1
 800483a:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
                       (((Timing->RPDelay)-1) << 20)             |\
                       (((Timing->RCDDelay)-1) << 24));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800483c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800483e:	2000      	movs	r0, #0
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004842:	6887      	ldr	r7, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004844:	ea44 0206 	orr.w	r2, r4, r6
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004848:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800484c:	ea42 020c 	orr.w	r2, r2, ip
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8004850:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004854:	432a      	orrs	r2, r5
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004856:	433b      	orrs	r3, r7
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004858:	68c7      	ldr	r7, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800485a:	430a      	orrs	r2, r1
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800485c:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004860:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004862:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004864:	60c2      	str	r2, [r0, #12]
 8004866:	e7ea      	b.n	800483e <FMC_SDRAM_Timing_Init+0x5e>

08004868 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004868:	e9d1 3200 	ldrd	r3, r2, [r1]
{
 800486c:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800486e:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 8004870:	68ca      	ldr	r2, [r1, #12]
{
 8004872:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 8004874:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004876:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800487a:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 800487c:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800487e:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004880:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004884:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8004886:	9b01      	ldr	r3, [sp, #4]
 8004888:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 800488a:	b002      	add	sp, #8
 800488c:	bd10      	pop	{r4, pc}

0800488e <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800488e:	6943      	ldr	r3, [r0, #20]
 8004890:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004894:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004896:	2000      	movs	r0, #0
 8004898:	4770      	bx	lr

0800489a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489a:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800489e:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a2:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a4:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048a6:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048ae:	4770      	bx	lr

080048b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048b4:	4770      	bx	lr

080048b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80048b6:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048b8:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80048ba:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80048bc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80048c2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80048c4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80048c6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048c8:	3301      	adds	r3, #1
 80048ca:	6003      	str	r3, [r0, #0]
}
 80048cc:	4770      	bx	lr

080048ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048ce:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048d0:	1c53      	adds	r3, r2, #1
{
 80048d2:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80048d4:	d10a      	bne.n	80048ec <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048d6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048dc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048de:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80048e0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80048e2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80048e4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80048e6:	3301      	adds	r3, #1
 80048e8:	6003      	str	r3, [r0, #0]
}
 80048ea:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048ec:	f100 0308 	add.w	r3, r0, #8
 80048f0:	685c      	ldr	r4, [r3, #4]
 80048f2:	6825      	ldr	r5, [r4, #0]
 80048f4:	4295      	cmp	r5, r2
 80048f6:	d8ef      	bhi.n	80048d8 <vListInsert+0xa>
 80048f8:	4623      	mov	r3, r4
 80048fa:	e7f9      	b.n	80048f0 <vListInsert+0x22>

080048fc <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048fc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004900:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004902:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004904:	6882      	ldr	r2, [r0, #8]
 8004906:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800490c:	bf08      	it	eq
 800490e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004910:	2200      	movs	r2, #0
 8004912:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	3a01      	subs	r2, #1
 8004918:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800491a:	6818      	ldr	r0, [r3, #0]
}
 800491c:	4770      	bx	lr

0800491e <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800491e:	b510      	push	{r4, lr}
 8004920:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004922:	f001 fd37 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004926:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004928:	f001 fd5a 	bl	80063e0 <vPortExitCritical>

	return xReturn;
}
 800492c:	fab4 f084 	clz	r0, r4
 8004930:	0940      	lsrs	r0, r0, #5
 8004932:	bd10      	pop	{r4, pc}

08004934 <prvCopyDataToQueue>:
{
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004938:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800493a:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800493c:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800493e:	b942      	cbnz	r2, 8004952 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004940:	6805      	ldr	r5, [r0, #0]
 8004942:	b99d      	cbnz	r5, 800496c <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004944:	6880      	ldr	r0, [r0, #8]
 8004946:	f001 f983 	bl	8005c50 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800494a:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800494c:	3601      	adds	r6, #1
 800494e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004950:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004952:	b96d      	cbnz	r5, 8004970 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004954:	6840      	ldr	r0, [r0, #4]
 8004956:	f00a fbec 	bl	800f132 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800495a:	6863      	ldr	r3, [r4, #4]
 800495c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800495e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004960:	68a2      	ldr	r2, [r4, #8]
 8004962:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004964:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004966:	d301      	bcc.n	800496c <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800496c:	2000      	movs	r0, #0
 800496e:	e7ed      	b.n	800494c <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004970:	68c0      	ldr	r0, [r0, #12]
 8004972:	f00a fbde 	bl	800f132 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004978:	68e2      	ldr	r2, [r4, #12]
 800497a:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800497c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800497e:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004980:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004982:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004984:	bf3e      	ittt	cc
 8004986:	68a2      	ldrcc	r2, [r4, #8]
 8004988:	189b      	addcc	r3, r3, r2
 800498a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800498c:	2d02      	cmp	r5, #2
 800498e:	d1ed      	bne.n	800496c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004990:	b10e      	cbz	r6, 8004996 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004992:	3e01      	subs	r6, #1
 8004994:	e7ea      	b.n	800496c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004996:	4630      	mov	r0, r6
 8004998:	e7d8      	b.n	800494c <prvCopyDataToQueue+0x18>

0800499a <prvCopyDataFromQueue>:
{
 800499a:	4603      	mov	r3, r0
 800499c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800499e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80049a0:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049a2:	b162      	cbz	r2, 80049be <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a4:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a6:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a8:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049aa:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049ac:	60d9      	str	r1, [r3, #12]
}
 80049ae:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049b2:	bf24      	itt	cs
 80049b4:	6819      	ldrcs	r1, [r3, #0]
 80049b6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	f00a bbba 	b.w	800f132 <memcpy>
}
 80049be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <prvUnlockQueue>:
{
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80049c8:	f001 fce4 	bl	8006394 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80049cc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049d0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80049d4:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	dc14      	bgt.n	8004a04 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80049da:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049dc:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80049e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80049e4:	f001 fcfc 	bl	80063e0 <vPortExitCritical>
	taskENTER_CRITICAL();
 80049e8:	f001 fcd4 	bl	8006394 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80049ec:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80049f0:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f2:	2d00      	cmp	r5, #0
 80049f4:	dc12      	bgt.n	8004a1c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80049f6:	23ff      	movs	r3, #255	; 0xff
 80049f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80049fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004a00:	f001 bcee 	b.w	80063e0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0e7      	beq.n	80049da <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f000 ff98 	bl	8005940 <xTaskRemoveFromEventList>
 8004a10:	b108      	cbz	r0, 8004a16 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004a12:	f001 f817 	bl	8005a44 <vTaskMissedYield>
 8004a16:	3d01      	subs	r5, #1
 8004a18:	b26d      	sxtb	r5, r5
 8004a1a:	e7dc      	b.n	80049d6 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0e9      	beq.n	80049f6 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 ff8c 	bl	8005940 <xTaskRemoveFromEventList>
 8004a28:	b108      	cbz	r0, 8004a2e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004a2a:	f001 f80b 	bl	8005a44 <vTaskMissedYield>
 8004a2e:	3d01      	subs	r5, #1
 8004a30:	b26d      	sxtb	r5, r5
 8004a32:	e7de      	b.n	80049f2 <prvUnlockQueue+0x2e>

08004a34 <xQueueGenericReset>:
{
 8004a34:	b538      	push	{r3, r4, r5, lr}
 8004a36:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004a38:	4604      	mov	r4, r0
 8004a3a:	b950      	cbnz	r0, 8004a52 <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	b672      	cpsid	i
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	b662      	cpsie	i
 8004a50:	e7fe      	b.n	8004a50 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8004a52:	f001 fc9f 	bl	8006394 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a56:	6822      	ldr	r2, [r4, #0]
 8004a58:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a5c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a5e:	4343      	muls	r3, r0
 8004a60:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a62:	1a1b      	subs	r3, r3, r0
 8004a64:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a66:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a68:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a6a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a6c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a6e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004a70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004a78:	b995      	cbnz	r5, 8004aa0 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	b163      	cbz	r3, 8004a98 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a7e:	f104 0010 	add.w	r0, r4, #16
 8004a82:	f000 ff5d 	bl	8005940 <xTaskRemoveFromEventList>
 8004a86:	b138      	cbz	r0, 8004a98 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <xQueueGenericReset+0x80>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004a98:	f001 fca2 	bl	80063e0 <vPortExitCritical>
}
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa0:	f104 0010 	add.w	r0, r4, #16
 8004aa4:	f7ff fef9 	bl	800489a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004aa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004aac:	f7ff fef5 	bl	800489a <vListInitialise>
 8004ab0:	e7f2      	b.n	8004a98 <xQueueGenericReset+0x64>
 8004ab2:	bf00      	nop
 8004ab4:	e000ed04 	.word	0xe000ed04

08004ab8 <xQueueGenericCreate>:
	{
 8004ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aba:	460d      	mov	r5, r1
 8004abc:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004abe:	4606      	mov	r6, r0
 8004ac0:	b950      	cbnz	r0, 8004ad8 <xQueueGenericCreate+0x20>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	b672      	cpsid	i
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	b662      	cpsie	i
 8004ad6:	e7fe      	b.n	8004ad6 <xQueueGenericCreate+0x1e>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ada:	3050      	adds	r0, #80	; 0x50
 8004adc:	f001 fb34 	bl	8006148 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	b148      	cbz	r0, 8004af8 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ae4:	b955      	cbnz	r5, 8004afc <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ae6:	6020      	str	r0, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ae8:	2101      	movs	r1, #1
 8004aea:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8004aec:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af0:	f7ff ffa0 	bl	8004a34 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004af4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8004af8:	4620      	mov	r0, r4
 8004afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004afc:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b00:	6003      	str	r3, [r0, #0]
 8004b02:	e7f1      	b.n	8004ae8 <xQueueGenericCreate+0x30>

08004b04 <xQueueCreateCountingSemaphore>:
	{
 8004b04:	b510      	push	{r4, lr}
 8004b06:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 8004b08:	b950      	cbnz	r0, 8004b20 <xQueueCreateCountingSemaphore+0x1c>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	b672      	cpsid	i
 8004b10:	f383 8811 	msr	BASEPRI, r3
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	b662      	cpsie	i
 8004b1e:	e7fe      	b.n	8004b1e <xQueueCreateCountingSemaphore+0x1a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004b20:	4288      	cmp	r0, r1
 8004b22:	d20a      	bcs.n	8004b3a <xQueueCreateCountingSemaphore+0x36>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	b672      	cpsid	i
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	b662      	cpsie	i
 8004b38:	e7fe      	b.n	8004b38 <xQueueCreateCountingSemaphore+0x34>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f7ff ffbb 	bl	8004ab8 <xQueueGenericCreate>
		if( xHandle != NULL )
 8004b42:	b100      	cbz	r0, 8004b46 <xQueueCreateCountingSemaphore+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004b44:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <xQueueGenericSend>:
{
 8004b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	4688      	mov	r8, r1
 8004b4e:	9201      	str	r2, [sp, #4]
 8004b50:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004b52:	4604      	mov	r4, r0
 8004b54:	b950      	cbnz	r0, 8004b6c <xQueueGenericSend+0x24>
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	b672      	cpsid	i
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	b662      	cpsie	i
 8004b6a:	e7fe      	b.n	8004b6a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b6c:	b961      	cbnz	r1, 8004b88 <xQueueGenericSend+0x40>
 8004b6e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b70:	b153      	cbz	r3, 8004b88 <xQueueGenericSend+0x40>
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	b672      	cpsid	i
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	b662      	cpsie	i
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b88:	2f02      	cmp	r7, #2
 8004b8a:	d10d      	bne.n	8004ba8 <xQueueGenericSend+0x60>
 8004b8c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d00a      	beq.n	8004ba8 <xQueueGenericSend+0x60>
 8004b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b96:	b672      	cpsid	i
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	b662      	cpsie	i
 8004ba6:	e7fe      	b.n	8004ba6 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ba8:	f000 fff2 	bl	8005b90 <xTaskGetSchedulerState>
 8004bac:	b960      	cbnz	r0, 8004bc8 <xQueueGenericSend+0x80>
 8004bae:	9e01      	ldr	r6, [sp, #4]
 8004bb0:	b15e      	cbz	r6, 8004bca <xQueueGenericSend+0x82>
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	b672      	cpsid	i
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	b662      	cpsie	i
 8004bc6:	e7fe      	b.n	8004bc6 <xQueueGenericSend+0x7e>
 8004bc8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004bca:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8004bce:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8004cb8 <xQueueGenericSend+0x170>
 8004bd2:	e037      	b.n	8004c44 <xQueueGenericSend+0xfc>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd4:	9d01      	ldr	r5, [sp, #4]
 8004bd6:	b91d      	cbnz	r5, 8004be0 <xQueueGenericSend+0x98>
					taskEXIT_CRITICAL();
 8004bd8:	f001 fc02 	bl	80063e0 <vPortExitCritical>
			return errQUEUE_FULL;
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e050      	b.n	8004c82 <xQueueGenericSend+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8004be0:	b916      	cbnz	r6, 8004be8 <xQueueGenericSend+0xa0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be2:	a802      	add	r0, sp, #8
 8004be4:	f000 fee8 	bl	80059b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004be8:	f001 fbfa 	bl	80063e0 <vPortExitCritical>
		vTaskSuspendAll();
 8004bec:	f000 fd36 	bl	800565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bf0:	f001 fbd0 	bl	8006394 <vPortEnterCritical>
 8004bf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004bf8:	2bff      	cmp	r3, #255	; 0xff
 8004bfa:	d101      	bne.n	8004c00 <xQueueGenericSend+0xb8>
 8004bfc:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8004c00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c04:	2bff      	cmp	r3, #255	; 0xff
 8004c06:	d101      	bne.n	8004c0c <xQueueGenericSend+0xc4>
 8004c08:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8004c0c:	f001 fbe8 	bl	80063e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c10:	a901      	add	r1, sp, #4
 8004c12:	a802      	add	r0, sp, #8
 8004c14:	f000 feda 	bl	80059cc <xTaskCheckForTimeOut>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d146      	bne.n	8004caa <xQueueGenericSend+0x162>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c1c:	f001 fbba 	bl	8006394 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c20:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d12f      	bne.n	8004c88 <xQueueGenericSend+0x140>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004c28:	f001 fbda 	bl	80063e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	f104 0010 	add.w	r0, r4, #16
 8004c32:	f000 fe6b 	bl	800590c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fec4 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c3c:	f000 fd9c 	bl	8005778 <xTaskResumeAll>
 8004c40:	b350      	cbz	r0, 8004c98 <xQueueGenericSend+0x150>
 8004c42:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004c44:	f001 fba6 	bl	8006394 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004c4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d301      	bcc.n	8004c54 <xQueueGenericSend+0x10c>
 8004c50:	2f02      	cmp	r7, #2
 8004c52:	d1bf      	bne.n	8004bd4 <xQueueGenericSend+0x8c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c54:	463a      	mov	r2, r7
 8004c56:	4641      	mov	r1, r8
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7ff fe6b 	bl	8004934 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c60:	b11b      	cbz	r3, 8004c6a <xQueueGenericSend+0x122>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c62:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c66:	f000 fe6b 	bl	8005940 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004c6a:	b138      	cbz	r0, 8004c7c <xQueueGenericSend+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b12      	ldr	r3, [pc, #72]	; (8004cb8 <xQueueGenericSend+0x170>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004c7c:	f001 fbb0 	bl	80063e0 <vPortExitCritical>
				return pdPASS;
 8004c80:	2001      	movs	r0, #1
}
 8004c82:	b004      	add	sp, #16
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8004c88:	f001 fbaa 	bl	80063e0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f7ff fe99 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c92:	f000 fd71 	bl	8005778 <xTaskResumeAll>
 8004c96:	e7d4      	b.n	8004c42 <xQueueGenericSend+0xfa>
					portYIELD_WITHIN_API();
 8004c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c9c:	f8ca 3000 	str.w	r3, [sl]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	e7cb      	b.n	8004c42 <xQueueGenericSend+0xfa>
			prvUnlockQueue( pxQueue );
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fe8a 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cb0:	f000 fd62 	bl	8005778 <xTaskResumeAll>
 8004cb4:	e792      	b.n	8004bdc <xQueueGenericSend+0x94>
 8004cb6:	bf00      	nop
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <xQueueCreateMutex>:
	{
 8004cbc:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f7ff fef8 	bl	8004ab8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8004cc8:	4604      	mov	r4, r0
 8004cca:	b138      	cbz	r0, 8004cdc <xQueueCreateMutex+0x20>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	6083      	str	r3, [r0, #8]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cd0:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cd2:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cd4:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004cd6:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cd8:	f7ff ff36 	bl	8004b48 <xQueueGenericSend>
	}
 8004cdc:	4620      	mov	r0, r4
 8004cde:	bd10      	pop	{r4, pc}

08004ce0 <xQueueGenericSendFromISR>:
{
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	4689      	mov	r9, r1
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004cea:	4604      	mov	r4, r0
 8004cec:	b950      	cbnz	r0, 8004d04 <xQueueGenericSendFromISR+0x24>
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	b672      	cpsid	i
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	b662      	cpsie	i
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d04:	b961      	cbnz	r1, 8004d20 <xQueueGenericSendFromISR+0x40>
 8004d06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d08:	b153      	cbz	r3, 8004d20 <xQueueGenericSendFromISR+0x40>
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	b672      	cpsid	i
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	b662      	cpsie	i
 8004d1e:	e7fe      	b.n	8004d1e <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d20:	2f02      	cmp	r7, #2
 8004d22:	d10d      	bne.n	8004d40 <xQueueGenericSendFromISR+0x60>
 8004d24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d00a      	beq.n	8004d40 <xQueueGenericSendFromISR+0x60>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	b672      	cpsid	i
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	b662      	cpsie	i
 8004d3e:	e7fe      	b.n	8004d3e <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d40:	f001 fc2c 	bl	800659c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d44:	f3ef 8611 	mrs	r6, BASEPRI
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	b672      	cpsid	i
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d301      	bcc.n	8004d68 <xQueueGenericSendFromISR+0x88>
 8004d64:	2f02      	cmp	r7, #2
 8004d66:	d122      	bne.n	8004dae <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d68:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6c:	463a      	mov	r2, r7
 8004d6e:	4649      	mov	r1, r9
 8004d70:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d72:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d74:	f7ff fdde 	bl	8004934 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004d78:	1c6b      	adds	r3, r5, #1
 8004d7a:	d113      	bne.n	8004da4 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7e:	b90b      	cbnz	r3, 8004d84 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8004d80:	2001      	movs	r0, #1
 8004d82:	e00b      	b.n	8004d9c <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d88:	f000 fdda 	bl	8005940 <xTaskRemoveFromEventList>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	d0f7      	beq.n	8004d80 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8004d90:	f1b8 0f00 	cmp.w	r8, #0
 8004d94:	d0f4      	beq.n	8004d80 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d96:	2001      	movs	r0, #1
 8004d98:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d9c:	f386 8811 	msr	BASEPRI, r6
}
 8004da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004da4:	3501      	adds	r5, #1
 8004da6:	b26d      	sxtb	r5, r5
 8004da8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004dac:	e7e8      	b.n	8004d80 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7f4      	b.n	8004d9c <xQueueGenericSendFromISR+0xbc>

08004db2 <xQueueGiveFromISR>:
{
 8004db2:	b570      	push	{r4, r5, r6, lr}
 8004db4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004db6:	4604      	mov	r4, r0
 8004db8:	b950      	cbnz	r0, 8004dd0 <xQueueGiveFromISR+0x1e>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbe:	b672      	cpsid	i
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	b662      	cpsie	i
 8004dce:	e7fe      	b.n	8004dce <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004dd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004dd2:	b153      	cbz	r3, 8004dea <xQueueGiveFromISR+0x38>
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	b672      	cpsid	i
 8004dda:	f383 8811 	msr	BASEPRI, r3
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f3bf 8f4f 	dsb	sy
 8004de6:	b662      	cpsie	i
 8004de8:	e7fe      	b.n	8004de8 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004dea:	6803      	ldr	r3, [r0, #0]
 8004dec:	b963      	cbnz	r3, 8004e08 <xQueueGiveFromISR+0x56>
 8004dee:	6883      	ldr	r3, [r0, #8]
 8004df0:	b153      	cbz	r3, 8004e08 <xQueueGiveFromISR+0x56>
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	b672      	cpsid	i
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	b662      	cpsie	i
 8004e06:	e7fe      	b.n	8004e06 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e08:	f001 fbc8 	bl	800659c <vPortValidateInterruptPriority>
	__asm volatile
 8004e0c:	f3ef 8611 	mrs	r6, BASEPRI
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	b672      	cpsid	i
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004e26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d91c      	bls.n	8004e66 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e30:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e32:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e34:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	d110      	bne.n	8004e5c <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e3c:	b90b      	cbnz	r3, 8004e42 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8004e3e:	2001      	movs	r0, #1
 8004e40:	e009      	b.n	8004e56 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e42:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e46:	f000 fd7b 	bl	8005940 <xTaskRemoveFromEventList>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d0f7      	beq.n	8004e3e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8004e4e:	2d00      	cmp	r5, #0
 8004e50:	d0f5      	beq.n	8004e3e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e52:	2001      	movs	r0, #1
 8004e54:	6028      	str	r0, [r5, #0]
	__asm volatile
 8004e56:	f386 8811 	msr	BASEPRI, r6
}
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	b25b      	sxtb	r3, r3
 8004e60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e64:	e7eb      	b.n	8004e3e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8004e66:	2000      	movs	r0, #0
 8004e68:	e7f5      	b.n	8004e56 <xQueueGiveFromISR+0xa4>
	...

08004e6c <xQueueReceive>:
{
 8004e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e70:	b085      	sub	sp, #20
 8004e72:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 8004e74:	4604      	mov	r4, r0
{
 8004e76:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004e78:	b950      	cbnz	r0, 8004e90 <xQueueReceive+0x24>
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	b672      	cpsid	i
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	b662      	cpsie	i
 8004e8e:	e7fe      	b.n	8004e8e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e90:	b961      	cbnz	r1, 8004eac <xQueueReceive+0x40>
 8004e92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e94:	b153      	cbz	r3, 8004eac <xQueueReceive+0x40>
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	b672      	cpsid	i
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	b662      	cpsie	i
 8004eaa:	e7fe      	b.n	8004eaa <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eac:	f000 fe70 	bl	8005b90 <xTaskGetSchedulerState>
 8004eb0:	b960      	cbnz	r0, 8004ecc <xQueueReceive+0x60>
 8004eb2:	9e01      	ldr	r6, [sp, #4]
 8004eb4:	b15e      	cbz	r6, 8004ece <xQueueReceive+0x62>
 8004eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eba:	b672      	cpsid	i
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	b662      	cpsie	i
 8004eca:	e7fe      	b.n	8004eca <xQueueReceive+0x5e>
 8004ecc:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004ece:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004ed2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8004fb4 <xQueueReceive+0x148>
 8004ed6:	e03b      	b.n	8004f50 <xQueueReceive+0xe4>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed8:	9d01      	ldr	r5, [sp, #4]
 8004eda:	b91d      	cbnz	r5, 8004ee4 <xQueueReceive+0x78>
					taskEXIT_CRITICAL();
 8004edc:	f001 fa80 	bl	80063e0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e052      	b.n	8004f8a <xQueueReceive+0x11e>
				else if( xEntryTimeSet == pdFALSE )
 8004ee4:	b916      	cbnz	r6, 8004eec <xQueueReceive+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee6:	a802      	add	r0, sp, #8
 8004ee8:	f000 fd66 	bl	80059b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004eec:	f001 fa78 	bl	80063e0 <vPortExitCritical>
		vTaskSuspendAll();
 8004ef0:	f000 fbb4 	bl	800565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ef4:	f001 fa4e 	bl	8006394 <vPortEnterCritical>
 8004ef8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d101      	bne.n	8004f04 <xQueueReceive+0x98>
 8004f00:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004f04:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004f08:	2bff      	cmp	r3, #255	; 0xff
 8004f0a:	d101      	bne.n	8004f10 <xQueueReceive+0xa4>
 8004f0c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004f10:	f001 fa66 	bl	80063e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f14:	a901      	add	r1, sp, #4
 8004f16:	a802      	add	r0, sp, #8
 8004f18:	f000 fd58 	bl	80059cc <xTaskCheckForTimeOut>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d13d      	bne.n	8004f9c <xQueueReceive+0x130>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff fcfc 	bl	800491e <prvIsQueueEmpty>
 8004f26:	b398      	cbz	r0, 8004f90 <xQueueReceive+0x124>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f28:	9901      	ldr	r1, [sp, #4]
 8004f2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f2e:	f000 fced 	bl	800590c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f32:	4620      	mov	r0, r4
 8004f34:	f7ff fd46 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f38:	f000 fc1e 	bl	8005778 <xTaskResumeAll>
 8004f3c:	b938      	cbnz	r0, 8004f4e <xQueueReceive+0xe2>
					portYIELD_WITHIN_API();
 8004f3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f42:	f8c9 3000 	str.w	r3, [r9]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004f50:	f001 fa20 	bl	8006394 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f54:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f56:	2d00      	cmp	r5, #0
 8004f58:	d0be      	beq.n	8004ed8 <xQueueReceive+0x6c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f5a:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f5c:	4639      	mov	r1, r7
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fd1b 	bl	800499a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f64:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	b163      	cbz	r3, 8004f84 <xQueueReceive+0x118>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f6a:	f104 0010 	add.w	r0, r4, #16
 8004f6e:	f000 fce7 	bl	8005940 <xTaskRemoveFromEventList>
 8004f72:	b138      	cbz	r0, 8004f84 <xQueueReceive+0x118>
						queueYIELD_IF_USING_PREEMPTION();
 8004f74:	4b0f      	ldr	r3, [pc, #60]	; (8004fb4 <xQueueReceive+0x148>)
 8004f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004f84:	f001 fa2c 	bl	80063e0 <vPortExitCritical>
				return pdPASS;
 8004f88:	2001      	movs	r0, #1
}
 8004f8a:	b005      	add	sp, #20
 8004f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004f90:	4620      	mov	r0, r4
 8004f92:	f7ff fd17 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f96:	f000 fbef 	bl	8005778 <xTaskResumeAll>
 8004f9a:	e7d8      	b.n	8004f4e <xQueueReceive+0xe2>
			prvUnlockQueue( pxQueue );
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f7ff fd11 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa2:	f000 fbe9 	bl	8005778 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f7ff fcb9 	bl	800491e <prvIsQueueEmpty>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d0ce      	beq.n	8004f4e <xQueueReceive+0xe2>
 8004fb0:	e796      	b.n	8004ee0 <xQueueReceive+0x74>
 8004fb2:	bf00      	nop
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <xQueueSemaphoreTake>:
{
 8004fb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8004fbc:	4604      	mov	r4, r0
{
 8004fbe:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004fc0:	b950      	cbnz	r0, 8004fd8 <xQueueSemaphoreTake+0x20>
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	b672      	cpsid	i
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	b662      	cpsie	i
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueSemaphoreTake+0x1e>
	configASSERT( pxQueue->uxItemSize == 0 );
 8004fd8:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004fda:	b155      	cbz	r5, 8004ff2 <xQueueSemaphoreTake+0x3a>
 8004fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe0:	b672      	cpsid	i
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	b662      	cpsie	i
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueSemaphoreTake+0x38>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff2:	f000 fdcd 	bl	8005b90 <xTaskGetSchedulerState>
 8004ff6:	b960      	cbnz	r0, 8005012 <xQueueSemaphoreTake+0x5a>
 8004ff8:	9d01      	ldr	r5, [sp, #4]
 8004ffa:	b155      	cbz	r5, 8005012 <xQueueSemaphoreTake+0x5a>
 8004ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005000:	b672      	cpsid	i
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	b662      	cpsie	i
 8005010:	e7fe      	b.n	8005010 <xQueueSemaphoreTake+0x58>
 8005012:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005014:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8005016:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8005148 <xQueueSemaphoreTake+0x190>
 800501a:	e051      	b.n	80050c0 <xQueueSemaphoreTake+0x108>
				if( xTicksToWait == ( TickType_t ) 0 )
 800501c:	9b01      	ldr	r3, [sp, #4]
 800501e:	b973      	cbnz	r3, 800503e <xQueueSemaphoreTake+0x86>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005020:	b155      	cbz	r5, 8005038 <xQueueSemaphoreTake+0x80>
 8005022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005026:	b672      	cpsid	i
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	b662      	cpsie	i
 8005036:	e7fe      	b.n	8005036 <xQueueSemaphoreTake+0x7e>
					taskEXIT_CRITICAL();
 8005038:	f001 f9d2 	bl	80063e0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800503c:	e05e      	b.n	80050fc <xQueueSemaphoreTake+0x144>
				else if( xEntryTimeSet == pdFALSE )
 800503e:	b916      	cbnz	r6, 8005046 <xQueueSemaphoreTake+0x8e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005040:	a802      	add	r0, sp, #8
 8005042:	f000 fcb9 	bl	80059b8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005046:	f001 f9cb 	bl	80063e0 <vPortExitCritical>
		vTaskSuspendAll();
 800504a:	f000 fb07 	bl	800565c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800504e:	f001 f9a1 	bl	8006394 <vPortEnterCritical>
 8005052:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005056:	2bff      	cmp	r3, #255	; 0xff
 8005058:	d101      	bne.n	800505e <xQueueSemaphoreTake+0xa6>
 800505a:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800505e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005062:	2bff      	cmp	r3, #255	; 0xff
 8005064:	d101      	bne.n	800506a <xQueueSemaphoreTake+0xb2>
 8005066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800506a:	f001 f9b9 	bl	80063e0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800506e:	a901      	add	r1, sp, #4
 8005070:	a802      	add	r0, sp, #8
 8005072:	f000 fcab 	bl	80059cc <xTaskCheckForTimeOut>
 8005076:	2800      	cmp	r0, #0
 8005078:	d14a      	bne.n	8005110 <xQueueSemaphoreTake+0x158>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff fc4f 	bl	800491e <prvIsQueueEmpty>
 8005080:	2800      	cmp	r0, #0
 8005082:	d03f      	beq.n	8005104 <xQueueSemaphoreTake+0x14c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	b93b      	cbnz	r3, 8005098 <xQueueSemaphoreTake+0xe0>
						taskENTER_CRITICAL();
 8005088:	f001 f984 	bl	8006394 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800508c:	68a0      	ldr	r0, [r4, #8]
 800508e:	f000 fd8f 	bl	8005bb0 <xTaskPriorityInherit>
 8005092:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005094:	f001 f9a4 	bl	80063e0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005098:	9901      	ldr	r1, [sp, #4]
 800509a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800509e:	f000 fc35 	bl	800590c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050a2:	4620      	mov	r0, r4
 80050a4:	f7ff fc8e 	bl	80049c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050a8:	f000 fb66 	bl	8005778 <xTaskResumeAll>
 80050ac:	b938      	cbnz	r0, 80050be <xQueueSemaphoreTake+0x106>
					portYIELD_WITHIN_API();
 80050ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050b2:	f8c8 3000 	str.w	r3, [r8]
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80050c0:	f001 f968 	bl	8006394 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0a8      	beq.n	800501c <xQueueSemaphoreTake+0x64>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050ca:	3b01      	subs	r3, #1
 80050cc:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	b913      	cbnz	r3, 80050d8 <xQueueSemaphoreTake+0x120>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050d2:	f000 fec3 	bl	8005e5c <pvTaskIncrementMutexHeldCount>
 80050d6:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	b163      	cbz	r3, 80050f6 <xQueueSemaphoreTake+0x13e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050dc:	f104 0010 	add.w	r0, r4, #16
 80050e0:	f000 fc2e 	bl	8005940 <xTaskRemoveFromEventList>
 80050e4:	b138      	cbz	r0, 80050f6 <xQueueSemaphoreTake+0x13e>
						queueYIELD_IF_USING_PREEMPTION();
 80050e6:	4b18      	ldr	r3, [pc, #96]	; (8005148 <xQueueSemaphoreTake+0x190>)
 80050e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	f3bf 8f6f 	isb	sy
				return pdPASS;
 80050f6:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 80050f8:	f001 f972 	bl	80063e0 <vPortExitCritical>
}
 80050fc:	4628      	mov	r0, r5
 80050fe:	b004      	add	sp, #16
 8005100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8005104:	4620      	mov	r0, r4
 8005106:	f7ff fc5d 	bl	80049c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800510a:	f000 fb35 	bl	8005778 <xTaskResumeAll>
 800510e:	e7d6      	b.n	80050be <xQueueSemaphoreTake+0x106>
			prvUnlockQueue( pxQueue );
 8005110:	4620      	mov	r0, r4
 8005112:	f7ff fc57 	bl	80049c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005116:	f000 fb2f 	bl	8005778 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800511a:	4620      	mov	r0, r4
 800511c:	f7ff fbff 	bl	800491e <prvIsQueueEmpty>
 8005120:	2800      	cmp	r0, #0
 8005122:	d0cc      	beq.n	80050be <xQueueSemaphoreTake+0x106>
					if( xInheritanceOccurred != pdFALSE )
 8005124:	2d00      	cmp	r5, #0
 8005126:	d0e9      	beq.n	80050fc <xQueueSemaphoreTake+0x144>
						taskENTER_CRITICAL();
 8005128:	f001 f934 	bl	8006394 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800512c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800512e:	b119      	cbz	r1, 8005138 <xQueueSemaphoreTake+0x180>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005138:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800513a:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800513c:	f000 fdda 	bl	8005cf4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005140:	f001 f94e 	bl	80063e0 <vPortExitCritical>
 8005144:	e7da      	b.n	80050fc <xQueueSemaphoreTake+0x144>
 8005146:	bf00      	nop
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <xQueueReceiveFromISR>:
{
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	4689      	mov	r9, r1
 8005152:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8005154:	4605      	mov	r5, r0
 8005156:	b950      	cbnz	r0, 800516e <xQueueReceiveFromISR+0x22>
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	b672      	cpsid	i
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	b662      	cpsie	i
 800516c:	e7fe      	b.n	800516c <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516e:	b961      	cbnz	r1, 800518a <xQueueReceiveFromISR+0x3e>
 8005170:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005172:	b153      	cbz	r3, 800518a <xQueueReceiveFromISR+0x3e>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	e7fe      	b.n	8005188 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800518a:	f001 fa07 	bl	800659c <vPortValidateInterruptPriority>
	__asm volatile
 800518e:	f3ef 8711 	mrs	r7, BASEPRI
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	b672      	cpsid	i
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a6:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051a8:	b31c      	cbz	r4, 80051f2 <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 80051aa:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051ae:	4649      	mov	r1, r9
 80051b0:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051b2:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80051b4:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051b6:	f7ff fbf0 	bl	800499a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051ba:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80051bc:	1c73      	adds	r3, r6, #1
 80051be:	d113      	bne.n	80051e8 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c0:	692b      	ldr	r3, [r5, #16]
 80051c2:	b90b      	cbnz	r3, 80051c8 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 80051c4:	2001      	movs	r0, #1
 80051c6:	e00b      	b.n	80051e0 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c8:	f105 0010 	add.w	r0, r5, #16
 80051cc:	f000 fbb8 	bl	8005940 <xTaskRemoveFromEventList>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d0f7      	beq.n	80051c4 <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 80051d4:	f1b8 0f00 	cmp.w	r8, #0
 80051d8:	d0f4      	beq.n	80051c4 <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80051da:	2001      	movs	r0, #1
 80051dc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80051e0:	f387 8811 	msr	BASEPRI, r7
}
 80051e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80051e8:	3601      	adds	r6, #1
 80051ea:	b276      	sxtb	r6, r6
 80051ec:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80051f0:	e7e8      	b.n	80051c4 <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 80051f2:	4620      	mov	r0, r4
 80051f4:	e7f4      	b.n	80051e0 <xQueueReceiveFromISR+0x94>

080051f6 <uxQueueMessagesWaiting>:
{
 80051f6:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 80051f8:	4604      	mov	r4, r0
 80051fa:	b950      	cbnz	r0, 8005212 <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	b672      	cpsid	i
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	b662      	cpsie	i
 8005210:	e7fe      	b.n	8005210 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8005212:	f001 f8bf 	bl	8006394 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005216:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8005218:	f001 f8e2 	bl	80063e0 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800521c:	4620      	mov	r0, r4
 800521e:	bd10      	pop	{r4, pc}

08005220 <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8005220:	b950      	cbnz	r0, 8005238 <uxQueueMessagesWaitingFromISR+0x18>
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	b672      	cpsid	i
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	b662      	cpsie	i
 8005236:	e7fe      	b.n	8005236 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005238:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800523a:	4770      	bx	lr

0800523c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800523c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800523e:	4a08      	ldr	r2, [pc, #32]	; (8005260 <vQueueUnregisterQueue+0x24>)
	{
 8005240:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005242:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8005246:	684c      	ldr	r4, [r1, #4]
 8005248:	4284      	cmp	r4, r0
 800524a:	d104      	bne.n	8005256 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800524c:	2000      	movs	r0, #0
 800524e:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005252:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005254:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005256:	3301      	adds	r3, #1
 8005258:	2b08      	cmp	r3, #8
 800525a:	d1f2      	bne.n	8005242 <vQueueUnregisterQueue+0x6>
 800525c:	e7fa      	b.n	8005254 <vQueueUnregisterQueue+0x18>
 800525e:	bf00      	nop
 8005260:	2000a858 	.word	0x2000a858

08005264 <vQueueDelete>:
{
 8005264:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8005266:	4604      	mov	r4, r0
 8005268:	b950      	cbnz	r0, 8005280 <vQueueDelete+0x1c>
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	b672      	cpsid	i
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	b662      	cpsie	i
 800527e:	e7fe      	b.n	800527e <vQueueDelete+0x1a>
		vQueueUnregisterQueue( pxQueue );
 8005280:	f7ff ffdc 	bl	800523c <vQueueUnregisterQueue>
		vPortFree( pxQueue );
 8005284:	4620      	mov	r0, r4
}
 8005286:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 800528a:	f000 bfe1 	b.w	8006250 <vPortFree>
	...

08005290 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <prvResetNextTaskUnblockTime+0x1c>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	b91a      	cbnz	r2, 80052a0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005298:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800529c:	605a      	str	r2, [r3, #4]
	}
}
 800529e:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052a4:	68d2      	ldr	r2, [r2, #12]
 80052a6:	6852      	ldr	r2, [r2, #4]
 80052a8:	e7f8      	b.n	800529c <prvResetNextTaskUnblockTime+0xc>
 80052aa:	bf00      	nop
 80052ac:	200002e4 	.word	0x200002e4

080052b0 <prvAddCurrentTaskToDelayedList.isra.2>:
		return xIdleTaskHandle->ulRunTimeCounter;
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80052b0:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052b2:	4c12      	ldr	r4, [pc, #72]	; (80052fc <prvAddCurrentTaskToDelayedList.isra.2+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 80052b4:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 80052b6:	68a5      	ldr	r5, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b8:	68e0      	ldr	r0, [r4, #12]
 80052ba:	3004      	adds	r0, #4
 80052bc:	f7ff fb1e 	bl	80048fc <uxListRemove>
 80052c0:	b938      	cbnz	r0, 80052d2 <prvAddCurrentTaskToDelayedList.isra.2+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80052c2:	68e2      	ldr	r2, [r4, #12]
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052c8:	2201      	movs	r2, #1
 80052ca:	408a      	lsls	r2, r1
 80052cc:	ea23 0302 	bic.w	r3, r3, r2
 80052d0:	6123      	str	r3, [r4, #16]
 80052d2:	19ad      	adds	r5, r5, r6
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052d4:	68e3      	ldr	r3, [r4, #12]
 80052d6:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 80052d8:	d306      	bcc.n	80052e8 <prvAddCurrentTaskToDelayedList.isra.2+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052da:	6960      	ldr	r0, [r4, #20]
 80052dc:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e2:	3104      	adds	r1, #4
 80052e4:	f7ff baf3 	b.w	80048ce <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	68e1      	ldr	r1, [r4, #12]
 80052ec:	3104      	adds	r1, #4
 80052ee:	f7ff faee 	bl	80048ce <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 80052f2:	6863      	ldr	r3, [r4, #4]
 80052f4:	429d      	cmp	r5, r3
 80052f6:	d200      	bcs.n	80052fa <prvAddCurrentTaskToDelayedList.isra.2+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 80052f8:	6065      	str	r5, [r4, #4]
}
 80052fa:	bd70      	pop	{r4, r5, r6, pc}
 80052fc:	200002e4 	.word	0x200002e4

08005300 <prvIdleTask>:
{
 8005300:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005302:	4c12      	ldr	r4, [pc, #72]	; (800534c <prvIdleTask+0x4c>)
				taskYIELD();
 8005304:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8005308:	4e11      	ldr	r6, [pc, #68]	; (8005350 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800530a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800530c:	b943      	cbnz	r3, 8005320 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800530e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005310:	2b01      	cmp	r3, #1
 8005312:	d9fa      	bls.n	800530a <prvIdleTask+0xa>
				taskYIELD();
 8005314:	6037      	str	r7, [r6, #0]
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	e7f4      	b.n	800530a <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8005320:	f001 f838 	bl	8006394 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005326:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005328:	1d28      	adds	r0, r5, #4
 800532a:	f7ff fae7 	bl	80048fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800532e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005330:	3b01      	subs	r3, #1
 8005332:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8005334:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005336:	3b01      	subs	r3, #1
 8005338:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 800533a:	f001 f851 	bl	80063e0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800533e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8005340:	f000 ff86 	bl	8006250 <vPortFree>
			vPortFree( pxTCB );
 8005344:	4628      	mov	r0, r5
 8005346:	f000 ff83 	bl	8006250 <vPortFree>
 800534a:	e7de      	b.n	800530a <prvIdleTask+0xa>
 800534c:	200002e4 	.word	0x200002e4
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <xTaskCreate>:
	{
 8005354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005358:	0095      	lsls	r5, r2, #2
	{
 800535a:	4680      	mov	r8, r0
 800535c:	460f      	mov	r7, r1
 800535e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005360:	4628      	mov	r0, r5
	{
 8005362:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005364:	f000 fef0 	bl	8006148 <pvPortMalloc>
			if( pxStack != NULL )
 8005368:	4682      	mov	sl, r0
 800536a:	b1b8      	cbz	r0, 800539c <xTaskCreate+0x48>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800536c:	205c      	movs	r0, #92	; 0x5c
 800536e:	f000 feeb 	bl	8006148 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005372:	4604      	mov	r4, r0
 8005374:	b178      	cbz	r0, 8005396 <xTaskCreate+0x42>
					pxNewTCB->pxStack = pxStack;
 8005376:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800537a:	462a      	mov	r2, r5
 800537c:	4650      	mov	r0, sl
 800537e:	21a5      	movs	r1, #165	; 0xa5
 8005380:	f009 fefb 	bl	800f17a <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005384:	3d04      	subs	r5, #4
 8005386:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005388:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800538a:	f025 0a07 	bic.w	sl, r5, #7
	if( pcName != NULL )
 800538e:	b947      	cbnz	r7, 80053a2 <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005390:	f884 7034 	strb.w	r7, [r4, #52]	; 0x34
 8005394:	e014      	b.n	80053c0 <xTaskCreate+0x6c>
					vPortFree( pxStack );
 8005396:	4650      	mov	r0, sl
 8005398:	f000 ff5a 	bl	8006250 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800539c:	f04f 36ff 	mov.w	r6, #4294967295
 80053a0:	e082      	b.n	80054a8 <xTaskCreate+0x154>
 80053a2:	1e7b      	subs	r3, r7, #1
 80053a4:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80053a8:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053aa:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80053ae:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80053b2:	7819      	ldrb	r1, [r3, #0]
 80053b4:	b109      	cbz	r1, 80053ba <xTaskCreate+0x66>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053b6:	42bb      	cmp	r3, r7
 80053b8:	d1f7      	bne.n	80053aa <xTaskCreate+0x56>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053ba:	2300      	movs	r3, #0
 80053bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 80053c2:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053c6:	1d27      	adds	r7, r4, #4
 80053c8:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80053ca:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ce:	4638      	mov	r0, r7
 80053d0:	bf28      	it	cs
 80053d2:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80053d4:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80053d6:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053dc:	f7ff fa68 	bl	80048b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053e0:	f104 0018 	add.w	r0, r4, #24
 80053e4:	f7ff fa64 	bl	80048b0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80053e8:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053ec:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053ee:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f0:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f2:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f4:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f6:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053f8:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053fc:	f000 ffa2 	bl	8006344 <pxPortInitialiseStack>
 8005400:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005402:	b106      	cbz	r6, 8005406 <xTaskCreate+0xb2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005404:	6034      	str	r4, [r6, #0]
		uxCurrentNumberOfTasks++;
 8005406:	4d2f      	ldr	r5, [pc, #188]	; (80054c4 <xTaskCreate+0x170>)
	taskENTER_CRITICAL();
 8005408:	f000 ffc4 	bl	8006394 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800540c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800540e:	f105 0834 	add.w	r8, r5, #52	; 0x34
 8005412:	3301      	adds	r3, #1
 8005414:	62eb      	str	r3, [r5, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8005416:	68ee      	ldr	r6, [r5, #12]
 8005418:	2e00      	cmp	r6, #0
 800541a:	d148      	bne.n	80054ae <xTaskCreate+0x15a>
			pxCurrentTCB = pxNewTCB;
 800541c:	60ec      	str	r4, [r5, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800541e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11c      	bne.n	800545e <xTaskCreate+0x10a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005424:	f04f 0914 	mov.w	r9, #20
 8005428:	fb09 8006 	mla	r0, r9, r6, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800542c:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800542e:	f7ff fa34 	bl	800489a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005432:	2e07      	cmp	r6, #7
 8005434:	d1f8      	bne.n	8005428 <xTaskCreate+0xd4>
	vListInitialise( &xDelayedTaskList1 );
 8005436:	4e24      	ldr	r6, [pc, #144]	; (80054c8 <xTaskCreate+0x174>)
	vListInitialise( &xDelayedTaskList2 );
 8005438:	f106 0914 	add.w	r9, r6, #20
	vListInitialise( &xDelayedTaskList1 );
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff fa2c 	bl	800489a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005442:	4648      	mov	r0, r9
 8005444:	f7ff fa29 	bl	800489a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005448:	f106 0028 	add.w	r0, r6, #40	; 0x28
 800544c:	f7ff fa25 	bl	800489a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005450:	f1a6 00a8 	sub.w	r0, r6, #168	; 0xa8
 8005454:	f7ff fa21 	bl	800489a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005458:	602e      	str	r6, [r5, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800545a:	f8c5 9014 	str.w	r9, [r5, #20]
		uxTaskNumber++;
 800545e:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8005462:	2601      	movs	r6, #1
 8005464:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005466:	2014      	movs	r0, #20
		uxTaskNumber++;
 8005468:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800546a:	6929      	ldr	r1, [r5, #16]
 800546c:	fb00 8002 	mla	r0, r0, r2, r8
		uxTaskNumber++;
 8005470:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005474:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005476:	fa06 f302 	lsl.w	r3, r6, r2
 800547a:	430b      	orrs	r3, r1
 800547c:	4639      	mov	r1, r7
 800547e:	612b      	str	r3, [r5, #16]
 8005480:	f7ff fa19 	bl	80048b6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005484:	f000 ffac 	bl	80063e0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005488:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 800548c:	b163      	cbz	r3, 80054a8 <xTaskCreate+0x154>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800548e:	68eb      	ldr	r3, [r5, #12]
 8005490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005494:	429a      	cmp	r2, r3
 8005496:	d207      	bcs.n	80054a8 <xTaskCreate+0x154>
			taskYIELD_IF_USING_PREEMPTION();
 8005498:	4b0c      	ldr	r3, [pc, #48]	; (80054cc <xTaskCreate+0x178>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
	}
 80054a8:	4630      	mov	r0, r6
 80054aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 80054ae:	f8d5 30fc 	ldr.w	r3, [r5, #252]	; 0xfc
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1d3      	bne.n	800545e <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054b6:	68eb      	ldr	r3, [r5, #12]
 80054b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	429a      	cmp	r2, r3
 80054be:	d3ce      	bcc.n	800545e <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 80054c0:	60ec      	str	r4, [r5, #12]
 80054c2:	e7cc      	b.n	800545e <xTaskCreate+0x10a>
 80054c4:	200002e4 	.word	0x200002e4
 80054c8:	200003a4 	.word	0x200003a4
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <vTaskDelete>:
	{
 80054d0:	b570      	push	{r4, r5, r6, lr}
 80054d2:	4605      	mov	r5, r0
 80054d4:	4c2a      	ldr	r4, [pc, #168]	; (8005580 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80054d6:	f000 ff5d 	bl	8006394 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80054da:	b905      	cbnz	r5, 80054de <vTaskDelete+0xe>
 80054dc:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054de:	1d2e      	adds	r6, r5, #4
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff fa0b 	bl	80048fc <uxListRemove>
 80054e6:	b958      	cbnz	r0, 8005500 <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80054ea:	2114      	movs	r1, #20
 80054ec:	fb01 4100 	mla	r1, r1, r0, r4
 80054f0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80054f2:	b92b      	cbnz	r3, 8005500 <vTaskDelete+0x30>
 80054f4:	2201      	movs	r2, #1
 80054f6:	6923      	ldr	r3, [r4, #16]
 80054f8:	4082      	lsls	r2, r0
 80054fa:	ea23 0302 	bic.w	r3, r3, r2
 80054fe:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005500:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005502:	b11b      	cbz	r3, 800550c <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005504:	f105 0018 	add.w	r0, r5, #24
 8005508:	f7ff f9f8 	bl	80048fc <uxListRemove>
			uxTaskNumber++;
 800550c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005510:	3301      	adds	r3, #1
 8005512:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	42ab      	cmp	r3, r5
 800551a:	d11c      	bne.n	8005556 <vTaskDelete+0x86>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800551c:	4631      	mov	r1, r6
 800551e:	4819      	ldr	r0, [pc, #100]	; (8005584 <vTaskDelete+0xb4>)
 8005520:	f7ff f9c9 	bl	80048b6 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8005524:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005526:	3301      	adds	r3, #1
 8005528:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 800552a:	f000 ff59 	bl	80063e0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800552e:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8005532:	b323      	cbz	r3, 800557e <vTaskDelete+0xae>
			if( pxTCB == pxCurrentTCB )
 8005534:	68e3      	ldr	r3, [r4, #12]
 8005536:	42ab      	cmp	r3, r5
 8005538:	d121      	bne.n	800557e <vTaskDelete+0xae>
				configASSERT( uxSchedulerSuspended == 0 );
 800553a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800553e:	b1b3      	cbz	r3, 800556e <vTaskDelete+0x9e>
 8005540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005544:	b672      	cpsid	i
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	b662      	cpsie	i
 8005554:	e7fe      	b.n	8005554 <vTaskDelete+0x84>
				--uxCurrentNumberOfTasks;
 8005556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8005558:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 800555a:	3b01      	subs	r3, #1
 800555c:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 800555e:	f000 fe77 	bl	8006250 <vPortFree>
			vPortFree( pxTCB );
 8005562:	4628      	mov	r0, r5
 8005564:	f000 fe74 	bl	8006250 <vPortFree>
				prvResetNextTaskUnblockTime();
 8005568:	f7ff fe92 	bl	8005290 <prvResetNextTaskUnblockTime>
 800556c:	e7dd      	b.n	800552a <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 800556e:	4b06      	ldr	r3, [pc, #24]	; (8005588 <vTaskDelete+0xb8>)
 8005570:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	f3bf 8f6f 	isb	sy
	}
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	200002e4 	.word	0x200002e4
 8005584:	200002fc 	.word	0x200002fc
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <eTaskGetState>:
	{
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 800558e:	4605      	mov	r5, r0
 8005590:	b950      	cbnz	r0, 80055a8 <eTaskGetState+0x1c>
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	b672      	cpsid	i
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	b662      	cpsie	i
 80055a6:	e7fe      	b.n	80055a6 <eTaskGetState+0x1a>
		if( pxTCB == pxCurrentTCB )
 80055a8:	4c0e      	ldr	r4, [pc, #56]	; (80055e4 <eTaskGetState+0x58>)
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	4283      	cmp	r3, r0
 80055ae:	d012      	beq.n	80055d6 <eTaskGetState+0x4a>
			taskENTER_CRITICAL();
 80055b0:	f000 fef0 	bl	8006394 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 80055b4:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80055b6:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80055b8:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 80055ba:	f000 ff11 	bl	80063e0 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80055be:	42bd      	cmp	r5, r7
 80055c0:	d00b      	beq.n	80055da <eTaskGetState+0x4e>
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	d009      	beq.n	80055da <eTaskGetState+0x4e>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80055c6:	3418      	adds	r4, #24
 80055c8:	42a5      	cmp	r5, r4
 80055ca:	d008      	beq.n	80055de <eTaskGetState+0x52>
				eReturn = eReady;
 80055cc:	2d00      	cmp	r5, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2004      	moveq	r0, #4
 80055d2:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80055d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 80055d6:	2000      	movs	r0, #0
 80055d8:	e7fc      	b.n	80055d4 <eTaskGetState+0x48>
				eReturn = eBlocked;
 80055da:	2002      	movs	r0, #2
 80055dc:	e7fa      	b.n	80055d4 <eTaskGetState+0x48>
					eReturn = eDeleted;
 80055de:	2004      	movs	r0, #4
 80055e0:	e7f8      	b.n	80055d4 <eTaskGetState+0x48>
 80055e2:	bf00      	nop
 80055e4:	200002e4 	.word	0x200002e4

080055e8 <vTaskStartScheduler>:
{
 80055e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80055ea:	4c19      	ldr	r4, [pc, #100]	; (8005650 <vTaskStartScheduler+0x68>)
 80055ec:	2500      	movs	r5, #0
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	4918      	ldr	r1, [pc, #96]	; (8005654 <vTaskStartScheduler+0x6c>)
 80055f2:	f504 7384 	add.w	r3, r4, #264	; 0x108
 80055f6:	9500      	str	r5, [sp, #0]
 80055f8:	4817      	ldr	r0, [pc, #92]	; (8005658 <vTaskStartScheduler+0x70>)
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	462b      	mov	r3, r5
 80055fe:	f7ff fea9 	bl	8005354 <xTaskCreate>
	if( xReturn == pdPASS )
 8005602:	2801      	cmp	r0, #1
 8005604:	d114      	bne.n	8005630 <vTaskStartScheduler+0x48>
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	b672      	cpsid	i
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8005620:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005624:	60a5      	str	r5, [r4, #8]
}
 8005626:	b003      	add	sp, #12
 8005628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 800562c:	f000 bf54 	b.w	80064d8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005630:	3001      	adds	r0, #1
 8005632:	d10a      	bne.n	800564a <vTaskStartScheduler+0x62>
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	b672      	cpsid	i
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	b662      	cpsie	i
 8005648:	e7fe      	b.n	8005648 <vTaskStartScheduler+0x60>
}
 800564a:	b003      	add	sp, #12
 800564c:	bd30      	pop	{r4, r5, pc}
 800564e:	bf00      	nop
 8005650:	200002e4 	.word	0x200002e4
 8005654:	0801daf6 	.word	0x0801daf6
 8005658:	08005301 	.word	0x08005301

0800565c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800565c:	4a03      	ldr	r2, [pc, #12]	; (800566c <vTaskSuspendAll+0x10>)
 800565e:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8005662:	3301      	adds	r3, #1
 8005664:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	200002e4 	.word	0x200002e4

08005670 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <xTaskGetTickCount+0x8>)
 8005672:	6898      	ldr	r0, [r3, #8]
}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	200002e4 	.word	0x200002e4

0800567c <xTaskGetTickCountFromISR>:
{
 800567c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800567e:	f000 ff8d 	bl	800659c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8005682:	4b01      	ldr	r3, [pc, #4]	; (8005688 <xTaskGetTickCountFromISR+0xc>)
 8005684:	6898      	ldr	r0, [r3, #8]
}
 8005686:	bd08      	pop	{r3, pc}
 8005688:	200002e4 	.word	0x200002e4

0800568c <xTaskIncrementTick>:
{
 800568c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005690:	4b37      	ldr	r3, [pc, #220]	; (8005770 <xTaskIncrementTick+0xe4>)
 8005692:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005696:	461c      	mov	r4, r3
 8005698:	2a00      	cmp	r2, #0
 800569a:	d161      	bne.n	8005760 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800569c:	689f      	ldr	r7, [r3, #8]
 800569e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 80056a0:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056a2:	b9c7      	cbnz	r7, 80056d6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	b153      	cbz	r3, 80056c0 <xTaskIncrementTick+0x34>
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	b672      	cpsid	i
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	b662      	cpsie	i
 80056be:	e7fe      	b.n	80056be <xTaskIncrementTick+0x32>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	6962      	ldr	r2, [r4, #20]
 80056c4:	6022      	str	r2, [r4, #0]
 80056c6:	6163      	str	r3, [r4, #20]
 80056c8:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 80056d2:	f7ff fddd 	bl	8005290 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d6:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 80056d8:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056da:	42bb      	cmp	r3, r7
 80056dc:	d910      	bls.n	8005700 <xTaskIncrementTick+0x74>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	2214      	movs	r2, #20
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	fb02 4303 	mla	r3, r2, r3, r4
 80056e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	bf28      	it	cs
 80056ee:	2501      	movcs	r5, #1
		if( xYieldPending != pdFALSE )
 80056f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
			xSwitchRequired = pdTRUE;
 80056f4:	2b00      	cmp	r3, #0
}
 80056f6:	bf0c      	ite	eq
 80056f8:	4628      	moveq	r0, r5
 80056fa:	2001      	movne	r0, #1
 80056fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8005700:	f04f 0b01 	mov.w	fp, #1
 8005704:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8005774 <xTaskIncrementTick+0xe8>
 8005708:	f04f 0a14 	mov.w	sl, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	b91b      	cbnz	r3, 800571a <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005712:	f04f 33ff 	mov.w	r3, #4294967295
						xNextTaskUnblockTime = xItemValue;
 8005716:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005718:	e7e1      	b.n	80056de <xTaskIncrementTick+0x52>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005720:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005722:	429f      	cmp	r7, r3
 8005724:	d3f7      	bcc.n	8005716 <xTaskIncrementTick+0x8a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005726:	f106 0804 	add.w	r8, r6, #4
 800572a:	4640      	mov	r0, r8
 800572c:	f7ff f8e6 	bl	80048fc <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005730:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8005732:	b11b      	cbz	r3, 800573c <xTaskIncrementTick+0xb0>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005734:	f106 0018 	add.w	r0, r6, #24
 8005738:	f7ff f8e0 	bl	80048fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800573c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800573e:	4641      	mov	r1, r8
 8005740:	6922      	ldr	r2, [r4, #16]
 8005742:	fa0b f300 	lsl.w	r3, fp, r0
 8005746:	fb0a 9000 	mla	r0, sl, r0, r9
 800574a:	4313      	orrs	r3, r2
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	f7ff f8b2 	bl	80048b6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8005756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8005758:	429a      	cmp	r2, r3
 800575a:	bf28      	it	cs
 800575c:	2501      	movcs	r5, #1
 800575e:	e7d5      	b.n	800570c <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8005760:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
BaseType_t xSwitchRequired = pdFALSE;
 8005764:	2500      	movs	r5, #0
		++uxPendedTicks;
 8005766:	3301      	adds	r3, #1
 8005768:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800576c:	e7c0      	b.n	80056f0 <xTaskIncrementTick+0x64>
 800576e:	bf00      	nop
 8005770:	200002e4 	.word	0x200002e4
 8005774:	20000318 	.word	0x20000318

08005778 <xTaskResumeAll>:
{
 8005778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 800577c:	4c33      	ldr	r4, [pc, #204]	; (800584c <xTaskResumeAll+0xd4>)
 800577e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8005782:	b953      	cbnz	r3, 800579a <xTaskResumeAll+0x22>
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	b672      	cpsid	i
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	b662      	cpsie	i
 8005798:	e7fe      	b.n	8005798 <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
 800579a:	f000 fdfb 	bl	8006394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800579e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 80057a2:	3b01      	subs	r3, #1
 80057a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057a8:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 80057ac:	b12d      	cbz	r5, 80057ba <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 80057ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80057b0:	f000 fe16 	bl	80063e0 <vPortExitCritical>
}
 80057b4:	4620      	mov	r0, r4
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f6      	beq.n	80057ae <xTaskResumeAll+0x36>
					prvAddTaskToReadyList( pxTCB );
 80057c0:	2601      	movs	r6, #1
 80057c2:	f104 0734 	add.w	r7, r4, #52	; 0x34
 80057c6:	f04f 0814 	mov.w	r8, #20
 80057ca:	e01d      	b.n	8005808 <xTaskResumeAll+0x90>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057cc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 80057d0:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d2:	f105 0904 	add.w	r9, r5, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057d6:	f105 0018 	add.w	r0, r5, #24
 80057da:	f7ff f88f 	bl	80048fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057de:	4648      	mov	r0, r9
 80057e0:	f7ff f88c 	bl	80048fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80057e6:	6922      	ldr	r2, [r4, #16]
 80057e8:	4649      	mov	r1, r9
 80057ea:	fa06 f300 	lsl.w	r3, r6, r0
 80057ee:	fb08 7000 	mla	r0, r8, r0, r7
 80057f2:	4313      	orrs	r3, r2
 80057f4:	6123      	str	r3, [r4, #16]
 80057f6:	f7ff f85e 	bl	80048b6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057fa:	68e3      	ldr	r3, [r4, #12]
 80057fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	429a      	cmp	r2, r3
 8005802:	d301      	bcc.n	8005808 <xTaskResumeAll+0x90>
						xYieldPending = pdTRUE;
 8005804:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005808:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1dd      	bne.n	80057cc <xTaskResumeAll+0x54>
				if( pxTCB != NULL )
 8005810:	b10d      	cbz	r5, 8005816 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
 8005812:	f7ff fd3d 	bl	8005290 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005816:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800581a:	b14d      	cbz	r5, 8005830 <xTaskResumeAll+0xb8>
								xYieldPending = pdTRUE;
 800581c:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 800581e:	f7ff ff35 	bl	800568c <xTaskIncrementTick>
 8005822:	b108      	cbz	r0, 8005828 <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005824:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005828:	3d01      	subs	r5, #1
 800582a:	d1f8      	bne.n	800581e <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
 800582c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
				if( xYieldPending != pdFALSE )
 8005830:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0ba      	beq.n	80057ae <xTaskResumeAll+0x36>
					taskYIELD_IF_USING_PREEMPTION();
 8005838:	4b05      	ldr	r3, [pc, #20]	; (8005850 <xTaskResumeAll+0xd8>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005848:	2401      	movs	r4, #1
 800584a:	e7b1      	b.n	80057b0 <xTaskResumeAll+0x38>
 800584c:	200002e4 	.word	0x200002e4
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <vTaskDelay>:
	{
 8005854:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005856:	b940      	cbnz	r0, 800586a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005858:	4b10      	ldr	r3, [pc, #64]	; (800589c <vTaskDelay+0x48>)
 800585a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	f3bf 8f6f 	isb	sy
	}
 8005868:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800586a:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <vTaskDelay+0x4c>)
 800586c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005870:	b153      	cbz	r3, 8005888 <vTaskDelay+0x34>
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	b672      	cpsid	i
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	b662      	cpsie	i
 8005886:	e7fe      	b.n	8005886 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005888:	f7ff fee8 	bl	800565c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800588c:	f7ff fd10 	bl	80052b0 <prvAddCurrentTaskToDelayedList.isra.2>
			xAlreadyYielded = xTaskResumeAll();
 8005890:	f7ff ff72 	bl	8005778 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005894:	2800      	cmp	r0, #0
 8005896:	d0df      	beq.n	8005858 <vTaskDelay+0x4>
 8005898:	e7e6      	b.n	8005868 <vTaskDelay+0x14>
 800589a:	bf00      	nop
 800589c:	e000ed04 	.word	0xe000ed04
 80058a0:	200002e4 	.word	0x200002e4

080058a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058a4:	4b18      	ldr	r3, [pc, #96]	; (8005908 <vTaskSwitchContext+0x64>)
 80058a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80058aa:	4618      	mov	r0, r3
{
 80058ac:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058ae:	b11a      	cbz	r2, 80058b8 <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 80058b0:	2201      	movs	r2, #1
 80058b2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 80058b6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80058b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058bc:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80058be:	fab2 f282 	clz	r2, r2
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	2114      	movs	r1, #20
 80058c6:	f1c2 021f 	rsb	r2, r2, #31
 80058ca:	4351      	muls	r1, r2
 80058cc:	440b      	add	r3, r1
 80058ce:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80058d0:	b954      	cbnz	r4, 80058e8 <vTaskSwitchContext+0x44>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	b672      	cpsid	i
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	b662      	cpsie	i
 80058e6:	e7fe      	b.n	80058e6 <vTaskSwitchContext+0x42>
 80058e8:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80058ea:	4401      	add	r1, r0
 80058ec:	6864      	ldr	r4, [r4, #4]
 80058ee:	313c      	adds	r1, #60	; 0x3c
 80058f0:	428c      	cmp	r4, r1
 80058f2:	639c      	str	r4, [r3, #56]	; 0x38
 80058f4:	bf04      	itt	eq
 80058f6:	6861      	ldreq	r1, [r4, #4]
 80058f8:	6399      	streq	r1, [r3, #56]	; 0x38
 80058fa:	2314      	movs	r3, #20
 80058fc:	fb03 0202 	mla	r2, r3, r2, r0
 8005900:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	60c3      	str	r3, [r0, #12]
}
 8005906:	e7d6      	b.n	80058b6 <vTaskSwitchContext+0x12>
 8005908:	200002e4 	.word	0x200002e4

0800590c <vTaskPlaceOnEventList>:
{
 800590c:	b510      	push	{r4, lr}
 800590e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005910:	b950      	cbnz	r0, 8005928 <vTaskPlaceOnEventList+0x1c>
 8005912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005916:	b672      	cpsid	i
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	b662      	cpsie	i
 8005926:	e7fe      	b.n	8005926 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <vTaskPlaceOnEventList+0x30>)
 800592a:	68d9      	ldr	r1, [r3, #12]
 800592c:	3118      	adds	r1, #24
 800592e:	f7fe ffce 	bl	80048ce <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005932:	4620      	mov	r0, r4
}
 8005934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005938:	f7ff bcba 	b.w	80052b0 <prvAddCurrentTaskToDelayedList.isra.2>
 800593c:	200002e4 	.word	0x200002e4

08005940 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005940:	68c3      	ldr	r3, [r0, #12]
{
 8005942:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005946:	b955      	cbnz	r5, 800595e <xTaskRemoveFromEventList+0x1e>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	b672      	cpsid	i
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	b662      	cpsie	i
 800595c:	e7fe      	b.n	800595c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800595e:	f105 0618 	add.w	r6, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005962:	4c14      	ldr	r4, [pc, #80]	; (80059b4 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005964:	4630      	mov	r0, r6
 8005966:	f7fe ffc9 	bl	80048fc <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 800596e:	b9d3      	cbnz	r3, 80059a6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005970:	1d2e      	adds	r6, r5, #4
 8005972:	4630      	mov	r0, r6
 8005974:	f7fe ffc2 	bl	80048fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005978:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800597a:	2301      	movs	r3, #1
 800597c:	6921      	ldr	r1, [r4, #16]
 800597e:	2014      	movs	r0, #20
 8005980:	4093      	lsls	r3, r2
 8005982:	430b      	orrs	r3, r1
 8005984:	4631      	mov	r1, r6
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800598c:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005990:	f7fe ff91 	bl	80048b6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005994:	68e3      	ldr	r3, [r4, #12]
 8005996:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	429a      	cmp	r2, r3
 800599c:	d907      	bls.n	80059ae <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800599e:	2001      	movs	r0, #1
 80059a0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
}
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059a6:	4631      	mov	r1, r6
 80059a8:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80059ac:	e7f0      	b.n	8005990 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 80059ae:	2000      	movs	r0, #0
	return xReturn;
 80059b0:	e7f8      	b.n	80059a4 <xTaskRemoveFromEventList+0x64>
 80059b2:	bf00      	nop
 80059b4:	200002e4 	.word	0x200002e4

080059b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059b8:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <vTaskInternalSetTimeOutState+0x10>)
 80059ba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059be:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059c0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059c2:	6043      	str	r3, [r0, #4]
}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	200002e4 	.word	0x200002e4

080059cc <xTaskCheckForTimeOut>:
{
 80059cc:	b570      	push	{r4, r5, r6, lr}
 80059ce:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80059d0:	4605      	mov	r5, r0
 80059d2:	b950      	cbnz	r0, 80059ea <xTaskCheckForTimeOut+0x1e>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	b672      	cpsid	i
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	b662      	cpsie	i
 80059e8:	e7fe      	b.n	80059e8 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80059ea:	b951      	cbnz	r1, 8005a02 <xTaskCheckForTimeOut+0x36>
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	b672      	cpsid	i
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	b662      	cpsie	i
 8005a00:	e7fe      	b.n	8005a00 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8005a02:	f000 fcc7 	bl	8006394 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005a06:	480e      	ldr	r0, [pc, #56]	; (8005a40 <xTaskCheckForTimeOut+0x74>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a08:	682e      	ldr	r6, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8005a0a:	6883      	ldr	r3, [r0, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a0c:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a10:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a12:	4286      	cmp	r6, r0
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a14:	eba3 0201 	sub.w	r2, r3, r1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a18:	d001      	beq.n	8005a1e <xTaskCheckForTimeOut+0x52>
 8005a1a:	4299      	cmp	r1, r3
 8005a1c:	d90e      	bls.n	8005a3c <xTaskCheckForTimeOut+0x70>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d909      	bls.n	8005a38 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8005a24:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a26:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8005a28:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 8005a2a:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a2c:	f7ff ffc4 	bl	80059b8 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8005a30:	f000 fcd6 	bl	80063e0 <vPortExitCritical>
}
 8005a34:	4620      	mov	r0, r4
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005a3c:	2401      	movs	r4, #1
 8005a3e:	e7f7      	b.n	8005a30 <xTaskCheckForTimeOut+0x64>
 8005a40:	200002e4 	.word	0x200002e4

08005a44 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005a44:	4b02      	ldr	r3, [pc, #8]	; (8005a50 <vTaskMissedYield+0xc>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	200002e4 	.word	0x200002e4

08005a54 <vTaskGetInfo>:
	{
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	460c      	mov	r4, r1
 8005a58:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	b908      	cbnz	r0, 8005a62 <vTaskGetInfo+0xe>
 8005a5e:	4a15      	ldr	r2, [pc, #84]	; (8005ab4 <vTaskGetInfo+0x60>)
 8005a60:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005a62:	f105 0234 	add.w	r2, r5, #52	; 0x34
		if( eState != eInvalid )
 8005a66:	2b05      	cmp	r3, #5
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005a68:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005a6a:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005a6c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005a6e:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005a70:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005a72:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005a74:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005a76:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005a78:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8005a7a:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8005a82:	d010      	beq.n	8005aa6 <vTaskGetInfo+0x52>
			if( pxTCB == pxCurrentTCB )
 8005a84:	490b      	ldr	r1, [pc, #44]	; (8005ab4 <vTaskGetInfo+0x60>)
 8005a86:	68c9      	ldr	r1, [r1, #12]
 8005a88:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 8005a8a:	bf0c      	ite	eq
 8005a8c:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 8005a8e:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 8005a90:	b176      	cbz	r6, 8005ab0 <vTaskGetInfo+0x5c>
 8005a92:	6b29      	ldr	r1, [r5, #48]	; 0x30
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005a94:	460a      	mov	r2, r1
 8005a96:	1a53      	subs	r3, r2, r1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005a98:	f812 0b01 	ldrb.w	r0, [r2], #1
 8005a9c:	28a5      	cmp	r0, #165	; 0xa5
 8005a9e:	d0fa      	beq.n	8005a96 <vTaskGetInfo+0x42>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005aa0:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005aa2:	8423      	strh	r3, [r4, #32]
	}
 8005aa4:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	f7ff fd70 	bl	800558c <eTaskGetState>
 8005aac:	7320      	strb	r0, [r4, #12]
 8005aae:	e7ef      	b.n	8005a90 <vTaskGetInfo+0x3c>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005ab0:	8426      	strh	r6, [r4, #32]
	}
 8005ab2:	e7f7      	b.n	8005aa4 <vTaskGetInfo+0x50>
 8005ab4:	200002e4 	.word	0x200002e4

08005ab8 <prvListTasksWithinSingleList>:
	{
 8005ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005abc:	680d      	ldr	r5, [r1, #0]
	{
 8005abe:	4681      	mov	r9, r0
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	4692      	mov	sl, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8005ac4:	b30d      	cbz	r5, 8005b0a <prvListTasksWithinSingleList+0x52>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac6:	684b      	ldr	r3, [r1, #4]
 8005ac8:	f101 0708 	add.w	r7, r1, #8
	UBaseType_t uxTask = 0;
 8005acc:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005ace:	f04f 0b24 	mov.w	fp, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	42bb      	cmp	r3, r7
 8005ad6:	604b      	str	r3, [r1, #4]
 8005ad8:	bf04      	itt	eq
 8005ada:	68cb      	ldreq	r3, [r1, #12]
 8005adc:	604b      	streq	r3, [r1, #4]
 8005ade:	684b      	ldr	r3, [r1, #4]
 8005ae0:	f8d3 800c 	ldr.w	r8, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005ae6:	fb0b 9105 	mla	r1, fp, r5, r9
 8005aea:	2201      	movs	r2, #1
				uxTask++;
 8005aec:	3501      	adds	r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	429f      	cmp	r7, r3
 8005af2:	6063      	str	r3, [r4, #4]
 8005af4:	bf04      	itt	eq
 8005af6:	68e3      	ldreq	r3, [r4, #12]
 8005af8:	6063      	streq	r3, [r4, #4]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8005afe:	4653      	mov	r3, sl
 8005b00:	4630      	mov	r0, r6
 8005b02:	f7ff ffa7 	bl	8005a54 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 8005b06:	45b0      	cmp	r8, r6
 8005b08:	d1ec      	bne.n	8005ae4 <prvListTasksWithinSingleList+0x2c>
	}
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005b10 <uxTaskGetSystemState>:
	{
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8005b14:	4d1c      	ldr	r5, [pc, #112]	; (8005b88 <uxTaskGetSystemState+0x78>)
	{
 8005b16:	4680      	mov	r8, r0
 8005b18:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8005b1a:	f7ff fd9f 	bl	800565c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8005b1e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005b20:	428b      	cmp	r3, r1
 8005b22:	d82e      	bhi.n	8005b82 <uxTaskGetSystemState+0x72>
 8005b24:	2600      	movs	r6, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005b26:	f105 0aac 	add.w	sl, r5, #172	; 0xac
 8005b2a:	f04f 0924 	mov.w	r9, #36	; 0x24
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8005b2e:	4634      	mov	r4, r6
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005b30:	eb0a 0106 	add.w	r1, sl, r6
 8005b34:	3e14      	subs	r6, #20
 8005b36:	fb09 8004 	mla	r0, r9, r4, r8
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f7ff ffbc 	bl	8005ab8 <prvListTasksWithinSingleList>
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b40:	f116 0f8c 	cmn.w	r6, #140	; 0x8c
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005b44:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b46:	d1f3      	bne.n	8005b30 <uxTaskGetSystemState+0x20>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8005b48:	6829      	ldr	r1, [r5, #0]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	fb09 8004 	mla	r0, r9, r4, r8
 8005b50:	f7ff ffb2 	bl	8005ab8 <prvListTasksWithinSingleList>
 8005b54:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005b56:	6969      	ldr	r1, [r5, #20]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	fb09 8004 	mla	r0, r9, r4, r8
 8005b5e:	f7ff ffab 	bl	8005ab8 <prvListTasksWithinSingleList>
 8005b62:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005b64:	2204      	movs	r2, #4
 8005b66:	4909      	ldr	r1, [pc, #36]	; (8005b8c <uxTaskGetSystemState+0x7c>)
 8005b68:	fb09 8004 	mla	r0, r9, r4, r8
 8005b6c:	f7ff ffa4 	bl	8005ab8 <prvListTasksWithinSingleList>
 8005b70:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8005b72:	b10f      	cbz	r7, 8005b78 <uxTaskGetSystemState+0x68>
						*pulTotalRunTime = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
 8005b78:	f7ff fdfe 	bl	8005778 <xTaskResumeAll>
	}
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8005b82:	2400      	movs	r4, #0
 8005b84:	e7f8      	b.n	8005b78 <uxTaskGetSystemState+0x68>
 8005b86:	bf00      	nop
 8005b88:	200002e4 	.word	0x200002e4
 8005b8c:	200002fc 	.word	0x200002fc

08005b90 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <xTaskGetSchedulerState+0x1c>)
 8005b92:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8005b96:	b132      	cbz	r2, 8005ba6 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b98:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8005b9c:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b9e:	bf0c      	ite	eq
 8005ba0:	2002      	moveq	r0, #2
 8005ba2:	2000      	movne	r0, #0
 8005ba4:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ba6:	2001      	movs	r0, #1
	}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	200002e4 	.word	0x200002e4

08005bb0 <xTaskPriorityInherit>:
	{
 8005bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d035      	beq.n	8005c26 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bba:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <xTaskPriorityInherit+0x98>)
 8005bbc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005bbe:	68d1      	ldr	r1, [r2, #12]
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	d236      	bcs.n	8005c36 <xTaskPriorityInherit+0x86>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bc8:	6982      	ldr	r2, [r0, #24]
 8005bca:	2a00      	cmp	r2, #0
 8005bcc:	db04      	blt.n	8005bd8 <xTaskPriorityInherit+0x28>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bce:	68ea      	ldr	r2, [r5, #12]
 8005bd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bd2:	f1c2 0207 	rsb	r2, r2, #7
 8005bd6:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bd8:	4e1c      	ldr	r6, [pc, #112]	; (8005c4c <xTaskPriorityInherit+0x9c>)
 8005bda:	2714      	movs	r7, #20
 8005bdc:	6962      	ldr	r2, [r4, #20]
 8005bde:	fb07 6303 	mla	r3, r7, r3, r6
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d121      	bne.n	8005c2a <xTaskPriorityInherit+0x7a>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be6:	f104 0804 	add.w	r8, r4, #4
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7fe fe86 	bl	80048fc <uxListRemove>
 8005bf0:	b950      	cbnz	r0, 8005c08 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005bf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005bf4:	fb07 5701 	mla	r7, r7, r1, r5
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bfa:	b92b      	cbnz	r3, 8005c08 <xTaskPriorityInherit+0x58>
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	692b      	ldr	r3, [r5, #16]
 8005c00:	408a      	lsls	r2, r1
 8005c02:	ea23 0302 	bic.w	r3, r3, r2
 8005c06:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c08:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c0a:	2014      	movs	r0, #20
 8005c0c:	6929      	ldr	r1, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c10:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c12:	2401      	movs	r4, #1
 8005c14:	fb00 6003 	mla	r0, r0, r3, r6
 8005c18:	fa04 f203 	lsl.w	r2, r4, r3
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	4641      	mov	r1, r8
 8005c20:	612a      	str	r2, [r5, #16]
 8005c22:	f7fe fe48 	bl	80048b6 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8005c26:	4620      	mov	r0, r4
		return xReturn;
 8005c28:	e003      	b.n	8005c32 <xTaskPriorityInherit+0x82>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c2a:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8005c2c:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8005c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c36:	68d3      	ldr	r3, [r2, #12]
 8005c38:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8005c3a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005c3c:	42a0      	cmp	r0, r4
 8005c3e:	bf2c      	ite	cs
 8005c40:	2000      	movcs	r0, #0
 8005c42:	2001      	movcc	r0, #1
 8005c44:	e7f5      	b.n	8005c32 <xTaskPriorityInherit+0x82>
 8005c46:	bf00      	nop
 8005c48:	200002e4 	.word	0x200002e4
 8005c4c:	20000318 	.word	0x20000318

08005c50 <xTaskPriorityDisinherit>:
	{
 8005c50:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8005c52:	4604      	mov	r4, r0
 8005c54:	b908      	cbnz	r0, 8005c5a <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005c56:	2000      	movs	r0, #0
	}
 8005c58:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005c5a:	4d24      	ldr	r5, [pc, #144]	; (8005cec <xTaskPriorityDisinherit+0x9c>)
 8005c5c:	68eb      	ldr	r3, [r5, #12]
 8005c5e:	4283      	cmp	r3, r0
 8005c60:	d00a      	beq.n	8005c78 <xTaskPriorityDisinherit+0x28>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	b672      	cpsid	i
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	b662      	cpsie	i
 8005c76:	e7fe      	b.n	8005c76 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7a:	b953      	cbnz	r3, 8005c92 <xTaskPriorityDisinherit+0x42>
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	b672      	cpsid	i
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	b662      	cpsie	i
 8005c90:	e7fe      	b.n	8005c90 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c92:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005c94:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c96:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8005c98:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c9a:	4291      	cmp	r1, r2
 8005c9c:	d0db      	beq.n	8005c56 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1d9      	bne.n	8005c56 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca2:	1d06      	adds	r6, r0, #4
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7fe fe29 	bl	80048fc <uxListRemove>
 8005caa:	b958      	cbnz	r0, 8005cc4 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005cae:	2114      	movs	r1, #20
 8005cb0:	fb01 5100 	mla	r1, r1, r0, r5
 8005cb4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005cb6:	b92b      	cbnz	r3, 8005cc4 <xTaskPriorityDisinherit+0x74>
 8005cb8:	2201      	movs	r2, #1
 8005cba:	692b      	ldr	r3, [r5, #16]
 8005cbc:	4082      	lsls	r2, r0
 8005cbe:	ea23 0302 	bic.w	r3, r3, r2
 8005cc2:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cc4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 8005cc6:	2014      	movs	r0, #20
 8005cc8:	6929      	ldr	r1, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cca:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cce:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cd2:	2401      	movs	r4, #1
 8005cd4:	fa04 f203 	lsl.w	r2, r4, r3
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	4631      	mov	r1, r6
 8005cdc:	612a      	str	r2, [r5, #16]
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <xTaskPriorityDisinherit+0xa0>)
 8005ce0:	fb00 2003 	mla	r0, r0, r3, r2
 8005ce4:	f7fe fde7 	bl	80048b6 <vListInsertEnd>
					xReturn = pdTRUE;
 8005ce8:	4620      	mov	r0, r4
		return xReturn;
 8005cea:	e7b5      	b.n	8005c58 <xTaskPriorityDisinherit+0x8>
 8005cec:	200002e4 	.word	0x200002e4
 8005cf0:	20000318 	.word	0x20000318

08005cf4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d051      	beq.n	8005da2 <vTaskPriorityDisinheritAfterTimeout+0xae>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cfe:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8005d00:	b952      	cbnz	r2, 8005d18 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	b672      	cpsid	i
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	b662      	cpsie	i
 8005d16:	e7fe      	b.n	8005d16 <vTaskPriorityDisinheritAfterTimeout+0x22>
 8005d18:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005d1a:	4299      	cmp	r1, r3
 8005d1c:	bf38      	it	cc
 8005d1e:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005d22:	428b      	cmp	r3, r1
 8005d24:	d03d      	beq.n	8005da2 <vTaskPriorityDisinheritAfterTimeout+0xae>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d26:	2a01      	cmp	r2, #1
 8005d28:	d13b      	bne.n	8005da2 <vTaskPriorityDisinheritAfterTimeout+0xae>
					configASSERT( pxTCB != pxCurrentTCB );
 8005d2a:	4d1f      	ldr	r5, [pc, #124]	; (8005da8 <vTaskPriorityDisinheritAfterTimeout+0xb4>)
 8005d2c:	68ea      	ldr	r2, [r5, #12]
 8005d2e:	4282      	cmp	r2, r0
 8005d30:	d10a      	bne.n	8005d48 <vTaskPriorityDisinheritAfterTimeout+0x54>
 8005d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d36:	b672      	cpsid	i
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	b662      	cpsie	i
 8005d46:	e7fe      	b.n	8005d46 <vTaskPriorityDisinheritAfterTimeout+0x52>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d48:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d4a:	2714      	movs	r7, #20
 8005d4c:	4e17      	ldr	r6, [pc, #92]	; (8005dac <vTaskPriorityDisinheritAfterTimeout+0xb8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d4e:	2a00      	cmp	r2, #0
					pxTCB->uxPriority = uxPriorityToUse;
 8005d50:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d52:	fb07 6303 	mla	r3, r7, r3, r6
 8005d56:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d58:	bfa4      	itt	ge
 8005d5a:	f1c1 0107 	rsbge	r1, r1, #7
 8005d5e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d11e      	bne.n	8005da2 <vTaskPriorityDisinheritAfterTimeout+0xae>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d64:	f100 0804 	add.w	r8, r0, #4
 8005d68:	4640      	mov	r0, r8
 8005d6a:	f7fe fdc7 	bl	80048fc <uxListRemove>
 8005d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005d70:	b950      	cbnz	r0, 8005d88 <vTaskPriorityDisinheritAfterTimeout+0x94>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005d72:	fb07 5702 	mla	r7, r7, r2, r5
 8005d76:	2301      	movs	r3, #1
 8005d78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d7a:	fa03 f102 	lsl.w	r1, r3, r2
 8005d7e:	b918      	cbnz	r0, 8005d88 <vTaskPriorityDisinheritAfterTimeout+0x94>
 8005d80:	692b      	ldr	r3, [r5, #16]
 8005d82:	ea23 0301 	bic.w	r3, r3, r1
 8005d86:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 8005d88:	2301      	movs	r3, #1
 8005d8a:	6929      	ldr	r1, [r5, #16]
 8005d8c:	2014      	movs	r0, #20
 8005d8e:	4093      	lsls	r3, r2
 8005d90:	fb00 6002 	mla	r0, r0, r2, r6
 8005d94:	430b      	orrs	r3, r1
 8005d96:	4641      	mov	r1, r8
 8005d98:	612b      	str	r3, [r5, #16]
	}
 8005d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 8005d9e:	f7fe bd8a 	b.w	80048b6 <vListInsertEnd>
	}
 8005da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005da6:	bf00      	nop
 8005da8:	200002e4 	.word	0x200002e4
 8005dac:	20000318 	.word	0x20000318

08005db0 <vTaskList>:
	{
 8005db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 8005db4:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <vTaskList+0xa0>)
		*pcWriteBuffer = ( char ) 0x00;
 8005db6:	2400      	movs	r4, #0
	{
 8005db8:	4606      	mov	r6, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005dba:	2724      	movs	r7, #36	; 0x24
		*pcWriteBuffer = ( char ) 0x00;
 8005dbc:	7004      	strb	r4, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
 8005dbe:	6add      	ldr	r5, [r3, #44]	; 0x2c
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8005dc0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005dc2:	4378      	muls	r0, r7
 8005dc4:	f000 f9c0 	bl	8006148 <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 8005dc8:	4680      	mov	r8, r0
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d03c      	beq.n	8005e48 <vTaskList+0x98>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8005dce:	4622      	mov	r2, r4
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	f7ff fe9d 	bl	8005b10 <uxTaskGetSystemState>
 8005dd6:	4644      	mov	r4, r8
 8005dd8:	fb07 8700 	mla	r7, r7, r0, r8
 8005ddc:	f8df a078 	ldr.w	sl, [pc, #120]	; 8005e58 <vTaskList+0xa8>
			pcBuffer[ x ] = ' ';
 8005de0:	f04f 0b20 	mov.w	fp, #32
			for( x = 0; x < uxArraySize; x++ )
 8005de4:	42bc      	cmp	r4, r7
 8005de6:	d105      	bne.n	8005df4 <vTaskList+0x44>
			vPortFree( pxTaskStatusArray );
 8005de8:	4640      	mov	r0, r8
	}
 8005dea:	b003      	add	sp, #12
 8005dec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 8005df0:	f000 ba2e 	b.w	8006250 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8005df4:	7b23      	ldrb	r3, [r4, #12]
		strcpy( pcBuffer, pcTaskName );
 8005df6:	4630      	mov	r0, r6
 8005df8:	6861      	ldr	r1, [r4, #4]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	bf94      	ite	ls
 8005dfe:	f81a 9003 	ldrbls.w	r9, [sl, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8005e02:	f04f 0900 	movhi.w	r9, #0
		strcpy( pcBuffer, pcTaskName );
 8005e06:	f009 faa0 	bl	800f34a <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7fa fa22 	bl	8000254 <strlen>
 8005e10:	1835      	adds	r5, r6, r0
 8005e12:	1bab      	subs	r3, r5, r6
 8005e14:	2b0e      	cmp	r3, #14
 8005e16:	d914      	bls.n	8005e42 <vTaskList+0x92>
		pcBuffer[ x ] = ( char ) 0x00;
 8005e18:	2300      	movs	r3, #0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005e1a:	464a      	mov	r2, r9
 8005e1c:	490d      	ldr	r1, [pc, #52]	; (8005e54 <vTaskList+0xa4>)
 8005e1e:	4628      	mov	r0, r5
		pcBuffer[ x ] = ( char ) 0x00;
 8005e20:	702b      	strb	r3, [r5, #0]
 8005e22:	3424      	adds	r4, #36	; 0x24
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8005e24:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	f834 3c04 	ldrh.w	r3, [r4, #-4]
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8005e34:	f009 fa5a 	bl	800f2ec <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7fa fa0b 	bl	8000254 <strlen>
 8005e3e:	182e      	adds	r6, r5, r0
 8005e40:	e7d0      	b.n	8005de4 <vTaskList+0x34>
			pcBuffer[ x ] = ' ';
 8005e42:	f805 bb01 	strb.w	fp, [r5], #1
 8005e46:	e7e4      	b.n	8005e12 <vTaskList+0x62>
	}
 8005e48:	b003      	add	sp, #12
 8005e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4e:	bf00      	nop
 8005e50:	200002e4 	.word	0x200002e4
 8005e54:	0801dafb 	.word	0x0801dafb
 8005e58:	0801495d 	.word	0x0801495d

08005e5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005e5c:	4b04      	ldr	r3, [pc, #16]	; (8005e70 <pvTaskIncrementMutexHeldCount+0x14>)
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	b11a      	cbz	r2, 8005e6a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e62:	68d9      	ldr	r1, [r3, #12]
 8005e64:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8005e66:	3201      	adds	r2, #1
 8005e68:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8005e6a:	68d8      	ldr	r0, [r3, #12]
	}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200002e4 	.word	0x200002e4

08005e74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005e74:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8005e76:	f7ff fbb7 	bl	80055e8 <vTaskStartScheduler>
  
  return osOK;
}
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	bd08      	pop	{r3, pc}

08005e7e <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e7e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8005e82:	b10b      	cbz	r3, 8005e88 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8005e84:	f7ff bbfa 	b.w	800567c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8005e88:	f7ff bbf2 	b.w	8005670 <xTaskGetTickCount>

08005e8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005e8c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e8e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8005e92:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e94:	8a02      	ldrh	r2, [r0, #16]
{
 8005e96:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8005e98:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005e9a:	e9d0 1500 	ldrd	r1, r5, [r0]
    fpriority += (priority - osPriorityIdle);
 8005e9e:	bf14      	ite	ne
 8005ea0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ea2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ea4:	a803      	add	r0, sp, #12
 8005ea6:	e9cd 4000 	strd	r4, r0, [sp]
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7ff fa52 	bl	8005354 <xTaskCreate>
 8005eb0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005eb2:	bf0c      	ite	eq
 8005eb4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8005eb6:	2000      	movne	r0, #0
}
 8005eb8:	b005      	add	sp, #20
 8005eba:	bd30      	pop	{r4, r5, pc}

08005ebc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005ebc:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005ebe:	f7ff fb07 	bl	80054d0 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	bd08      	pop	{r3, pc}

08005ec6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	bf08      	it	eq
 8005eca:	2001      	moveq	r0, #1
{
 8005ecc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ece:	f7ff fcc1 	bl	8005854 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	bd08      	pop	{r3, pc}

08005ed6 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f7fe bef0 	b.w	8004cbc <xQueueCreateMutex>

08005edc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005edc:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005ede:	2400      	movs	r4, #0
 8005ee0:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8005ee2:	b1e0      	cbz	r0, 8005f1e <osMutexWait+0x42>
 8005ee4:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005ee8:	b1a3      	cbz	r3, 8005f14 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005eea:	aa01      	add	r2, sp, #4
 8005eec:	4621      	mov	r1, r4
 8005eee:	f7ff f92d 	bl	800514c <xQueueReceiveFromISR>
 8005ef2:	2801      	cmp	r0, #1
 8005ef4:	d002      	beq.n	8005efc <osMutexWait+0x20>
      return osErrorOS;
 8005ef6:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8005ef8:	b002      	add	sp, #8
 8005efa:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	b13b      	cbz	r3, 8005f10 <osMutexWait+0x34>
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <osMutexWait+0x48>)
 8005f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f06:	601a      	str	r2, [r3, #0]
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
  return osOK;
 8005f10:	2000      	movs	r0, #0
 8005f12:	e7f1      	b.n	8005ef8 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005f14:	f7ff f850 	bl	8004fb8 <xQueueSemaphoreTake>
 8005f18:	2801      	cmp	r0, #1
 8005f1a:	d0f9      	beq.n	8005f10 <osMutexWait+0x34>
 8005f1c:	e7eb      	b.n	8005ef6 <osMutexWait+0x1a>
    return osErrorParameter;
 8005f1e:	2080      	movs	r0, #128	; 0x80
 8005f20:	e7ea      	b.n	8005ef8 <osMutexWait+0x1c>
 8005f22:	bf00      	nop
 8005f24:	e000ed04 	.word	0xe000ed04

08005f28 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005f28:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8005f2a:	2400      	movs	r4, #0
 8005f2c:	9401      	str	r4, [sp, #4]
 8005f2e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8005f32:	b193      	cbz	r3, 8005f5a <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005f34:	a901      	add	r1, sp, #4
 8005f36:	f7fe ff3c 	bl	8004db2 <xQueueGiveFromISR>
 8005f3a:	2801      	cmp	r0, #1
 8005f3c:	d113      	bne.n	8005f66 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f3e:	9b01      	ldr	r3, [sp, #4]
 8005f40:	b913      	cbnz	r3, 8005f48 <osMutexRelease+0x20>
  osStatus result = osOK;
 8005f42:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8005f44:	b002      	add	sp, #8
 8005f46:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8005f48:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <osMutexRelease+0x44>)
 8005f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	e7f3      	b.n	8005f42 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	f7fe fdf3 	bl	8004b48 <xQueueGenericSend>
 8005f62:	2801      	cmp	r0, #1
 8005f64:	d0ed      	beq.n	8005f42 <osMutexRelease+0x1a>
    result = osErrorOS;
 8005f66:	20ff      	movs	r0, #255	; 0xff
 8005f68:	e7ec      	b.n	8005f44 <osMutexRelease+0x1c>
 8005f6a:	bf00      	nop
 8005f6c:	e000ed04 	.word	0xe000ed04

08005f70 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8005f70:	b510      	push	{r4, lr}
 8005f72:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8005f76:	b91c      	cbnz	r4, 8005f80 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8005f78:	f7ff f974 	bl	8005264 <vQueueDelete>

  return osOK;
 8005f7c:	4620      	mov	r0, r4
}
 8005f7e:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8005f80:	2082      	movs	r0, #130	; 0x82
 8005f82:	e7fc      	b.n	8005f7e <osMutexDelete+0xe>

08005f84 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8005f84:	2901      	cmp	r1, #1
{ 
 8005f86:	4608      	mov	r0, r1
 8005f88:	b510      	push	{r4, lr}
  if (count == 1) {
 8005f8a:	d10c      	bne.n	8005fa6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	2100      	movs	r1, #0
 8005f90:	f7fe fd92 	bl	8004ab8 <xQueueGenericCreate>
 8005f94:	4604      	mov	r4, r0
 8005f96:	b120      	cbz	r0, 8005fa2 <osSemaphoreCreate+0x1e>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	f7fe fdd3 	bl	8004b48 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	bd10      	pop	{r4, pc}
 8005fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 8005faa:	f7fe bdab 	b.w	8004b04 <xQueueCreateCountingSemaphore>
	...

08005fb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005fb0:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8005fb6:	b1e0      	cbz	r0, 8005ff2 <osSemaphoreWait+0x42>
 8005fb8:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8005fbc:	b1a3      	cbz	r3, 8005fe8 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005fbe:	aa01      	add	r2, sp, #4
 8005fc0:	4621      	mov	r1, r4
 8005fc2:	f7ff f8c3 	bl	800514c <xQueueReceiveFromISR>
 8005fc6:	2801      	cmp	r0, #1
 8005fc8:	d002      	beq.n	8005fd0 <osSemaphoreWait+0x20>
      return osErrorOS;
 8005fca:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8005fcc:	b002      	add	sp, #8
 8005fce:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8005fd0:	9b01      	ldr	r3, [sp, #4]
 8005fd2:	b13b      	cbz	r3, 8005fe4 <osSemaphoreWait+0x34>
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <osSemaphoreWait+0x48>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
  return osOK;
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e7f1      	b.n	8005fcc <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005fe8:	f7fe ffe6 	bl	8004fb8 <xQueueSemaphoreTake>
 8005fec:	2801      	cmp	r0, #1
 8005fee:	d0f9      	beq.n	8005fe4 <osSemaphoreWait+0x34>
 8005ff0:	e7eb      	b.n	8005fca <osSemaphoreWait+0x1a>
    return osErrorParameter;
 8005ff2:	2080      	movs	r0, #128	; 0x80
 8005ff4:	e7ea      	b.n	8005fcc <osSemaphoreWait+0x1c>
 8005ff6:	bf00      	nop
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <osSemaphoreRelease>:
 8005ffc:	f7ff bf94 	b.w	8005f28 <osMutexRelease>

08006000 <osSemaphoreDelete>:
 8006000:	f7ff bfb6 	b.w	8005f70 <osMutexDelete>

08006004 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006004:	2200      	movs	r2, #0
 8006006:	e9d0 0100 	ldrd	r0, r1, [r0]
 800600a:	f7fe bd55 	b.w	8004ab8 <xQueueGenericCreate>
	...

08006010 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8006012:	2400      	movs	r4, #0
{
 8006014:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006016:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8006018:	42a2      	cmp	r2, r4
 800601a:	bf08      	it	eq
 800601c:	2201      	moveq	r2, #1
 800601e:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8006022:	b1ab      	cbz	r3, 8006050 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006024:	4623      	mov	r3, r4
 8006026:	aa03      	add	r2, sp, #12
 8006028:	a901      	add	r1, sp, #4
 800602a:	f7fe fe59 	bl	8004ce0 <xQueueGenericSendFromISR>
 800602e:	2801      	cmp	r0, #1
 8006030:	d002      	beq.n	8006038 <osMessagePut+0x28>
      return osErrorOS;
 8006032:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8006034:	b004      	add	sp, #16
 8006036:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	b13b      	cbz	r3, 800604c <osMessagePut+0x3c>
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <osMessagePut+0x4c>)
 800603e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	f3bf 8f6f 	isb	sy
  return osOK;
 800604c:	2000      	movs	r0, #0
 800604e:	e7f1      	b.n	8006034 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006050:	a901      	add	r1, sp, #4
 8006052:	f7fe fd79 	bl	8004b48 <xQueueGenericSend>
 8006056:	2801      	cmp	r0, #1
 8006058:	d0f8      	beq.n	800604c <osMessagePut+0x3c>
 800605a:	e7ea      	b.n	8006032 <osMessagePut+0x22>
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006060:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8006062:	2600      	movs	r6, #0
{
 8006064:	b085      	sub	sp, #20
 8006066:	4604      	mov	r4, r0
 8006068:	4617      	mov	r7, r2
 800606a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800606c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800606e:	9602      	str	r6, [sp, #8]
 8006070:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8006072:	b911      	cbnz	r1, 800607a <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8006074:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	e016      	b.n	80060a8 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800607a:	9600      	str	r6, [sp, #0]
 800607c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8006080:	b1cb      	cbz	r3, 80060b6 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006082:	466a      	mov	r2, sp
 8006084:	a902      	add	r1, sp, #8
 8006086:	f7ff f861 	bl	800514c <xQueueReceiveFromISR>
 800608a:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800608c:	bf0a      	itet	eq
 800608e:	2310      	moveq	r3, #16
      event.status = osOK;
 8006090:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8006092:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	b13b      	cbz	r3, 80060a8 <osMessageGet+0x48>
 8006098:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <osMessageGet+0x70>)
 800609a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80060a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80060b0:	4620      	mov	r0, r4
 80060b2:	b005      	add	sp, #20
 80060b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80060b6:	a902      	add	r1, sp, #8
 80060b8:	f7fe fed8 	bl	8004e6c <xQueueReceive>
 80060bc:	2801      	cmp	r0, #1
 80060be:	d101      	bne.n	80060c4 <osMessageGet+0x64>
      event.status = osEventMessage;
 80060c0:	2310      	movs	r3, #16
 80060c2:	e7d8      	b.n	8006076 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80060c4:	2f00      	cmp	r7, #0
 80060c6:	bf0c      	ite	eq
 80060c8:	2300      	moveq	r3, #0
 80060ca:	2340      	movne	r3, #64	; 0x40
 80060cc:	e7d3      	b.n	8006076 <osMessageGet+0x16>
 80060ce:	bf00      	nop
 80060d0:	e000ed04 	.word	0xe000ed04

080060d4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80060d4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80060d6:	f7ff fd5b 	bl	8005b90 <xTaskGetSchedulerState>
 80060da:	2801      	cmp	r0, #1
 80060dc:	d003      	beq.n	80060e6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80060de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80060e2:	f000 b9c7 	b.w	8006474 <xPortSysTickHandler>
}
 80060e6:	bd08      	pop	{r3, pc}

080060e8 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 80060e8:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 80060ea:	f7ff fe61 	bl	8005db0 <vTaskList>
#endif
  return osOK;
}
 80060ee:	2000      	movs	r0, #0
 80060f0:	bd08      	pop	{r3, pc}

080060f2 <osMessageWaiting>:
 80060f2:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 80060f6:	b10b      	cbz	r3, 80060fc <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80060f8:	f7ff b892 	b.w	8005220 <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80060fc:	f7ff b87b 	b.w	80051f6 <uxQueueMessagesWaiting>

08006100 <osMessageDelete>:
 8006100:	f7ff bf36 	b.w	8005f70 <osMutexDelete>

08006104 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006104:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <prvInsertBlockIntoFreeList+0x40>)
{
 8006106:	b530      	push	{r4, r5, lr}
 8006108:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4282      	cmp	r2, r0
 800610e:	d317      	bcc.n	8006140 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006110:	685c      	ldr	r4, [r3, #4]
 8006112:	1919      	adds	r1, r3, r4
 8006114:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006116:	bf01      	itttt	eq
 8006118:	6841      	ldreq	r1, [r0, #4]
 800611a:	4618      	moveq	r0, r3
 800611c:	1909      	addeq	r1, r1, r4
 800611e:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006120:	6844      	ldr	r4, [r0, #4]
 8006122:	1901      	adds	r1, r0, r4
 8006124:	428a      	cmp	r2, r1
 8006126:	d106      	bne.n	8006136 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006128:	68a9      	ldr	r1, [r5, #8]
 800612a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612c:	bf1f      	itttt	ne
 800612e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006130:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006132:	1909      	addne	r1, r1, r4
 8006134:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006136:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006138:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800613a:	bf18      	it	ne
 800613c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800613e:	bd30      	pop	{r4, r5, pc}
 8006140:	4613      	mov	r3, r2
 8006142:	e7e2      	b.n	800610a <prvInsertBlockIntoFreeList+0x6>
 8006144:	200003fc 	.word	0x200003fc

08006148 <pvPortMalloc>:
{
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 800614c:	4d3e      	ldr	r5, [pc, #248]	; (8006248 <pvPortMalloc+0x100>)
{
 800614e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006150:	f7ff fa84 	bl	800565c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006154:	68ab      	ldr	r3, [r5, #8]
 8006156:	b9e3      	cbnz	r3, 8006192 <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8006158:	4a3c      	ldr	r2, [pc, #240]	; (800624c <pvPortMalloc+0x104>)
	xStart.xBlockSize = ( size_t ) 0;
 800615a:	2100      	movs	r1, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800615c:	0756      	lsls	r6, r2, #29
 800615e:	f502 43c8 	add.w	r3, r2, #25600	; 0x6400
	xStart.xBlockSize = ( size_t ) 0;
 8006162:	6069      	str	r1, [r5, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006164:	bf17      	itett	ne
 8006166:	3207      	addne	r2, #7
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006168:	f44f 43c8 	moveq.w	r3, #25600	; 0x6400
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800616c:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006170:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006172:	602a      	str	r2, [r5, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006174:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8006176:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006178:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800617c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006180:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8006182:	60ab      	str	r3, [r5, #8]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006184:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800618c:	e9c5 1103 	strd	r1, r1, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006190:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006192:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8006196:	ea18 0f04 	tst.w	r8, r4
 800619a:	d14f      	bne.n	800623c <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800619c:	2c00      	cmp	r4, #0
 800619e:	d03e      	beq.n	800621e <pvPortMalloc+0xd6>
				xWantedSize += xHeapStructSize;
 80061a0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061a4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061a6:	bf1c      	itt	ne
 80061a8:	f023 0307 	bicne.w	r3, r3, #7
 80061ac:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d044      	beq.n	800623c <pvPortMalloc+0xf4>
 80061b2:	692f      	ldr	r7, [r5, #16]
 80061b4:	429f      	cmp	r7, r3
 80061b6:	d341      	bcc.n	800623c <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 80061b8:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80061ba:	4823      	ldr	r0, [pc, #140]	; (8006248 <pvPortMalloc+0x100>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061bc:	6872      	ldr	r2, [r6, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d201      	bcs.n	80061c6 <pvPortMalloc+0x7e>
 80061c2:	6831      	ldr	r1, [r6, #0]
 80061c4:	b9b1      	cbnz	r1, 80061f4 <pvPortMalloc+0xac>
				if( pxBlock != pxEnd )
 80061c6:	68a9      	ldr	r1, [r5, #8]
 80061c8:	42b1      	cmp	r1, r6
 80061ca:	d037      	beq.n	800623c <pvPortMalloc+0xf4>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061cc:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061ce:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80061d0:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061d2:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80061d4:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80061d6:	d914      	bls.n	8006202 <pvPortMalloc+0xba>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80061d8:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061da:	0741      	lsls	r1, r0, #29
 80061dc:	d00d      	beq.n	80061fa <pvPortMalloc+0xb2>
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	e7fe      	b.n	80061f2 <pvPortMalloc+0xaa>
 80061f4:	4630      	mov	r0, r6
 80061f6:	460e      	mov	r6, r1
 80061f8:	e7e0      	b.n	80061bc <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80061fa:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061fc:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061fe:	f7ff ff81 	bl	8006104 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006202:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006204:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006206:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006208:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800620a:	ea48 0303 	orr.w	r3, r8, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800620e:	428f      	cmp	r7, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006210:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006212:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006216:	612f      	str	r7, [r5, #16]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006218:	bf38      	it	cc
 800621a:	60ef      	strcc	r7, [r5, #12]
					pxBlock->pxNextFreeBlock = NULL;
 800621c:	6033      	str	r3, [r6, #0]
	( void ) xTaskResumeAll();
 800621e:	f7ff faab 	bl	8005778 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006222:	0763      	lsls	r3, r4, #29
 8006224:	d00c      	beq.n	8006240 <pvPortMalloc+0xf8>
 8006226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622a:	b672      	cpsid	i
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	b662      	cpsie	i
 800623a:	e7fe      	b.n	800623a <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800623c:	2400      	movs	r4, #0
 800623e:	e7ee      	b.n	800621e <pvPortMalloc+0xd6>
}
 8006240:	4620      	mov	r0, r4
 8006242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006246:	bf00      	nop
 8006248:	200003fc 	.word	0x200003fc
 800624c:	20000414 	.word	0x20000414

08006250 <vPortFree>:
{
 8006250:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8006252:	4604      	mov	r4, r0
 8006254:	b388      	cbz	r0, 80062ba <vPortFree+0x6a>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006256:	4d19      	ldr	r5, [pc, #100]	; (80062bc <vPortFree+0x6c>)
 8006258:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800625c:	696a      	ldr	r2, [r5, #20]
 800625e:	4213      	tst	r3, r2
 8006260:	d10a      	bne.n	8006278 <vPortFree+0x28>
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	b672      	cpsid	i
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	b662      	cpsie	i
 8006276:	e7fe      	b.n	8006276 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006278:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800627c:	b151      	cbz	r1, 8006294 <vPortFree+0x44>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	b672      	cpsid	i
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	b662      	cpsie	i
 8006292:	e7fe      	b.n	8006292 <vPortFree+0x42>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006294:	ea23 0302 	bic.w	r3, r3, r2
 8006298:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800629c:	f7ff f9de 	bl	800565c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062a0:	692a      	ldr	r2, [r5, #16]
 80062a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062a6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062aa:	4413      	add	r3, r2
 80062ac:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ae:	f7ff ff29 	bl	8006104 <prvInsertBlockIntoFreeList>
}
 80062b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 80062b6:	f7ff ba5f 	b.w	8005778 <xTaskResumeAll>
}
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200003fc 	.word	0x200003fc

080062c0 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 80062c0:	2300      	movs	r3, #0
{
 80062c2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80062c4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062c6:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <prvTaskExitError+0x44>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3301      	adds	r3, #1
 80062cc:	d00a      	beq.n	80062e4 <prvTaskExitError+0x24>
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	b672      	cpsid	i
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	b662      	cpsie	i
 80062e2:	e7fe      	b.n	80062e2 <prvTaskExitError+0x22>
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	b672      	cpsid	i
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f3bf 8f4f 	dsb	sy
 80062f6:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062f8:	9b01      	ldr	r3, [sp, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0fc      	beq.n	80062f8 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062fe:	b002      	add	sp, #8
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000040 	.word	0x20000040

08006308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006308:	4808      	ldr	r0, [pc, #32]	; (800632c <prvPortStartFirstTask+0x24>)
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f380 8808 	msr	MSP, r0
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8814 	msr	CONTROL, r0
 800631a:	b662      	cpsie	i
 800631c:	b661      	cpsie	f
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	df00      	svc	0
 8006328:	bf00      	nop
 800632a:	0000      	.short	0x0000
 800632c:	e000ed08 	.word	0xe000ed08

08006330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006340 <vPortEnableVFP+0x10>
 8006334:	6801      	ldr	r1, [r0, #0]
 8006336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800633a:	6001      	str	r1, [r0, #0]
 800633c:	4770      	bx	lr
 800633e:	0000      	.short	0x0000
 8006340:	e000ed88 	.word	0xe000ed88

08006344 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006344:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006348:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800634c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8006350:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006352:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006356:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006358:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800635a:	f06f 0302 	mvn.w	r3, #2
 800635e:	6203      	str	r3, [r0, #32]
}
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	080062c1 	.word	0x080062c1
	...

08006370 <SVC_Handler>:
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	4770      	bx	lr
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst2>:
 8006390:	200002f0 	.word	0x200002f0

08006394 <vPortEnterCritical>:
 8006394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006398:	b672      	cpsid	i
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	b662      	cpsie	i
	uxCriticalNesting++;
 80063a8:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <vPortEnterCritical+0x44>)
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80063ae:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80063b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80063b2:	d10f      	bne.n	80063d4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063b4:	4b09      	ldr	r3, [pc, #36]	; (80063dc <vPortEnterCritical+0x48>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063bc:	d00a      	beq.n	80063d4 <vPortEnterCritical+0x40>
 80063be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c2:	b672      	cpsid	i
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	b662      	cpsie	i
 80063d2:	e7fe      	b.n	80063d2 <vPortEnterCritical+0x3e>
}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000040 	.word	0x20000040
 80063dc:	e000ed04 	.word	0xe000ed04

080063e0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80063e0:	4a09      	ldr	r2, [pc, #36]	; (8006408 <vPortExitCritical+0x28>)
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b953      	cbnz	r3, 80063fc <vPortExitCritical+0x1c>
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	b672      	cpsid	i
 80063ec:	f383 8811 	msr	BASEPRI, r3
 80063f0:	f3bf 8f6f 	isb	sy
 80063f4:	f3bf 8f4f 	dsb	sy
 80063f8:	b662      	cpsie	i
 80063fa:	e7fe      	b.n	80063fa <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80063fc:	3b01      	subs	r3, #1
 80063fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006400:	b90b      	cbnz	r3, 8006406 <vPortExitCritical+0x26>
	__asm volatile
 8006402:	f383 8811 	msr	BASEPRI, r3
}
 8006406:	4770      	bx	lr
 8006408:	20000040 	.word	0x20000040
 800640c:	00000000 	.word	0x00000000

08006410 <PendSV_Handler>:
	__asm volatile
 8006410:	f3ef 8009 	mrs	r0, PSP
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	4b15      	ldr	r3, [pc, #84]	; (8006470 <pxCurrentTCBConst>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	f01e 0f10 	tst.w	lr, #16
 8006420:	bf08      	it	eq
 8006422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	6010      	str	r0, [r2, #0]
 800642c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006434:	b672      	cpsid	i
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	b662      	cpsie	i
 8006444:	f7ff fa2e 	bl	80058a4 <vTaskSwitchContext>
 8006448:	f04f 0000 	mov.w	r0, #0
 800644c:	f380 8811 	msr	BASEPRI, r0
 8006450:	bc09      	pop	{r0, r3}
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f01e 0f10 	tst.w	lr, #16
 800645e:	bf08      	it	eq
 8006460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006464:	f380 8809 	msr	PSP, r0
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop

08006470 <pxCurrentTCBConst>:
 8006470:	200002f0 	.word	0x200002f0

08006474 <xPortSysTickHandler>:
{
 8006474:	b508      	push	{r3, lr}
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	b672      	cpsid	i
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800648a:	f7ff f8ff 	bl	800568c <xTaskIncrementTick>
 800648e:	b118      	cbz	r0, 8006498 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <xPortSysTickHandler+0x2c>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
	__asm volatile
 8006498:	2300      	movs	r3, #0
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bd08      	pop	{r3, pc}
 80064a0:	e000ed04 	.word	0xe000ed04

080064a4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	4a08      	ldr	r2, [pc, #32]	; (80064c8 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064a8:	4908      	ldr	r1, [pc, #32]	; (80064cc <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064ac:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <vPortSetupTimerInterrupt+0x2c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064ba:	4906      	ldr	r1, [pc, #24]	; (80064d4 <vPortSetupTimerInterrupt+0x30>)
 80064bc:	3b01      	subs	r3, #1
 80064be:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064c0:	2307      	movs	r3, #7
 80064c2:	6013      	str	r3, [r2, #0]
}
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	e000e010 	.word	0xe000e010
 80064cc:	e000e018 	.word	0xe000e018
 80064d0:	20000034 	.word	0x20000034
 80064d4:	e000e014 	.word	0xe000e014

080064d8 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064d8:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <xPortStartScheduler+0xb0>)
{
 80064da:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064dc:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064de:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064e4:	22ff      	movs	r2, #255	; 0xff
 80064e6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064f0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80064f4:	4b25      	ldr	r3, [pc, #148]	; (800658c <xPortStartScheduler+0xb4>)
 80064f6:	f002 0250 	and.w	r2, r2, #80	; 0x50
 80064fa:	701a      	strb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064fc:	2207      	movs	r2, #7
 80064fe:	605a      	str	r2, [r3, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006500:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8006504:	1e54      	subs	r4, r2, #1
 8006506:	0600      	lsls	r0, r0, #24
 8006508:	d40f      	bmi.n	800652a <xPortStartScheduler+0x52>
 800650a:	b101      	cbz	r1, 800650e <xPortStartScheduler+0x36>
 800650c:	605a      	str	r2, [r3, #4]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	2a03      	cmp	r2, #3
 8006512:	d013      	beq.n	800653c <xPortStartScheduler+0x64>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	b672      	cpsid	i
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	b662      	cpsie	i
 8006528:	e7fe      	b.n	8006528 <xPortStartScheduler+0x50>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800652a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800652e:	2101      	movs	r1, #1
 8006530:	0052      	lsls	r2, r2, #1
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	f88d 2003 	strb.w	r2, [sp, #3]
 8006538:	4622      	mov	r2, r4
 800653a:	e7e1      	b.n	8006500 <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800653c:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 800653e:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006540:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006544:	605a      	str	r2, [r3, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006546:	9b01      	ldr	r3, [sp, #4]
 8006548:	4a0f      	ldr	r2, [pc, #60]	; (8006588 <xPortStartScheduler+0xb0>)
 800654a:	b2db      	uxtb	r3, r3
 800654c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <xPortStartScheduler+0xb8>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8006556:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800655e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006560:	f7ff ffa0 	bl	80064a4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <xPortStartScheduler+0xbc>)
 8006566:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8006568:	f7ff fee2 	bl	8006330 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <xPortStartScheduler+0xc0>)
 800656e:	6813      	ldr	r3, [r2, #0]
 8006570:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006574:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006576:	f7ff fec7 	bl	8006308 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800657a:	f7ff f993 	bl	80058a4 <vTaskSwitchContext>
	prvTaskExitError();
 800657e:	f7ff fe9f 	bl	80062c0 <prvTaskExitError>
}
 8006582:	4620      	mov	r0, r4
 8006584:	b002      	add	sp, #8
 8006586:	bd10      	pop	{r4, pc}
 8006588:	e000e400 	.word	0xe000e400
 800658c:	20006814 	.word	0x20006814
 8006590:	e000ed20 	.word	0xe000ed20
 8006594:	20000040 	.word	0x20000040
 8006598:	e000ef34 	.word	0xe000ef34

0800659c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800659c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065a0:	2b0f      	cmp	r3, #15
 80065a2:	4a12      	ldr	r2, [pc, #72]	; (80065ec <vPortValidateInterruptPriority+0x50>)
 80065a4:	d90f      	bls.n	80065c6 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065a6:	4912      	ldr	r1, [pc, #72]	; (80065f0 <vPortValidateInterruptPriority+0x54>)
 80065a8:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065aa:	7811      	ldrb	r1, [r2, #0]
 80065ac:	4299      	cmp	r1, r3
 80065ae:	d90a      	bls.n	80065c6 <vPortValidateInterruptPriority+0x2a>
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	b672      	cpsid	i
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	b662      	cpsie	i
 80065c4:	e7fe      	b.n	80065c4 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065c6:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <vPortValidateInterruptPriority+0x58>)
 80065c8:	6852      	ldr	r2, [r2, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d90a      	bls.n	80065ea <vPortValidateInterruptPriority+0x4e>
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	b672      	cpsid	i
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	b662      	cpsie	i
 80065e8:	e7fe      	b.n	80065e8 <vPortValidateInterruptPriority+0x4c>
	}
 80065ea:	4770      	bx	lr
 80065ec:	20006814 	.word	0x20006814
 80065f0:	e000e3f0 	.word	0xe000e3f0
 80065f4:	e000ed0c 	.word	0xe000ed0c

080065f8 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80065f8:	680a      	ldr	r2, [r1, #0]
{
 80065fa:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80065fc:	320c      	adds	r2, #12
{
 80065fe:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006600:	f001 fb66 	bl	8007cd0 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8006604:	b908      	cbnz	r0, 800660a <netconn_apimsg+0x12>
    return apimsg->err;
 8006606:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 800660a:	bd10      	pop	{r4, pc}

0800660c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800660c:	b500      	push	{lr}
 800660e:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006610:	b958      	cbnz	r0, 800662a <netconn_close_shutdown+0x1e>
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <netconn_close_shutdown+0x34>)
 8006614:	f240 4247 	movw	r2, #1095	; 0x447
 8006618:	490a      	ldr	r1, [pc, #40]	; (8006644 <netconn_close_shutdown+0x38>)
 800661a:	480b      	ldr	r0, [pc, #44]	; (8006648 <netconn_close_shutdown+0x3c>)
 800661c:	f008 fdb6 	bl	800f18c <iprintf>
 8006620:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8006624:	b009      	add	sp, #36	; 0x24
 8006626:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800662a:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800662c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800662e:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8006632:	4669      	mov	r1, sp
 8006634:	4805      	ldr	r0, [pc, #20]	; (800664c <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006636:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800663a:	f7ff ffdd 	bl	80065f8 <netconn_apimsg>
  return err;
 800663e:	e7f1      	b.n	8006624 <netconn_close_shutdown+0x18>
 8006640:	0801db0a 	.word	0x0801db0a
 8006644:	0801db79 	.word	0x0801db79
 8006648:	0801d8d1 	.word	0x0801d8d1
 800664c:	08007a5d 	.word	0x08007a5d

08006650 <netconn_new_with_proto_and_callback>:
{
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	460d      	mov	r5, r1
 8006654:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8006656:	4611      	mov	r1, r2
 8006658:	f000 ff3c 	bl	80074d4 <netconn_alloc>
  if (conn != NULL) {
 800665c:	4604      	mov	r4, r0
 800665e:	2800      	cmp	r0, #0
 8006660:	d03f      	beq.n	80066e2 <netconn_new_with_proto_and_callback+0x92>
    API_MSG_VAR_REF(msg).conn = conn;
 8006662:	a908      	add	r1, sp, #32
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006664:	f88d 5008 	strb.w	r5, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8006668:	f841 0d20 	str.w	r0, [r1, #-32]!
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800666c:	481e      	ldr	r0, [pc, #120]	; (80066e8 <netconn_new_with_proto_and_callback+0x98>)
 800666e:	f7ff ffc3 	bl	80065f8 <netconn_apimsg>
    if (err != ERR_OK) {
 8006672:	2800      	cmp	r0, #0
 8006674:	d035      	beq.n	80066e2 <netconn_new_with_proto_and_callback+0x92>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006676:	6863      	ldr	r3, [r4, #4]
 8006678:	b12b      	cbz	r3, 8006686 <netconn_new_with_proto_and_callback+0x36>
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <netconn_new_with_proto_and_callback+0x9c>)
 800667c:	22a3      	movs	r2, #163	; 0xa3
 800667e:	491c      	ldr	r1, [pc, #112]	; (80066f0 <netconn_new_with_proto_and_callback+0xa0>)
 8006680:	481c      	ldr	r0, [pc, #112]	; (80066f4 <netconn_new_with_proto_and_callback+0xa4>)
 8006682:	f008 fd83 	bl	800f18c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006686:	f104 0510 	add.w	r5, r4, #16
 800668a:	4628      	mov	r0, r5
 800668c:	f008 fc67 	bl	800ef5e <sys_mbox_valid>
 8006690:	b928      	cbnz	r0, 800669e <netconn_new_with_proto_and_callback+0x4e>
 8006692:	4b16      	ldr	r3, [pc, #88]	; (80066ec <netconn_new_with_proto_and_callback+0x9c>)
 8006694:	22a4      	movs	r2, #164	; 0xa4
 8006696:	4918      	ldr	r1, [pc, #96]	; (80066f8 <netconn_new_with_proto_and_callback+0xa8>)
 8006698:	4816      	ldr	r0, [pc, #88]	; (80066f4 <netconn_new_with_proto_and_callback+0xa4>)
 800669a:	f008 fd77 	bl	800f18c <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800669e:	f104 0014 	add.w	r0, r4, #20
 80066a2:	f008 fc5c 	bl	800ef5e <sys_mbox_valid>
 80066a6:	b128      	cbz	r0, 80066b4 <netconn_new_with_proto_and_callback+0x64>
 80066a8:	4b10      	ldr	r3, [pc, #64]	; (80066ec <netconn_new_with_proto_and_callback+0x9c>)
 80066aa:	22a6      	movs	r2, #166	; 0xa6
 80066ac:	4913      	ldr	r1, [pc, #76]	; (80066fc <netconn_new_with_proto_and_callback+0xac>)
 80066ae:	4811      	ldr	r0, [pc, #68]	; (80066f4 <netconn_new_with_proto_and_callback+0xa4>)
 80066b0:	f008 fd6c 	bl	800f18c <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80066b4:	f104 060c 	add.w	r6, r4, #12
 80066b8:	4630      	mov	r0, r6
 80066ba:	f008 fc91 	bl	800efe0 <sys_sem_valid>
 80066be:	b928      	cbnz	r0, 80066cc <netconn_new_with_proto_and_callback+0x7c>
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <netconn_new_with_proto_and_callback+0x9c>)
 80066c2:	22a9      	movs	r2, #169	; 0xa9
 80066c4:	490e      	ldr	r1, [pc, #56]	; (8006700 <netconn_new_with_proto_and_callback+0xb0>)
 80066c6:	480b      	ldr	r0, [pc, #44]	; (80066f4 <netconn_new_with_proto_and_callback+0xa4>)
 80066c8:	f008 fd60 	bl	800f18c <iprintf>
      sys_sem_free(&conn->op_completed);
 80066cc:	4630      	mov	r0, r6
 80066ce:	f008 fc84 	bl	800efda <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 80066d2:	4628      	mov	r0, r5
 80066d4:	f008 fbfc 	bl	800eed0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80066d8:	4621      	mov	r1, r4
      return NULL;
 80066da:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 80066dc:	2007      	movs	r0, #7
 80066de:	f004 f945 	bl	800a96c <memp_free>
}
 80066e2:	4620      	mov	r0, r4
 80066e4:	b008      	add	sp, #32
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	08007475 	.word	0x08007475
 80066ec:	0801db0a 	.word	0x0801db0a
 80066f0:	0801db95 	.word	0x0801db95
 80066f4:	0801d8d1 	.word	0x0801d8d1
 80066f8:	0801dbb6 	.word	0x0801dbb6
 80066fc:	0801dbcb 	.word	0x0801dbcb
 8006700:	0801dbec 	.word	0x0801dbec

08006704 <netconn_prepare_delete>:
{
 8006704:	b500      	push	{lr}
 8006706:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8006708:	b138      	cbz	r0, 800671a <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800670a:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 800670c:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800670e:	4669      	mov	r1, sp
 8006710:	4803      	ldr	r0, [pc, #12]	; (8006720 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006712:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006716:	f7ff ff6f 	bl	80065f8 <netconn_apimsg>
}
 800671a:	b009      	add	sp, #36	; 0x24
 800671c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006720:	08007761 	.word	0x08007761

08006724 <netconn_delete>:
{
 8006724:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8006726:	4605      	mov	r5, r0
 8006728:	b140      	cbz	r0, 800673c <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 800672a:	f7ff ffeb 	bl	8006704 <netconn_prepare_delete>
  if (err == ERR_OK) {
 800672e:	4604      	mov	r4, r0
 8006730:	b910      	cbnz	r0, 8006738 <netconn_delete+0x14>
    netconn_free(conn);
 8006732:	4628      	mov	r0, r5
 8006734:	f000 ff10 	bl	8007558 <netconn_free>
}
 8006738:	4620      	mov	r0, r4
 800673a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 800673c:	4604      	mov	r4, r0
 800673e:	e7fb      	b.n	8006738 <netconn_delete+0x14>

08006740 <netconn_bind>:
{
 8006740:	b500      	push	{lr}
 8006742:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006744:	b958      	cbnz	r0, 800675e <netconn_bind+0x1e>
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <netconn_bind+0x38>)
 8006748:	f44f 729c 	mov.w	r2, #312	; 0x138
 800674c:	490b      	ldr	r1, [pc, #44]	; (800677c <netconn_bind+0x3c>)
 800674e:	480c      	ldr	r0, [pc, #48]	; (8006780 <netconn_bind+0x40>)
 8006750:	f008 fd1c 	bl	800f18c <iprintf>
 8006754:	f06f 000f 	mvn.w	r0, #15
}
 8006758:	b009      	add	sp, #36	; 0x24
 800675a:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8006760:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8006762:	2900      	cmp	r1, #0
 8006764:	bf08      	it	eq
 8006766:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8006768:	4807      	ldr	r0, [pc, #28]	; (8006788 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800676a:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800676e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8006770:	4669      	mov	r1, sp
 8006772:	f7ff ff41 	bl	80065f8 <netconn_apimsg>
  return err;
 8006776:	e7ef      	b.n	8006758 <netconn_bind+0x18>
 8006778:	0801db0a 	.word	0x0801db0a
 800677c:	0801dc5f 	.word	0x0801dc5f
 8006780:	0801d8d1 	.word	0x0801d8d1
 8006784:	0801496c 	.word	0x0801496c
 8006788:	0800786d 	.word	0x0800786d

0800678c <netconn_listen_with_backlog>:
{
 800678c:	b500      	push	{lr}
 800678e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006790:	b958      	cbnz	r0, 80067aa <netconn_listen_with_backlog+0x1e>
 8006792:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <netconn_listen_with_backlog+0x2c>)
 8006794:	f240 12bb 	movw	r2, #443	; 0x1bb
 8006798:	4908      	ldr	r1, [pc, #32]	; (80067bc <netconn_listen_with_backlog+0x30>)
 800679a:	4809      	ldr	r0, [pc, #36]	; (80067c0 <netconn_listen_with_backlog+0x34>)
 800679c:	f008 fcf6 	bl	800f18c <iprintf>
 80067a0:	f06f 000f 	mvn.w	r0, #15
}
 80067a4:	b009      	add	sp, #36	; 0x24
 80067a6:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 80067aa:	a908      	add	r1, sp, #32
 80067ac:	f841 0d20 	str.w	r0, [r1, #-32]!
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80067b0:	4804      	ldr	r0, [pc, #16]	; (80067c4 <netconn_listen_with_backlog+0x38>)
 80067b2:	f7ff ff21 	bl	80065f8 <netconn_apimsg>
  return err;
 80067b6:	e7f5      	b.n	80067a4 <netconn_listen_with_backlog+0x18>
 80067b8:	0801db0a 	.word	0x0801db0a
 80067bc:	0801dcd7 	.word	0x0801dcd7
 80067c0:	0801d8d1 	.word	0x0801d8d1
 80067c4:	080078a1 	.word	0x080078a1

080067c8 <netconn_write_vectors_partly>:
{
 80067c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067cc:	b088      	sub	sp, #32
 80067ce:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80067d2:	b960      	cbnz	r0, 80067ee <netconn_write_vectors_partly+0x26>
 80067d4:	f06f 040f 	mvn.w	r4, #15
 80067d8:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <netconn_write_vectors_partly+0xd8>)
 80067da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80067de:	4931      	ldr	r1, [pc, #196]	; (80068a4 <netconn_write_vectors_partly+0xdc>)
 80067e0:	4831      	ldr	r0, [pc, #196]	; (80068a8 <netconn_write_vectors_partly+0xe0>)
 80067e2:	f008 fcd3 	bl	800f18c <iprintf>
}
 80067e6:	4620      	mov	r0, r4
 80067e8:	b008      	add	sp, #32
 80067ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80067ee:	7804      	ldrb	r4, [r0, #0]
 80067f0:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80067f4:	2c10      	cmp	r4, #16
 80067f6:	d009      	beq.n	800680c <netconn_write_vectors_partly+0x44>
 80067f8:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <netconn_write_vectors_partly+0xd8>)
 80067fa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80067fe:	492b      	ldr	r1, [pc, #172]	; (80068ac <netconn_write_vectors_partly+0xe4>)
 8006800:	4829      	ldr	r0, [pc, #164]	; (80068a8 <netconn_write_vectors_partly+0xe0>)
 8006802:	f008 fcc3 	bl	800f18c <iprintf>
    return ERR_VAL;
 8006806:	f06f 0405 	mvn.w	r4, #5
 800680a:	e7ec      	b.n	80067e6 <netconn_write_vectors_partly+0x1e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800680c:	7e04      	ldrb	r4, [r0, #24]
 800680e:	07a4      	lsls	r4, r4, #30
 8006810:	d402      	bmi.n	8006818 <netconn_write_vectors_partly+0x50>
  if (dontblock && !bytes_written) {
 8006812:	f013 0704 	ands.w	r7, r3, #4
 8006816:	d003      	beq.n	8006820 <netconn_write_vectors_partly+0x58>
 8006818:	f1b8 0f00 	cmp.w	r8, #0
 800681c:	d0f3      	beq.n	8006806 <netconn_write_vectors_partly+0x3e>
 800681e:	2701      	movs	r7, #1
 8006820:	2400      	movs	r4, #0
 8006822:	4625      	mov	r5, r4
 8006824:	e00c      	b.n	8006840 <netconn_write_vectors_partly+0x78>
    size += vectors[i].len;
 8006826:	eb01 06c4 	add.w	r6, r1, r4, lsl #3
 800682a:	f04f 0c00 	mov.w	ip, #0
 800682e:	6876      	ldr	r6, [r6, #4]
 8006830:	1975      	adds	r5, r6, r5
 8006832:	bf28      	it	cs
 8006834:	f04f 0c01 	movcs.w	ip, #1
    if (size < vectors[i].len) {
 8006838:	f1bc 0f00 	cmp.w	ip, #0
 800683c:	d1e3      	bne.n	8006806 <netconn_write_vectors_partly+0x3e>
  for (i = 0; i < vectorcnt; i++) {
 800683e:	3401      	adds	r4, #1
 8006840:	42a2      	cmp	r2, r4
 8006842:	dcf0      	bgt.n	8006826 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8006844:	2d00      	cmp	r5, #0
 8006846:	d101      	bne.n	800684c <netconn_write_vectors_partly+0x84>
    return ERR_OK;
 8006848:	2400      	movs	r4, #0
 800684a:	e7cc      	b.n	80067e6 <netconn_write_vectors_partly+0x1e>
  } else if (size > SSIZE_MAX) {
 800684c:	da04      	bge.n	8006858 <netconn_write_vectors_partly+0x90>
    if (!bytes_written) {
 800684e:	f1b8 0f00 	cmp.w	r8, #0
 8006852:	d0d8      	beq.n	8006806 <netconn_write_vectors_partly+0x3e>
    size = (size_t)limited;
 8006854:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006858:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800685c:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800685e:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006860:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006862:	4669      	mov	r1, sp
 8006864:	4812      	ldr	r0, [pc, #72]	; (80068b0 <netconn_write_vectors_partly+0xe8>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006866:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006868:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800686c:	e9cd 5205 	strd	r5, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006870:	f7ff fec2 	bl	80065f8 <netconn_apimsg>
  if (err == ERR_OK) {
 8006874:	4604      	mov	r4, r0
 8006876:	2800      	cmp	r0, #0
 8006878:	d1b5      	bne.n	80067e6 <netconn_write_vectors_partly+0x1e>
    if (bytes_written != NULL) {
 800687a:	f1b8 0f00 	cmp.w	r8, #0
 800687e:	d002      	beq.n	8006886 <netconn_write_vectors_partly+0xbe>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8006880:	9b06      	ldr	r3, [sp, #24]
 8006882:	f8c8 3000 	str.w	r3, [r8]
    if (!dontblock) {
 8006886:	2f00      	cmp	r7, #0
 8006888:	d1de      	bne.n	8006848 <netconn_write_vectors_partly+0x80>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	42ab      	cmp	r3, r5
 800688e:	d0db      	beq.n	8006848 <netconn_write_vectors_partly+0x80>
 8006890:	4b03      	ldr	r3, [pc, #12]	; (80068a0 <netconn_write_vectors_partly+0xd8>)
 8006892:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006896:	4907      	ldr	r1, [pc, #28]	; (80068b4 <netconn_write_vectors_partly+0xec>)
 8006898:	4803      	ldr	r0, [pc, #12]	; (80068a8 <netconn_write_vectors_partly+0xe0>)
 800689a:	f008 fc77 	bl	800f18c <iprintf>
 800689e:	e7a2      	b.n	80067e6 <netconn_write_vectors_partly+0x1e>
 80068a0:	0801db0a 	.word	0x0801db0a
 80068a4:	0801dd33 	.word	0x0801dd33
 80068a8:	0801d8d1 	.word	0x0801d8d1
 80068ac:	0801dd4f 	.word	0x0801dd4f
 80068b0:	08007991 	.word	0x08007991
 80068b4:	0801dd71 	.word	0x0801dd71

080068b8 <netconn_write_partly>:
{
 80068b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80068ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80068be:	9a06      	ldr	r2, [sp, #24]
 80068c0:	a902      	add	r1, sp, #8
 80068c2:	9200      	str	r2, [sp, #0]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f7ff ff7f 	bl	80067c8 <netconn_write_vectors_partly>
}
 80068ca:	b005      	add	sp, #20
 80068cc:	f85d fb04 	ldr.w	pc, [sp], #4

080068d0 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80068d0:	2103      	movs	r1, #3
 80068d2:	f7ff be9b 	b.w	800660c <netconn_close_shutdown>

080068d6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80068d6:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80068d8:	4604      	mov	r4, r0
 80068da:	b148      	cbz	r0, 80068f0 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80068dc:	f008 fbbc 	bl	800f058 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80068e0:	2300      	movs	r3, #0
  err = conn->pending_err;
 80068e2:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80068e6:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80068e8:	f008 fbc2 	bl	800f070 <sys_arch_unprotect>
  return err;
}
 80068ec:	4628      	mov	r0, r5
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80068f0:	4605      	mov	r5, r0
 80068f2:	e7fb      	b.n	80068ec <netconn_err+0x16>

080068f4 <netconn_accept>:
{
 80068f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068f6:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80068f8:	460e      	mov	r6, r1
 80068fa:	b959      	cbnz	r1, 8006914 <netconn_accept+0x20>
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <netconn_accept+0xa0>)
 80068fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8006902:	4925      	ldr	r1, [pc, #148]	; (8006998 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006904:	f06f 040f 	mvn.w	r4, #15
 8006908:	4824      	ldr	r0, [pc, #144]	; (800699c <netconn_accept+0xa8>)
 800690a:	f008 fc3f 	bl	800f18c <iprintf>
}
 800690e:	4620      	mov	r0, r4
 8006910:	b003      	add	sp, #12
 8006912:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 8006914:	2300      	movs	r3, #0
 8006916:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006918:	b920      	cbnz	r0, 8006924 <netconn_accept+0x30>
 800691a:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <netconn_accept+0xa0>)
 800691c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8006920:	491f      	ldr	r1, [pc, #124]	; (80069a0 <netconn_accept+0xac>)
 8006922:	e7ef      	b.n	8006904 <netconn_accept+0x10>
  err = netconn_err(conn);
 8006924:	f7ff ffd7 	bl	80068d6 <netconn_err>
 8006928:	4604      	mov	r4, r0
 800692a:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 800692e:	2800      	cmp	r0, #0
 8006930:	d1ed      	bne.n	800690e <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8006932:	f105 0714 	add.w	r7, r5, #20
 8006936:	4638      	mov	r0, r7
 8006938:	f008 fb11 	bl	800ef5e <sys_mbox_valid>
 800693c:	b910      	cbnz	r0, 8006944 <netconn_accept+0x50>
    return ERR_CLSD;
 800693e:	f06f 040e 	mvn.w	r4, #14
 8006942:	e7e4      	b.n	800690e <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8006944:	7e2b      	ldrb	r3, [r5, #24]
 8006946:	07da      	lsls	r2, r3, #31
 8006948:	d4f9      	bmi.n	800693e <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 800694a:	079b      	lsls	r3, r3, #30
 800694c:	d508      	bpl.n	8006960 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800694e:	a901      	add	r1, sp, #4
 8006950:	4638      	mov	r0, r7
 8006952:	f008 faf3 	bl	800ef3c <sys_arch_mbox_tryfetch>
 8006956:	3001      	adds	r0, #1
 8006958:	d107      	bne.n	800696a <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 800695a:	f06f 0406 	mvn.w	r4, #6
 800695e:	e7d6      	b.n	800690e <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006960:	4622      	mov	r2, r4
 8006962:	a901      	add	r1, sp, #4
 8006964:	4638      	mov	r0, r7
 8006966:	f008 fac7 	bl	800eef8 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800696a:	6a2b      	ldr	r3, [r5, #32]
 800696c:	b11b      	cbz	r3, 8006976 <netconn_accept+0x82>
 800696e:	2200      	movs	r2, #0
 8006970:	2101      	movs	r1, #1
 8006972:	4628      	mov	r0, r5
 8006974:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006976:	f10d 0103 	add.w	r1, sp, #3
 800697a:	9801      	ldr	r0, [sp, #4]
 800697c:	f000 fd54 	bl	8007428 <lwip_netconn_is_err_msg>
 8006980:	b110      	cbz	r0, 8006988 <netconn_accept+0x94>
    return err;
 8006982:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 8006986:	e7c2      	b.n	800690e <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8006988:	9b01      	ldr	r3, [sp, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0d7      	beq.n	800693e <netconn_accept+0x4a>
  *new_conn = newconn;
 800698e:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8006990:	e7bd      	b.n	800690e <netconn_accept+0x1a>
 8006992:	bf00      	nop
 8006994:	0801db0a 	.word	0x0801db0a
 8006998:	0801dd94 	.word	0x0801dd94
 800699c:	0801d8d1 	.word	0x0801d8d1
 80069a0:	0801ddb4 	.word	0x0801ddb4

080069a4 <netconn_recv_data>:
  void *buf = NULL;
 80069a4:	2300      	movs	r3, #0
{
 80069a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	4617      	mov	r7, r2
  void *buf = NULL;
 80069ac:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80069ae:	460d      	mov	r5, r1
 80069b0:	b951      	cbnz	r1, 80069c8 <netconn_recv_data+0x24>
 80069b2:	4b33      	ldr	r3, [pc, #204]	; (8006a80 <netconn_recv_data+0xdc>)
 80069b4:	f44f 7212 	mov.w	r2, #584	; 0x248
 80069b8:	4932      	ldr	r1, [pc, #200]	; (8006a84 <netconn_recv_data+0xe0>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80069ba:	4833      	ldr	r0, [pc, #204]	; (8006a88 <netconn_recv_data+0xe4>)
 80069bc:	f008 fbe6 	bl	800f18c <iprintf>
 80069c0:	f06f 000f 	mvn.w	r0, #15
}
 80069c4:	b003      	add	sp, #12
 80069c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80069c8:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80069ca:	b920      	cbnz	r0, 80069d6 <netconn_recv_data+0x32>
 80069cc:	4b2c      	ldr	r3, [pc, #176]	; (8006a80 <netconn_recv_data+0xdc>)
 80069ce:	f240 224a 	movw	r2, #586	; 0x24a
 80069d2:	492e      	ldr	r1, [pc, #184]	; (8006a8c <netconn_recv_data+0xe8>)
 80069d4:	e7f1      	b.n	80069ba <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80069d6:	f100 0610 	add.w	r6, r0, #16
 80069da:	4630      	mov	r0, r6
 80069dc:	f008 fabf 	bl	800ef5e <sys_mbox_valid>
 80069e0:	b938      	cbnz	r0, 80069f2 <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 80069e2:	4620      	mov	r0, r4
 80069e4:	f7ff ff77 	bl	80068d6 <netconn_err>
    if (err != ERR_OK) {
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d1eb      	bne.n	80069c4 <netconn_recv_data+0x20>
    return ERR_CONN;
 80069ec:	f06f 000a 	mvn.w	r0, #10
 80069f0:	e7e8      	b.n	80069c4 <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80069f2:	7e23      	ldrb	r3, [r4, #24]
 80069f4:	0798      	lsls	r0, r3, #30
 80069f6:	d406      	bmi.n	8006a06 <netconn_recv_data+0x62>
 80069f8:	0779      	lsls	r1, r7, #29
 80069fa:	d404      	bmi.n	8006a06 <netconn_recv_data+0x62>
 80069fc:	07da      	lsls	r2, r3, #31
 80069fe:	d402      	bmi.n	8006a06 <netconn_recv_data+0x62>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8006a00:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8006a04:	b182      	cbz	r2, 8006a28 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8006a06:	a901      	add	r1, sp, #4
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f008 fa97 	bl	800ef3c <sys_arch_mbox_tryfetch>
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d10e      	bne.n	8006a30 <netconn_recv_data+0x8c>
      err = netconn_err(conn);
 8006a12:	4620      	mov	r0, r4
 8006a14:	f7ff ff5f 	bl	80068d6 <netconn_err>
      if (err != ERR_OK) {
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d1d3      	bne.n	80069c4 <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8006a1c:	7e23      	ldrb	r3, [r4, #24]
 8006a1e:	07db      	lsls	r3, r3, #31
 8006a20:	d4e4      	bmi.n	80069ec <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 8006a22:	f06f 0006 	mvn.w	r0, #6
 8006a26:	e7cd      	b.n	80069c4 <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8006a28:	a901      	add	r1, sp, #4
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f008 fa64 	bl	800eef8 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006a30:	7823      	ldrb	r3, [r4, #0]
 8006a32:	9801      	ldr	r0, [sp, #4]
 8006a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a38:	2b10      	cmp	r3, #16
 8006a3a:	d116      	bne.n	8006a6a <netconn_recv_data+0xc6>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8006a3c:	f10d 0103 	add.w	r1, sp, #3
 8006a40:	f000 fcf2 	bl	8007428 <lwip_netconn_is_err_msg>
 8006a44:	b130      	cbz	r0, 8006a54 <netconn_recv_data+0xb0>
      if (err == ERR_CLSD) {
 8006a46:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 8006a4a:	f110 0f0f 	cmn.w	r0, #15
 8006a4e:	bf08      	it	eq
 8006a50:	2000      	moveq	r0, #0
 8006a52:	e7b7      	b.n	80069c4 <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8006a54:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 8006a56:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8006a58:	6a23      	ldr	r3, [r4, #32]
 8006a5a:	b113      	cbz	r3, 8006a62 <netconn_recv_data+0xbe>
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	4798      	blx	r3
  *new_buf = buf;
 8006a62:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8006a64:	2000      	movs	r0, #0
  *new_buf = buf;
 8006a66:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8006a68:	e7ac      	b.n	80069c4 <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8006a6a:	b930      	cbnz	r0, 8006a7a <netconn_recv_data+0xd6>
 8006a6c:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <netconn_recv_data+0xdc>)
 8006a6e:	f240 2291 	movw	r2, #657	; 0x291
 8006a72:	4907      	ldr	r1, [pc, #28]	; (8006a90 <netconn_recv_data+0xec>)
 8006a74:	4804      	ldr	r0, [pc, #16]	; (8006a88 <netconn_recv_data+0xe4>)
 8006a76:	f008 fb89 	bl	800f18c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8006a7a:	9b01      	ldr	r3, [sp, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	e7ea      	b.n	8006a56 <netconn_recv_data+0xb2>
 8006a80:	0801db0a 	.word	0x0801db0a
 8006a84:	0801ddd1 	.word	0x0801ddd1
 8006a88:	0801d8d1 	.word	0x0801d8d1
 8006a8c:	0801ddef 	.word	0x0801ddef
 8006a90:	0801de0a 	.word	0x0801de0a

08006a94 <netconn_recv_data_tcp>:
{
 8006a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a96:	4604      	mov	r4, r0
 8006a98:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006a9a:	3010      	adds	r0, #16
{
 8006a9c:	460f      	mov	r7, r1
 8006a9e:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8006aa0:	f008 fa5d 	bl	800ef5e <sys_mbox_valid>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d04a      	beq.n	8006b3e <netconn_recv_data_tcp+0xaa>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006aa8:	7e23      	ldrb	r3, [r4, #24]
 8006aaa:	0619      	lsls	r1, r3, #24
 8006aac:	d513      	bpl.n	8006ad6 <netconn_recv_data_tcp+0x42>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8006aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ab2:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006ab4:	6a23      	ldr	r3, [r4, #32]
 8006ab6:	b11b      	cbz	r3, 8006ac0 <netconn_recv_data_tcp+0x2c>
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2101      	movs	r1, #1
 8006abc:	4620      	mov	r0, r4
 8006abe:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006ac0:	6863      	ldr	r3, [r4, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d134      	bne.n	8006b30 <netconn_recv_data_tcp+0x9c>
        err = netconn_err(conn);
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7ff ff05 	bl	80068d6 <netconn_err>
        return ERR_RST;
 8006acc:	1e05      	subs	r5, r0, #0
 8006ace:	bf08      	it	eq
 8006ad0:	f06f 050d 	mvneq.w	r5, #13
 8006ad4:	e020      	b.n	8006b18 <netconn_recv_data_tcp+0x84>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8006ad6:	4632      	mov	r2, r6
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4620      	mov	r0, r4
 8006adc:	f7ff ff62 	bl	80069a4 <netconn_recv_data>
  if (err != ERR_OK) {
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	b9c8      	cbnz	r0, 8006b18 <netconn_recv_data_tcp+0x84>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006ae4:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 8006ae6:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8006ae8:	d40d      	bmi.n	8006b06 <netconn_recv_data_tcp+0x72>
    u16_t len = buf ? buf->tot_len : 1;
 8006aea:	b1c7      	cbz	r7, 8006b1e <netconn_recv_data_tcp+0x8a>
 8006aec:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006aee:	7823      	ldrb	r3, [r4, #0]
 8006af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d014      	beq.n	8006b22 <netconn_recv_data_tcp+0x8e>
 8006af8:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <netconn_recv_data_tcp+0xb0>)
 8006afa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006afe:	4912      	ldr	r1, [pc, #72]	; (8006b48 <netconn_recv_data_tcp+0xb4>)
 8006b00:	4812      	ldr	r0, [pc, #72]	; (8006b4c <netconn_recv_data_tcp+0xb8>)
 8006b02:	f008 fb43 	bl	800f18c <iprintf>
  if (buf == NULL) {
 8006b06:	b93f      	cbnz	r7, 8006b18 <netconn_recv_data_tcp+0x84>
    if (apiflags & NETCONN_NOFIN) {
 8006b08:	06f3      	lsls	r3, r6, #27
 8006b0a:	d5d3      	bpl.n	8006ab4 <netconn_recv_data_tcp+0x20>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006b0c:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8006b0e:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006b12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b16:	7623      	strb	r3, [r4, #24]
}
 8006b18:	4628      	mov	r0, r5
 8006b1a:	b009      	add	sp, #36	; 0x24
 8006b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006b1e:	2201      	movs	r2, #1
 8006b20:	e7e5      	b.n	8006aee <netconn_recv_data_tcp+0x5a>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8006b22:	4669      	mov	r1, sp
 8006b24:	480a      	ldr	r0, [pc, #40]	; (8006b50 <netconn_recv_data_tcp+0xbc>)
  msg->conn = conn;
 8006b26:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 8006b28:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8006b2a:	f7ff fd65 	bl	80065f8 <netconn_apimsg>
 8006b2e:	e7ea      	b.n	8006b06 <netconn_recv_data_tcp+0x72>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006b30:	2101      	movs	r1, #1
 8006b32:	4620      	mov	r0, r4
 8006b34:	f7ff fd6a 	bl	800660c <netconn_close_shutdown>
      return ERR_CLSD;
 8006b38:	f06f 050e 	mvn.w	r5, #14
 8006b3c:	e7ec      	b.n	8006b18 <netconn_recv_data_tcp+0x84>
    return ERR_CONN;
 8006b3e:	f06f 050a 	mvn.w	r5, #10
 8006b42:	e7e9      	b.n	8006b18 <netconn_recv_data_tcp+0x84>
 8006b44:	0801db0a 	.word	0x0801db0a
 8006b48:	0801dcf4 	.word	0x0801dcf4
 8006b4c:	0801d8d1 	.word	0x0801d8d1
 8006b50:	08007959 	.word	0x08007959

08006b54 <netconn_recv>:
{
 8006b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b56:	4606      	mov	r6, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006b58:	460f      	mov	r7, r1
 8006b5a:	b959      	cbnz	r1, 8006b74 <netconn_recv+0x20>
 8006b5c:	4b21      	ldr	r3, [pc, #132]	; (8006be4 <netconn_recv+0x90>)
 8006b5e:	f240 3263 	movw	r2, #867	; 0x363
 8006b62:	4921      	ldr	r1, [pc, #132]	; (8006be8 <netconn_recv+0x94>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006b64:	f06f 050f 	mvn.w	r5, #15
 8006b68:	4820      	ldr	r0, [pc, #128]	; (8006bec <netconn_recv+0x98>)
 8006b6a:	f008 fb0f 	bl	800f18c <iprintf>
}
 8006b6e:	4628      	mov	r0, r5
 8006b70:	b003      	add	sp, #12
 8006b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 8006b74:	2500      	movs	r5, #0
 8006b76:	600d      	str	r5, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006b78:	b920      	cbnz	r0, 8006b84 <netconn_recv+0x30>
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	; (8006be4 <netconn_recv+0x90>)
 8006b7c:	f240 3265 	movw	r2, #869	; 0x365
 8006b80:	491b      	ldr	r1, [pc, #108]	; (8006bf0 <netconn_recv+0x9c>)
 8006b82:	e7ef      	b.n	8006b64 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006b84:	7803      	ldrb	r3, [r0, #0]
 8006b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d125      	bne.n	8006bda <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006b8e:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8006b90:	9501      	str	r5, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006b92:	f003 fecf 	bl	800a934 <memp_malloc>
    if (buf == NULL) {
 8006b96:	4604      	mov	r4, r0
 8006b98:	b1e0      	cbz	r0, 8006bd4 <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8006b9a:	462a      	mov	r2, r5
 8006b9c:	a901      	add	r1, sp, #4
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ff78 	bl	8006a94 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	b120      	cbz	r0, 8006bb2 <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 8006ba8:	4621      	mov	r1, r4
 8006baa:	2006      	movs	r0, #6
 8006bac:	f003 fede 	bl	800a96c <memp_free>
      return err;
 8006bb0:	e7dd      	b.n	8006b6e <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	b933      	cbnz	r3, 8006bc4 <netconn_recv+0x70>
 8006bb6:	4b0b      	ldr	r3, [pc, #44]	; (8006be4 <netconn_recv+0x90>)
 8006bb8:	f240 3279 	movw	r2, #889	; 0x379
 8006bbc:	490d      	ldr	r1, [pc, #52]	; (8006bf4 <netconn_recv+0xa0>)
 8006bbe:	480b      	ldr	r0, [pc, #44]	; (8006bec <netconn_recv+0x98>)
 8006bc0:	f008 fae4 	bl	800f18c <iprintf>
    buf->p = p;
 8006bc4:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 8006bc6:	e9c4 3300 	strd	r3, r3, [r4]
    buf->port = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	81a3      	strh	r3, [r4, #12]
    ip_addr_set_zero(&buf->addr);
 8006bce:	60a3      	str	r3, [r4, #8]
    *new_buf = buf;
 8006bd0:	603c      	str	r4, [r7, #0]
    return ERR_OK;
 8006bd2:	e7cc      	b.n	8006b6e <netconn_recv+0x1a>
      return ERR_MEM;
 8006bd4:	f04f 35ff 	mov.w	r5, #4294967295
 8006bd8:	e7c9      	b.n	8006b6e <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8006bda:	462a      	mov	r2, r5
 8006bdc:	f7ff fee2 	bl	80069a4 <netconn_recv_data>
 8006be0:	4605      	mov	r5, r0
 8006be2:	e7c4      	b.n	8006b6e <netconn_recv+0x1a>
 8006be4:	0801db0a 	.word	0x0801db0a
 8006be8:	0801ddd1 	.word	0x0801ddd1
 8006bec:	0801d8d1 	.word	0x0801d8d1
 8006bf0:	0801ddef 	.word	0x0801ddef
 8006bf4:	0801f537 	.word	0x0801f537

08006bf8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	4617      	mov	r7, r2
 8006c00:	461d      	mov	r5, r3
 8006c02:	f8bd 9020 	ldrh.w	r9, [sp, #32]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8006c06:	460c      	mov	r4, r1
 8006c08:	b929      	cbnz	r1, 8006c16 <recv_udp+0x1e>
 8006c0a:	4b22      	ldr	r3, [pc, #136]	; (8006c94 <recv_udp+0x9c>)
 8006c0c:	22e5      	movs	r2, #229	; 0xe5
 8006c0e:	4922      	ldr	r1, [pc, #136]	; (8006c98 <recv_udp+0xa0>)
 8006c10:	4822      	ldr	r0, [pc, #136]	; (8006c9c <recv_udp+0xa4>)
 8006c12:	f008 fabb 	bl	800f18c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006c16:	b98e      	cbnz	r6, 8006c3c <recv_udp+0x44>
 8006c18:	4b1e      	ldr	r3, [pc, #120]	; (8006c94 <recv_udp+0x9c>)
 8006c1a:	22e6      	movs	r2, #230	; 0xe6
 8006c1c:	4920      	ldr	r1, [pc, #128]	; (8006ca0 <recv_udp+0xa8>)
 8006c1e:	481f      	ldr	r0, [pc, #124]	; (8006c9c <recv_udp+0xa4>)
 8006c20:	f008 fab4 	bl	800f18c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8006c24:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 8006c26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pbuf_free(p);
 8006c2a:	f004 b8c9 	b.w	800adc0 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006c2e:	6a33      	ldr	r3, [r6, #32]
 8006c30:	b373      	cbz	r3, 8006c90 <recv_udp+0x98>
 8006c32:	462a      	mov	r2, r5
 8006c34:	4630      	mov	r0, r6
}
 8006c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006c3a:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8006c3c:	6873      	ldr	r3, [r6, #4]
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	d005      	beq.n	8006c4e <recv_udp+0x56>
 8006c42:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <recv_udp+0x9c>)
 8006c44:	22ee      	movs	r2, #238	; 0xee
 8006c46:	4917      	ldr	r1, [pc, #92]	; (8006ca4 <recv_udp+0xac>)
 8006c48:	4814      	ldr	r0, [pc, #80]	; (8006c9c <recv_udp+0xa4>)
 8006c4a:	f008 fa9f 	bl	800f18c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006c4e:	f106 0810 	add.w	r8, r6, #16
 8006c52:	4640      	mov	r0, r8
 8006c54:	f008 f983 	bl	800ef5e <sys_mbox_valid>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d0e3      	beq.n	8006c24 <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006c5c:	2006      	movs	r0, #6
 8006c5e:	f003 fe69 	bl	800a934 <memp_malloc>
  if (buf == NULL) {
 8006c62:	4604      	mov	r4, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d0dd      	beq.n	8006c24 <recv_udp+0x2c>
    buf->ptr = p;
 8006c68:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8006c6c:	b105      	cbz	r5, 8006c70 <recv_udp+0x78>
 8006c6e:	682d      	ldr	r5, [r5, #0]
 8006c70:	60a5      	str	r5, [r4, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006c72:	4621      	mov	r1, r4
    buf->port = port;
 8006c74:	f8a4 900c 	strh.w	r9, [r4, #12]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006c78:	4640      	mov	r0, r8
  len = p->tot_len;
 8006c7a:	893d      	ldrh	r5, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006c7c:	f008 f932 	bl	800eee4 <sys_mbox_trypost>
 8006c80:	4601      	mov	r1, r0
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d0d3      	beq.n	8006c2e <recv_udp+0x36>
    netbuf_delete(buf);
 8006c86:	4620      	mov	r0, r4
}
 8006c88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    netbuf_delete(buf);
 8006c8c:	f000 bf44 	b.w	8007b18 <netbuf_delete>
}
 8006c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c94:	0801de40 	.word	0x0801de40
 8006c98:	0801deaf 	.word	0x0801deaf
 8006c9c:	0801d8d1 	.word	0x0801d8d1
 8006ca0:	0801ded1 	.word	0x0801ded1
 8006ca4:	0801def0 	.word	0x0801def0

08006ca8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006ca8:	b510      	push	{r4, lr}
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006caa:	6844      	ldr	r4, [r0, #4]
{
 8006cac:	4601      	mov	r1, r0
  tcp_arg(pcb, conn);
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f004 fcd0 	bl	800b654 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	4909      	ldr	r1, [pc, #36]	; (8006cdc <setup_tcp+0x34>)
 8006cb8:	f004 fcd0 	bl	800b65c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	4908      	ldr	r1, [pc, #32]	; (8006ce0 <setup_tcp+0x38>)
 8006cc0:	f004 fce4 	bl	800b68c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	4907      	ldr	r1, [pc, #28]	; (8006ce4 <setup_tcp+0x3c>)
 8006cc8:	2202      	movs	r2, #2
 8006cca:	f004 fd13 	bl	800b6f4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4905      	ldr	r1, [pc, #20]	; (8006ce8 <setup_tcp+0x40>)
}
 8006cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_err(pcb, err_tcp);
 8006cd6:	f004 bcef 	b.w	800b6b8 <tcp_err>
 8006cda:	bf00      	nop
 8006cdc:	08007199 	.word	0x08007199
 8006ce0:	080073b9 	.word	0x080073b9
 8006ce4:	0800711d 	.word	0x0800711d
 8006ce8:	08007269 	.word	0x08007269

08006cec <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf0:	4688      	mov	r8, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	b930      	cbnz	r0, 8006d04 <lwip_netconn_do_writemore+0x18>
 8006cf6:	4b86      	ldr	r3, [pc, #536]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006cf8:	f240 6273 	movw	r2, #1651	; 0x673
 8006cfc:	4985      	ldr	r1, [pc, #532]	; (8006f14 <lwip_netconn_do_writemore+0x228>)
 8006cfe:	4886      	ldr	r0, [pc, #536]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d00:	f008 fa44 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006d04:	7863      	ldrb	r3, [r4, #1]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d006      	beq.n	8006d18 <lwip_netconn_do_writemore+0x2c>
 8006d0a:	4b81      	ldr	r3, [pc, #516]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006d0c:	f240 6274 	movw	r2, #1652	; 0x674
 8006d10:	4982      	ldr	r1, [pc, #520]	; (8006f1c <lwip_netconn_do_writemore+0x230>)
 8006d12:	4881      	ldr	r0, [pc, #516]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d14:	f008 fa3a 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006d18:	69e3      	ldr	r3, [r4, #28]
 8006d1a:	b933      	cbnz	r3, 8006d2a <lwip_netconn_do_writemore+0x3e>
 8006d1c:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006d1e:	f240 6275 	movw	r2, #1653	; 0x675
 8006d22:	497f      	ldr	r1, [pc, #508]	; (8006f20 <lwip_netconn_do_writemore+0x234>)
 8006d24:	487c      	ldr	r0, [pc, #496]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d26:	f008 fa31 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8006d2a:	6863      	ldr	r3, [r4, #4]
 8006d2c:	b933      	cbnz	r3, 8006d3c <lwip_netconn_do_writemore+0x50>
 8006d2e:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006d30:	f240 6276 	movw	r2, #1654	; 0x676
 8006d34:	497b      	ldr	r1, [pc, #492]	; (8006f24 <lwip_netconn_do_writemore+0x238>)
 8006d36:	4878      	ldr	r0, [pc, #480]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d38:	f008 fa28 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8006d3c:	69e3      	ldr	r3, [r4, #28]
 8006d3e:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d306      	bcc.n	8006d54 <lwip_netconn_do_writemore+0x68>
 8006d46:	4b72      	ldr	r3, [pc, #456]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006d48:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8006d4c:	4976      	ldr	r1, [pc, #472]	; (8006f28 <lwip_netconn_do_writemore+0x23c>)
 8006d4e:	4872      	ldr	r0, [pc, #456]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d50:	f008 fa1c 	bl	800f18c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006d54:	69e3      	ldr	r3, [r4, #28]
 8006d56:	899b      	ldrh	r3, [r3, #12]
 8006d58:	b933      	cbnz	r3, 8006d68 <lwip_netconn_do_writemore+0x7c>
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006d5c:	f240 6279 	movw	r2, #1657	; 0x679
 8006d60:	4972      	ldr	r1, [pc, #456]	; (8006f2c <lwip_netconn_do_writemore+0x240>)
 8006d62:	486d      	ldr	r0, [pc, #436]	; (8006f18 <lwip_netconn_do_writemore+0x22c>)
 8006d64:	f008 fa12 	bl	800f18c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8006d68:	69e3      	ldr	r3, [r4, #28]
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006d6a:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8006f18 <lwip_netconn_do_writemore+0x22c>
  apiflags = conn->current_msg->msg.w.apiflags;
 8006d6e:	7f1e      	ldrb	r6, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006d70:	7e23      	ldrb	r3, [r4, #24]
 8006d72:	079b      	lsls	r3, r3, #30
 8006d74:	bf54      	ite	pl
 8006d76:	f3c6 0780 	ubfxpl	r7, r6, #2, #1
 8006d7a:	2701      	movmi	r7, #1
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006d7c:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8006d7e:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006d80:	688a      	ldr	r2, [r1, #8]
 8006d82:	690b      	ldr	r3, [r1, #16]
 8006d84:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 8006d86:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006d8a:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8006d8e:	6850      	ldr	r0, [r2, #4]
 8006d90:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8006d94:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 8006d98:	bf2a      	itet	cs
 8006d9a:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 8006d9e:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006da2:	f046 0602 	orrcs.w	r6, r6, #2
      if (available < len) {
 8006da6:	42aa      	cmp	r2, r5
 8006da8:	d97a      	bls.n	8006ea0 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 8006daa:	2f00      	cmp	r7, #0
 8006dac:	d037      	beq.n	8006e1e <lwip_netconn_do_writemore+0x132>
          if (!len) {
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	d137      	bne.n	8006e22 <lwip_netconn_do_writemore+0x136>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006db2:	698b      	ldr	r3, [r1, #24]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bf0c      	ite	eq
 8006db8:	f06f 0a06 	mvneq.w	sl, #6
 8006dbc:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006dc0:	69e3      	ldr	r3, [r4, #28]
 8006dc2:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d257      	bcs.n	8006e7a <lwip_netconn_do_writemore+0x18e>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006dca:	6a23      	ldr	r3, [r4, #32]
 8006dcc:	b11b      	cbz	r3, 8006dd6 <lwip_netconn_do_writemore+0xea>
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2103      	movs	r1, #3
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8006dd6:	7e23      	ldrb	r3, [r4, #24]
 8006dd8:	f043 0310 	orr.w	r3, r3, #16
 8006ddc:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 8006dde:	f1ba 0f00 	cmp.w	sl, #0
 8006de2:	d17a      	bne.n	8006eda <lwip_netconn_do_writemore+0x1ee>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006de4:	69e3      	ldr	r3, [r4, #28]
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
      }
      out_err = tcp_output(conn->pcb.tcp);
 8006de6:	6860      	ldr	r0, [r4, #4]
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8006de8:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8006dec:	429a      	cmp	r2, r3
  u8_t write_finished = 0;
 8006dee:	bf08      	it	eq
 8006df0:	2701      	moveq	r7, #1
      out_err = tcp_output(conn->pcb.tcp);
 8006df2:	f007 f9bd 	bl	800e170 <tcp_output>
      if (out_err == ERR_RTE) {
 8006df6:	3004      	adds	r0, #4
 8006df8:	f040 8082 	bne.w	8006f00 <lwip_netconn_do_writemore+0x214>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8006dfc:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006e00:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 8006e02:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006e04:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006e06:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8006e0a:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 8006e0c:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8006e0e:	f1b8 0f00 	cmp.w	r8, #0
 8006e12:	d07b      	beq.n	8006f0c <lwip_netconn_do_writemore+0x220>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8006e14:	300c      	adds	r0, #12
 8006e16:	f008 f8dd 	bl	800efd4 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	e068      	b.n	8006ef0 <lwip_netconn_do_writemore+0x204>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8006e1e:	f046 0602 	orr.w	r6, r6, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006e22:	442b      	add	r3, r5
 8006e24:	4298      	cmp	r0, r3
 8006e26:	d206      	bcs.n	8006e36 <lwip_netconn_do_writemore+0x14a>
 8006e28:	4b39      	ldr	r3, [pc, #228]	; (8006f10 <lwip_netconn_do_writemore+0x224>)
 8006e2a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8006e2e:	4940      	ldr	r1, [pc, #256]	; (8006f30 <lwip_netconn_do_writemore+0x244>)
 8006e30:	4658      	mov	r0, fp
 8006e32:	f008 f9ab 	bl	800f18c <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e3a:	429d      	cmp	r5, r3
 8006e3c:	d102      	bne.n	8006e44 <lwip_netconn_do_writemore+0x158>
 8006e3e:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 8006e42:	d207      	bcs.n	8006e54 <lwip_netconn_do_writemore+0x168>
 8006e44:	fa1f f989 	uxth.w	r9, r9
 8006e48:	45a9      	cmp	r9, r5
 8006e4a:	d12b      	bne.n	8006ea4 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8006e4c:	69e3      	ldr	r3, [r4, #28]
 8006e4e:	899b      	ldrh	r3, [r3, #12]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d927      	bls.n	8006ea4 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006e54:	f046 0602 	orr.w	r6, r6, #2
        write_more = 1;
 8006e58:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006e5c:	4651      	mov	r1, sl
 8006e5e:	4633      	mov	r3, r6
 8006e60:	462a      	mov	r2, r5
 8006e62:	6860      	ldr	r0, [r4, #4]
 8006e64:	f006 fc2c 	bl	800d6c0 <tcp_write>
      if (err == ERR_OK) {
 8006e68:	4682      	mov	sl, r0
 8006e6a:	b1f0      	cbz	r0, 8006eaa <lwip_netconn_do_writemore+0x1be>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006e6c:	f10a 0301 	add.w	r3, sl, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d8c4      	bhi.n	8006e00 <lwip_netconn_do_writemore+0x114>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006e76:	2f00      	cmp	r7, #0
 8006e78:	d1a2      	bne.n	8006dc0 <lwip_netconn_do_writemore+0xd4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8006e7a:	6863      	ldr	r3, [r4, #4]
 8006e7c:	f640 3269 	movw	r2, #2921	; 0xb69
 8006e80:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8006e84:	4291      	cmp	r1, r2
 8006e86:	d903      	bls.n	8006e90 <lwip_netconn_do_writemore+0x1a4>
 8006e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	d9a6      	bls.n	8006dde <lwip_netconn_do_writemore+0xf2>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8006e90:	6a23      	ldr	r3, [r4, #32]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0a3      	beq.n	8006dde <lwip_netconn_do_writemore+0xf2>
 8006e96:	2200      	movs	r2, #0
 8006e98:	2103      	movs	r1, #3
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	4798      	blx	r3
 8006e9e:	e79e      	b.n	8006dde <lwip_netconn_do_writemore+0xf2>
 8006ea0:	4615      	mov	r5, r2
 8006ea2:	e7be      	b.n	8006e22 <lwip_netconn_do_writemore+0x136>
        write_more = 0;
 8006ea4:	f04f 0900 	mov.w	r9, #0
 8006ea8:	e7d8      	b.n	8006e5c <lwip_netconn_do_writemore+0x170>
        conn->current_msg->msg.w.offset += len;
 8006eaa:	69e3      	ldr	r3, [r4, #28]
 8006eac:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006eae:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 8006eb0:	442a      	add	r2, r5
 8006eb2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006eb8:	684a      	ldr	r2, [r1, #4]
 8006eba:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8006ebc:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006ebe:	d107      	bne.n	8006ed0 <lwip_netconn_do_writemore+0x1e4>
          conn->current_msg->msg.w.vector_cnt--;
 8006ec0:	899a      	ldrh	r2, [r3, #12]
 8006ec2:	3a01      	subs	r2, #1
 8006ec4:	b292      	uxth	r2, r2
 8006ec6:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8006ec8:	b112      	cbz	r2, 8006ed0 <lwip_netconn_do_writemore+0x1e4>
            conn->current_msg->msg.w.vector++;
 8006eca:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 8006ecc:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 8006ece:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	f47f af52 	bne.w	8006d7c <lwip_netconn_do_writemore+0x90>
 8006ed8:	e7c8      	b.n	8006e6c <lwip_netconn_do_writemore+0x180>
    } else if (err == ERR_MEM) {
 8006eda:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ede:	d18f      	bne.n	8006e00 <lwip_netconn_do_writemore+0x114>
      err_t out_err = tcp_output(conn->pcb.tcp);
 8006ee0:	6860      	ldr	r0, [r4, #4]
 8006ee2:	f007 f945 	bl	800e170 <tcp_output>
      if (out_err == ERR_RTE) {
 8006ee6:	3004      	adds	r0, #4
 8006ee8:	d088      	beq.n	8006dfc <lwip_netconn_do_writemore+0x110>
      } else if (dontblock) {
 8006eea:	b91f      	cbnz	r7, 8006ef4 <lwip_netconn_do_writemore+0x208>
    return ERR_MEM;
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006ef0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006ef4:	69e3      	ldr	r3, [r4, #28]
 8006ef6:	699b      	ldr	r3, [r3, #24]
 8006ef8:	b12b      	cbz	r3, 8006f06 <lwip_netconn_do_writemore+0x21a>
 8006efa:	f04f 0a00 	mov.w	sl, #0
 8006efe:	e77f      	b.n	8006e00 <lwip_netconn_do_writemore+0x114>
  if (write_finished) {
 8006f00:	2f00      	cmp	r7, #0
 8006f02:	d1fa      	bne.n	8006efa <lwip_netconn_do_writemore+0x20e>
 8006f04:	e7f2      	b.n	8006eec <lwip_netconn_do_writemore+0x200>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8006f06:	f06f 0a06 	mvn.w	sl, #6
 8006f0a:	e779      	b.n	8006e00 <lwip_netconn_do_writemore+0x114>
  return ERR_OK;
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	e7ef      	b.n	8006ef0 <lwip_netconn_do_writemore+0x204>
 8006f10:	0801de40 	.word	0x0801de40
 8006f14:	0801df87 	.word	0x0801df87
 8006f18:	0801d8d1 	.word	0x0801d8d1
 8006f1c:	0801df94 	.word	0x0801df94
 8006f20:	0801dfb1 	.word	0x0801dfb1
 8006f24:	0801dfcb 	.word	0x0801dfcb
 8006f28:	0801dfe1 	.word	0x0801dfe1
 8006f2c:	0801e020 	.word	0x0801e020
 8006f30:	0801e048 	.word	0x0801e048

08006f34 <lwip_netconn_do_close_internal>:
{
 8006f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f38:	468a      	mov	sl, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	b930      	cbnz	r0, 8006f4c <lwip_netconn_do_close_internal+0x18>
 8006f3e:	4b6c      	ldr	r3, [pc, #432]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 8006f40:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006f44:	496b      	ldr	r1, [pc, #428]	; (80070f4 <lwip_netconn_do_close_internal+0x1c0>)
 8006f46:	486c      	ldr	r0, [pc, #432]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 8006f48:	f008 f920 	bl	800f18c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006f4c:	7823      	ldrb	r3, [r4, #0]
 8006f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f52:	2b10      	cmp	r3, #16
 8006f54:	d006      	beq.n	8006f64 <lwip_netconn_do_close_internal+0x30>
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 8006f58:	f240 32a3 	movw	r2, #931	; 0x3a3
 8006f5c:	4967      	ldr	r1, [pc, #412]	; (80070fc <lwip_netconn_do_close_internal+0x1c8>)
 8006f5e:	4866      	ldr	r0, [pc, #408]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 8006f60:	f008 f914 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006f64:	7863      	ldrb	r3, [r4, #1]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d006      	beq.n	8006f78 <lwip_netconn_do_close_internal+0x44>
 8006f6a:	4b61      	ldr	r3, [pc, #388]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 8006f6c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8006f70:	4963      	ldr	r1, [pc, #396]	; (8007100 <lwip_netconn_do_close_internal+0x1cc>)
 8006f72:	4861      	ldr	r0, [pc, #388]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 8006f74:	f008 f90a 	bl	800f18c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006f78:	6863      	ldr	r3, [r4, #4]
 8006f7a:	b933      	cbnz	r3, 8006f8a <lwip_netconn_do_close_internal+0x56>
 8006f7c:	4b5c      	ldr	r3, [pc, #368]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 8006f7e:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006f82:	4960      	ldr	r1, [pc, #384]	; (8007104 <lwip_netconn_do_close_internal+0x1d0>)
 8006f84:	485c      	ldr	r0, [pc, #368]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 8006f86:	f008 f901 	bl	800f18c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006f8a:	69e3      	ldr	r3, [r4, #28]
 8006f8c:	b933      	cbnz	r3, 8006f9c <lwip_netconn_do_close_internal+0x68>
 8006f8e:	4b58      	ldr	r3, [pc, #352]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 8006f90:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006f94:	495c      	ldr	r1, [pc, #368]	; (8007108 <lwip_netconn_do_close_internal+0x1d4>)
 8006f96:	4858      	ldr	r0, [pc, #352]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 8006f98:	f008 f8f8 	bl	800f18c <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 8006f9c:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 8006f9e:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8006fa0:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 8006fa2:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 8006fa4:	f003 0901 	and.w	r9, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8006fa8:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8006fac:	d00f      	beq.n	8006fce <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8006fae:	f1b9 0f00 	cmp.w	r9, #0
 8006fb2:	d005      	beq.n	8006fc0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8006fb4:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 8006fb6:	1f5a      	subs	r2, r3, #5
 8006fb8:	2a01      	cmp	r2, #1
 8006fba:	d908      	bls.n	8006fce <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8006fbc:	2b08      	cmp	r3, #8
 8006fbe:	d006      	beq.n	8006fce <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006fc0:	f1b8 0f00 	cmp.w	r8, #0
 8006fc4:	d016      	beq.n	8006ff4 <lwip_netconn_do_close_internal+0xc0>
 8006fc6:	8b6f      	ldrh	r7, [r5, #26]
 8006fc8:	f017 0710 	ands.w	r7, r7, #16
 8006fcc:	d004      	beq.n	8006fd8 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8006fce:	2701      	movs	r7, #1
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f004 fb3e 	bl	800b654 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006fd8:	7d2b      	ldrb	r3, [r5, #20]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d10c      	bne.n	8006ff8 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f004 fb81 	bl	800b6e8 <tcp_accept>
  if (shut_close) {
 8006fe6:	bb27      	cbnz	r7, 8007032 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006fe8:	4642      	mov	r2, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	4628      	mov	r0, r5
 8006fee:	f004 ffd1 	bl	800bf94 <tcp_shutdown>
 8006ff2:	e021      	b.n	8007038 <lwip_netconn_do_close_internal+0x104>
 8006ff4:	4647      	mov	r7, r8
 8006ff6:	e7ef      	b.n	8006fd8 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8006ff8:	f1b9 0f00 	cmp.w	r9, #0
 8006ffc:	d007      	beq.n	800700e <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8006ffe:	2100      	movs	r1, #0
 8007000:	4628      	mov	r0, r5
 8007002:	f004 fb2b 	bl	800b65c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007006:	2100      	movs	r1, #0
 8007008:	4628      	mov	r0, r5
 800700a:	f004 fb6d 	bl	800b6e8 <tcp_accept>
    if (shut_tx) {
 800700e:	f1b8 0f00 	cmp.w	r8, #0
 8007012:	d003      	beq.n	800701c <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8007014:	2100      	movs	r1, #0
 8007016:	4628      	mov	r0, r5
 8007018:	f004 fb38 	bl	800b68c <tcp_sent>
    if (shut_close) {
 800701c:	2f00      	cmp	r7, #0
 800701e:	d0e3      	beq.n	8006fe8 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8007020:	2200      	movs	r2, #0
 8007022:	4628      	mov	r0, r5
 8007024:	4611      	mov	r1, r2
 8007026:	f004 fb65 	bl	800b6f4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800702a:	2100      	movs	r1, #0
 800702c:	4628      	mov	r0, r5
 800702e:	f004 fb43 	bl	800b6b8 <tcp_err>
      err = tcp_close(tpcb);
 8007032:	4628      	mov	r0, r5
 8007034:	f004 fed4 	bl	800bde0 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007038:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800703a:	b160      	cbz	r0, 8007056 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d10a      	bne.n	8007056 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007040:	69e3      	ldr	r3, [r4, #28]
 8007042:	f893 b009 	ldrb.w	fp, [r3, #9]
 8007046:	f1bb 0f00 	cmp.w	fp, #0
 800704a:	d130      	bne.n	80070ae <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 800704c:	b11f      	cbz	r7, 8007056 <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 800704e:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8007050:	4628      	mov	r0, r5
 8007052:	f005 f853 	bl	800c0fc <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007056:	69e3      	ldr	r3, [r4, #28]
 8007058:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800705a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800705c:	2300      	movs	r3, #0
 800705e:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8007060:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8007062:	b9ce      	cbnz	r6, 8007098 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8007064:	b137      	cbz	r7, 8007074 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007066:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8007068:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800706a:	b11b      	cbz	r3, 8007074 <lwip_netconn_do_close_internal+0x140>
 800706c:	4632      	mov	r2, r6
 800706e:	2104      	movs	r1, #4
 8007070:	4620      	mov	r0, r4
 8007072:	4798      	blx	r3
      if (shut_rx) {
 8007074:	f1b9 0f00 	cmp.w	r9, #0
 8007078:	d005      	beq.n	8007086 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800707a:	6a23      	ldr	r3, [r4, #32]
 800707c:	b163      	cbz	r3, 8007098 <lwip_netconn_do_close_internal+0x164>
 800707e:	2200      	movs	r2, #0
 8007080:	4620      	mov	r0, r4
 8007082:	4611      	mov	r1, r2
 8007084:	4798      	blx	r3
      if (shut_tx) {
 8007086:	f1b8 0f00 	cmp.w	r8, #0
 800708a:	d005      	beq.n	8007098 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800708c:	6a23      	ldr	r3, [r4, #32]
 800708e:	b11b      	cbz	r3, 8007098 <lwip_netconn_do_close_internal+0x164>
 8007090:	2200      	movs	r2, #0
 8007092:	2102      	movs	r1, #2
 8007094:	4620      	mov	r0, r4
 8007096:	4798      	blx	r3
    if (delayed)
 8007098:	f1ba 0f00 	cmp.w	sl, #0
 800709c:	d026      	beq.n	80070ec <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 800709e:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 80070a0:	f105 000c 	add.w	r0, r5, #12
 80070a4:	f007 ff96 	bl	800efd4 <sys_sem_signal>
}
 80070a8:	4630      	mov	r0, r6
 80070aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80070ae:	7d2b      	ldrb	r3, [r5, #20]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d106      	bne.n	80070c2 <lwip_netconn_do_close_internal+0x18e>
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <lwip_netconn_do_close_internal+0x1bc>)
 80070b6:	f240 4241 	movw	r2, #1089	; 0x441
 80070ba:	4914      	ldr	r1, [pc, #80]	; (800710c <lwip_netconn_do_close_internal+0x1d8>)
 80070bc:	480e      	ldr	r0, [pc, #56]	; (80070f8 <lwip_netconn_do_close_internal+0x1c4>)
 80070be:	f008 f865 	bl	800f18c <iprintf>
    if (shut_tx) {
 80070c2:	f1b8 0f00 	cmp.w	r8, #0
 80070c6:	d003      	beq.n	80070d0 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 80070c8:	4911      	ldr	r1, [pc, #68]	; (8007110 <lwip_netconn_do_close_internal+0x1dc>)
 80070ca:	4628      	mov	r0, r5
 80070cc:	f004 fade 	bl	800b68c <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80070d0:	2201      	movs	r2, #1
 80070d2:	4628      	mov	r0, r5
 80070d4:	490f      	ldr	r1, [pc, #60]	; (8007114 <lwip_netconn_do_close_internal+0x1e0>)
 80070d6:	f004 fb0d 	bl	800b6f4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80070da:	4628      	mov	r0, r5
 80070dc:	490e      	ldr	r1, [pc, #56]	; (8007118 <lwip_netconn_do_close_internal+0x1e4>)
 80070de:	f004 faeb 	bl	800b6b8 <tcp_err>
    tcp_arg(tpcb, conn);
 80070e2:	4621      	mov	r1, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	f004 fab5 	bl	800b654 <tcp_arg>
  return err;
 80070ea:	e7dd      	b.n	80070a8 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 80070ec:	4656      	mov	r6, sl
 80070ee:	e7db      	b.n	80070a8 <lwip_netconn_do_close_internal+0x174>
 80070f0:	0801de40 	.word	0x0801de40
 80070f4:	0801dd26 	.word	0x0801dd26
 80070f8:	0801d8d1 	.word	0x0801d8d1
 80070fc:	0801e073 	.word	0x0801e073
 8007100:	0801e091 	.word	0x0801e091
 8007104:	0801e0b5 	.word	0x0801e0b5
 8007108:	0801dfb1 	.word	0x0801dfb1
 800710c:	0801e0c8 	.word	0x0801e0c8
 8007110:	080073b9 	.word	0x080073b9
 8007114:	0800711d 	.word	0x0800711d
 8007118:	08007269 	.word	0x08007269

0800711c <poll_tcp>:
{
 800711c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800711e:	4604      	mov	r4, r0
 8007120:	b930      	cbnz	r0, 8007130 <poll_tcp+0x14>
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <poll_tcp+0x70>)
 8007124:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8007128:	4919      	ldr	r1, [pc, #100]	; (8007190 <poll_tcp+0x74>)
 800712a:	481a      	ldr	r0, [pc, #104]	; (8007194 <poll_tcp+0x78>)
 800712c:	f008 f82e 	bl	800f18c <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8007130:	7861      	ldrb	r1, [r4, #1]
 8007132:	2901      	cmp	r1, #1
 8007134:	d11c      	bne.n	8007170 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007136:	4620      	mov	r0, r4
 8007138:	f7ff fdd8 	bl	8006cec <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800713c:	7e23      	ldrb	r3, [r4, #24]
 800713e:	06da      	lsls	r2, r3, #27
 8007140:	d514      	bpl.n	800716c <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8007142:	6862      	ldr	r2, [r4, #4]
 8007144:	b192      	cbz	r2, 800716c <poll_tcp+0x50>
 8007146:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800714a:	f640 3169 	movw	r1, #2921	; 0xb69
 800714e:	4288      	cmp	r0, r1
 8007150:	d90c      	bls.n	800716c <poll_tcp+0x50>
 8007152:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8007156:	2a04      	cmp	r2, #4
 8007158:	d808      	bhi.n	800716c <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007160:	6a23      	ldr	r3, [r4, #32]
 8007162:	b11b      	cbz	r3, 800716c <poll_tcp+0x50>
 8007164:	2200      	movs	r2, #0
 8007166:	2102      	movs	r1, #2
 8007168:	4620      	mov	r0, r4
 800716a:	4798      	blx	r3
}
 800716c:	2000      	movs	r0, #0
 800716e:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8007170:	2904      	cmp	r1, #4
 8007172:	d1e3      	bne.n	800713c <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8007174:	69e2      	ldr	r2, [r4, #28]
 8007176:	b11a      	cbz	r2, 8007180 <poll_tcp+0x64>
 8007178:	7a53      	ldrb	r3, [r2, #9]
 800717a:	b10b      	cbz	r3, 8007180 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 800717c:	3b01      	subs	r3, #1
 800717e:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007180:	2101      	movs	r1, #1
 8007182:	4620      	mov	r0, r4
 8007184:	f7ff fed6 	bl	8006f34 <lwip_netconn_do_close_internal>
 8007188:	e7d8      	b.n	800713c <poll_tcp+0x20>
 800718a:	bf00      	nop
 800718c:	0801de40 	.word	0x0801de40
 8007190:	0801df87 	.word	0x0801df87
 8007194:	0801d8d1 	.word	0x0801d8d1

08007198 <recv_tcp>:
{
 8007198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719c:	4606      	mov	r6, r0
 800719e:	4615      	mov	r5, r2
 80071a0:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80071a2:	460f      	mov	r7, r1
 80071a4:	b931      	cbnz	r1, 80071b4 <recv_tcp+0x1c>
 80071a6:	4b29      	ldr	r3, [pc, #164]	; (800724c <recv_tcp+0xb4>)
 80071a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80071ac:	4928      	ldr	r1, [pc, #160]	; (8007250 <recv_tcp+0xb8>)
 80071ae:	4829      	ldr	r0, [pc, #164]	; (8007254 <recv_tcp+0xbc>)
 80071b0:	f007 ffec 	bl	800f18c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80071b4:	bb4e      	cbnz	r6, 800720a <recv_tcp+0x72>
 80071b6:	4b25      	ldr	r3, [pc, #148]	; (800724c <recv_tcp+0xb4>)
 80071b8:	f240 122d 	movw	r2, #301	; 0x12d
 80071bc:	4926      	ldr	r1, [pc, #152]	; (8007258 <recv_tcp+0xc0>)
 80071be:	4825      	ldr	r0, [pc, #148]	; (8007254 <recv_tcp+0xbc>)
 80071c0:	f007 ffe4 	bl	800f18c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80071c4:	bb14      	cbnz	r4, 800720c <recv_tcp+0x74>
    return ERR_VAL;
 80071c6:	f06f 0405 	mvn.w	r4, #5
}
 80071ca:	4620      	mov	r0, r4
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 80071d0:	4638      	mov	r0, r7
 80071d2:	8929      	ldrh	r1, [r5, #8]
 80071d4:	f004 f9ec 	bl	800b5b0 <tcp_recved>
      pbuf_free(p);
 80071d8:	4628      	mov	r0, r5
 80071da:	f003 fdf1 	bl	800adc0 <pbuf_free>
 80071de:	e7f4      	b.n	80071ca <recv_tcp+0x32>
  if (p != NULL) {
 80071e0:	b16d      	cbz	r5, 80071fe <recv_tcp+0x66>
    len = p->tot_len;
 80071e2:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80071e4:	4629      	mov	r1, r5
 80071e6:	4640      	mov	r0, r8
 80071e8:	f007 fe7c 	bl	800eee4 <sys_mbox_trypost>
 80071ec:	4604      	mov	r4, r0
 80071ee:	b948      	cbnz	r0, 8007204 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80071f0:	6a33      	ldr	r3, [r6, #32]
 80071f2:	b343      	cbz	r3, 8007246 <recv_tcp+0xae>
 80071f4:	4601      	mov	r1, r0
 80071f6:	463a      	mov	r2, r7
 80071f8:	4630      	mov	r0, r6
 80071fa:	4798      	blx	r3
 80071fc:	e7e5      	b.n	80071ca <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80071fe:	4d17      	ldr	r5, [pc, #92]	; (800725c <recv_tcp+0xc4>)
    len = 0;
 8007200:	2700      	movs	r7, #0
 8007202:	e7ef      	b.n	80071e4 <recv_tcp+0x4c>
    return ERR_MEM;
 8007204:	f04f 34ff 	mov.w	r4, #4294967295
 8007208:	e7df      	b.n	80071ca <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800720a:	b144      	cbz	r4, 800721e <recv_tcp+0x86>
 800720c:	4b0f      	ldr	r3, [pc, #60]	; (800724c <recv_tcp+0xb4>)
 800720e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8007212:	4913      	ldr	r1, [pc, #76]	; (8007260 <recv_tcp+0xc8>)
 8007214:	480f      	ldr	r0, [pc, #60]	; (8007254 <recv_tcp+0xbc>)
 8007216:	f007 ffb9 	bl	800f18c <iprintf>
  if (conn == NULL) {
 800721a:	2e00      	cmp	r6, #0
 800721c:	d0d3      	beq.n	80071c6 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800721e:	6873      	ldr	r3, [r6, #4]
 8007220:	42bb      	cmp	r3, r7
 8007222:	d006      	beq.n	8007232 <recv_tcp+0x9a>
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <recv_tcp+0xb4>)
 8007226:	f240 1235 	movw	r2, #309	; 0x135
 800722a:	490e      	ldr	r1, [pc, #56]	; (8007264 <recv_tcp+0xcc>)
 800722c:	4809      	ldr	r0, [pc, #36]	; (8007254 <recv_tcp+0xbc>)
 800722e:	f007 ffad 	bl	800f18c <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8007232:	f106 0810 	add.w	r8, r6, #16
 8007236:	4640      	mov	r0, r8
 8007238:	f007 fe91 	bl	800ef5e <sys_mbox_valid>
 800723c:	4604      	mov	r4, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	d1ce      	bne.n	80071e0 <recv_tcp+0x48>
    if (p != NULL) {
 8007242:	2d00      	cmp	r5, #0
 8007244:	d1c4      	bne.n	80071d0 <recv_tcp+0x38>
    return ERR_OK;
 8007246:	2400      	movs	r4, #0
 8007248:	e7bf      	b.n	80071ca <recv_tcp+0x32>
 800724a:	bf00      	nop
 800724c:	0801de40 	.word	0x0801de40
 8007250:	0801e0eb 	.word	0x0801e0eb
 8007254:	0801d8d1 	.word	0x0801d8d1
 8007258:	0801e10d 	.word	0x0801e10d
 800725c:	08014962 	.word	0x08014962
 8007260:	0801e12c 	.word	0x0801e12c
 8007264:	0801e144 	.word	0x0801e144

08007268 <err_tcp>:
{
 8007268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800726c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800726e:	4604      	mov	r4, r0
 8007270:	b930      	cbnz	r0, 8007280 <err_tcp+0x18>
 8007272:	4b47      	ldr	r3, [pc, #284]	; (8007390 <err_tcp+0x128>)
 8007274:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8007278:	4946      	ldr	r1, [pc, #280]	; (8007394 <err_tcp+0x12c>)
 800727a:	4847      	ldr	r0, [pc, #284]	; (8007398 <err_tcp+0x130>)
 800727c:	f007 ff86 	bl	800f18c <iprintf>
  SYS_ARCH_PROTECT(lev);
 8007280:	f007 feea 	bl	800f058 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007284:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8007286:	2600      	movs	r6, #0
  old_state = conn->state;
 8007288:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800728a:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 800728e:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8007290:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8007292:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 8007294:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8007296:	f007 feeb 	bl	800f070 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800729a:	6a23      	ldr	r3, [r4, #32]
 800729c:	b11b      	cbz	r3, 80072a6 <err_tcp+0x3e>
 800729e:	4632      	mov	r2, r6
 80072a0:	2104      	movs	r1, #4
 80072a2:	4620      	mov	r0, r4
 80072a4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80072a6:	6a23      	ldr	r3, [r4, #32]
 80072a8:	b11b      	cbz	r3, 80072b2 <err_tcp+0x4a>
 80072aa:	2200      	movs	r2, #0
 80072ac:	4620      	mov	r0, r4
 80072ae:	4611      	mov	r1, r2
 80072b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80072b2:	6a23      	ldr	r3, [r4, #32]
 80072b4:	b11b      	cbz	r3, 80072be <err_tcp+0x56>
 80072b6:	2200      	movs	r2, #0
 80072b8:	2102      	movs	r1, #2
 80072ba:	4620      	mov	r0, r4
 80072bc:	4798      	blx	r3
  switch (err) {
 80072be:	f115 0f0e 	cmn.w	r5, #14
 80072c2:	d054      	beq.n	800736e <err_tcp+0x106>
 80072c4:	f115 0f0d 	cmn.w	r5, #13
 80072c8:	d004      	beq.n	80072d4 <err_tcp+0x6c>
 80072ca:	f115 0f0f 	cmn.w	r5, #15
 80072ce:	d145      	bne.n	800735c <err_tcp+0xf4>
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80072d0:	4e32      	ldr	r6, [pc, #200]	; (800739c <err_tcp+0x134>)
 80072d2:	e000      	b.n	80072d6 <err_tcp+0x6e>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80072d4:	4e32      	ldr	r6, [pc, #200]	; (80073a0 <err_tcp+0x138>)
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80072d6:	f104 0810 	add.w	r8, r4, #16
 80072da:	4640      	mov	r0, r8
 80072dc:	f007 fe3f 	bl	800ef5e <sys_mbox_valid>
 80072e0:	b118      	cbz	r0, 80072ea <err_tcp+0x82>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80072e2:	4631      	mov	r1, r6
 80072e4:	4640      	mov	r0, r8
 80072e6:	f007 fdfd 	bl	800eee4 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80072ea:	f104 0814 	add.w	r8, r4, #20
 80072ee:	4640      	mov	r0, r8
 80072f0:	f007 fe35 	bl	800ef5e <sys_mbox_valid>
 80072f4:	b118      	cbz	r0, 80072fe <err_tcp+0x96>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80072f6:	4631      	mov	r1, r6
 80072f8:	4640      	mov	r0, r8
 80072fa:	f007 fdf3 	bl	800eee4 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80072fe:	2f01      	cmp	r7, #1
 8007300:	d002      	beq.n	8007308 <err_tcp+0xa0>
 8007302:	1efb      	subs	r3, r7, #3
 8007304:	2b01      	cmp	r3, #1
 8007306:	d836      	bhi.n	8007376 <err_tcp+0x10e>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007308:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800730a:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 800730e:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007310:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8007312:	d43b      	bmi.n	800738c <err_tcp+0x124>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007314:	69e3      	ldr	r3, [r4, #28]
 8007316:	b933      	cbnz	r3, 8007326 <err_tcp+0xbe>
 8007318:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <err_tcp+0x128>)
 800731a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800731e:	4921      	ldr	r1, [pc, #132]	; (80073a4 <err_tcp+0x13c>)
 8007320:	481d      	ldr	r0, [pc, #116]	; (8007398 <err_tcp+0x130>)
 8007322:	f007 ff33 	bl	800f18c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8007326:	2f04      	cmp	r7, #4
 8007328:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 800732a:	bf14      	ite	ne
 800732c:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 800732e:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007330:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8007332:	bf08      	it	eq
 8007334:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007336:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007338:	4628      	mov	r0, r5
 800733a:	f007 fe51 	bl	800efe0 <sys_sem_valid>
 800733e:	b930      	cbnz	r0, 800734e <err_tcp+0xe6>
 8007340:	4b13      	ldr	r3, [pc, #76]	; (8007390 <err_tcp+0x128>)
 8007342:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007346:	4918      	ldr	r1, [pc, #96]	; (80073a8 <err_tcp+0x140>)
 8007348:	4813      	ldr	r0, [pc, #76]	; (8007398 <err_tcp+0x130>)
 800734a:	f007 ff1f 	bl	800f18c <iprintf>
      conn->current_msg = NULL;
 800734e:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8007350:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8007352:	61e3      	str	r3, [r4, #28]
}
 8007354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8007358:	f007 be3c 	b.w	800efd4 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800735c:	b14d      	cbz	r5, 8007372 <err_tcp+0x10a>
 800735e:	4b0c      	ldr	r3, [pc, #48]	; (8007390 <err_tcp+0x128>)
 8007360:	227d      	movs	r2, #125	; 0x7d
 8007362:	4912      	ldr	r1, [pc, #72]	; (80073ac <err_tcp+0x144>)
 8007364:	2600      	movs	r6, #0
 8007366:	480c      	ldr	r0, [pc, #48]	; (8007398 <err_tcp+0x130>)
 8007368:	f007 ff10 	bl	800f18c <iprintf>
 800736c:	e7b3      	b.n	80072d6 <err_tcp+0x6e>
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800736e:	4e10      	ldr	r6, [pc, #64]	; (80073b0 <err_tcp+0x148>)
 8007370:	e7b1      	b.n	80072d6 <err_tcp+0x6e>
      return NULL;
 8007372:	462e      	mov	r6, r5
 8007374:	e7af      	b.n	80072d6 <err_tcp+0x6e>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007376:	69e3      	ldr	r3, [r4, #28]
 8007378:	b143      	cbz	r3, 800738c <err_tcp+0x124>
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <err_tcp+0x128>)
 800737c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007380:	490c      	ldr	r1, [pc, #48]	; (80073b4 <err_tcp+0x14c>)
 8007382:	4805      	ldr	r0, [pc, #20]	; (8007398 <err_tcp+0x130>)
}
 8007384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8007388:	f007 bf00 	b.w	800f18c <iprintf>
}
 800738c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007390:	0801de40 	.word	0x0801de40
 8007394:	0801df87 	.word	0x0801df87
 8007398:	0801d8d1 	.word	0x0801d8d1
 800739c:	08014962 	.word	0x08014962
 80073a0:	08014963 	.word	0x08014963
 80073a4:	0801dfb1 	.word	0x0801dfb1
 80073a8:	0801e172 	.word	0x0801e172
 80073ac:	0801e162 	.word	0x0801e162
 80073b0:	08014964 	.word	0x08014964
 80073b4:	0801e18b 	.word	0x0801e18b

080073b8 <sent_tcp>:
{
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80073bc:	4604      	mov	r4, r0
 80073be:	b970      	cbnz	r0, 80073de <sent_tcp+0x26>
 80073c0:	4b16      	ldr	r3, [pc, #88]	; (800741c <sent_tcp+0x64>)
 80073c2:	f240 1293 	movw	r2, #403	; 0x193
 80073c6:	4916      	ldr	r1, [pc, #88]	; (8007420 <sent_tcp+0x68>)
 80073c8:	4816      	ldr	r0, [pc, #88]	; (8007424 <sent_tcp+0x6c>)
 80073ca:	f007 fedf 	bl	800f18c <iprintf>
}
 80073ce:	2000      	movs	r0, #0
 80073d0:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80073d2:	2904      	cmp	r1, #4
 80073d4:	d108      	bne.n	80073e8 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80073d6:	2101      	movs	r1, #1
 80073d8:	f7ff fdac 	bl	8006f34 <lwip_netconn_do_close_internal>
 80073dc:	e004      	b.n	80073e8 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 80073de:	7841      	ldrb	r1, [r0, #1]
 80073e0:	2901      	cmp	r1, #1
 80073e2:	d1f6      	bne.n	80073d2 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80073e4:	f7ff fc82 	bl	8006cec <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80073e8:	6863      	ldr	r3, [r4, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0ef      	beq.n	80073ce <sent_tcp+0x16>
 80073ee:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 80073f2:	f640 3269 	movw	r2, #2921	; 0xb69
 80073f6:	4291      	cmp	r1, r2
 80073f8:	d9e9      	bls.n	80073ce <sent_tcp+0x16>
 80073fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d8e5      	bhi.n	80073ce <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8007402:	7e23      	ldrb	r3, [r4, #24]
 8007404:	f023 0310 	bic.w	r3, r3, #16
 8007408:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800740a:	6a23      	ldr	r3, [r4, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0de      	beq.n	80073ce <sent_tcp+0x16>
 8007410:	462a      	mov	r2, r5
 8007412:	2102      	movs	r1, #2
 8007414:	4620      	mov	r0, r4
 8007416:	4798      	blx	r3
  return ERR_OK;
 8007418:	e7d9      	b.n	80073ce <sent_tcp+0x16>
 800741a:	bf00      	nop
 800741c:	0801de40 	.word	0x0801de40
 8007420:	0801df87 	.word	0x0801df87
 8007424:	0801d8d1 	.word	0x0801d8d1

08007428 <lwip_netconn_is_err_msg>:
{
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 800742c:	460c      	mov	r4, r1
 800742e:	b929      	cbnz	r1, 800743c <lwip_netconn_is_err_msg+0x14>
 8007430:	4b0c      	ldr	r3, [pc, #48]	; (8007464 <lwip_netconn_is_err_msg+0x3c>)
 8007432:	2285      	movs	r2, #133	; 0x85
 8007434:	490c      	ldr	r1, [pc, #48]	; (8007468 <lwip_netconn_is_err_msg+0x40>)
 8007436:	480d      	ldr	r0, [pc, #52]	; (800746c <lwip_netconn_is_err_msg+0x44>)
 8007438:	f007 fea8 	bl	800f18c <iprintf>
  if (msg == &netconn_aborted) {
 800743c:	4b0c      	ldr	r3, [pc, #48]	; (8007470 <lwip_netconn_is_err_msg+0x48>)
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	4295      	cmp	r5, r2
 8007442:	d103      	bne.n	800744c <lwip_netconn_is_err_msg+0x24>
    *err = ERR_ABRT;
 8007444:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8007446:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8007448:	7023      	strb	r3, [r4, #0]
}
 800744a:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 800744c:	1c9a      	adds	r2, r3, #2
 800744e:	4295      	cmp	r5, r2
 8007450:	d101      	bne.n	8007456 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_RST;
 8007452:	23f2      	movs	r3, #242	; 0xf2
 8007454:	e7f7      	b.n	8007446 <lwip_netconn_is_err_msg+0x1e>
  } else if (msg == &netconn_closed) {
 8007456:	429d      	cmp	r5, r3
 8007458:	d101      	bne.n	800745e <lwip_netconn_is_err_msg+0x36>
    *err = ERR_CLSD;
 800745a:	23f1      	movs	r3, #241	; 0xf1
 800745c:	e7f3      	b.n	8007446 <lwip_netconn_is_err_msg+0x1e>
  return 0;
 800745e:	2000      	movs	r0, #0
 8007460:	e7f3      	b.n	800744a <lwip_netconn_is_err_msg+0x22>
 8007462:	bf00      	nop
 8007464:	0801de40 	.word	0x0801de40
 8007468:	0801e1a5 	.word	0x0801e1a5
 800746c:	0801d8d1 	.word	0x0801d8d1
 8007470:	08014962 	.word	0x08014962

08007474 <lwip_netconn_do_newconn>:
{
 8007474:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8007476:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8007478:	6805      	ldr	r5, [r0, #0]
{
 800747a:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 800747c:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800747e:	6868      	ldr	r0, [r5, #4]
 8007480:	bb28      	cbnz	r0, 80074ce <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007482:	782b      	ldrb	r3, [r5, #0]
 8007484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007488:	2b10      	cmp	r3, #16
 800748a:	d014      	beq.n	80074b6 <lwip_netconn_do_newconn+0x42>
 800748c:	2b20      	cmp	r3, #32
 800748e:	d11c      	bne.n	80074ca <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007490:	f007 fc6e 	bl	800ed70 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8007494:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007496:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8007498:	6850      	ldr	r0, [r2, #4]
 800749a:	b150      	cbz	r0, 80074b2 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800749c:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800749e:	490c      	ldr	r1, [pc, #48]	; (80074d0 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80074a0:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80074a2:	bf04      	itt	eq
 80074a4:	2301      	moveq	r3, #1
 80074a6:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80074a8:	f007 fc1c 	bl	800ece4 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 80074ac:	6823      	ldr	r3, [r4, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	b96b      	cbnz	r3, 80074ce <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 80074b2:	23ff      	movs	r3, #255	; 0xff
 80074b4:	e00a      	b.n	80074cc <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80074b6:	f004 ff13 	bl	800c2e0 <tcp_new_ip_type>
 80074ba:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	6843      	ldr	r3, [r0, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d0f6      	beq.n	80074b2 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 80074c4:	f7ff fbf0 	bl	8006ca8 <setup_tcp>
 80074c8:	e7f0      	b.n	80074ac <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 80074ca:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 80074cc:	7123      	strb	r3, [r4, #4]
}
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	08006bf9 	.word	0x08006bf9

080074d4 <netconn_alloc>:
{
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80074d8:	2007      	movs	r0, #7
{
 80074da:	460f      	mov	r7, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80074dc:	f003 fa2a 	bl	800a934 <memp_malloc>
  if (conn == NULL) {
 80074e0:	4604      	mov	r4, r0
 80074e2:	b388      	cbz	r0, 8007548 <netconn_alloc+0x74>
  conn->type = t;
 80074e4:	7005      	strb	r5, [r0, #0]
  switch (NETCONNTYPE_GROUP(t)) {
 80074e6:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 80074ea:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 80074ec:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 80074ee:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80074f0:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 80074f2:	d00e      	beq.n	8007512 <netconn_alloc+0x3e>
 80074f4:	2d20      	cmp	r5, #32
 80074f6:	d00c      	beq.n	8007512 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80074f8:	4b14      	ldr	r3, [pc, #80]	; (800754c <netconn_alloc+0x78>)
 80074fa:	f240 22e5 	movw	r2, #741	; 0x2e5
 80074fe:	4914      	ldr	r1, [pc, #80]	; (8007550 <netconn_alloc+0x7c>)
 8007500:	4814      	ldr	r0, [pc, #80]	; (8007554 <netconn_alloc+0x80>)
 8007502:	f007 fe43 	bl	800f18c <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8007506:	4621      	mov	r1, r4
 8007508:	2007      	movs	r0, #7
 800750a:	f003 fa2f 	bl	800a96c <memp_free>
  return NULL;
 800750e:	2400      	movs	r4, #0
 8007510:	e01a      	b.n	8007548 <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007512:	f104 0610 	add.w	r6, r4, #16
 8007516:	2106      	movs	r1, #6
 8007518:	4630      	mov	r0, r6
 800751a:	f007 fcc9 	bl	800eeb0 <sys_mbox_new>
 800751e:	4601      	mov	r1, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d1f0      	bne.n	8007506 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007524:	f104 000c 	add.w	r0, r4, #12
 8007528:	f007 fd21 	bl	800ef6e <sys_sem_new>
 800752c:	4605      	mov	r5, r0
 800752e:	b118      	cbz	r0, 8007538 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8007530:	4630      	mov	r0, r6
 8007532:	f007 fccd 	bl	800eed0 <sys_mbox_free>
    goto free_and_return;
 8007536:	e7e6      	b.n	8007506 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007538:	f104 0014 	add.w	r0, r4, #20
 800753c:	f007 fd14 	bl	800ef68 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8007540:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8007542:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8007544:	e9c4 5707 	strd	r5, r7, [r4, #28]
}
 8007548:	4620      	mov	r0, r4
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	0801de40 	.word	0x0801de40
 8007550:	0801e1b1 	.word	0x0801e1b1
 8007554:	0801d8d1 	.word	0x0801d8d1

08007558 <netconn_free>:
{
 8007558:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800755a:	6843      	ldr	r3, [r0, #4]
{
 800755c:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800755e:	b133      	cbz	r3, 800756e <netconn_free+0x16>
 8007560:	4b16      	ldr	r3, [pc, #88]	; (80075bc <netconn_free+0x64>)
 8007562:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007566:	4916      	ldr	r1, [pc, #88]	; (80075c0 <netconn_free+0x68>)
 8007568:	4816      	ldr	r0, [pc, #88]	; (80075c4 <netconn_free+0x6c>)
 800756a:	f007 fe0f 	bl	800f18c <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800756e:	f104 0010 	add.w	r0, r4, #16
 8007572:	f007 fcf4 	bl	800ef5e <sys_mbox_valid>
 8007576:	b130      	cbz	r0, 8007586 <netconn_free+0x2e>
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <netconn_free+0x64>)
 800757a:	f44f 7249 	mov.w	r2, #804	; 0x324
 800757e:	4912      	ldr	r1, [pc, #72]	; (80075c8 <netconn_free+0x70>)
 8007580:	4810      	ldr	r0, [pc, #64]	; (80075c4 <netconn_free+0x6c>)
 8007582:	f007 fe03 	bl	800f18c <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007586:	f104 0014 	add.w	r0, r4, #20
 800758a:	f007 fce8 	bl	800ef5e <sys_mbox_valid>
 800758e:	b130      	cbz	r0, 800759e <netconn_free+0x46>
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <netconn_free+0x64>)
 8007592:	f240 3227 	movw	r2, #807	; 0x327
 8007596:	490d      	ldr	r1, [pc, #52]	; (80075cc <netconn_free+0x74>)
 8007598:	480a      	ldr	r0, [pc, #40]	; (80075c4 <netconn_free+0x6c>)
 800759a:	f007 fdf7 	bl	800f18c <iprintf>
  sys_sem_free(&conn->op_completed);
 800759e:	f104 050c 	add.w	r5, r4, #12
 80075a2:	4628      	mov	r0, r5
 80075a4:	f007 fd19 	bl	800efda <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80075a8:	4628      	mov	r0, r5
 80075aa:	f007 fd1e 	bl	800efea <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 80075ae:	4621      	mov	r1, r4
 80075b0:	2007      	movs	r0, #7
}
 80075b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_NETCONN, conn);
 80075b6:	f003 b9d9 	b.w	800a96c <memp_free>
 80075ba:	bf00      	nop
 80075bc:	0801de40 	.word	0x0801de40
 80075c0:	0801e1d7 	.word	0x0801e1d7
 80075c4:	0801d8d1 	.word	0x0801d8d1
 80075c8:	0801e205 	.word	0x0801e205
 80075cc:	0801e23f 	.word	0x0801e23f

080075d0 <netconn_drain>:
{
 80075d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 80075d2:	f100 0510 	add.w	r5, r0, #16
{
 80075d6:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 80075d8:	4628      	mov	r0, r5
 80075da:	f007 fcc0 	bl	800ef5e <sys_mbox_valid>
 80075de:	b158      	cbz	r0, 80075f8 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80075e0:	a901      	add	r1, sp, #4
 80075e2:	4628      	mov	r0, r5
 80075e4:	f007 fcaa 	bl	800ef3c <sys_arch_mbox_tryfetch>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d118      	bne.n	800761e <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 80075ec:	4628      	mov	r0, r5
 80075ee:	f007 fc6f 	bl	800eed0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80075f2:	4628      	mov	r0, r5
 80075f4:	f007 fcb8 	bl	800ef68 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80075f8:	3414      	adds	r4, #20
 80075fa:	4620      	mov	r0, r4
 80075fc:	f007 fcaf 	bl	800ef5e <sys_mbox_valid>
 8007600:	b158      	cbz	r0, 800761a <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007602:	a901      	add	r1, sp, #4
 8007604:	4620      	mov	r0, r4
 8007606:	f007 fc99 	bl	800ef3c <sys_arch_mbox_tryfetch>
 800760a:	3001      	adds	r0, #1
 800760c:	d11a      	bne.n	8007644 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 800760e:	4620      	mov	r0, r4
 8007610:	f007 fc5e 	bl	800eed0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007614:	4620      	mov	r0, r4
 8007616:	f007 fca7 	bl	800ef68 <sys_mbox_set_invalid>
}
 800761a:	b002      	add	sp, #8
 800761c:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800761e:	7823      	ldrb	r3, [r4, #0]
 8007620:	9801      	ldr	r0, [sp, #4]
 8007622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007626:	2b10      	cmp	r3, #16
 8007628:	d109      	bne.n	800763e <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800762a:	f10d 0103 	add.w	r1, sp, #3
 800762e:	f7ff fefb 	bl	8007428 <lwip_netconn_is_err_msg>
 8007632:	2800      	cmp	r0, #0
 8007634:	d1d4      	bne.n	80075e0 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8007636:	9801      	ldr	r0, [sp, #4]
 8007638:	f003 fbc2 	bl	800adc0 <pbuf_free>
 800763c:	e7d0      	b.n	80075e0 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 800763e:	f000 fa6b 	bl	8007b18 <netbuf_delete>
 8007642:	e7cd      	b.n	80075e0 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007644:	f10d 0103 	add.w	r1, sp, #3
 8007648:	9801      	ldr	r0, [sp, #4]
 800764a:	f7ff feed 	bl	8007428 <lwip_netconn_is_err_msg>
 800764e:	4606      	mov	r6, r0
 8007650:	2800      	cmp	r0, #0
 8007652:	d1d6      	bne.n	8007602 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8007654:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8007656:	4628      	mov	r0, r5
 8007658:	f7ff ffba 	bl	80075d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800765c:	6868      	ldr	r0, [r5, #4]
 800765e:	b110      	cbz	r0, 8007666 <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8007660:	f004 fd4c 	bl	800c0fc <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007664:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8007666:	4628      	mov	r0, r5
 8007668:	f7ff ff76 	bl	8007558 <netconn_free>
 800766c:	e7c9      	b.n	8007602 <netconn_drain+0x32>
	...

08007670 <accept_function>:
{
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	460f      	mov	r7, r1
 8007674:	4616      	mov	r6, r2
  if (conn == NULL) {
 8007676:	4605      	mov	r5, r0
 8007678:	b918      	cbnz	r0, 8007682 <accept_function+0x12>
    return ERR_VAL;
 800767a:	f06f 0405 	mvn.w	r4, #5
}
 800767e:	4620      	mov	r0, r4
 8007680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007682:	f100 0414 	add.w	r4, r0, #20
 8007686:	4620      	mov	r0, r4
 8007688:	f007 fc69 	bl	800ef5e <sys_mbox_valid>
 800768c:	2800      	cmp	r0, #0
 800768e:	d0f4      	beq.n	800767a <accept_function+0xa>
  if (newpcb == NULL) {
 8007690:	b96f      	cbnz	r7, 80076ae <accept_function+0x3e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007692:	492f      	ldr	r1, [pc, #188]	; (8007750 <accept_function+0xe0>)
 8007694:	4620      	mov	r0, r4
 8007696:	f007 fc25 	bl	800eee4 <sys_mbox_trypost>
 800769a:	4602      	mov	r2, r0
 800769c:	2800      	cmp	r0, #0
 800769e:	d1ec      	bne.n	800767a <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80076a0:	6a2b      	ldr	r3, [r5, #32]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0e9      	beq.n	800767a <accept_function+0xa>
 80076a6:	4601      	mov	r1, r0
 80076a8:	4628      	mov	r0, r5
 80076aa:	4798      	blx	r3
 80076ac:	e7e5      	b.n	800767a <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80076ae:	b136      	cbz	r6, 80076be <accept_function+0x4e>
 80076b0:	4b28      	ldr	r3, [pc, #160]	; (8007754 <accept_function+0xe4>)
 80076b2:	f240 222a 	movw	r2, #554	; 0x22a
 80076b6:	4928      	ldr	r1, [pc, #160]	; (8007758 <accept_function+0xe8>)
 80076b8:	4828      	ldr	r0, [pc, #160]	; (800775c <accept_function+0xec>)
 80076ba:	f007 fd67 	bl	800f18c <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 80076be:	6a29      	ldr	r1, [r5, #32]
 80076c0:	7828      	ldrb	r0, [r5, #0]
 80076c2:	f7ff ff07 	bl	80074d4 <netconn_alloc>
  if (newconn == NULL) {
 80076c6:	4606      	mov	r6, r0
 80076c8:	b968      	cbnz	r0, 80076e6 <accept_function+0x76>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80076ca:	4921      	ldr	r1, [pc, #132]	; (8007750 <accept_function+0xe0>)
 80076cc:	4620      	mov	r0, r4
 80076ce:	f007 fc09 	bl	800eee4 <sys_mbox_trypost>
 80076d2:	4602      	mov	r2, r0
 80076d4:	b920      	cbnz	r0, 80076e0 <accept_function+0x70>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80076d6:	6a2b      	ldr	r3, [r5, #32]
 80076d8:	b113      	cbz	r3, 80076e0 <accept_function+0x70>
 80076da:	4601      	mov	r1, r0
 80076dc:	4628      	mov	r0, r5
 80076de:	4798      	blx	r3
    return ERR_MEM;
 80076e0:	f04f 34ff 	mov.w	r4, #4294967295
 80076e4:	e7cb      	b.n	800767e <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 80076e6:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 80076e8:	f7ff fade 	bl	8006ca8 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80076ec:	4620      	mov	r0, r4
 80076ee:	4631      	mov	r1, r6
 80076f0:	f007 fbf8 	bl	800eee4 <sys_mbox_trypost>
 80076f4:	4604      	mov	r4, r0
 80076f6:	b318      	cbz	r0, 8007740 <accept_function+0xd0>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80076f8:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 80076fa:	2100      	movs	r1, #0
 80076fc:	4620      	mov	r0, r4
 80076fe:	f003 ffa9 	bl	800b654 <tcp_arg>
    tcp_recv(pcb, NULL);
 8007702:	4620      	mov	r0, r4
 8007704:	2100      	movs	r1, #0
 8007706:	f003 ffa9 	bl	800b65c <tcp_recv>
    tcp_sent(pcb, NULL);
 800770a:	4620      	mov	r0, r4
 800770c:	2100      	movs	r1, #0
 800770e:	f003 ffbd 	bl	800b68c <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007712:	2200      	movs	r2, #0
 8007714:	4620      	mov	r0, r4
 8007716:	4611      	mov	r1, r2
 8007718:	f003 ffec 	bl	800b6f4 <tcp_poll>
    tcp_err(pcb, NULL);
 800771c:	2100      	movs	r1, #0
 800771e:	4620      	mov	r0, r4
    sys_mbox_free(&newconn->recvmbox);
 8007720:	f106 0410 	add.w	r4, r6, #16
    tcp_err(pcb, NULL);
 8007724:	f003 ffc8 	bl	800b6b8 <tcp_err>
    newconn->pcb.tcp = NULL;
 8007728:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 800772a:	4620      	mov	r0, r4
    newconn->pcb.tcp = NULL;
 800772c:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 800772e:	f007 fbcf 	bl	800eed0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007732:	4620      	mov	r0, r4
 8007734:	f007 fc18 	bl	800ef68 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007738:	4630      	mov	r0, r6
 800773a:	f7ff ff0d 	bl	8007558 <netconn_free>
 800773e:	e7cf      	b.n	80076e0 <accept_function+0x70>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007740:	6a2b      	ldr	r3, [r5, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d09b      	beq.n	800767e <accept_function+0xe>
 8007746:	4602      	mov	r2, r0
 8007748:	4601      	mov	r1, r0
 800774a:	4628      	mov	r0, r5
 800774c:	4798      	blx	r3
 800774e:	e796      	b.n	800767e <accept_function+0xe>
 8007750:	08014963 	.word	0x08014963
 8007754:	0801de40 	.word	0x0801de40
 8007758:	0801e27b 	.word	0x0801e27b
 800775c:	0801d8d1 	.word	0x0801d8d1

08007760 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8007760:	6803      	ldr	r3, [r0, #0]
{
 8007762:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8007764:	785d      	ldrb	r5, [r3, #1]
{
 8007766:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007768:	b16d      	cbz	r5, 8007786 <lwip_netconn_do_delconn+0x26>
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007770:	2b10      	cmp	r3, #16
 8007772:	d006      	beq.n	8007782 <lwip_netconn_do_delconn+0x22>
 8007774:	4b37      	ldr	r3, [pc, #220]	; (8007854 <lwip_netconn_do_delconn+0xf4>)
 8007776:	f240 425f 	movw	r2, #1119	; 0x45f
 800777a:	4937      	ldr	r1, [pc, #220]	; (8007858 <lwip_netconn_do_delconn+0xf8>)
 800777c:	4837      	ldr	r0, [pc, #220]	; (800785c <lwip_netconn_do_delconn+0xfc>)
 800777e:	f007 fd05 	bl	800f18c <iprintf>
  if (((state != NETCONN_NONE) &&
 8007782:	2d02      	cmp	r5, #2
 8007784:	d121      	bne.n	80077ca <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8007786:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8007788:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 800778a:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 800778c:	f7ff ff20 	bl	80075d0 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	6850      	ldr	r0, [r2, #4]
 8007794:	b160      	cbz	r0, 80077b0 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007796:	7813      	ldrb	r3, [r2, #0]
 8007798:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800779c:	2b10      	cmp	r3, #16
 800779e:	d022      	beq.n	80077e6 <lwip_netconn_do_delconn+0x86>
 80077a0:	2b20      	cmp	r3, #32
 80077a2:	d102      	bne.n	80077aa <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 80077a4:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 80077a6:	f007 faaf 	bl	800ed08 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	2200      	movs	r2, #0
 80077ae:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80077b0:	6820      	ldr	r0, [r4, #0]
 80077b2:	6a03      	ldr	r3, [r0, #32]
 80077b4:	b113      	cbz	r3, 80077bc <lwip_netconn_do_delconn+0x5c>
 80077b6:	2200      	movs	r2, #0
 80077b8:	4611      	mov	r1, r2
 80077ba:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	6a03      	ldr	r3, [r0, #32]
 80077c0:	b15b      	cbz	r3, 80077da <lwip_netconn_do_delconn+0x7a>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2102      	movs	r1, #2
 80077c6:	4798      	blx	r3
 80077c8:	e007      	b.n	80077da <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 80077ca:	2d03      	cmp	r5, #3
 80077cc:	d103      	bne.n	80077d6 <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	7e1b      	ldrb	r3, [r3, #24]
 80077d2:	075b      	lsls	r3, r3, #29
 80077d4:	d4d7      	bmi.n	8007786 <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 80077d6:	23fb      	movs	r3, #251	; 0xfb
 80077d8:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80077da:	6820      	ldr	r0, [r4, #0]
}
 80077dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80077e0:	300c      	adds	r0, #12
 80077e2:	f007 bbfd 	b.w	800efe0 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80077e6:	69d3      	ldr	r3, [r2, #28]
 80077e8:	b133      	cbz	r3, 80077f8 <lwip_netconn_do_delconn+0x98>
 80077ea:	4b1a      	ldr	r3, [pc, #104]	; (8007854 <lwip_netconn_do_delconn+0xf4>)
 80077ec:	f240 4294 	movw	r2, #1172	; 0x494
 80077f0:	491b      	ldr	r1, [pc, #108]	; (8007860 <lwip_netconn_do_delconn+0x100>)
 80077f2:	481a      	ldr	r0, [pc, #104]	; (800785c <lwip_netconn_do_delconn+0xfc>)
 80077f4:	f007 fcca 	bl	800f18c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80077fc:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 80077fe:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8007800:	2303      	movs	r3, #3
 8007802:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 8007804:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007806:	f7ff fb95 	bl	8006f34 <lwip_netconn_do_close_internal>
 800780a:	b308      	cbz	r0, 8007850 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b04      	cmp	r3, #4
 8007812:	d006      	beq.n	8007822 <lwip_netconn_do_delconn+0xc2>
 8007814:	4b0f      	ldr	r3, [pc, #60]	; (8007854 <lwip_netconn_do_delconn+0xf4>)
 8007816:	f240 429a 	movw	r2, #1178	; 0x49a
 800781a:	4912      	ldr	r1, [pc, #72]	; (8007864 <lwip_netconn_do_delconn+0x104>)
 800781c:	480f      	ldr	r0, [pc, #60]	; (800785c <lwip_netconn_do_delconn+0xfc>)
 800781e:	f007 fcb5 	bl	800f18c <iprintf>
            UNLOCK_TCPIP_CORE();
 8007822:	4811      	ldr	r0, [pc, #68]	; (8007868 <lwip_netconn_do_delconn+0x108>)
 8007824:	f007 fc04 	bl	800f030 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	2100      	movs	r1, #0
 800782c:	300c      	adds	r0, #12
 800782e:	f007 fbb6 	bl	800ef9e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007832:	480d      	ldr	r0, [pc, #52]	; (8007868 <lwip_netconn_do_delconn+0x108>)
 8007834:	f007 fbf7 	bl	800f026 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	b143      	cbz	r3, 8007850 <lwip_netconn_do_delconn+0xf0>
 800783e:	4b05      	ldr	r3, [pc, #20]	; (8007854 <lwip_netconn_do_delconn+0xf4>)
 8007840:	f240 429e 	movw	r2, #1182	; 0x49e
 8007844:	4907      	ldr	r1, [pc, #28]	; (8007864 <lwip_netconn_do_delconn+0x104>)
 8007846:	4805      	ldr	r0, [pc, #20]	; (800785c <lwip_netconn_do_delconn+0xfc>)
}
 8007848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800784c:	f007 bc9e 	b.w	800f18c <iprintf>
}
 8007850:	bd70      	pop	{r4, r5, r6, pc}
 8007852:	bf00      	nop
 8007854:	0801de40 	.word	0x0801de40
 8007858:	0801e2a2 	.word	0x0801e2a2
 800785c:	0801d8d1 	.word	0x0801d8d1
 8007860:	0801e2b6 	.word	0x0801e2b6
 8007864:	0801e2d1 	.word	0x0801e2d1
 8007868:	2000a898 	.word	0x2000a898

0800786c <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 800786c:	6803      	ldr	r3, [r0, #0]
{
 800786e:	b510      	push	{r4, lr}
 8007870:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007872:	6858      	ldr	r0, [r3, #4]
 8007874:	b188      	cbz	r0, 800789a <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800787c:	2b10      	cmp	r3, #16
 800787e:	d007      	beq.n	8007890 <lwip_netconn_do_bind+0x24>
 8007880:	2b20      	cmp	r3, #32
 8007882:	d10a      	bne.n	800789a <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007884:	89a2      	ldrh	r2, [r4, #12]
 8007886:	68a1      	ldr	r1, [r4, #8]
 8007888:	f007 f8b0 	bl	800e9ec <udp_bind>
  msg->err = err;
 800788c:	7120      	strb	r0, [r4, #4]
}
 800788e:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007890:	89a2      	ldrh	r2, [r4, #12]
 8007892:	68a1      	ldr	r1, [r4, #8]
 8007894:	f003 fd9a 	bl	800b3cc <tcp_bind>
        break;
 8007898:	e7f8      	b.n	800788c <lwip_netconn_do_bind+0x20>
        err = ERR_VAL;
 800789a:	f06f 0005 	mvn.w	r0, #5
 800789e:	e7f5      	b.n	800788c <lwip_netconn_do_bind+0x20>

080078a0 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 80078a0:	6803      	ldr	r3, [r0, #0]
{
 80078a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a4:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80078a6:	6858      	ldr	r0, [r3, #4]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d04f      	beq.n	800794c <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80078b2:	2a10      	cmp	r2, #16
 80078b4:	d14c      	bne.n	8007950 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d143      	bne.n	8007944 <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80078bc:	7d03      	ldrb	r3, [r0, #20]
 80078be:	b11b      	cbz	r3, 80078c8 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 80078c0:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 80078c2:	f88d 3007 	strb.w	r3, [sp, #7]
 80078c6:	e031      	b.n	800792c <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80078c8:	f10d 0207 	add.w	r2, sp, #7
 80078cc:	21ff      	movs	r1, #255	; 0xff
 80078ce:	f003 fdd3 	bl	800b478 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 80078d2:	4605      	mov	r5, r0
 80078d4:	b350      	cbz	r0, 800792c <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80078d6:	6820      	ldr	r0, [r4, #0]
 80078d8:	3010      	adds	r0, #16
 80078da:	f007 fb40 	bl	800ef5e <sys_mbox_valid>
 80078de:	b138      	cbz	r0, 80078f0 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	3010      	adds	r0, #16
 80078e4:	f007 faf4 	bl	800eed0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80078e8:	6820      	ldr	r0, [r4, #0]
 80078ea:	3010      	adds	r0, #16
 80078ec:	f007 fb3c 	bl	800ef68 <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80078f0:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 80078f2:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80078f4:	3014      	adds	r0, #20
            err = ERR_OK;
 80078f6:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80078fa:	f007 fb30 	bl	800ef5e <sys_mbox_valid>
 80078fe:	b930      	cbnz	r0, 800790e <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	2106      	movs	r1, #6
 8007904:	3014      	adds	r0, #20
 8007906:	f007 fad3 	bl	800eeb0 <sys_mbox_new>
 800790a:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 800790e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007912:	b983      	cbnz	r3, 8007936 <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 8007914:	6821      	ldr	r1, [r4, #0]
 8007916:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007918:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 800791a:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 800791c:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800791e:	f003 fe99 	bl	800b654 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	490b      	ldr	r1, [pc, #44]	; (8007954 <lwip_netconn_do_listen+0xb4>)
 8007926:	6858      	ldr	r0, [r3, #4]
 8007928:	f003 fede 	bl	800b6e8 <tcp_accept>
  msg->err = err;
 800792c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007930:	7123      	strb	r3, [r4, #4]
}
 8007932:	b003      	add	sp, #12
 8007934:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 8007936:	4628      	mov	r0, r5
 8007938:	f004 fa52 	bl	800bde0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800793c:	6823      	ldr	r3, [r4, #0]
 800793e:	2200      	movs	r2, #0
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	e7f3      	b.n	800792c <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8007944:	2b02      	cmp	r3, #2
 8007946:	d101      	bne.n	800794c <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e7ba      	b.n	80078c2 <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 800794c:	23f5      	movs	r3, #245	; 0xf5
 800794e:	e7b8      	b.n	80078c2 <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8007950:	23f0      	movs	r3, #240	; 0xf0
 8007952:	e7b6      	b.n	80078c2 <lwip_netconn_do_listen+0x22>
 8007954:	08007671 	.word	0x08007671

08007958 <lwip_netconn_do_recv>:
{
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 800795a:	2300      	movs	r3, #0
{
 800795c:	4605      	mov	r5, r0
  msg->err = ERR_OK;
 800795e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8007960:	6803      	ldr	r3, [r0, #0]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	b192      	cbz	r2, 800798c <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800796c:	2b10      	cmp	r3, #16
 800796e:	d10d      	bne.n	800798c <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8007970:	6884      	ldr	r4, [r0, #8]
 8007972:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8007976:	42bc      	cmp	r4, r7
 8007978:	4626      	mov	r6, r4
        tcp_recved(msg->conn->pcb.tcp, recved);
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	bf28      	it	cs
 800797e:	463e      	movcs	r6, r7
 8007980:	6858      	ldr	r0, [r3, #4]
 8007982:	b2b1      	uxth	r1, r6
 8007984:	f003 fe14 	bl	800b5b0 <tcp_recved>
      } while (remaining != 0);
 8007988:	1ba4      	subs	r4, r4, r6
 800798a:	d1f4      	bne.n	8007976 <lwip_netconn_do_recv+0x1e>
}
 800798c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007990 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007990:	b510      	push	{r4, lr}
 8007992:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 8007994:	6800      	ldr	r0, [r0, #0]
 8007996:	f7fe ff9e 	bl	80068d6 <netconn_err>
  if (err == ERR_OK) {
 800799a:	2800      	cmp	r0, #0
 800799c:	d14a      	bne.n	8007a34 <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80079a6:	2a10      	cmp	r2, #16
 80079a8:	d142      	bne.n	8007a30 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80079aa:	785a      	ldrb	r2, [r3, #1]
 80079ac:	2a00      	cmp	r2, #0
 80079ae:	d143      	bne.n	8007a38 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	2a00      	cmp	r2, #0
 80079b4:	d043      	beq.n	8007a3e <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 80079b6:	2201      	movs	r2, #1
 80079b8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	b133      	cbz	r3, 80079cc <lwip_netconn_do_write+0x3c>
 80079be:	4b21      	ldr	r3, [pc, #132]	; (8007a44 <lwip_netconn_do_write+0xb4>)
 80079c0:	f240 7223 	movw	r2, #1827	; 0x723
 80079c4:	4920      	ldr	r1, [pc, #128]	; (8007a48 <lwip_netconn_do_write+0xb8>)
 80079c6:	4821      	ldr	r0, [pc, #132]	; (8007a4c <lwip_netconn_do_write+0xbc>)
 80079c8:	f007 fbe0 	bl	800f18c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80079cc:	6963      	ldr	r3, [r4, #20]
 80079ce:	b933      	cbnz	r3, 80079de <lwip_netconn_do_write+0x4e>
 80079d0:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <lwip_netconn_do_write+0xb4>)
 80079d2:	f240 7224 	movw	r2, #1828	; 0x724
 80079d6:	491e      	ldr	r1, [pc, #120]	; (8007a50 <lwip_netconn_do_write+0xc0>)
 80079d8:	481c      	ldr	r0, [pc, #112]	; (8007a4c <lwip_netconn_do_write+0xbc>)
 80079da:	f007 fbd7 	bl	800f18c <iprintf>
        msg->conn->current_msg = msg;
 80079de:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80079e0:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 80079e2:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80079e4:	f7ff f982 	bl	8006cec <lwip_netconn_do_writemore>
 80079e8:	b328      	cbz	r0, 8007a36 <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d006      	beq.n	8007a00 <lwip_netconn_do_write+0x70>
 80079f2:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <lwip_netconn_do_write+0xb4>)
 80079f4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80079f8:	4916      	ldr	r1, [pc, #88]	; (8007a54 <lwip_netconn_do_write+0xc4>)
 80079fa:	4814      	ldr	r0, [pc, #80]	; (8007a4c <lwip_netconn_do_write+0xbc>)
 80079fc:	f007 fbc6 	bl	800f18c <iprintf>
          UNLOCK_TCPIP_CORE();
 8007a00:	4815      	ldr	r0, [pc, #84]	; (8007a58 <lwip_netconn_do_write+0xc8>)
 8007a02:	f007 fb15 	bl	800f030 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007a06:	6820      	ldr	r0, [r4, #0]
 8007a08:	2100      	movs	r1, #0
 8007a0a:	300c      	adds	r0, #12
 8007a0c:	f007 fac7 	bl	800ef9e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007a10:	4811      	ldr	r0, [pc, #68]	; (8007a58 <lwip_netconn_do_write+0xc8>)
 8007a12:	f007 fb08 	bl	800f026 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	785b      	ldrb	r3, [r3, #1]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d10b      	bne.n	8007a36 <lwip_netconn_do_write+0xa6>
 8007a1e:	4b09      	ldr	r3, [pc, #36]	; (8007a44 <lwip_netconn_do_write+0xb4>)
 8007a20:	f240 722c 	movw	r2, #1836	; 0x72c
 8007a24:	490b      	ldr	r1, [pc, #44]	; (8007a54 <lwip_netconn_do_write+0xc4>)
 8007a26:	4809      	ldr	r0, [pc, #36]	; (8007a4c <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8007a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007a2c:	f007 bbae 	b.w	800f18c <iprintf>
      err = ERR_VAL;
 8007a30:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007a34:	7120      	strb	r0, [r4, #4]
}
 8007a36:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8007a38:	f06f 0004 	mvn.w	r0, #4
 8007a3c:	e7fa      	b.n	8007a34 <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8007a3e:	f06f 000a 	mvn.w	r0, #10
 8007a42:	e7f7      	b.n	8007a34 <lwip_netconn_do_write+0xa4>
 8007a44:	0801de40 	.word	0x0801de40
 8007a48:	0801e2b6 	.word	0x0801e2b6
 8007a4c:	0801d8d1 	.word	0x0801d8d1
 8007a50:	0801e2ed 	.word	0x0801e2ed
 8007a54:	0801e2d1 	.word	0x0801e2d1
 8007a58:	2000a898 	.word	0x2000a898

08007a5c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8007a60:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8007a62:	6843      	ldr	r3, [r0, #4]
 8007a64:	b163      	cbz	r3, 8007a80 <lwip_netconn_do_close+0x24>
 8007a66:	7803      	ldrb	r3, [r0, #0]
 8007a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d107      	bne.n	8007a80 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007a70:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8007a72:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8007a74:	2a03      	cmp	r2, #3
 8007a76:	d001      	beq.n	8007a7c <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d001      	beq.n	8007a80 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d102      	bne.n	8007a86 <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8007a80:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8007a82:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007a84:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 8007a8a:	23fb      	movs	r3, #251	; 0xfb
 8007a8c:	e7f9      	b.n	8007a82 <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8007a8e:	07d3      	lsls	r3, r2, #31
 8007a90:	d501      	bpl.n	8007a96 <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 8007a92:	f7ff fd9d 	bl	80075d0 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	b133      	cbz	r3, 8007aaa <lwip_netconn_do_close+0x4e>
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <lwip_netconn_do_close+0xa8>)
 8007a9e:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8007aa2:	4919      	ldr	r1, [pc, #100]	; (8007b08 <lwip_netconn_do_close+0xac>)
 8007aa4:	4819      	ldr	r0, [pc, #100]	; (8007b0c <lwip_netconn_do_close+0xb0>)
 8007aa6:	f007 fb71 	bl	800f18c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007aaa:	6820      	ldr	r0, [r4, #0]
 8007aac:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007aae:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8007ab0:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 8007ab2:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007ab4:	f7ff fa3e 	bl	8006f34 <lwip_netconn_do_close_internal>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d0e3      	beq.n	8007a84 <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	785b      	ldrb	r3, [r3, #1]
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d006      	beq.n	8007ad2 <lwip_netconn_do_close+0x76>
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <lwip_netconn_do_close+0xa8>)
 8007ac6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8007aca:	4911      	ldr	r1, [pc, #68]	; (8007b10 <lwip_netconn_do_close+0xb4>)
 8007acc:	480f      	ldr	r0, [pc, #60]	; (8007b0c <lwip_netconn_do_close+0xb0>)
 8007ace:	f007 fb5d 	bl	800f18c <iprintf>
        UNLOCK_TCPIP_CORE();
 8007ad2:	4810      	ldr	r0, [pc, #64]	; (8007b14 <lwip_netconn_do_close+0xb8>)
 8007ad4:	f007 faac 	bl	800f030 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	2100      	movs	r1, #0
 8007adc:	300c      	adds	r0, #12
 8007ade:	f007 fa5e 	bl	800ef9e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007ae2:	480c      	ldr	r0, [pc, #48]	; (8007b14 <lwip_netconn_do_close+0xb8>)
 8007ae4:	f007 fa9f 	bl	800f026 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007ae8:	6823      	ldr	r3, [r4, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0c9      	beq.n	8007a84 <lwip_netconn_do_close+0x28>
 8007af0:	4b04      	ldr	r3, [pc, #16]	; (8007b04 <lwip_netconn_do_close+0xa8>)
 8007af2:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007af6:	4906      	ldr	r1, [pc, #24]	; (8007b10 <lwip_netconn_do_close+0xb4>)
 8007af8:	4804      	ldr	r0, [pc, #16]	; (8007b0c <lwip_netconn_do_close+0xb0>)
}
 8007afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007afe:	f007 bb45 	b.w	800f18c <iprintf>
 8007b02:	bf00      	nop
 8007b04:	0801de40 	.word	0x0801de40
 8007b08:	0801e2b6 	.word	0x0801e2b6
 8007b0c:	0801d8d1 	.word	0x0801d8d1
 8007b10:	0801e2d1 	.word	0x0801e2d1
 8007b14:	2000a898 	.word	0x2000a898

08007b18 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007b18:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	b160      	cbz	r0, 8007b38 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8007b1e:	6800      	ldr	r0, [r0, #0]
 8007b20:	b120      	cbz	r0, 8007b2c <netbuf_delete+0x14>
      pbuf_free(buf->p);
 8007b22:	f003 f94d 	bl	800adc0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8007b2c:	4621      	mov	r1, r4
 8007b2e:	2006      	movs	r0, #6
  }
}
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 8007b34:	f002 bf1a 	b.w	800a96c <memp_free>
}
 8007b38:	bd10      	pop	{r4, pc}
	...

08007b3c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8007b3c:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8007b3e:	b940      	cbnz	r0, 8007b52 <netbuf_data+0x16>
 8007b40:	4b0f      	ldr	r3, [pc, #60]	; (8007b80 <netbuf_data+0x44>)
 8007b42:	22c6      	movs	r2, #198	; 0xc6
 8007b44:	490f      	ldr	r1, [pc, #60]	; (8007b84 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007b46:	4810      	ldr	r0, [pc, #64]	; (8007b88 <netbuf_data+0x4c>)
 8007b48:	f007 fb20 	bl	800f18c <iprintf>
 8007b4c:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8007b50:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007b52:	b919      	cbnz	r1, 8007b5c <netbuf_data+0x20>
 8007b54:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <netbuf_data+0x44>)
 8007b56:	22c7      	movs	r2, #199	; 0xc7
 8007b58:	490c      	ldr	r1, [pc, #48]	; (8007b8c <netbuf_data+0x50>)
 8007b5a:	e7f4      	b.n	8007b46 <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007b5c:	b91a      	cbnz	r2, 8007b66 <netbuf_data+0x2a>
 8007b5e:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <netbuf_data+0x44>)
 8007b60:	22c8      	movs	r2, #200	; 0xc8
 8007b62:	490b      	ldr	r1, [pc, #44]	; (8007b90 <netbuf_data+0x54>)
 8007b64:	e7ef      	b.n	8007b46 <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 8007b66:	6843      	ldr	r3, [r0, #4]
 8007b68:	b133      	cbz	r3, 8007b78 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8007b6e:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8007b70:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8007b72:	895b      	ldrh	r3, [r3, #10]
 8007b74:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 8007b76:	e7eb      	b.n	8007b50 <netbuf_data+0x14>
    return ERR_BUF;
 8007b78:	f06f 0001 	mvn.w	r0, #1
 8007b7c:	e7e8      	b.n	8007b50 <netbuf_data+0x14>
 8007b7e:	bf00      	nop
 8007b80:	0801e316 	.word	0x0801e316
 8007b84:	0801e429 	.word	0x0801e429
 8007b88:	0801d8d1 	.word	0x0801d8d1
 8007b8c:	0801e442 	.word	0x0801e442
 8007b90:	0801e45f 	.word	0x0801e45f

08007b94 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007b94:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007b96:	482b      	ldr	r0, [pc, #172]	; (8007c44 <tcpip_thread+0xb0>)
 8007b98:	f007 fa45 	bl	800f026 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007b9c:	4a2a      	ldr	r2, [pc, #168]	; (8007c48 <tcpip_thread+0xb4>)
 8007b9e:	6813      	ldr	r3, [r2, #0]
 8007ba0:	b10b      	cbz	r3, 8007ba6 <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 8007ba2:	6850      	ldr	r0, [r2, #4]
 8007ba4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8007ba6:	4d27      	ldr	r5, [pc, #156]	; (8007c44 <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007ba8:	4f28      	ldr	r7, [pc, #160]	; (8007c4c <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007baa:	4e29      	ldr	r6, [pc, #164]	; (8007c50 <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 8007bac:	f006 fe2e 	bl	800e80c <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007bb0:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8007bb2:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007bb4:	d113      	bne.n	8007bde <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f007 fa3a 	bl	800f030 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	a901      	add	r1, sp, #4
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f007 f999 	bl	800eef8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f007 fa2d 	bl	800f026 <sys_mutex_lock>
    if (msg == NULL) {
 8007bcc:	9c01      	ldr	r4, [sp, #4]
 8007bce:	b9cc      	cbnz	r4, 8007c04 <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007bd0:	4633      	mov	r3, r6
 8007bd2:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007bd4:	491f      	ldr	r1, [pc, #124]	; (8007c54 <tcpip_thread+0xc0>)
 8007bd6:	4820      	ldr	r0, [pc, #128]	; (8007c58 <tcpip_thread+0xc4>)
 8007bd8:	f007 fad8 	bl	800f18c <iprintf>
 8007bdc:	e7e6      	b.n	8007bac <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 8007bde:	b910      	cbnz	r0, 8007be6 <tcpip_thread+0x52>
    sys_check_timeouts();
 8007be0:	f006 fdf8 	bl	800e7d4 <sys_check_timeouts>
 8007be4:	e7e2      	b.n	8007bac <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 8007be6:	4628      	mov	r0, r5
 8007be8:	f007 fa22 	bl	800f030 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007bec:	4622      	mov	r2, r4
 8007bee:	a901      	add	r1, sp, #4
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f007 f981 	bl	800eef8 <sys_arch_mbox_fetch>
 8007bf6:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f007 fa14 	bl	800f026 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007bfe:	3401      	adds	r4, #1
 8007c00:	d0ee      	beq.n	8007be0 <tcpip_thread+0x4c>
 8007c02:	e7e3      	b.n	8007bcc <tcpip_thread+0x38>
  switch (msg->type) {
 8007c04:	7823      	ldrb	r3, [r4, #0]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d012      	beq.n	8007c30 <tcpip_thread+0x9c>
 8007c0a:	d304      	bcc.n	8007c16 <tcpip_thread+0x82>
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d015      	beq.n	8007c3c <tcpip_thread+0xa8>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007c10:	4633      	mov	r3, r6
 8007c12:	22cf      	movs	r2, #207	; 0xcf
 8007c14:	e7de      	b.n	8007bd4 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007c16:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8007c1a:	6860      	ldr	r0, [r4, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	b110      	cbz	r0, 8007c26 <tcpip_thread+0x92>
        pbuf_free(msg->msg.inp.p);
 8007c20:	6860      	ldr	r0, [r4, #4]
 8007c22:	f003 f8cd 	bl	800adc0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007c26:	4621      	mov	r1, r4
 8007c28:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007c2a:	f002 fe9f 	bl	800a96c <memp_free>
 8007c2e:	e7bd      	b.n	8007bac <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007c30:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007c34:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007c36:	4621      	mov	r1, r4
 8007c38:	2008      	movs	r0, #8
 8007c3a:	e7f6      	b.n	8007c2a <tcpip_thread+0x96>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007c3c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8007c40:	4798      	blx	r3
 8007c42:	e7b3      	b.n	8007bac <tcpip_thread+0x18>
 8007c44:	2000a898 	.word	0x2000a898
 8007c48:	2000681c 	.word	0x2000681c
 8007c4c:	20006824 	.word	0x20006824
 8007c50:	0801e4ab 	.word	0x0801e4ab
 8007c54:	0801e518 	.word	0x0801e518
 8007c58:	0801d8d1 	.word	0x0801d8d1

08007c5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5e:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007c60:	4810      	ldr	r0, [pc, #64]	; (8007ca4 <tcpip_inpkt+0x48>)
{
 8007c62:	460e      	mov	r6, r1
 8007c64:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007c66:	f007 f97a 	bl	800ef5e <sys_mbox_valid>
 8007c6a:	b928      	cbnz	r0, 8007c78 <tcpip_inpkt+0x1c>
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <tcpip_inpkt+0x4c>)
 8007c6e:	22fc      	movs	r2, #252	; 0xfc
 8007c70:	490e      	ldr	r1, [pc, #56]	; (8007cac <tcpip_inpkt+0x50>)
 8007c72:	480f      	ldr	r0, [pc, #60]	; (8007cb0 <tcpip_inpkt+0x54>)
 8007c74:	f007 fa8a 	bl	800f18c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007c78:	2009      	movs	r0, #9
 8007c7a:	f002 fe5b 	bl	800a934 <memp_malloc>
  if (msg == NULL) {
 8007c7e:	4604      	mov	r4, r0
 8007c80:	b168      	cbz	r0, 8007c9e <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8007c82:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
 8007c84:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007c86:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8007c88:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8007c8a:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <tcpip_inpkt+0x48>)
 8007c90:	f007 f928 	bl	800eee4 <sys_mbox_trypost>
 8007c94:	b128      	cbz	r0, 8007ca2 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007c96:	4621      	mov	r1, r4
 8007c98:	2009      	movs	r0, #9
 8007c9a:	f002 fe67 	bl	800a96c <memp_free>
    return ERR_MEM;
 8007c9e:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca4:	20006824 	.word	0x20006824
 8007ca8:	0801e4ab 	.word	0x0801e4ab
 8007cac:	0801e536 	.word	0x0801e536
 8007cb0:	0801d8d1 	.word	0x0801d8d1

08007cb4 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007cb4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8007cb8:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8007cbc:	bf14      	ite	ne
 8007cbe:	4a02      	ldrne	r2, [pc, #8]	; (8007cc8 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007cc0:	4a02      	ldreq	r2, [pc, #8]	; (8007ccc <tcpip_input+0x18>)
 8007cc2:	f7ff bfcb 	b.w	8007c5c <tcpip_inpkt>
 8007cc6:	bf00      	nop
 8007cc8:	0800eda1 	.word	0x0800eda1
 8007ccc:	0800980d 	.word	0x0800980d

08007cd0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8007cd0:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8007cd2:	4c06      	ldr	r4, [pc, #24]	; (8007cec <tcpip_send_msg_wait_sem+0x1c>)
{
 8007cd4:	460e      	mov	r6, r1
 8007cd6:	4605      	mov	r5, r0
  LOCK_TCPIP_CORE();
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f007 f9a4 	bl	800f026 <sys_mutex_lock>
  fn(apimsg);
 8007cde:	4630      	mov	r0, r6
 8007ce0:	47a8      	blx	r5
  UNLOCK_TCPIP_CORE();
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f007 f9a4 	bl	800f030 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007ce8:	2000      	movs	r0, #0
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	2000a898 	.word	0x2000a898

08007cf0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	460c      	mov	r4, r1
  lwip_init();
 8007cf6:	f002 fb53 	bl	800a3a0 <lwip_init>

  tcpip_init_done = initfunc;
 8007cfa:	4812      	ldr	r0, [pc, #72]	; (8007d44 <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007cfc:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8007cfe:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007d02:	3008      	adds	r0, #8
 8007d04:	f007 f8d4 	bl	800eeb0 <sys_mbox_new>
 8007d08:	b130      	cbz	r0, 8007d18 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <tcpip_init+0x58>)
 8007d0c:	f240 2261 	movw	r2, #609	; 0x261
 8007d10:	490e      	ldr	r1, [pc, #56]	; (8007d4c <tcpip_init+0x5c>)
 8007d12:	480f      	ldr	r0, [pc, #60]	; (8007d50 <tcpip_init+0x60>)
 8007d14:	f007 fa3a 	bl	800f18c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007d18:	480e      	ldr	r0, [pc, #56]	; (8007d54 <tcpip_init+0x64>)
 8007d1a:	f007 f975 	bl	800f008 <sys_mutex_new>
 8007d1e:	b130      	cbz	r0, 8007d2e <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <tcpip_init+0x58>)
 8007d22:	f240 2265 	movw	r2, #613	; 0x265
 8007d26:	490c      	ldr	r1, [pc, #48]	; (8007d58 <tcpip_init+0x68>)
 8007d28:	4809      	ldr	r0, [pc, #36]	; (8007d50 <tcpip_init+0x60>)
 8007d2a:	f007 fa2f 	bl	800f18c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007d2e:	2302      	movs	r3, #2
 8007d30:	2200      	movs	r2, #0
 8007d32:	490a      	ldr	r1, [pc, #40]	; (8007d5c <tcpip_init+0x6c>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d3a:	4809      	ldr	r0, [pc, #36]	; (8007d60 <tcpip_init+0x70>)
 8007d3c:	f007 f97b 	bl	800f036 <sys_thread_new>
}
 8007d40:	b003      	add	sp, #12
 8007d42:	bd30      	pop	{r4, r5, pc}
 8007d44:	2000681c 	.word	0x2000681c
 8007d48:	0801e4ab 	.word	0x0801e4ab
 8007d4c:	0801e543 	.word	0x0801e543
 8007d50:	0801d8d1 	.word	0x0801d8d1
 8007d54:	2000a898 	.word	0x2000a898
 8007d58:	0801e566 	.word	0x0801e566
 8007d5c:	08007b95 	.word	0x08007b95
 8007d60:	0801e587 	.word	0x0801e587

08007d64 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8007d64:	7943      	ldrb	r3, [r0, #5]
 8007d66:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 8007d68:	bf1f      	itttt	ne
 8007d6a:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8007d6c:	7141      	strbne	r1, [r0, #5]
    dhcp->tries = 0;
 8007d6e:	7183      	strbne	r3, [r0, #6]
    dhcp->request_timeout = 0;
 8007d70:	8103      	strhne	r3, [r0, #8]
  }
}
 8007d72:	4770      	bx	lr

08007d74 <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8007d76:	1c85      	adds	r5, r0, #2
{
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460e      	mov	r6, r1
 8007d7c:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8007d7e:	2d44      	cmp	r5, #68	; 0x44
 8007d80:	d906      	bls.n	8007d90 <dhcp_option_short+0x1c>
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <dhcp_option_short+0x2c>)
 8007d84:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8007d88:	4906      	ldr	r1, [pc, #24]	; (8007da4 <dhcp_option_short+0x30>)
 8007d8a:	4807      	ldr	r0, [pc, #28]	; (8007da8 <dhcp_option_short+0x34>)
 8007d8c:	f007 f9fe 	bl	800f18c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8007d90:	0a3b      	lsrs	r3, r7, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 8007d92:	b2a8      	uxth	r0, r5
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8007d94:	5533      	strb	r3, [r6, r4]
 8007d96:	3401      	adds	r4, #1
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8007d98:	b2a4      	uxth	r4, r4
 8007d9a:	5537      	strb	r7, [r6, r4]
}
 8007d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	0801e58e 	.word	0x0801e58e
 8007da4:	0801e600 	.word	0x0801e600
 8007da8:	0801d8d1 	.word	0x0801d8d1

08007dac <dhcp_option>:
{
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007db0:	3302      	adds	r3, #2
{
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007db6:	4403      	add	r3, r0
{
 8007db8:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8007dba:	2b44      	cmp	r3, #68	; 0x44
 8007dbc:	d906      	bls.n	8007dcc <dhcp_option+0x20>
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <dhcp_option+0x30>)
 8007dc0:	f240 529a 	movw	r2, #1434	; 0x59a
 8007dc4:	4906      	ldr	r1, [pc, #24]	; (8007de0 <dhcp_option+0x34>)
 8007dc6:	4807      	ldr	r0, [pc, #28]	; (8007de4 <dhcp_option+0x38>)
 8007dc8:	f007 f9e0 	bl	800f18c <iprintf>
  options[options_out_len++] = option_type;
 8007dcc:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 8007dce:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 8007dd0:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 8007dd2:	b29b      	uxth	r3, r3
}
 8007dd4:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 8007dd6:	54ee      	strb	r6, [r5, r3]
}
 8007dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	0801e58e 	.word	0x0801e58e
 8007de0:	0801e63b 	.word	0x0801e63b
 8007de4:	0801d8d1 	.word	0x0801d8d1

08007de8 <dhcp_option_byte>:
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007de8:	2843      	cmp	r0, #67	; 0x43
{
 8007dea:	b570      	push	{r4, r5, r6, lr}
 8007dec:	4604      	mov	r4, r0
 8007dee:	460d      	mov	r5, r1
 8007df0:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8007df2:	d906      	bls.n	8007e02 <dhcp_option_byte+0x1a>
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <dhcp_option_byte+0x24>)
 8007df6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8007dfa:	4905      	ldr	r1, [pc, #20]	; (8007e10 <dhcp_option_byte+0x28>)
 8007dfc:	4805      	ldr	r0, [pc, #20]	; (8007e14 <dhcp_option_byte+0x2c>)
 8007dfe:	f007 f9c5 	bl	800f18c <iprintf>
  options[options_out_len++] = value;
 8007e02:	1c60      	adds	r0, r4, #1
 8007e04:	552e      	strb	r6, [r5, r4]
}
 8007e06:	b280      	uxth	r0, r0
 8007e08:	bd70      	pop	{r4, r5, r6, pc}
 8007e0a:	bf00      	nop
 8007e0c:	0801e58e 	.word	0x0801e58e
 8007e10:	0801e67d 	.word	0x0801e67d
 8007e14:	0801d8d1 	.word	0x0801d8d1

08007e18 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8007e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007e1a:	1d07      	adds	r7, r0, #4
{
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	460d      	mov	r5, r1
 8007e20:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8007e22:	2f44      	cmp	r7, #68	; 0x44
 8007e24:	d906      	bls.n	8007e34 <dhcp_option_long+0x1c>
 8007e26:	4b0b      	ldr	r3, [pc, #44]	; (8007e54 <dhcp_option_long+0x3c>)
 8007e28:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8007e2c:	490a      	ldr	r1, [pc, #40]	; (8007e58 <dhcp_option_long+0x40>)
 8007e2e:	480b      	ldr	r0, [pc, #44]	; (8007e5c <dhcp_option_long+0x44>)
 8007e30:	f007 f9ac 	bl	800f18c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007e34:	0e33      	lsrs	r3, r6, #24
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8007e36:	0c32      	lsrs	r2, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8007e38:	552b      	strb	r3, [r5, r4]
 8007e3a:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
  return options_out_len;
}
 8007e3c:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	54ea      	strb	r2, [r5, r3]
 8007e42:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007e44:	3403      	adds	r4, #3
 8007e46:	0a32      	lsrs	r2, r6, #8
 8007e48:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007e4a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8007e4c:	54ea      	strb	r2, [r5, r3]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8007e4e:	552e      	strb	r6, [r5, r4]
}
 8007e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e52:	bf00      	nop
 8007e54:	0801e58e 	.word	0x0801e58e
 8007e58:	0801e6b2 	.word	0x0801e6b2
 8007e5c:	0801d8d1 	.word	0x0801d8d1

08007e60 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8007e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e64:	460e      	mov	r6, r1
 8007e66:	4690      	mov	r8, r2
 8007e68:	4699      	mov	r9, r3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8007e6a:	4605      	mov	r5, r0
 8007e6c:	b950      	cbnz	r0, 8007e84 <dhcp_create_msg+0x24>
 8007e6e:	462f      	mov	r7, r5
 8007e70:	4b3e      	ldr	r3, [pc, #248]	; (8007f6c <dhcp_create_msg+0x10c>)
 8007e72:	f240 7269 	movw	r2, #1897	; 0x769
 8007e76:	493e      	ldr	r1, [pc, #248]	; (8007f70 <dhcp_create_msg+0x110>)
 8007e78:	483e      	ldr	r0, [pc, #248]	; (8007f74 <dhcp_create_msg+0x114>)
 8007e7a:	f007 f987 	bl	800f18c <iprintf>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
  }
  return p_out;
}
 8007e7e:	4638      	mov	r0, r7
 8007e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8007e84:	b941      	cbnz	r1, 8007e98 <dhcp_create_msg+0x38>
 8007e86:	4b39      	ldr	r3, [pc, #228]	; (8007f6c <dhcp_create_msg+0x10c>)
 8007e88:	f240 726a 	movw	r2, #1898	; 0x76a
 8007e8c:	493a      	ldr	r1, [pc, #232]	; (8007f78 <dhcp_create_msg+0x118>)
 8007e8e:	4637      	mov	r7, r6
 8007e90:	4838      	ldr	r0, [pc, #224]	; (8007f74 <dhcp_create_msg+0x114>)
 8007e92:	f007 f97b 	bl	800f18c <iprintf>
 8007e96:	e7f2      	b.n	8007e7e <dhcp_create_msg+0x1e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8007e98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007e9c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007ea0:	2036      	movs	r0, #54	; 0x36
 8007ea2:	f002 fff5 	bl	800ae90 <pbuf_alloc>
  if (p_out == NULL) {
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d0e8      	beq.n	8007e7e <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8007eac:	8943      	ldrh	r3, [r0, #10]
 8007eae:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8007eb2:	d206      	bcs.n	8007ec2 <dhcp_create_msg+0x62>
 8007eb4:	4b2d      	ldr	r3, [pc, #180]	; (8007f6c <dhcp_create_msg+0x10c>)
 8007eb6:	f240 7272 	movw	r2, #1906	; 0x772
 8007eba:	4930      	ldr	r1, [pc, #192]	; (8007f7c <dhcp_create_msg+0x11c>)
 8007ebc:	482d      	ldr	r0, [pc, #180]	; (8007f74 <dhcp_create_msg+0x114>)
 8007ebe:	f007 f965 	bl	800f18c <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8007ec2:	f1b8 0f03 	cmp.w	r8, #3
 8007ec6:	d102      	bne.n	8007ece <dhcp_create_msg+0x6e>
 8007ec8:	7973      	ldrb	r3, [r6, #5]
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d107      	bne.n	8007ede <dhcp_create_msg+0x7e>
    if (dhcp->tries == 0) {
 8007ece:	79b3      	ldrb	r3, [r6, #6]
 8007ed0:	4c2b      	ldr	r4, [pc, #172]	; (8007f80 <dhcp_create_msg+0x120>)
 8007ed2:	b913      	cbnz	r3, 8007eda <dhcp_create_msg+0x7a>
      xid = LWIP_RAND();
 8007ed4:	f007 f9d6 	bl	800f284 <rand>
 8007ed8:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	6033      	str	r3, [r6, #0]
  msg_out = (struct dhcp_msg *)p_out->payload;
 8007ede:	687c      	ldr	r4, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8007ee0:	f44f 729a 	mov.w	r2, #308	; 0x134
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f007 f947 	bl	800f17a <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 8007eec:	2301      	movs	r3, #1
 8007eee:	7023      	strb	r3, [r4, #0]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8007ef0:	7063      	strb	r3, [r4, #1]
  msg_out->hlen = netif->hwaddr_len;
 8007ef2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8007ef6:	70a3      	strb	r3, [r4, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8007ef8:	6830      	ldr	r0, [r6, #0]
 8007efa:	f002 fa00 	bl	800a2fe <lwip_htonl>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8007efe:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8007f02:	6060      	str	r0, [r4, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8007f04:	d00a      	beq.n	8007f1c <dhcp_create_msg+0xbc>
 8007f06:	f1a8 0307 	sub.w	r3, r8, #7
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d906      	bls.n	8007f1c <dhcp_create_msg+0xbc>
 8007f0e:	f1b8 0f03 	cmp.w	r8, #3
 8007f12:	d105      	bne.n	8007f20 <dhcp_create_msg+0xc0>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8007f14:	7973      	ldrb	r3, [r6, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8007f16:	3b04      	subs	r3, #4
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d801      	bhi.n	8007f20 <dhcp_create_msg+0xc0>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8007f1c:	686b      	ldr	r3, [r5, #4]
 8007f1e:	60e3      	str	r3, [r4, #12]
 8007f20:	f105 032a 	add.w	r3, r5, #42	; 0x2a
 8007f24:	f104 021c 	add.w	r2, r4, #28
 8007f28:	3530      	adds	r5, #48	; 0x30
    msg_out->chaddr[i] = netif->hwaddr[i];
 8007f2a:	f813 1b01 	ldrb.w	r1, [r3], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007f2e:	42ab      	cmp	r3, r5
    msg_out->chaddr[i] = netif->hwaddr[i];
 8007f30:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8007f34:	d1f9      	bne.n	8007f2a <dhcp_create_msg+0xca>
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007f36:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8007f3a:	2363      	movs	r3, #99	; 0x63
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007f3c:	34f0      	adds	r4, #240	; 0xf0
 8007f3e:	2000      	movs	r0, #0
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007f40:	f804 2c03 	strb.w	r2, [r4, #-3]
 8007f44:	2253      	movs	r2, #83	; 0x53
 8007f46:	f804 3c04 	strb.w	r3, [r4, #-4]
 8007f4a:	f804 2c02 	strb.w	r2, [r4, #-2]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007f4e:	2235      	movs	r2, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8007f50:	f804 3c01 	strb.w	r3, [r4, #-1]
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8007f54:	2301      	movs	r3, #1
 8007f56:	4621      	mov	r1, r4
 8007f58:	f7ff ff28 	bl	8007dac <dhcp_option>
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	4621      	mov	r1, r4
 8007f60:	f7ff ff42 	bl	8007de8 <dhcp_option_byte>
    *options_out_len = options_out_len_loc;
 8007f64:	f8a9 0000 	strh.w	r0, [r9]
 8007f68:	e789      	b.n	8007e7e <dhcp_create_msg+0x1e>
 8007f6a:	bf00      	nop
 8007f6c:	0801e58e 	.word	0x0801e58e
 8007f70:	0801e6ec 	.word	0x0801e6ec
 8007f74:	0801d8d1 	.word	0x0801d8d1
 8007f78:	0801e70b 	.word	0x0801e70b
 8007f7c:	0801e729 	.word	0x0801e729
 8007f80:	20006828 	.word	0x20006828

08007f84 <dhcp_option_trailer>:
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8007f84:	1c43      	adds	r3, r0, #1
{
 8007f86:	b410      	push	{r4}
  options[options_out_len++] = DHCP_OPTION_END;
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	24ff      	movs	r4, #255	; 0xff
 8007f8c:	540c      	strb	r4, [r1, r0]
 8007f8e:	1e58      	subs	r0, r3, #1
 8007f90:	4401      	add	r1, r0
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8007f92:	2000      	movs	r0, #0
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8007f94:	2b43      	cmp	r3, #67	; 0x43
 8007f96:	d907      	bls.n	8007fa8 <dhcp_option_trailer+0x24>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8007f98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8007f9c:	4610      	mov	r0, r2
}
 8007f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8007fa2:	b289      	uxth	r1, r1
 8007fa4:	f002 bff2 	b.w	800af8c <pbuf_realloc>
    options[options_out_len++] = 0;
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f801 0f01 	strb.w	r0, [r1, #1]!
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	e7f0      	b.n	8007f94 <dhcp_option_trailer+0x10>
	...

08007fb4 <dhcp_reboot>:
{
 8007fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8007fb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 8007fba:	b085      	sub	sp, #20
 8007fbc:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8007fbe:	2103      	movs	r1, #3
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7ff fecf 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8007fc6:	f10d 030e 	add.w	r3, sp, #14
 8007fca:	2203      	movs	r2, #3
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4640      	mov	r0, r8
 8007fd0:	f7ff ff46 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 8007fd4:	4606      	mov	r6, r0
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d066      	beq.n	80080a8 <dhcp_reboot+0xf4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007fda:	6844      	ldr	r4, [r0, #4]
 8007fdc:	2302      	movs	r3, #2
 8007fde:	2239      	movs	r2, #57	; 0x39
 8007fe0:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007fe4:	34f0      	adds	r4, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8007fe6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80080b8 <dhcp_reboot+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007fea:	4621      	mov	r1, r4
 8007fec:	f7ff fede 	bl	8007dac <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007ff0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007ff4:	4621      	mov	r1, r4
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8007ff6:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8007ffa:	f7ff febb 	bl	8007d74 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8007ffe:	2304      	movs	r3, #4
 8008000:	2232      	movs	r2, #50	; 0x32
 8008002:	4621      	mov	r1, r4
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8008004:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008008:	f7ff fed0 	bl	8007dac <dhcp_option>
 800800c:	4607      	mov	r7, r0
 800800e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008012:	69e8      	ldr	r0, [r5, #28]
 8008014:	f002 f973 	bl	800a2fe <lwip_htonl>
 8008018:	4621      	mov	r1, r4
 800801a:	4602      	mov	r2, r0
 800801c:	4638      	mov	r0, r7
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800801e:	2700      	movs	r7, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008020:	f7ff fefa 	bl	8007e18 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008024:	2303      	movs	r3, #3
 8008026:	2237      	movs	r2, #55	; 0x37
 8008028:	4621      	mov	r1, r4
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800802a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800802e:	f7ff febd 	bl	8007dac <dhcp_option>
 8008032:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008036:	f819 2007 	ldrb.w	r2, [r9, r7]
 800803a:	3701      	adds	r7, #1
 800803c:	4621      	mov	r1, r4
 800803e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008042:	f7ff fed1 	bl	8007de8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008046:	2f03      	cmp	r7, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008048:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800804c:	d1f3      	bne.n	8008036 <dhcp_reboot+0x82>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800804e:	4621      	mov	r1, r4
 8008050:	4632      	mov	r2, r6
 8008052:	f7ff ff97 	bl	8007f84 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008056:	4816      	ldr	r0, [pc, #88]	; (80080b0 <dhcp_reboot+0xfc>)
 8008058:	f8cd 8000 	str.w	r8, [sp]
 800805c:	2343      	movs	r3, #67	; 0x43
 800805e:	4a15      	ldr	r2, [pc, #84]	; (80080b4 <dhcp_reboot+0x100>)
 8008060:	4631      	mov	r1, r6
 8008062:	6840      	ldr	r0, [r0, #4]
 8008064:	f006 fdc2 	bl	800ebec <udp_sendto_if>
 8008068:	4604      	mov	r4, r0
    pbuf_free(p_out);
 800806a:	4630      	mov	r0, r6
 800806c:	f002 fea8 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 8008070:	79ab      	ldrb	r3, [r5, #6]
}
 8008072:	4620      	mov	r0, r4
  if (dhcp->tries < 255) {
 8008074:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008076:	bf1c      	itt	ne
 8008078:	3301      	addne	r3, #1
 800807a:	71ab      	strbne	r3, [r5, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800807c:	79ab      	ldrb	r3, [r5, #6]
 800807e:	2b09      	cmp	r3, #9
 8008080:	bf96      	itet	ls
 8008082:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008086:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800808a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800808e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008092:	bf9c      	itt	ls
 8008094:	00db      	lslls	r3, r3, #3
 8008096:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008098:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800809c:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a0:	812b      	strh	r3, [r5, #8]
}
 80080a2:	b005      	add	sp, #20
 80080a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 80080a8:	f04f 34ff 	mov.w	r4, #4294967295
 80080ac:	e7e0      	b.n	8008070 <dhcp_reboot+0xbc>
 80080ae:	bf00      	nop
 80080b0:	20006828 	.word	0x20006828
 80080b4:	08014968 	.word	0x08014968
 80080b8:	08014965 	.word	0x08014965

080080bc <dhcp_select>:
{
 80080bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80080c0:	4607      	mov	r7, r0
{
 80080c2:	b085      	sub	sp, #20
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80080c4:	b960      	cbnz	r0, 80080e0 <dhcp_select+0x24>
 80080c6:	f06f 050f 	mvn.w	r5, #15
 80080ca:	4b52      	ldr	r3, [pc, #328]	; (8008214 <dhcp_select+0x158>)
 80080cc:	f240 1277 	movw	r2, #375	; 0x177
 80080d0:	4951      	ldr	r1, [pc, #324]	; (8008218 <dhcp_select+0x15c>)
 80080d2:	4852      	ldr	r0, [pc, #328]	; (800821c <dhcp_select+0x160>)
 80080d4:	f007 f85a 	bl	800f18c <iprintf>
}
 80080d8:	4628      	mov	r0, r5
 80080da:	b005      	add	sp, #20
 80080dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  dhcp = netif_dhcp_data(netif);
 80080e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80080e2:	b94c      	cbnz	r4, 80080f8 <dhcp_select+0x3c>
 80080e4:	4b4b      	ldr	r3, [pc, #300]	; (8008214 <dhcp_select+0x158>)
 80080e6:	f240 1279 	movw	r2, #377	; 0x179
 80080ea:	494d      	ldr	r1, [pc, #308]	; (8008220 <dhcp_select+0x164>)
 80080ec:	f06f 0505 	mvn.w	r5, #5
 80080f0:	484a      	ldr	r0, [pc, #296]	; (800821c <dhcp_select+0x160>)
 80080f2:	f007 f84b 	bl	800f18c <iprintf>
 80080f6:	e7ef      	b.n	80080d8 <dhcp_select+0x1c>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80080f8:	2101      	movs	r1, #1
 80080fa:	4620      	mov	r0, r4
 80080fc:	f7ff fe32 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008100:	f10d 030e 	add.w	r3, sp, #14
 8008104:	2203      	movs	r2, #3
 8008106:	4621      	mov	r1, r4
 8008108:	4638      	mov	r0, r7
 800810a:	f7ff fea9 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 800810e:	4606      	mov	r6, r0
 8008110:	2800      	cmp	r0, #0
 8008112:	d07b      	beq.n	800820c <dhcp_select+0x150>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008114:	6845      	ldr	r5, [r0, #4]
 8008116:	2302      	movs	r3, #2
 8008118:	2239      	movs	r2, #57	; 0x39
 800811a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800811e:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008120:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008230 <dhcp_select+0x174>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008124:	4629      	mov	r1, r5
 8008126:	f7ff fe41 	bl	8007dac <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800812a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800812c:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800812e:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008132:	f7ff fe1f 	bl	8007d74 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008136:	2304      	movs	r3, #4
 8008138:	2232      	movs	r2, #50	; 0x32
 800813a:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800813c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008140:	f7ff fe34 	bl	8007dac <dhcp_option>
 8008144:	4680      	mov	r8, r0
 8008146:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800814a:	69e0      	ldr	r0, [r4, #28]
 800814c:	f002 f8d7 	bl	800a2fe <lwip_htonl>
 8008150:	4629      	mov	r1, r5
 8008152:	4602      	mov	r2, r0
 8008154:	4640      	mov	r0, r8
 8008156:	f7ff fe5f 	bl	8007e18 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800815a:	2304      	movs	r3, #4
 800815c:	2236      	movs	r2, #54	; 0x36
 800815e:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8008160:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008164:	f7ff fe22 	bl	8007dac <dhcp_option>
 8008168:	4680      	mov	r8, r0
 800816a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800816e:	69a0      	ldr	r0, [r4, #24]
 8008170:	f002 f8c5 	bl	800a2fe <lwip_htonl>
 8008174:	4629      	mov	r1, r5
 8008176:	4602      	mov	r2, r0
 8008178:	4640      	mov	r0, r8
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800817a:	f04f 0800 	mov.w	r8, #0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800817e:	f7ff fe4b 	bl	8007e18 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008182:	2303      	movs	r3, #3
 8008184:	2237      	movs	r2, #55	; 0x37
 8008186:	4629      	mov	r1, r5
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8008188:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800818c:	f7ff fe0e 	bl	8007dac <dhcp_option>
 8008190:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008194:	f819 2008 	ldrb.w	r2, [r9, r8]
 8008198:	f108 0801 	add.w	r8, r8, #1
 800819c:	4629      	mov	r1, r5
 800819e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80081a2:	f7ff fe21 	bl	8007de8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80081a6:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80081aa:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80081ae:	d1f1      	bne.n	8008194 <dhcp_select+0xd8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80081b0:	4629      	mov	r1, r5
 80081b2:	4632      	mov	r2, r6
 80081b4:	f7ff fee6 	bl	8007f84 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80081b8:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <dhcp_select+0x168>)
 80081ba:	481b      	ldr	r0, [pc, #108]	; (8008228 <dhcp_select+0x16c>)
 80081bc:	4631      	mov	r1, r6
 80081be:	4a1b      	ldr	r2, [pc, #108]	; (800822c <dhcp_select+0x170>)
 80081c0:	e9cd 7300 	strd	r7, r3, [sp]
 80081c4:	2343      	movs	r3, #67	; 0x43
 80081c6:	6840      	ldr	r0, [r0, #4]
 80081c8:	f006 fc78 	bl	800eabc <udp_sendto_if_src>
 80081cc:	4605      	mov	r5, r0
    pbuf_free(p_out);
 80081ce:	4630      	mov	r0, r6
 80081d0:	f002 fdf6 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 80081d4:	79a3      	ldrb	r3, [r4, #6]
 80081d6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80081d8:	bf1c      	itt	ne
 80081da:	3301      	addne	r3, #1
 80081dc:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80081de:	79a2      	ldrb	r2, [r4, #6]
 80081e0:	2a05      	cmp	r2, #5
 80081e2:	bf97      	itett	ls
 80081e4:	2301      	movls	r3, #1
 80081e6:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80081ea:	4093      	lslls	r3, r2
 80081ec:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80081f0:	bf98      	it	ls
 80081f2:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80081f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80081fa:	bf9c      	itt	ls
 80081fc:	00db      	lslls	r3, r3, #3
 80081fe:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008200:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008204:	fb93 f3f2 	sdiv	r3, r3, r2
 8008208:	8123      	strh	r3, [r4, #8]
  return result;
 800820a:	e765      	b.n	80080d8 <dhcp_select+0x1c>
    result = ERR_MEM;
 800820c:	f04f 35ff 	mov.w	r5, #4294967295
 8008210:	e7e0      	b.n	80081d4 <dhcp_select+0x118>
 8008212:	bf00      	nop
 8008214:	0801e58e 	.word	0x0801e58e
 8008218:	0801e769 	.word	0x0801e769
 800821c:	0801d8d1 	.word	0x0801d8d1
 8008220:	0801e784 	.word	0x0801e784
 8008224:	0801496c 	.word	0x0801496c
 8008228:	20006828 	.word	0x20006828
 800822c:	08014968 	.word	0x08014968
 8008230:	08014965 	.word	0x08014965

08008234 <dhcp_discover>:
{
 8008234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008238:	6a44      	ldr	r4, [r0, #36]	; 0x24
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800823a:	2600      	movs	r6, #0
{
 800823c:	b085      	sub	sp, #20
 800823e:	4680      	mov	r8, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008240:	2106      	movs	r1, #6
 8008242:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8008244:	61e6      	str	r6, [r4, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8008246:	f7ff fd8d 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800824a:	f10d 030e 	add.w	r3, sp, #14
 800824e:	2201      	movs	r2, #1
 8008250:	4621      	mov	r1, r4
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fe04 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 8008258:	4607      	mov	r7, r0
 800825a:	b3b8      	cbz	r0, 80082cc <dhcp_discover+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800825c:	6845      	ldr	r5, [r0, #4]
 800825e:	2302      	movs	r3, #2
 8008260:	2239      	movs	r2, #57	; 0x39
 8008262:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008266:	35f0      	adds	r5, #240	; 0xf0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008268:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8008318 <dhcp_discover+0xe4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800826c:	4629      	mov	r1, r5
 800826e:	f7ff fd9d 	bl	8007dac <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008272:	f8b8 2028 	ldrh.w	r2, [r8, #40]	; 0x28
 8008276:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008278:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800827c:	f7ff fd7a 	bl	8007d74 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008280:	2303      	movs	r3, #3
 8008282:	2237      	movs	r2, #55	; 0x37
 8008284:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008286:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800828a:	f7ff fd8f 	bl	8007dac <dhcp_option>
 800828e:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008292:	f819 2006 	ldrb.w	r2, [r9, r6]
 8008296:	3601      	adds	r6, #1
 8008298:	4629      	mov	r1, r5
 800829a:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800829e:	f7ff fda3 	bl	8007de8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80082a2:	2e03      	cmp	r6, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80082a4:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80082a8:	d1f3      	bne.n	8008292 <dhcp_discover+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80082aa:	463a      	mov	r2, r7
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7ff fe69 	bl	8007f84 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80082b2:	4b16      	ldr	r3, [pc, #88]	; (800830c <dhcp_discover+0xd8>)
 80082b4:	4816      	ldr	r0, [pc, #88]	; (8008310 <dhcp_discover+0xdc>)
 80082b6:	4639      	mov	r1, r7
 80082b8:	4a16      	ldr	r2, [pc, #88]	; (8008314 <dhcp_discover+0xe0>)
 80082ba:	e9cd 8300 	strd	r8, r3, [sp]
 80082be:	2343      	movs	r3, #67	; 0x43
 80082c0:	6840      	ldr	r0, [r0, #4]
 80082c2:	f006 fbfb 	bl	800eabc <udp_sendto_if_src>
    pbuf_free(p_out);
 80082c6:	4638      	mov	r0, r7
 80082c8:	f002 fd7a 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 80082cc:	79a3      	ldrb	r3, [r4, #6]
}
 80082ce:	2000      	movs	r0, #0
  if (dhcp->tries < 255) {
 80082d0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80082d2:	bf1c      	itt	ne
 80082d4:	3301      	addne	r3, #1
 80082d6:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80082d8:	79a2      	ldrb	r2, [r4, #6]
 80082da:	2a05      	cmp	r2, #5
 80082dc:	bf97      	itett	ls
 80082de:	2301      	movls	r3, #1
 80082e0:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 80082e4:	4093      	lslls	r3, r2
 80082e6:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80082ea:	bf98      	it	ls
 80082ec:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80082f4:	bf9c      	itt	ls
 80082f6:	00db      	lslls	r3, r3, #3
 80082f8:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80082fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80082fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008302:	8123      	strh	r3, [r4, #8]
}
 8008304:	b005      	add	sp, #20
 8008306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830a:	bf00      	nop
 800830c:	0801496c 	.word	0x0801496c
 8008310:	20006828 	.word	0x20006828
 8008314:	08014968 	.word	0x08014968
 8008318:	08014965 	.word	0x08014965

0800831c <dhcp_check>:
{
 800831c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800831e:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008320:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8008322:	2108      	movs	r1, #8
 8008324:	4620      	mov	r0, r4
 8008326:	f7ff fd1d 	bl	8007d64 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800832a:	2200      	movs	r2, #0
 800832c:	f104 011c 	add.w	r1, r4, #28
 8008330:	4628      	mov	r0, r5
 8008332:	f000 ffeb 	bl	800930c <etharp_query>
  if (dhcp->tries < 255) {
 8008336:	79a3      	ldrb	r3, [r4, #6]
 8008338:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800833a:	bf1c      	itt	ne
 800833c:	3301      	addne	r3, #1
 800833e:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008340:	2301      	movs	r3, #1
 8008342:	8123      	strh	r3, [r4, #8]
}
 8008344:	bd38      	pop	{r3, r4, r5, pc}
	...

08008348 <dhcp_bind>:
{
 8008348:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800834a:	4605      	mov	r5, r0
 800834c:	b940      	cbnz	r0, 8008360 <dhcp_bind+0x18>
 800834e:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <dhcp_bind+0xf0>)
 8008350:	f240 4215 	movw	r2, #1045	; 0x415
 8008354:	4939      	ldr	r1, [pc, #228]	; (800843c <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008356:	483a      	ldr	r0, [pc, #232]	; (8008440 <dhcp_bind+0xf8>)
 8008358:	f006 ff18 	bl	800f18c <iprintf>
}
 800835c:	b003      	add	sp, #12
 800835e:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8008360:	6a44      	ldr	r4, [r0, #36]	; 0x24
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8008362:	b924      	cbnz	r4, 800836e <dhcp_bind+0x26>
 8008364:	4b34      	ldr	r3, [pc, #208]	; (8008438 <dhcp_bind+0xf0>)
 8008366:	f240 4217 	movw	r2, #1047	; 0x417
 800836a:	4936      	ldr	r1, [pc, #216]	; (8008444 <dhcp_bind+0xfc>)
 800836c:	e7f3      	b.n	8008356 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 800836e:	2300      	movs	r3, #0
 8008370:	8263      	strh	r3, [r4, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8008372:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	d00b      	beq.n	8008390 <dhcp_bind+0x48>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008378:	331e      	adds	r3, #30
 800837a:	223c      	movs	r2, #60	; 0x3c
 800837c:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t0_timeout == 0) {
 8008380:	2b00      	cmp	r3, #0
 8008382:	d046      	beq.n	8008412 <dhcp_bind+0xca>
    dhcp->t0_timeout = (u16_t)timeout;
 8008384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008388:	4293      	cmp	r3, r2
 800838a:	bf28      	it	cs
 800838c:	4613      	movcs	r3, r2
      dhcp->t0_timeout = 1;
 800838e:	82a3      	strh	r3, [r4, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8008390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008392:	1c58      	adds	r0, r3, #1
 8008394:	d00d      	beq.n	80083b2 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8008396:	331e      	adds	r3, #30
 8008398:	223c      	movs	r2, #60	; 0x3c
 800839a:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t1_timeout == 0) {
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d039      	beq.n	8008416 <dhcp_bind+0xce>
    dhcp->t1_timeout = (u16_t)timeout;
 80083a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083a6:	4293      	cmp	r3, r2
 80083a8:	bf28      	it	cs
 80083aa:	4613      	movcs	r3, r2
      dhcp->t1_timeout = 1;
 80083ac:	8163      	strh	r3, [r4, #10]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80083ae:	8963      	ldrh	r3, [r4, #10]
 80083b0:	81e3      	strh	r3, [r4, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80083b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083b4:	1c59      	adds	r1, r3, #1
 80083b6:	d00c      	beq.n	80083d2 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80083b8:	331e      	adds	r3, #30
 80083ba:	223c      	movs	r2, #60	; 0x3c
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
    if (dhcp->t2_timeout == 0) {
 80083c0:	b35b      	cbz	r3, 800841a <dhcp_bind+0xd2>
    dhcp->t2_timeout = (u16_t)timeout;
 80083c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bf28      	it	cs
 80083ca:	4613      	movcs	r3, r2
      dhcp->t2_timeout = 1;
 80083cc:	81a3      	strh	r3, [r4, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	8223      	strh	r3, [r4, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	8962      	ldrh	r2, [r4, #10]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <dhcp_bind+0x98>
 80083da:	b10b      	cbz	r3, 80083e0 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 80083dc:	2300      	movs	r3, #0
 80083de:	8163      	strh	r3, [r4, #10]
  if (dhcp->subnet_mask_given) {
 80083e0:	79e3      	ldrb	r3, [r4, #7]
 80083e2:	b1e3      	cbz	r3, 800841e <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80083e4:	6a23      	ldr	r3, [r4, #32]
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80083e6:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80083e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083ea:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80083ec:	b92b      	cbnz	r3, 80083fa <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80083ee:	69e3      	ldr	r3, [r4, #28]
 80083f0:	9a00      	ldr	r2, [sp, #0]
 80083f2:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80083f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083f8:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80083fa:	4620      	mov	r0, r4
 80083fc:	210a      	movs	r1, #10
 80083fe:	f7ff fcb1 	bl	8007d64 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8008402:	ab01      	add	r3, sp, #4
 8008404:	466a      	mov	r2, sp
 8008406:	f104 011c 	add.w	r1, r4, #28
 800840a:	4628      	mov	r0, r5
 800840c:	f002 fb20 	bl	800aa50 <netif_set_addr>
 8008410:	e7a4      	b.n	800835c <dhcp_bind+0x14>
      dhcp->t0_timeout = 1;
 8008412:	2301      	movs	r3, #1
 8008414:	e7bb      	b.n	800838e <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	e7c8      	b.n	80083ac <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	e7d6      	b.n	80083cc <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800841e:	7f23      	ldrb	r3, [r4, #28]
    if (first_octet <= 127) {
 8008420:	061a      	lsls	r2, r3, #24
 8008422:	d401      	bmi.n	8008428 <dhcp_bind+0xe0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8008424:	23ff      	movs	r3, #255	; 0xff
 8008426:	e7de      	b.n	80083e6 <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 8008428:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800842a:	bf8c      	ite	hi
 800842c:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8008430:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 8008434:	e7d7      	b.n	80083e6 <dhcp_bind+0x9e>
 8008436:	bf00      	nop
 8008438:	0801e58e 	.word	0x0801e58e
 800843c:	0801e79e 	.word	0x0801e79e
 8008440:	0801d8d1 	.word	0x0801d8d1
 8008444:	0801e7b7 	.word	0x0801e7b7

08008448 <dhcp_inc_pcb_refcount>:
{
 8008448:	b510      	push	{r4, lr}
  if (dhcp_pcb_refcount == 0) {
 800844a:	4c14      	ldr	r4, [pc, #80]	; (800849c <dhcp_inc_pcb_refcount+0x54>)
 800844c:	7a23      	ldrb	r3, [r4, #8]
 800844e:	b9eb      	cbnz	r3, 800848c <dhcp_inc_pcb_refcount+0x44>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8008450:	6863      	ldr	r3, [r4, #4]
 8008452:	b12b      	cbz	r3, 8008460 <dhcp_inc_pcb_refcount+0x18>
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <dhcp_inc_pcb_refcount+0x58>)
 8008456:	22e5      	movs	r2, #229	; 0xe5
 8008458:	4912      	ldr	r1, [pc, #72]	; (80084a4 <dhcp_inc_pcb_refcount+0x5c>)
 800845a:	4813      	ldr	r0, [pc, #76]	; (80084a8 <dhcp_inc_pcb_refcount+0x60>)
 800845c:	f006 fe96 	bl	800f18c <iprintf>
    dhcp_pcb = udp_new();
 8008460:	f006 fc78 	bl	800ed54 <udp_new>
 8008464:	6060      	str	r0, [r4, #4]
    if (dhcp_pcb == NULL) {
 8008466:	b1b0      	cbz	r0, 8008496 <dhcp_inc_pcb_refcount+0x4e>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8008468:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800846a:	4910      	ldr	r1, [pc, #64]	; (80084ac <dhcp_inc_pcb_refcount+0x64>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800846c:	f042 0220 	orr.w	r2, r2, #32
 8008470:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8008472:	2244      	movs	r2, #68	; 0x44
 8008474:	f006 faba 	bl	800e9ec <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8008478:	2243      	movs	r2, #67	; 0x43
 800847a:	490c      	ldr	r1, [pc, #48]	; (80084ac <dhcp_inc_pcb_refcount+0x64>)
 800847c:	6860      	ldr	r0, [r4, #4]
 800847e:	f006 fbf5 	bl	800ec6c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8008482:	2200      	movs	r2, #0
 8008484:	490a      	ldr	r1, [pc, #40]	; (80084b0 <dhcp_inc_pcb_refcount+0x68>)
 8008486:	6860      	ldr	r0, [r4, #4]
 8008488:	f006 fc2c 	bl	800ece4 <udp_recv>
  dhcp_pcb_refcount++;
 800848c:	7a23      	ldrb	r3, [r4, #8]
  return ERR_OK;
 800848e:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8008490:	3301      	adds	r3, #1
 8008492:	7223      	strb	r3, [r4, #8]
}
 8008494:	bd10      	pop	{r4, pc}
      return ERR_MEM;
 8008496:	f04f 30ff 	mov.w	r0, #4294967295
 800849a:	e7fb      	b.n	8008494 <dhcp_inc_pcb_refcount+0x4c>
 800849c:	20006828 	.word	0x20006828
 80084a0:	0801e58e 	.word	0x0801e58e
 80084a4:	0801e7cf 	.word	0x0801e7cf
 80084a8:	0801d8d1 	.word	0x0801d8d1
 80084ac:	0801496c 	.word	0x0801496c
 80084b0:	08008555 	.word	0x08008555

080084b4 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80084b4:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80084b6:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80084b8:	4d16      	ldr	r5, [pc, #88]	; (8008514 <dhcp_handle_ack.isra.0+0x60>)
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80084ba:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80084bc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80084c0:	78eb      	ldrb	r3, [r5, #3]
 80084c2:	b113      	cbz	r3, 80084ca <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80084c4:	4b14      	ldr	r3, [pc, #80]	; (8008518 <dhcp_handle_ack.isra.0+0x64>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80084ca:	792b      	ldrb	r3, [r5, #4]
 80084cc:	b1d3      	cbz	r3, 8008504 <dhcp_handle_ack.isra.0+0x50>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80084ce:	4b12      	ldr	r3, [pc, #72]	; (8008518 <dhcp_handle_ack.isra.0+0x64>)
 80084d0:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80084d2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80084d4:	796b      	ldrb	r3, [r5, #5]
 80084d6:	b1c3      	cbz	r3, 800850a <dhcp_handle_ack.isra.0+0x56>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80084d8:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <dhcp_handle_ack.isra.0+0x64>)
 80084da:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80084dc:	6323      	str	r3, [r4, #48]	; 0x30
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80084de:	690b      	ldr	r3, [r1, #16]
 80084e0:	61e3      	str	r3, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80084e2:	79ab      	ldrb	r3, [r5, #6]
 80084e4:	b12b      	cbz	r3, 80084f2 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <dhcp_handle_ack.isra.0+0x64>)
 80084e8:	6998      	ldr	r0, [r3, #24]
 80084ea:	f001 ff08 	bl	800a2fe <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80084ee:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80084f0:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 0;
 80084f2:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80084f4:	79eb      	ldrb	r3, [r5, #7]
 80084f6:	b123      	cbz	r3, 8008502 <dhcp_handle_ack.isra.0+0x4e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <dhcp_handle_ack.isra.0+0x64>)
 80084fa:	69d8      	ldr	r0, [r3, #28]
 80084fc:	f001 feff 	bl	800a2fe <lwip_htonl>
 8008500:	6260      	str	r0, [r4, #36]	; 0x24
}
 8008502:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8008504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	e7e3      	b.n	80084d2 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800850a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800850c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008510:	08db      	lsrs	r3, r3, #3
 8008512:	e7e3      	b.n	80084dc <dhcp_handle_ack.isra.0+0x28>
 8008514:	2000a89c 	.word	0x2000a89c
 8008518:	2000a8a4 	.word	0x2000a8a4

0800851c <dhcp_dec_pcb_refcount>:
{
 800851c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800851e:	4c09      	ldr	r4, [pc, #36]	; (8008544 <dhcp_dec_pcb_refcount+0x28>)
 8008520:	7a23      	ldrb	r3, [r4, #8]
 8008522:	b92b      	cbnz	r3, 8008530 <dhcp_dec_pcb_refcount+0x14>
 8008524:	4b08      	ldr	r3, [pc, #32]	; (8008548 <dhcp_dec_pcb_refcount+0x2c>)
 8008526:	22ff      	movs	r2, #255	; 0xff
 8008528:	4908      	ldr	r1, [pc, #32]	; (800854c <dhcp_dec_pcb_refcount+0x30>)
 800852a:	4809      	ldr	r0, [pc, #36]	; (8008550 <dhcp_dec_pcb_refcount+0x34>)
 800852c:	f006 fe2e 	bl	800f18c <iprintf>
  dhcp_pcb_refcount--;
 8008530:	7a25      	ldrb	r5, [r4, #8]
 8008532:	3d01      	subs	r5, #1
 8008534:	b2ed      	uxtb	r5, r5
 8008536:	7225      	strb	r5, [r4, #8]
  if (dhcp_pcb_refcount == 0) {
 8008538:	b91d      	cbnz	r5, 8008542 <dhcp_dec_pcb_refcount+0x26>
    udp_remove(dhcp_pcb);
 800853a:	6860      	ldr	r0, [r4, #4]
 800853c:	f006 fbe4 	bl	800ed08 <udp_remove>
    dhcp_pcb = NULL;
 8008540:	6065      	str	r5, [r4, #4]
}
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20006828 	.word	0x20006828
 8008548:	0801e58e 	.word	0x0801e58e
 800854c:	0801e7f4 	.word	0x0801e7f4
 8008550:	0801d8d1 	.word	0x0801d8d1

08008554 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8008554:	4ba8      	ldr	r3, [pc, #672]	; (80087f8 <dhcp_recv+0x2a4>)
{
 8008556:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800855a:	685d      	ldr	r5, [r3, #4]
{
 800855c:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800855e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
{
 8008560:	9201      	str	r2, [sp, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008562:	9302      	str	r3, [sp, #8]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8008564:	2b00      	cmp	r3, #0
 8008566:	d037      	beq.n	80085d8 <dhcp_recv+0x84>
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d034      	beq.n	80085d8 <dhcp_recv+0x84>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800856e:	8953      	ldrh	r3, [r2, #10]
 8008570:	2b2b      	cmp	r3, #43	; 0x2b
 8008572:	d931      	bls.n	80085d8 <dhcp_recv+0x84>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8008574:	6852      	ldr	r2, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8008576:	7813      	ldrb	r3, [r2, #0]
 8008578:	2b02      	cmp	r3, #2
 800857a:	d12d      	bne.n	80085d8 <dhcp_recv+0x84>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800857c:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
 8008580:	2300      	movs	r3, #0
 8008582:	b2d8      	uxtb	r0, r3
 8008584:	4281      	cmp	r1, r0
 8008586:	d901      	bls.n	800858c <dhcp_recv+0x38>
 8008588:	2b06      	cmp	r3, #6
 800858a:	d11d      	bne.n	80085c8 <dhcp_recv+0x74>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800858c:	6850      	ldr	r0, [r2, #4]
 800858e:	f001 feb6 	bl	800a2fe <lwip_htonl>
 8008592:	9b02      	ldr	r3, [sp, #8]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4298      	cmp	r0, r3
 8008598:	d11e      	bne.n	80085d8 <dhcp_recv+0x84>
  dhcp_clear_all_options(dhcp);
 800859a:	4b98      	ldr	r3, [pc, #608]	; (80087fc <dhcp_recv+0x2a8>)
 800859c:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 800859e:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 80085a0:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 80085a2:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 80085a4:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 80085a6:	292b      	cmp	r1, #43	; 0x2b
 80085a8:	d916      	bls.n	80085d8 <dhcp_recv+0x84>
  options_idx_max = p->tot_len;
 80085aa:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 80085ac:	f04f 09f0 	mov.w	r9, #240	; 0xf0
  int parse_sname_as_options = 0;
 80085b0:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 80085b2:	f8b1 a008 	ldrh.w	sl, [r1, #8]
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80085b6:	9303      	str	r3, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 80085b8:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 80085ba:	8973      	ldrh	r3, [r6, #10]
 80085bc:	454b      	cmp	r3, r9
 80085be:	d911      	bls.n	80085e4 <dhcp_recv+0x90>
  options = (u8_t *)q->payload;
 80085c0:	6873      	ldr	r3, [r6, #4]
 80085c2:	464c      	mov	r4, r9
 80085c4:	9305      	str	r3, [sp, #20]
 80085c6:	e0ed      	b.n	80087a4 <dhcp_recv+0x250>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80085c8:	18e8      	adds	r0, r5, r3
 80085ca:	3301      	adds	r3, #1
 80085cc:	18d4      	adds	r4, r2, r3
 80085ce:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
 80085d2:	7ee4      	ldrb	r4, [r4, #27]
 80085d4:	4284      	cmp	r4, r0
 80085d6:	d0d4      	beq.n	8008582 <dhcp_recv+0x2e>
  pbuf_free(p);
 80085d8:	9801      	ldr	r0, [sp, #4]
 80085da:	f002 fbf1 	bl	800adc0 <pbuf_free>
}
 80085de:	b009      	add	sp, #36	; 0x24
 80085e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx = (u16_t)(options_idx - q->len);
 80085e4:	eba9 0903 	sub.w	r9, r9, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80085e8:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 80085ec:	6836      	ldr	r6, [r6, #0]
    options_idx = (u16_t)(options_idx - q->len);
 80085ee:	fa1f f989 	uxth.w	r9, r9
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80085f2:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 80085f6:	2e00      	cmp	r6, #0
 80085f8:	d1df      	bne.n	80085ba <dhcp_recv+0x66>
 80085fa:	e7ed      	b.n	80085d8 <dhcp_recv+0x84>
    u16_t val_offset = (u16_t)(offset + 2);
 80085fc:	f104 0b02 	add.w	fp, r4, #2
 8008600:	fa1f fb8b 	uxth.w	fp, fp
    if (val_offset < offset) {
 8008604:	45a3      	cmp	fp, r4
 8008606:	d3e7      	bcc.n	80085d8 <dhcp_recv+0x84>
    if ((offset + 1) < q->len) {
 8008608:	1c61      	adds	r1, r4, #1
 800860a:	8973      	ldrh	r3, [r6, #10]
 800860c:	4299      	cmp	r1, r3
 800860e:	da45      	bge.n	800869c <dhcp_recv+0x148>
      len = options[offset + 1];
 8008610:	9b05      	ldr	r3, [sp, #20]
 8008612:	4423      	add	r3, r4
 8008614:	785b      	ldrb	r3, [r3, #1]
    switch (op) {
 8008616:	2a34      	cmp	r2, #52	; 0x34
 8008618:	d06b      	beq.n	80086f2 <dhcp_recv+0x19e>
 800861a:	d846      	bhi.n	80086aa <dhcp_recv+0x156>
 800861c:	2a01      	cmp	r2, #1
 800861e:	d051      	beq.n	80086c4 <dhcp_recv+0x170>
 8008620:	f0c0 8088 	bcc.w	8008734 <dhcp_recv+0x1e0>
 8008624:	2a03      	cmp	r2, #3
 8008626:	d054      	beq.n	80086d2 <dhcp_recv+0x17e>
 8008628:	2a33      	cmp	r2, #51	; 0x33
 800862a:	d05c      	beq.n	80086e6 <dhcp_recv+0x192>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800862c:	f04f 37ff 	mov.w	r7, #4294967295
 8008630:	f04f 0800 	mov.w	r8, #0
      if (offset + len + 2 > 0xFFFF) {
 8008634:	441c      	add	r4, r3
 8008636:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800863a:	4294      	cmp	r4, r2
 800863c:	dccc      	bgt.n	80085d8 <dhcp_recv+0x84>
      offset = (u16_t)(offset + len + 2);
 800863e:	eb0b 0403 	add.w	r4, fp, r3
 8008642:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8008644:	f1b8 0f00 	cmp.w	r8, #0
 8008648:	d075      	beq.n	8008736 <dhcp_recv+0x1e2>
        u32_t value = 0;
 800864a:	2300      	movs	r3, #0
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800864c:	2f07      	cmp	r7, #7
        u32_t value = 0;
 800864e:	9307      	str	r3, [sp, #28]
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8008650:	d906      	bls.n	8008660 <dhcp_recv+0x10c>
 8008652:	4b6b      	ldr	r3, [pc, #428]	; (8008800 <dhcp_recv+0x2ac>)
 8008654:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8008658:	496a      	ldr	r1, [pc, #424]	; (8008804 <dhcp_recv+0x2b0>)
 800865a:	486b      	ldr	r0, [pc, #428]	; (8008808 <dhcp_recv+0x2b4>)
 800865c:	f006 fd96 	bl	800f18c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8008660:	9b03      	ldr	r3, [sp, #12]
 8008662:	5ddb      	ldrb	r3, [r3, r7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d166      	bne.n	8008736 <dhcp_recv+0x1e2>
          copy_len = LWIP_MIN(decode_len, 4);
 8008668:	fa1f f288 	uxth.w	r2, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800866c:	465b      	mov	r3, fp
 800866e:	a907      	add	r1, sp, #28
 8008670:	4630      	mov	r0, r6
 8008672:	4693      	mov	fp, r2
 8008674:	f002 fdcc 	bl	800b210 <pbuf_copy_partial>
 8008678:	4583      	cmp	fp, r0
 800867a:	d1ad      	bne.n	80085d8 <dhcp_recv+0x84>
          } else if (decode_len == 4) {
 800867c:	f1b8 0f04 	cmp.w	r8, #4
 8008680:	f040 8082 	bne.w	8008788 <dhcp_recv+0x234>
            value = lwip_ntohl(value);
 8008684:	9807      	ldr	r0, [sp, #28]
 8008686:	f001 fe3a 	bl	800a2fe <lwip_htonl>
 800868a:	9007      	str	r0, [sp, #28]
          dhcp_got_option(dhcp, decode_idx);
 800868c:	2301      	movs	r3, #1
 800868e:	9a03      	ldr	r2, [sp, #12]
 8008690:	55d3      	strb	r3, [r2, r7]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8008692:	9b07      	ldr	r3, [sp, #28]
 8008694:	4a5d      	ldr	r2, [pc, #372]	; (800880c <dhcp_recv+0x2b8>)
 8008696:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800869a:	e04c      	b.n	8008736 <dhcp_recv+0x1e2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8119 	beq.w	80088d6 <dhcp_recv+0x382>
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	e7b5      	b.n	8008616 <dhcp_recv+0xc2>
    switch (op) {
 80086aa:	2a36      	cmp	r2, #54	; 0x36
 80086ac:	d036      	beq.n	800871c <dhcp_recv+0x1c8>
 80086ae:	d32f      	bcc.n	8008710 <dhcp_recv+0x1bc>
 80086b0:	2a3a      	cmp	r2, #58	; 0x3a
 80086b2:	d039      	beq.n	8008728 <dhcp_recv+0x1d4>
 80086b4:	2a3b      	cmp	r2, #59	; 0x3b
 80086b6:	d1b9      	bne.n	800862c <dhcp_recv+0xd8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d062      	beq.n	8008782 <dhcp_recv+0x22e>
 80086bc:	4b50      	ldr	r3, [pc, #320]	; (8008800 <dhcp_recv+0x2ac>)
 80086be:	f240 6261 	movw	r2, #1633	; 0x661
 80086c2:	e004      	b.n	80086ce <dhcp_recv+0x17a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d049      	beq.n	800875c <dhcp_recv+0x208>
 80086c8:	4b4d      	ldr	r3, [pc, #308]	; (8008800 <dhcp_recv+0x2ac>)
 80086ca:	f240 622e 	movw	r2, #1582	; 0x62e
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80086ce:	4950      	ldr	r1, [pc, #320]	; (8008810 <dhcp_recv+0x2bc>)
 80086d0:	e005      	b.n	80086de <dhcp_recv+0x18a>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d845      	bhi.n	8008762 <dhcp_recv+0x20e>
 80086d6:	4b4a      	ldr	r3, [pc, #296]	; (8008800 <dhcp_recv+0x2ac>)
 80086d8:	f240 6233 	movw	r2, #1587	; 0x633
 80086dc:	494d      	ldr	r1, [pc, #308]	; (8008814 <dhcp_recv+0x2c0>)
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80086de:	484a      	ldr	r0, [pc, #296]	; (8008808 <dhcp_recv+0x2b4>)
 80086e0:	f006 fd54 	bl	800f18c <iprintf>
 80086e4:	e778      	b.n	80085d8 <dhcp_recv+0x84>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80086e6:	2b04      	cmp	r3, #4
 80086e8:	d03f      	beq.n	800876a <dhcp_recv+0x216>
 80086ea:	4b45      	ldr	r3, [pc, #276]	; (8008800 <dhcp_recv+0x2ac>)
 80086ec:	f240 6241 	movw	r2, #1601	; 0x641
 80086f0:	e7ed      	b.n	80086ce <dhcp_recv+0x17a>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d004      	beq.n	8008700 <dhcp_recv+0x1ac>
 80086f6:	4b42      	ldr	r3, [pc, #264]	; (8008800 <dhcp_recv+0x2ac>)
 80086f8:	f240 624f 	movw	r2, #1615	; 0x64f
 80086fc:	4946      	ldr	r1, [pc, #280]	; (8008818 <dhcp_recv+0x2c4>)
 80086fe:	e7ee      	b.n	80086de <dhcp_recv+0x18a>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8008700:	f1b9 0ff0 	cmp.w	r9, #240	; 0xf0
 8008704:	d034      	beq.n	8008770 <dhcp_recv+0x21c>
 8008706:	4b3e      	ldr	r3, [pc, #248]	; (8008800 <dhcp_recv+0x2ac>)
 8008708:	f240 6251 	movw	r2, #1617	; 0x651
 800870c:	4943      	ldr	r1, [pc, #268]	; (800881c <dhcp_recv+0x2c8>)
 800870e:	e7e6      	b.n	80086de <dhcp_recv+0x18a>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8008710:	2b01      	cmp	r3, #1
 8008712:	d033      	beq.n	800877c <dhcp_recv+0x228>
 8008714:	4b3a      	ldr	r3, [pc, #232]	; (8008800 <dhcp_recv+0x2ac>)
 8008716:	f240 6255 	movw	r2, #1621	; 0x655
 800871a:	e7ef      	b.n	80086fc <dhcp_recv+0x1a8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800871c:	2b04      	cmp	r3, #4
 800871e:	d02a      	beq.n	8008776 <dhcp_recv+0x222>
 8008720:	4b37      	ldr	r3, [pc, #220]	; (8008800 <dhcp_recv+0x2ac>)
 8008722:	f240 6259 	movw	r2, #1625	; 0x659
 8008726:	e7d2      	b.n	80086ce <dhcp_recv+0x17a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008728:	2b04      	cmp	r3, #4
 800872a:	d027      	beq.n	800877c <dhcp_recv+0x228>
 800872c:	4b34      	ldr	r3, [pc, #208]	; (8008800 <dhcp_recv+0x2ac>)
 800872e:	f240 625d 	movw	r2, #1629	; 0x65d
 8008732:	e7cc      	b.n	80086ce <dhcp_recv+0x17a>
      offset++;
 8008734:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8008736:	8973      	ldrh	r3, [r6, #10]
 8008738:	42a3      	cmp	r3, r4
 800873a:	d833      	bhi.n	80087a4 <dhcp_recv+0x250>
      offset = (u16_t)(offset - q->len);
 800873c:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 800873e:	ebaa 0a03 	sub.w	sl, sl, r3
      offset = (u16_t)(offset - q->len);
 8008742:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8008744:	fa1f fa8a 	uxth.w	sl, sl
      if (offset < offset_max) {
 8008748:	4554      	cmp	r4, sl
 800874a:	f4bf af45 	bcs.w	80085d8 <dhcp_recv+0x84>
        q = q->next;
 800874e:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8008750:	bb36      	cbnz	r6, 80087a0 <dhcp_recv+0x24c>
 8008752:	4b2b      	ldr	r3, [pc, #172]	; (8008800 <dhcp_recv+0x2ac>)
 8008754:	f240 629d 	movw	r2, #1693	; 0x69d
 8008758:	4931      	ldr	r1, [pc, #196]	; (8008820 <dhcp_recv+0x2cc>)
 800875a:	e7c0      	b.n	80086de <dhcp_recv+0x18a>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800875c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800875e:	2706      	movs	r7, #6
 8008760:	e768      	b.n	8008634 <dhcp_recv+0xe0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8008762:	2707      	movs	r7, #7
        decode_len = 4; /* only copy the first given router */
 8008764:	f04f 0804 	mov.w	r8, #4
 8008768:	e764      	b.n	8008634 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800876a:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800876c:	2703      	movs	r7, #3
 800876e:	e761      	b.n	8008634 <dhcp_recv+0xe0>
    decode_len = len;
 8008770:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8008772:	2700      	movs	r7, #0
 8008774:	e75e      	b.n	8008634 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008776:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8008778:	2702      	movs	r7, #2
 800877a:	e75b      	b.n	8008634 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800877c:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800877e:	461f      	mov	r7, r3
 8008780:	e758      	b.n	8008634 <dhcp_recv+0xe0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8008782:	4698      	mov	r8, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8008784:	2705      	movs	r7, #5
 8008786:	e755      	b.n	8008634 <dhcp_recv+0xe0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8008788:	f1b8 0f01 	cmp.w	r8, #1
 800878c:	d004      	beq.n	8008798 <dhcp_recv+0x244>
 800878e:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <dhcp_recv+0x2ac>)
 8008790:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8008794:	4923      	ldr	r1, [pc, #140]	; (8008824 <dhcp_recv+0x2d0>)
 8008796:	e7a2      	b.n	80086de <dhcp_recv+0x18a>
            value = ((u8_t *)&value)[0];
 8008798:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800879c:	9307      	str	r3, [sp, #28]
 800879e:	e775      	b.n	800868c <dhcp_recv+0x138>
        options = (u8_t *)q->payload;
 80087a0:	6873      	ldr	r3, [r6, #4]
 80087a2:	9305      	str	r3, [sp, #20]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80087a4:	4554      	cmp	r4, sl
 80087a6:	d204      	bcs.n	80087b2 <dhcp_recv+0x25e>
 80087a8:	9b05      	ldr	r3, [sp, #20]
 80087aa:	5d1a      	ldrb	r2, [r3, r4]
 80087ac:	2aff      	cmp	r2, #255	; 0xff
 80087ae:	f47f af25 	bne.w	80085fc <dhcp_recv+0xa8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80087b2:	9b03      	ldr	r3, [sp, #12]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d136      	bne.n	8008828 <dhcp_recv+0x2d4>
  } else if (parse_sname_as_options) {
 80087ba:	9b04      	ldr	r3, [sp, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d13c      	bne.n	800883a <dhcp_recv+0x2e6>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	785b      	ldrb	r3, [r3, #1]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f43f af07 	beq.w	80085d8 <dhcp_recv+0x84>
  msg_in = (struct dhcp_msg *)p->payload;
 80087ca:	9b01      	ldr	r3, [sp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80087cc:	4a0f      	ldr	r2, [pc, #60]	; (800880c <dhcp_recv+0x2b8>)
  msg_in = (struct dhcp_msg *)p->payload;
 80087ce:	685e      	ldr	r6, [r3, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80087d0:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d14d      	bne.n	8008872 <dhcp_recv+0x31e>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80087d6:	9b02      	ldr	r3, [sp, #8]
 80087d8:	795b      	ldrb	r3, [r3, #5]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d13d      	bne.n	800885a <dhcp_recv+0x306>
      dhcp_handle_ack(netif, msg_in);
 80087de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80087e0:	4631      	mov	r1, r6
 80087e2:	f7ff fe67 	bl	80084b4 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80087e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        dhcp_check(netif);
 80087ea:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80087ec:	071b      	lsls	r3, r3, #28
 80087ee:	d53d      	bpl.n	800886c <dhcp_recv+0x318>
        dhcp_check(netif);
 80087f0:	f7ff fd94 	bl	800831c <dhcp_check>
 80087f4:	e6f0      	b.n	80085d8 <dhcp_recv+0x84>
 80087f6:	bf00      	nop
 80087f8:	2000a8c4 	.word	0x2000a8c4
 80087fc:	2000a89c 	.word	0x2000a89c
 8008800:	0801e58e 	.word	0x0801e58e
 8008804:	0801e853 	.word	0x0801e853
 8008808:	0801d8d1 	.word	0x0801d8d1
 800880c:	2000a8a4 	.word	0x2000a8a4
 8008810:	0801e818 	.word	0x0801e818
 8008814:	0801e821 	.word	0x0801e821
 8008818:	0801e833 	.word	0x0801e833
 800881c:	0801e83c 	.word	0x0801e83c
 8008820:	0801e877 	.word	0x0801e877
 8008824:	0801e864 	.word	0x0801e864
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8008828:	4b39      	ldr	r3, [pc, #228]	; (8008910 <dhcp_recv+0x3bc>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800882a:	2200      	movs	r2, #0
 800882c:	9903      	ldr	r1, [sp, #12]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800882e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8008830:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8008832:	2b01      	cmp	r3, #1
 8008834:	d00c      	beq.n	8008850 <dhcp_recv+0x2fc>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8008836:	2b02      	cmp	r3, #2
 8008838:	d106      	bne.n	8008848 <dhcp_recv+0x2f4>
    parse_sname_as_options = 0;
 800883a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800883c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8008840:	f04f 092c 	mov.w	r9, #44	; 0x2c
    parse_sname_as_options = 0;
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	e6b7      	b.n	80085b8 <dhcp_recv+0x64>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8008848:	2b03      	cmp	r3, #3
 800884a:	d1b6      	bne.n	80087ba <dhcp_recv+0x266>
      parse_sname_as_options = 1;
 800884c:	2301      	movs	r3, #1
 800884e:	9304      	str	r3, [sp, #16]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8008850:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8008854:	f04f 096c 	mov.w	r9, #108	; 0x6c
 8008858:	e6ae      	b.n	80085b8 <dhcp_recv+0x64>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800885a:	3b03      	subs	r3, #3
 800885c:	2b02      	cmp	r3, #2
 800885e:	f63f aebb 	bhi.w	80085d8 <dhcp_recv+0x84>
      dhcp_handle_ack(netif, msg_in);
 8008862:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008864:	4631      	mov	r1, r6
 8008866:	f7ff fe25 	bl	80084b4 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 800886a:	4628      	mov	r0, r5
 800886c:	f7ff fd6c 	bl	8008348 <dhcp_bind>
 8008870:	e6b2      	b.n	80085d8 <dhcp_recv+0x84>
  else if ((msg_type == DHCP_NAK) &&
 8008872:	2b06      	cmp	r3, #6
 8008874:	d115      	bne.n	80088a2 <dhcp_recv+0x34e>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8008876:	9b02      	ldr	r3, [sp, #8]
 8008878:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800887a:	1eda      	subs	r2, r3, #3
 800887c:	2a02      	cmp	r2, #2
 800887e:	d902      	bls.n	8008886 <dhcp_recv+0x332>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8008880:	2b01      	cmp	r3, #1
 8008882:	f47f aea9 	bne.w	80085d8 <dhcp_recv+0x84>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008886:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008888:	210c      	movs	r1, #12
 800888a:	f7ff fa6b 	bl	8007d64 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <dhcp_recv+0x3c0>)
 8008890:	4628      	mov	r0, r5
 8008892:	461a      	mov	r2, r3
 8008894:	4619      	mov	r1, r3
 8008896:	f002 f8db 	bl	800aa50 <netif_set_addr>
  dhcp_discover(netif);
 800889a:	4628      	mov	r0, r5
 800889c:	f7ff fcca 	bl	8008234 <dhcp_discover>
 80088a0:	e69a      	b.n	80085d8 <dhcp_recv+0x84>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	f47f ae98 	bne.w	80085d8 <dhcp_recv+0x84>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	795b      	ldrb	r3, [r3, #5]
 80088ac:	2b06      	cmp	r3, #6
 80088ae:	f47f ae93 	bne.w	80085d8 <dhcp_recv+0x84>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80088b2:	9b03      	ldr	r3, [sp, #12]
 80088b4:	789b      	ldrb	r3, [r3, #2]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f43f ae8e 	beq.w	80085d8 <dhcp_recv+0x84>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80088bc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    dhcp->request_timeout = 0; /* stop timer */
 80088be:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80088c0:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 80088c2:	8123      	strh	r3, [r4, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80088c4:	f001 fd1b 	bl	800a2fe <lwip_htonl>
 80088c8:	61a0      	str	r0, [r4, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80088ca:	6933      	ldr	r3, [r6, #16]
    dhcp_select(netif);
 80088cc:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80088ce:	61e3      	str	r3, [r4, #28]
    dhcp_select(netif);
 80088d0:	f7ff fbf4 	bl	80080bc <dhcp_select>
 80088d4:	e680      	b.n	80085d8 <dhcp_recv+0x84>
    switch (op) {
 80088d6:	2a34      	cmp	r2, #52	; 0x34
 80088d8:	f43f af0d 	beq.w	80086f6 <dhcp_recv+0x1a2>
 80088dc:	d80c      	bhi.n	80088f8 <dhcp_recv+0x3a4>
 80088de:	2a01      	cmp	r2, #1
 80088e0:	f43f aef2 	beq.w	80086c8 <dhcp_recv+0x174>
 80088e4:	f4ff af26 	bcc.w	8008734 <dhcp_recv+0x1e0>
 80088e8:	2a03      	cmp	r2, #3
 80088ea:	f43f aef4 	beq.w	80086d6 <dhcp_recv+0x182>
 80088ee:	2a33      	cmp	r2, #51	; 0x33
 80088f0:	f43f aefb 	beq.w	80086ea <dhcp_recv+0x196>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80088f4:	2300      	movs	r3, #0
 80088f6:	e699      	b.n	800862c <dhcp_recv+0xd8>
    switch (op) {
 80088f8:	2a36      	cmp	r2, #54	; 0x36
 80088fa:	f43f af11 	beq.w	8008720 <dhcp_recv+0x1cc>
 80088fe:	f4ff af09 	bcc.w	8008714 <dhcp_recv+0x1c0>
 8008902:	2a3a      	cmp	r2, #58	; 0x3a
 8008904:	f43f af12 	beq.w	800872c <dhcp_recv+0x1d8>
 8008908:	2a3b      	cmp	r2, #59	; 0x3b
 800890a:	f43f aed7 	beq.w	80086bc <dhcp_recv+0x168>
 800890e:	e7f1      	b.n	80088f4 <dhcp_recv+0x3a0>
 8008910:	2000a8a4 	.word	0x2000a8a4
 8008914:	0801496c 	.word	0x0801496c

08008918 <dhcp_arp_reply>:
{
 8008918:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800891c:	4607      	mov	r7, r0
 800891e:	b948      	cbnz	r0, 8008934 <dhcp_arp_reply+0x1c>
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <dhcp_arp_reply+0xa8>)
 8008922:	f240 328b 	movw	r2, #907	; 0x38b
 8008926:	4927      	ldr	r1, [pc, #156]	; (80089c4 <dhcp_arp_reply+0xac>)
 8008928:	4827      	ldr	r0, [pc, #156]	; (80089c8 <dhcp_arp_reply+0xb0>)
 800892a:	f006 fc2f 	bl	800f18c <iprintf>
}
 800892e:	b004      	add	sp, #16
 8008930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dhcp = netif_dhcp_data(netif);
 8008934:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8008936:	2c00      	cmp	r4, #0
 8008938:	d0f9      	beq.n	800892e <dhcp_arp_reply+0x16>
 800893a:	7963      	ldrb	r3, [r4, #5]
 800893c:	2b08      	cmp	r3, #8
 800893e:	d1f6      	bne.n	800892e <dhcp_arp_reply+0x16>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8008940:	680a      	ldr	r2, [r1, #0]
 8008942:	69e3      	ldr	r3, [r4, #28]
 8008944:	429a      	cmp	r2, r3
 8008946:	d1f2      	bne.n	800892e <dhcp_arp_reply+0x16>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8008948:	210c      	movs	r1, #12
 800894a:	4620      	mov	r0, r4
 800894c:	f7ff fa0a 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8008950:	f10d 030e 	add.w	r3, sp, #14
 8008954:	2204      	movs	r2, #4
 8008956:	4621      	mov	r1, r4
 8008958:	4638      	mov	r0, r7
 800895a:	f7ff fa81 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 800895e:	4605      	mov	r5, r0
 8008960:	b330      	cbz	r0, 80089b0 <dhcp_arp_reply+0x98>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8008962:	6846      	ldr	r6, [r0, #4]
 8008964:	2304      	movs	r3, #4
 8008966:	2232      	movs	r2, #50	; 0x32
 8008968:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 800896c:	36f0      	adds	r6, #240	; 0xf0
 800896e:	4631      	mov	r1, r6
 8008970:	f7ff fa1c 	bl	8007dac <dhcp_option>
 8008974:	4680      	mov	r8, r0
 8008976:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800897a:	69e0      	ldr	r0, [r4, #28]
 800897c:	f001 fcbf 	bl	800a2fe <lwip_htonl>
 8008980:	4631      	mov	r1, r6
 8008982:	4602      	mov	r2, r0
 8008984:	4640      	mov	r0, r8
 8008986:	f7ff fa47 	bl	8007e18 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800898a:	462a      	mov	r2, r5
 800898c:	4631      	mov	r1, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800898e:	f8ad 000e 	strh.w	r0, [sp, #14]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008992:	f7ff faf7 	bl	8007f84 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8008996:	4b0d      	ldr	r3, [pc, #52]	; (80089cc <dhcp_arp_reply+0xb4>)
 8008998:	480d      	ldr	r0, [pc, #52]	; (80089d0 <dhcp_arp_reply+0xb8>)
 800899a:	4629      	mov	r1, r5
 800899c:	4a0d      	ldr	r2, [pc, #52]	; (80089d4 <dhcp_arp_reply+0xbc>)
 800899e:	e9cd 7300 	strd	r7, r3, [sp]
 80089a2:	2343      	movs	r3, #67	; 0x43
 80089a4:	6840      	ldr	r0, [r0, #4]
 80089a6:	f006 f889 	bl	800eabc <udp_sendto_if_src>
    pbuf_free(p_out);
 80089aa:	4628      	mov	r0, r5
 80089ac:	f002 fa08 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 80089b0:	79a3      	ldrb	r3, [r4, #6]
 80089b2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80089b4:	bf1c      	itt	ne
 80089b6:	3301      	addne	r3, #1
 80089b8:	71a3      	strbne	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80089ba:	2314      	movs	r3, #20
 80089bc:	8123      	strh	r3, [r4, #8]
 80089be:	e7b6      	b.n	800892e <dhcp_arp_reply+0x16>
 80089c0:	0801e58e 	.word	0x0801e58e
 80089c4:	0801e7a9 	.word	0x0801e7a9
 80089c8:	0801d8d1 	.word	0x0801d8d1
 80089cc:	0801496c 	.word	0x0801496c
 80089d0:	20006828 	.word	0x20006828
 80089d4:	08014968 	.word	0x08014968

080089d8 <dhcp_renew>:
{
 80089d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80089dc:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 80089de:	b085      	sub	sp, #20
 80089e0:	4607      	mov	r7, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80089e2:	2105      	movs	r1, #5
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff f9bd 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80089ea:	f10d 030e 	add.w	r3, sp, #14
 80089ee:	2203      	movs	r2, #3
 80089f0:	4621      	mov	r1, r4
 80089f2:	4638      	mov	r0, r7
 80089f4:	f7ff fa34 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 80089f8:	4606      	mov	r6, r0
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d056      	beq.n	8008aac <dhcp_renew+0xd4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80089fe:	6845      	ldr	r5, [r0, #4]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2239      	movs	r2, #57	; 0x39
 8008a04:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008a08:	35f0      	adds	r5, #240	; 0xf0
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008a0a:	f04f 0800 	mov.w	r8, #0
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008a0e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8008ab8 <dhcp_renew+0xe0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7ff f9ca 	bl	8007dac <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008a18:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008a1a:	4629      	mov	r1, r5
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008a1c:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008a20:	f7ff f9a8 	bl	8007d74 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008a24:	2303      	movs	r3, #3
 8008a26:	2237      	movs	r2, #55	; 0x37
 8008a28:	4629      	mov	r1, r5
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008a2a:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008a2e:	f7ff f9bd 	bl	8007dac <dhcp_option>
 8008a32:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008a36:	f819 2008 	ldrb.w	r2, [r9, r8]
 8008a3a:	f108 0801 	add.w	r8, r8, #1
 8008a3e:	4629      	mov	r1, r5
 8008a40:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008a44:	f7ff f9d0 	bl	8007de8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008a48:	f1b8 0f03 	cmp.w	r8, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008a4c:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008a50:	d1f1      	bne.n	8008a36 <dhcp_renew+0x5e>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008a52:	4629      	mov	r1, r5
 8008a54:	4632      	mov	r2, r6
 8008a56:	f7ff fa95 	bl	8007f84 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008a5a:	4816      	ldr	r0, [pc, #88]	; (8008ab4 <dhcp_renew+0xdc>)
 8008a5c:	9700      	str	r7, [sp, #0]
 8008a5e:	2343      	movs	r3, #67	; 0x43
 8008a60:	f104 0218 	add.w	r2, r4, #24
 8008a64:	4631      	mov	r1, r6
 8008a66:	6840      	ldr	r0, [r0, #4]
 8008a68:	f006 f8c0 	bl	800ebec <udp_sendto_if>
 8008a6c:	4605      	mov	r5, r0
    pbuf_free(p_out);
 8008a6e:	4630      	mov	r0, r6
 8008a70:	f002 f9a6 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 8008a74:	79a3      	ldrb	r3, [r4, #6]
}
 8008a76:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8008a78:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008a7a:	bf1c      	itt	ne
 8008a7c:	3301      	addne	r3, #1
 8008a7e:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008a80:	79a3      	ldrb	r3, [r4, #6]
 8008a82:	2b09      	cmp	r3, #9
 8008a84:	bf96      	itet	ls
 8008a86:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008a8a:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8008a8e:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008a92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8008a96:	bf9c      	itt	ls
 8008a98:	011b      	lslls	r3, r3, #4
 8008a9a:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008a9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aa4:	8123      	strh	r3, [r4, #8]
}
 8008aa6:	b005      	add	sp, #20
 8008aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    result = ERR_MEM;
 8008aac:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab0:	e7e0      	b.n	8008a74 <dhcp_renew+0x9c>
 8008ab2:	bf00      	nop
 8008ab4:	20006828 	.word	0x20006828
 8008ab8:	08014965 	.word	0x08014965

08008abc <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8008abc:	b150      	cbz	r0, 8008ad4 <dhcp_supplied_address+0x18>
 8008abe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008ac0:	b140      	cbz	r0, 8008ad4 <dhcp_supplied_address+0x18>
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8008ac2:	7940      	ldrb	r0, [r0, #5]
 8008ac4:	280a      	cmp	r0, #10
 8008ac6:	d006      	beq.n	8008ad6 <dhcp_supplied_address+0x1a>
 8008ac8:	3804      	subs	r0, #4
 8008aca:	2801      	cmp	r0, #1
 8008acc:	bf8c      	ite	hi
 8008ace:	2000      	movhi	r0, #0
 8008ad0:	2001      	movls	r0, #1
 8008ad2:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8008ad4:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8008ad6:	2001      	movs	r0, #1
 8008ad8:	e7fb      	b.n	8008ad2 <dhcp_supplied_address+0x16>
	...

08008adc <dhcp_release_and_stop>:
{
 8008adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8008ae0:	6a44      	ldr	r4, [r0, #36]	; 0x24
{
 8008ae2:	4607      	mov	r7, r0
  if (dhcp == NULL) {
 8008ae4:	2c00      	cmp	r4, #0
 8008ae6:	d051      	beq.n	8008b8c <dhcp_release_and_stop+0xb0>
  if (dhcp->state == DHCP_STATE_OFF) {
 8008ae8:	7963      	ldrb	r3, [r4, #5]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d04e      	beq.n	8008b8c <dhcp_release_and_stop+0xb0>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8008aee:	69a3      	ldr	r3, [r4, #24]
 8008af0:	9303      	str	r3, [sp, #12]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8008af2:	2300      	movs	r3, #0
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8008af4:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8008af8:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8008afc:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8008b00:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8008b02:	82a3      	strh	r3, [r4, #20]
 8008b04:	8263      	strh	r3, [r4, #18]
 8008b06:	8223      	strh	r3, [r4, #16]
 8008b08:	81e3      	strh	r3, [r4, #14]
  if (dhcp_supplied_address(netif)) {
 8008b0a:	f7ff ffd7 	bl	8008abc <dhcp_supplied_address>
 8008b0e:	b368      	cbz	r0, 8008b6c <dhcp_release_and_stop+0x90>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8008b10:	f10d 030a 	add.w	r3, sp, #10
 8008b14:	2207      	movs	r2, #7
 8008b16:	4621      	mov	r1, r4
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff f9a1 	bl	8007e60 <dhcp_create_msg>
    if (p_out != NULL) {
 8008b1e:	4605      	mov	r5, r0
 8008b20:	b320      	cbz	r0, 8008b6c <dhcp_release_and_stop+0x90>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8008b22:	6846      	ldr	r6, [r0, #4]
 8008b24:	2304      	movs	r3, #4
 8008b26:	2236      	movs	r2, #54	; 0x36
 8008b28:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8008b2c:	36f0      	adds	r6, #240	; 0xf0
 8008b2e:	4631      	mov	r1, r6
 8008b30:	f7ff f93c 	bl	8007dac <dhcp_option>
 8008b34:	4680      	mov	r8, r0
 8008b36:	f8ad 000a 	strh.w	r0, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008b3a:	9803      	ldr	r0, [sp, #12]
 8008b3c:	f001 fbdf 	bl	800a2fe <lwip_htonl>
 8008b40:	4631      	mov	r1, r6
 8008b42:	4602      	mov	r2, r0
 8008b44:	4640      	mov	r0, r8
 8008b46:	f7ff f967 	bl	8007e18 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4631      	mov	r1, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8008b4e:	f8ad 000a 	strh.w	r0, [sp, #10]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008b52:	f7ff fa17 	bl	8007f84 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008b56:	480f      	ldr	r0, [pc, #60]	; (8008b94 <dhcp_release_and_stop+0xb8>)
 8008b58:	9700      	str	r7, [sp, #0]
 8008b5a:	2343      	movs	r3, #67	; 0x43
 8008b5c:	aa03      	add	r2, sp, #12
 8008b5e:	4629      	mov	r1, r5
 8008b60:	6840      	ldr	r0, [r0, #4]
 8008b62:	f006 f843 	bl	800ebec <udp_sendto_if>
      pbuf_free(p_out);
 8008b66:	4628      	mov	r0, r5
 8008b68:	f002 f92a 	bl	800adc0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <dhcp_release_and_stop+0xbc>)
 8008b6e:	4638      	mov	r0, r7
 8008b70:	4619      	mov	r1, r3
 8008b72:	461a      	mov	r2, r3
 8008b74:	f001 ff6c 	bl	800aa50 <netif_set_addr>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f7ff f8f2 	bl	8007d64 <dhcp_set_state>
  if (dhcp->pcb_allocated != 0) {
 8008b80:	7923      	ldrb	r3, [r4, #4]
 8008b82:	b11b      	cbz	r3, 8008b8c <dhcp_release_and_stop+0xb0>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008b84:	f7ff fcca 	bl	800851c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	7123      	strb	r3, [r4, #4]
}
 8008b8c:	b004      	add	sp, #16
 8008b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b92:	bf00      	nop
 8008b94:	20006828 	.word	0x20006828
 8008b98:	0801496c 	.word	0x0801496c

08008b9c <dhcp_start>:
{
 8008b9c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	b950      	cbnz	r0, 8008bb8 <dhcp_start+0x1c>
 8008ba2:	4b24      	ldr	r3, [pc, #144]	; (8008c34 <dhcp_start+0x98>)
 8008ba4:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008ba8:	4923      	ldr	r1, [pc, #140]	; (8008c38 <dhcp_start+0x9c>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008baa:	4824      	ldr	r0, [pc, #144]	; (8008c3c <dhcp_start+0xa0>)
 8008bac:	f006 faee 	bl	800f18c <iprintf>
 8008bb0:	f06f 020f 	mvn.w	r2, #15
}
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8008bb8:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 8008bbc:	07da      	lsls	r2, r3, #31
 8008bbe:	d404      	bmi.n	8008bca <dhcp_start+0x2e>
 8008bc0:	4b1c      	ldr	r3, [pc, #112]	; (8008c34 <dhcp_start+0x98>)
 8008bc2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8008bc6:	491e      	ldr	r1, [pc, #120]	; (8008c40 <dhcp_start+0xa4>)
 8008bc8:	e7ef      	b.n	8008baa <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008bca:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  dhcp = netif_dhcp_data(netif);
 8008bcc:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8008bce:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8008bd2:	d202      	bcs.n	8008bda <dhcp_start+0x3e>
    return ERR_MEM;
 8008bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd8:	e7ec      	b.n	8008bb4 <dhcp_start+0x18>
  if (dhcp == NULL) {
 8008bda:	b9dd      	cbnz	r5, 8008c14 <dhcp_start+0x78>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8008bdc:	2034      	movs	r0, #52	; 0x34
 8008bde:	f001 fda1 	bl	800a724 <mem_malloc>
    if (dhcp == NULL) {
 8008be2:	4605      	mov	r5, r0
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0f5      	beq.n	8008bd4 <dhcp_start+0x38>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8008be8:	6260      	str	r0, [r4, #36]	; 0x24
  memset(dhcp, 0, sizeof(struct dhcp));
 8008bea:	2234      	movs	r2, #52	; 0x34
 8008bec:	2100      	movs	r1, #0
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f006 fac3 	bl	800f17a <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8008bf4:	f7ff fc28 	bl	8008448 <dhcp_inc_pcb_refcount>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d1ea      	bne.n	8008bd4 <dhcp_start+0x38>
  dhcp->pcb_allocated = 1;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8008c02:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8008c06:	075b      	lsls	r3, r3, #29
 8008c08:	d40a      	bmi.n	8008c20 <dhcp_start+0x84>
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8008c0a:	2102      	movs	r1, #2
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7ff f8a9 	bl	8007d64 <dhcp_set_state>
    return ERR_OK;
 8008c12:	e7cf      	b.n	8008bb4 <dhcp_start+0x18>
    if (dhcp->pcb_allocated != 0) {
 8008c14:	792b      	ldrb	r3, [r5, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0e7      	beq.n	8008bea <dhcp_start+0x4e>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8008c1a:	f7ff fc7f 	bl	800851c <dhcp_dec_pcb_refcount>
 8008c1e:	e7e4      	b.n	8008bea <dhcp_start+0x4e>
  result = dhcp_discover(netif);
 8008c20:	4620      	mov	r0, r4
 8008c22:	f7ff fb07 	bl	8008234 <dhcp_discover>
  if (result != ERR_OK) {
 8008c26:	4602      	mov	r2, r0
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d0c3      	beq.n	8008bb4 <dhcp_start+0x18>
    dhcp_release_and_stop(netif);
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	f7ff ff55 	bl	8008adc <dhcp_release_and_stop>
 8008c32:	e7cf      	b.n	8008bd4 <dhcp_start+0x38>
 8008c34:	0801e58e 	.word	0x0801e58e
 8008c38:	0801e7a9 	.word	0x0801e7a9
 8008c3c:	0801d8d1 	.word	0x0801d8d1
 8008c40:	0801e8c2 	.word	0x0801e8c2

08008c44 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8008c44:	4b57      	ldr	r3, [pc, #348]	; (8008da4 <dhcp_coarse_tmr+0x160>)
{
 8008c46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8008c4a:	681d      	ldr	r5, [r3, #0]
{
 8008c4c:	b085      	sub	sp, #20
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008c4e:	4e56      	ldr	r6, [pc, #344]	; (8008da8 <dhcp_coarse_tmr+0x164>)
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008c50:	4f56      	ldr	r7, [pc, #344]	; (8008dac <dhcp_coarse_tmr+0x168>)
 8008c52:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8008db0 <dhcp_coarse_tmr+0x16c>
  NETIF_FOREACH(netif) {
 8008c56:	b915      	cbnz	r5, 8008c5e <dhcp_coarse_tmr+0x1a>
}
 8008c58:	b005      	add	sp, #20
 8008c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008c5e:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8008c60:	b17c      	cbz	r4, 8008c82 <dhcp_coarse_tmr+0x3e>
 8008c62:	7963      	ldrb	r3, [r4, #5]
 8008c64:	b16b      	cbz	r3, 8008c82 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8008c66:	8aa1      	ldrh	r1, [r4, #20]
 8008c68:	b169      	cbz	r1, 8008c86 <dhcp_coarse_tmr+0x42>
 8008c6a:	8a62      	ldrh	r2, [r4, #18]
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	b292      	uxth	r2, r2
 8008c70:	4291      	cmp	r1, r2
 8008c72:	8262      	strh	r2, [r4, #18]
 8008c74:	d107      	bne.n	8008c86 <dhcp_coarse_tmr+0x42>
        dhcp_release_and_stop(netif);
 8008c76:	4628      	mov	r0, r5
 8008c78:	f7ff ff30 	bl	8008adc <dhcp_release_and_stop>
        dhcp_start(netif);
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	f7ff ff8d 	bl	8008b9c <dhcp_start>
  NETIF_FOREACH(netif) {
 8008c82:	682d      	ldr	r5, [r5, #0]
 8008c84:	e7e7      	b.n	8008c56 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8008c86:	8a22      	ldrh	r2, [r4, #16]
 8008c88:	2a00      	cmp	r2, #0
 8008c8a:	d072      	beq.n	8008d72 <dhcp_coarse_tmr+0x12e>
 8008c8c:	1e51      	subs	r1, r2, #1
 8008c8e:	2a01      	cmp	r2, #1
 8008c90:	8221      	strh	r1, [r4, #16]
 8008c92:	d16e      	bne.n	8008d72 <dhcp_coarse_tmr+0x12e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b09      	cmp	r3, #9
 8008c9a:	d8f2      	bhi.n	8008c82 <dhcp_coarse_tmr+0x3e>
 8008c9c:	f240 2919 	movw	r9, #537	; 0x219
 8008ca0:	fa29 f903 	lsr.w	r9, r9, r3
 8008ca4:	ea6f 0909 	mvn.w	r9, r9
 8008ca8:	f019 0901 	ands.w	r9, r9, #1
 8008cac:	d1e9      	bne.n	8008c82 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8008cae:	2104      	movs	r1, #4
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f7ff f857 	bl	8007d64 <dhcp_set_state>
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8008cb6:	f10d 030e 	add.w	r3, sp, #14
 8008cba:	2203      	movs	r2, #3
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7ff f8ce 	bl	8007e60 <dhcp_create_msg>
  if (p_out != NULL) {
 8008cc4:	4683      	mov	fp, r0
 8008cc6:	b3a0      	cbz	r0, 8008d32 <dhcp_coarse_tmr+0xee>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008cc8:	6843      	ldr	r3, [r0, #4]
 8008cca:	2239      	movs	r2, #57	; 0x39
 8008ccc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008cd0:	f103 0af0 	add.w	sl, r3, #240	; 0xf0
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	4651      	mov	r1, sl
 8008cd8:	f7ff f868 	bl	8007dac <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008cdc:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8008cde:	4651      	mov	r1, sl
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8008ce0:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008ce4:	f7ff f846 	bl	8007d74 <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008ce8:	2303      	movs	r3, #3
 8008cea:	2237      	movs	r2, #55	; 0x37
 8008cec:	4651      	mov	r1, sl
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8008cee:	f8ad 000e 	strh.w	r0, [sp, #14]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8008cf2:	f7ff f85b 	bl	8007dac <dhcp_option>
 8008cf6:	f8ad 000e 	strh.w	r0, [sp, #14]
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008cfa:	f816 2009 	ldrb.w	r2, [r6, r9]
 8008cfe:	f109 0901 	add.w	r9, r9, #1
 8008d02:	4651      	mov	r1, sl
 8008d04:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8008d08:	f7ff f86e 	bl	8007de8 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008d0c:	f1b9 0f03 	cmp.w	r9, #3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8008d10:	f8ad 000e 	strh.w	r0, [sp, #14]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8008d14:	d1f1      	bne.n	8008cfa <dhcp_coarse_tmr+0xb6>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8008d16:	465a      	mov	r2, fp
 8008d18:	4651      	mov	r1, sl
 8008d1a:	f7ff f933 	bl	8007f84 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8008d1e:	9500      	str	r5, [sp, #0]
 8008d20:	2343      	movs	r3, #67	; 0x43
 8008d22:	4642      	mov	r2, r8
 8008d24:	4659      	mov	r1, fp
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f005 ff60 	bl	800ebec <udp_sendto_if>
    pbuf_free(p_out);
 8008d2c:	4658      	mov	r0, fp
 8008d2e:	f002 f847 	bl	800adc0 <pbuf_free>
  if (dhcp->tries < 255) {
 8008d32:	79a3      	ldrb	r3, [r4, #6]
 8008d34:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8008d36:	bf1c      	itt	ne
 8008d38:	3301      	addne	r3, #1
 8008d3a:	71a3      	strbne	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008d3c:	79a3      	ldrb	r3, [r4, #6]
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	bf96      	itet	ls
 8008d42:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8008d46:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8008d4a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d4e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8008d52:	bf9c      	itt	ls
 8008d54:	00db      	lslls	r3, r3, #3
 8008d56:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d58:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8008d5c:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008d60:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8008d62:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008d64:	8aa3      	ldrh	r3, [r4, #20]
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	dd8a      	ble.n	8008c82 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8008d6c:	105b      	asrs	r3, r3, #1
 8008d6e:	8223      	strh	r3, [r4, #16]
 8008d70:	e787      	b.n	8008c82 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8008d72:	89e2      	ldrh	r2, [r4, #14]
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	d084      	beq.n	8008c82 <dhcp_coarse_tmr+0x3e>
 8008d78:	1e51      	subs	r1, r2, #1
 8008d7a:	2a01      	cmp	r2, #1
 8008d7c:	81e1      	strh	r1, [r4, #14]
 8008d7e:	d180      	bne.n	8008c82 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8008d80:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8008d84:	2a01      	cmp	r2, #1
 8008d86:	d002      	beq.n	8008d8e <dhcp_coarse_tmr+0x14a>
 8008d88:	2b0a      	cmp	r3, #10
 8008d8a:	f47f af7a 	bne.w	8008c82 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8008d8e:	4628      	mov	r0, r5
 8008d90:	f7ff fe22 	bl	80089d8 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	8a62      	ldrh	r2, [r4, #18]
 8008d98:	1a9b      	subs	r3, r3, r2
 8008d9a:	2b01      	cmp	r3, #1
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8008d9c:	bfc4      	itt	gt
 8008d9e:	105b      	asrgt	r3, r3, #1
 8008da0:	81e3      	strhgt	r3, [r4, #14]
 8008da2:	e76e      	b.n	8008c82 <dhcp_coarse_tmr+0x3e>
 8008da4:	20010dec 	.word	0x20010dec
 8008da8:	08014965 	.word	0x08014965
 8008dac:	20006828 	.word	0x20006828
 8008db0:	08014968 	.word	0x08014968

08008db4 <dhcp_fine_tmr>:
{
 8008db4:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8008db6:	4b1e      	ldr	r3, [pc, #120]	; (8008e30 <dhcp_fine_tmr+0x7c>)
        dhcp->request_timeout--;
 8008db8:	2500      	movs	r5, #0
  NETIF_FOREACH(netif) {
 8008dba:	681c      	ldr	r4, [r3, #0]
 8008dbc:	b904      	cbnz	r4, 8008dc0 <dhcp_fine_tmr+0xc>
}
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8008dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (dhcp != NULL) {
 8008dc2:	b123      	cbz	r3, 8008dce <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8008dc4:	891a      	ldrh	r2, [r3, #8]
 8008dc6:	2a01      	cmp	r2, #1
 8008dc8:	d903      	bls.n	8008dd2 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8008dce:	6824      	ldr	r4, [r4, #0]
 8008dd0:	e7f4      	b.n	8008dbc <dhcp_fine_tmr+0x8>
      } else if (dhcp->request_timeout == 1) {
 8008dd2:	d1fc      	bne.n	8008dce <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008dd4:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8008dd6:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8008dd8:	2a0c      	cmp	r2, #12
 8008dda:	d001      	beq.n	8008de0 <dhcp_fine_tmr+0x2c>
 8008ddc:	2a06      	cmp	r2, #6
 8008dde:	d103      	bne.n	8008de8 <dhcp_fine_tmr+0x34>
    dhcp_discover(netif);
 8008de0:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8008de2:	f7ff fa27 	bl	8008234 <dhcp_discover>
 8008de6:	e7f2      	b.n	8008dce <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8008de8:	2a01      	cmp	r2, #1
 8008dea:	d10c      	bne.n	8008e06 <dhcp_fine_tmr+0x52>
    if (dhcp->tries <= 5) {
 8008dec:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8008dee:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8008df0:	2b05      	cmp	r3, #5
 8008df2:	d802      	bhi.n	8008dfa <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8008df4:	f7ff f962 	bl	80080bc <dhcp_select>
 8008df8:	e7e9      	b.n	8008dce <dhcp_fine_tmr+0x1a>
      dhcp_release_and_stop(netif);
 8008dfa:	f7ff fe6f 	bl	8008adc <dhcp_release_and_stop>
      dhcp_start(netif);
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f7ff fecc 	bl	8008b9c <dhcp_start>
 8008e04:	e7e3      	b.n	8008dce <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8008e06:	2a08      	cmp	r2, #8
 8008e08:	d109      	bne.n	8008e1e <dhcp_fine_tmr+0x6a>
    if (dhcp->tries <= 1) {
 8008e0a:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8008e0c:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d802      	bhi.n	8008e18 <dhcp_fine_tmr+0x64>
      dhcp_check(netif);
 8008e12:	f7ff fa83 	bl	800831c <dhcp_check>
 8008e16:	e7da      	b.n	8008dce <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8008e18:	f7ff fa96 	bl	8008348 <dhcp_bind>
 8008e1c:	e7d7      	b.n	8008dce <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8008e1e:	2a03      	cmp	r2, #3
 8008e20:	d1d5      	bne.n	8008dce <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8008e22:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8008e24:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d8db      	bhi.n	8008de2 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8008e2a:	f7ff f8c3 	bl	8007fb4 <dhcp_reboot>
 8008e2e:	e7ce      	b.n	8008dce <dhcp_fine_tmr+0x1a>
 8008e30:	20010dec 	.word	0x20010dec

08008e34 <dhcp_stop>:
  dhcp_release_and_stop(netif);
 8008e34:	f7ff be52 	b.w	8008adc <dhcp_release_and_stop>

08008e38 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008e38:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008e3a:	2618      	movs	r6, #24
 8008e3c:	4c07      	ldr	r4, [pc, #28]	; (8008e5c <etharp_free_entry+0x24>)
{
 8008e3e:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 8008e40:	4346      	muls	r6, r0
 8008e42:	59a0      	ldr	r0, [r4, r6]
 8008e44:	b118      	cbz	r0, 8008e4e <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008e46:	f001 ffbb 	bl	800adc0 <pbuf_free>
    arp_table[i].q = NULL;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008e4e:	2318      	movs	r3, #24
 8008e50:	fb03 4405 	mla	r4, r3, r5, r4
 8008e54:	2300      	movs	r3, #0
 8008e56:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008e58:	bd70      	pop	{r4, r5, r6, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20006834 	.word	0x20006834

08008e60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8008e66:	f04f 0e0a 	mov.w	lr, #10
{
 8008e6a:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008e6c:	4699      	mov	r9, r3
 8008e6e:	469b      	mov	fp, r3
 8008e70:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 8008e72:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008e74:	4675      	mov	r5, lr
 8008e76:	46f0      	mov	r8, lr
{
 8008e78:	e9cd 2100 	strd	r2, r1, [sp]
 8008e7c:	4a3a      	ldr	r2, [pc, #232]	; (8008f68 <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008e7e:	2c0a      	cmp	r4, #10
 8008e80:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 8008e82:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008e86:	d11a      	bne.n	8008ebe <etharp_find_entry+0x5e>
 8008e88:	f1ba 0f00 	cmp.w	sl, #0
 8008e8c:	d05d      	beq.n	8008f4a <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008e8e:	b156      	cbz	r6, 8008ea6 <etharp_find_entry+0x46>
 8008e90:	6837      	ldr	r7, [r6, #0]
 8008e92:	6851      	ldr	r1, [r2, #4]
 8008e94:	428f      	cmp	r7, r1
 8008e96:	d106      	bne.n	8008ea6 <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	d048      	beq.n	8008f30 <etharp_find_entry+0xd0>
 8008e9e:	6891      	ldr	r1, [r2, #8]
 8008ea0:	9f00      	ldr	r7, [sp, #0]
 8008ea2:	42b9      	cmp	r1, r7
 8008ea4:	d044      	beq.n	8008f30 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008ea6:	f1ba 0f01 	cmp.w	sl, #1
 8008eaa:	8a51      	ldrh	r1, [r2, #18]
 8008eac:	d148      	bne.n	8008f40 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8008eae:	6817      	ldr	r7, [r2, #0]
 8008eb0:	2f00      	cmp	r7, #0
 8008eb2:	d040      	beq.n	8008f36 <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 8008eb4:	458c      	cmp	ip, r1
 8008eb6:	d805      	bhi.n	8008ec4 <etharp_find_entry+0x64>
 8008eb8:	468c      	mov	ip, r1
 8008eba:	4686      	mov	lr, r0
 8008ebc:	e002      	b.n	8008ec4 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8008ebe:	f1ba 0f00 	cmp.w	sl, #0
 8008ec2:	d1e4      	bne.n	8008e8e <etharp_find_entry+0x2e>
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	3218      	adds	r2, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008ec8:	2b0a      	cmp	r3, #10
 8008eca:	d1d8      	bne.n	8008e7e <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d143      	bne.n	8008f5a <etharp_find_entry+0xfa>
 8008ed2:	2c0a      	cmp	r4, #10
 8008ed4:	d111      	bne.n	8008efa <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8008ed6:	2d0a      	cmp	r5, #10
 8008ed8:	d039      	beq.n	8008f4e <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008eda:	2318      	movs	r3, #24
 8008edc:	4a22      	ldr	r2, [pc, #136]	; (8008f68 <etharp_find_entry+0x108>)
 8008ede:	436b      	muls	r3, r5
 8008ee0:	58d3      	ldr	r3, [r2, r3]
 8008ee2:	b133      	cbz	r3, 8008ef2 <etharp_find_entry+0x92>
 8008ee4:	4b21      	ldr	r3, [pc, #132]	; (8008f6c <etharp_find_entry+0x10c>)
 8008ee6:	f240 126d 	movw	r2, #365	; 0x16d
 8008eea:	4921      	ldr	r1, [pc, #132]	; (8008f70 <etharp_find_entry+0x110>)
 8008eec:	4821      	ldr	r0, [pc, #132]	; (8008f74 <etharp_find_entry+0x114>)
 8008eee:	f006 f94d 	bl	800f18c <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8008ef2:	462c      	mov	r4, r5
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f7ff ff9f 	bl	8008e38 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008efa:	4d1b      	ldr	r5, [pc, #108]	; (8008f68 <etharp_find_entry+0x108>)
 8008efc:	2318      	movs	r3, #24
 8008efe:	fb03 5304 	mla	r3, r3, r4, r5
 8008f02:	7d1b      	ldrb	r3, [r3, #20]
 8008f04:	b133      	cbz	r3, 8008f14 <etharp_find_entry+0xb4>
 8008f06:	4b19      	ldr	r3, [pc, #100]	; (8008f6c <etharp_find_entry+0x10c>)
 8008f08:	f240 1285 	movw	r2, #389	; 0x185
 8008f0c:	491a      	ldr	r1, [pc, #104]	; (8008f78 <etharp_find_entry+0x118>)
 8008f0e:	4819      	ldr	r0, [pc, #100]	; (8008f74 <etharp_find_entry+0x114>)
 8008f10:	f006 f93c 	bl	800f18c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008f14:	b126      	cbz	r6, 8008f20 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008f16:	2318      	movs	r3, #24
 8008f18:	6832      	ldr	r2, [r6, #0]
 8008f1a:	fb03 5304 	mla	r3, r3, r4, r5
 8008f1e:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8008f20:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8008f22:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8008f24:	fb03 5504 	mla	r5, r3, r4, r5
 8008f28:	2300      	movs	r3, #0
 8008f2a:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	60ab      	str	r3, [r5, #8]
}
 8008f30:	b003      	add	sp, #12
 8008f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8008f36:	458b      	cmp	fp, r1
 8008f38:	d8c4      	bhi.n	8008ec4 <etharp_find_entry+0x64>
 8008f3a:	468b      	mov	fp, r1
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	e7c1      	b.n	8008ec4 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8008f40:	4589      	cmp	r9, r1
 8008f42:	d8bf      	bhi.n	8008ec4 <etharp_find_entry+0x64>
 8008f44:	4689      	mov	r9, r1
 8008f46:	4605      	mov	r5, r0
 8008f48:	e7bc      	b.n	8008ec4 <etharp_find_entry+0x64>
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	e7ba      	b.n	8008ec4 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008f4e:	f1b8 0f0a 	cmp.w	r8, #10
 8008f52:	d105      	bne.n	8008f60 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008f54:	f1be 0f0a 	cmp.w	lr, #10
 8008f58:	d104      	bne.n	8008f64 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 8008f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5e:	e7e7      	b.n	8008f30 <etharp_find_entry+0xd0>
 8008f60:	4645      	mov	r5, r8
 8008f62:	e7c6      	b.n	8008ef2 <etharp_find_entry+0x92>
 8008f64:	4675      	mov	r5, lr
 8008f66:	e7c4      	b.n	8008ef2 <etharp_find_entry+0x92>
 8008f68:	20006834 	.word	0x20006834
 8008f6c:	0801e8e3 	.word	0x0801e8e3
 8008f70:	0801e957 	.word	0x0801e957
 8008f74:	0801d8d1 	.word	0x0801d8d1
 8008f78:	0801e96e 	.word	0x0801e96e

08008f7c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008f7c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f82:	4689      	mov	r9, r1
 8008f84:	4692      	mov	sl, r2
 8008f86:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008f88:	4607      	mov	r7, r0
 8008f8a:	b930      	cbnz	r0, 8008f9a <etharp_raw+0x1e>
 8008f8c:	4b2d      	ldr	r3, [pc, #180]	; (8009044 <etharp_raw+0xc8>)
 8008f8e:	f240 4257 	movw	r2, #1111	; 0x457
 8008f92:	492d      	ldr	r1, [pc, #180]	; (8009048 <etharp_raw+0xcc>)
 8008f94:	482d      	ldr	r0, [pc, #180]	; (800904c <etharp_raw+0xd0>)
 8008f96:	f006 f8f9 	bl	800f18c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008f9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008f9e:	211c      	movs	r1, #28
 8008fa0:	200e      	movs	r0, #14
 8008fa2:	f001 ff75 	bl	800ae90 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d047      	beq.n	800903c <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008fac:	8943      	ldrh	r3, [r0, #10]
 8008fae:	2b1b      	cmp	r3, #27
 8008fb0:	d806      	bhi.n	8008fc0 <etharp_raw+0x44>
 8008fb2:	4b24      	ldr	r3, [pc, #144]	; (8009044 <etharp_raw+0xc8>)
 8008fb4:	f240 4263 	movw	r2, #1123	; 0x463
 8008fb8:	4925      	ldr	r1, [pc, #148]	; (8009050 <etharp_raw+0xd4>)
 8008fba:	4824      	ldr	r0, [pc, #144]	; (800904c <etharp_raw+0xd0>)
 8008fbc:	f006 f8e6 	bl	800f18c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008fc0:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008fc2:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008fc6:	f001 f997 	bl	800a2f8 <lwip_htons>
 8008fca:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008fcc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008fd0:	2b06      	cmp	r3, #6
 8008fd2:	d006      	beq.n	8008fe2 <etharp_raw+0x66>
 8008fd4:	4b1b      	ldr	r3, [pc, #108]	; (8009044 <etharp_raw+0xc8>)
 8008fd6:	f240 426a 	movw	r2, #1130	; 0x46a
 8008fda:	491e      	ldr	r1, [pc, #120]	; (8009054 <etharp_raw+0xd8>)
 8008fdc:	481b      	ldr	r0, [pc, #108]	; (800904c <etharp_raw+0xd0>)
 8008fde:	f006 f8d5 	bl	800f18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008fe2:	f8d8 3000 	ldr.w	r3, [r8]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008fe6:	464a      	mov	r2, r9
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008fec:	60a3      	str	r3, [r4, #8]
 8008fee:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008ff2:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	f8c4 3012 	str.w	r3, [r4, #18]
 8008ffa:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008ffc:	2500      	movs	r5, #0
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008ffe:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8009000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8009008:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800900a:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800900c:	7025      	strb	r5, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800900e:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009010:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009012:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8009014:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009016:	2308      	movs	r3, #8
 8009018:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800901a:	2306      	movs	r3, #6
 800901c:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800901e:	2304      	movs	r3, #4
 8009020:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009022:	f640 0306 	movw	r3, #2054	; 0x806
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4653      	mov	r3, sl
 800902a:	f005 ff09 	bl	800ee40 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800902e:	4630      	mov	r0, r6
 8009030:	f001 fec6 	bl	800adc0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8009034:	4628      	mov	r0, r5
}
 8009036:	b002      	add	sp, #8
 8009038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e7f9      	b.n	8009036 <etharp_raw+0xba>
 8009042:	bf00      	nop
 8009044:	0801e8e3 	.word	0x0801e8e3
 8009048:	0801e7a9 	.word	0x0801e7a9
 800904c:	0801d8d1 	.word	0x0801d8d1
 8009050:	0801e997 	.word	0x0801e997
 8009054:	0801e9c8 	.word	0x0801e9c8

08009058 <etharp_cleanup_netif>:
{
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	4605      	mov	r5, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800905c:	2400      	movs	r4, #0
 800905e:	4e08      	ldr	r6, [pc, #32]	; (8009080 <etharp_cleanup_netif+0x28>)
 8009060:	2718      	movs	r7, #24
 8009062:	fb07 6304 	mla	r3, r7, r4, r6
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009066:	7d1a      	ldrb	r2, [r3, #20]
 8009068:	b12a      	cbz	r2, 8009076 <etharp_cleanup_netif+0x1e>
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	42ab      	cmp	r3, r5
 800906e:	d102      	bne.n	8009076 <etharp_cleanup_netif+0x1e>
      etharp_free_entry(i);
 8009070:	4620      	mov	r0, r4
 8009072:	f7ff fee1 	bl	8008e38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009076:	3401      	adds	r4, #1
 8009078:	2c0a      	cmp	r4, #10
 800907a:	d1f2      	bne.n	8009062 <etharp_cleanup_netif+0xa>
}
 800907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800907e:	bf00      	nop
 8009080:	20006834 	.word	0x20006834

08009084 <etharp_input>:
{
 8009084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009088:	4680      	mov	r8, r0
 800908a:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800908c:	460c      	mov	r4, r1
 800908e:	b949      	cbnz	r1, 80090a4 <etharp_input+0x20>
 8009090:	4b4a      	ldr	r3, [pc, #296]	; (80091bc <etharp_input+0x138>)
 8009092:	f240 228a 	movw	r2, #650	; 0x28a
 8009096:	494a      	ldr	r1, [pc, #296]	; (80091c0 <etharp_input+0x13c>)
 8009098:	484a      	ldr	r0, [pc, #296]	; (80091c4 <etharp_input+0x140>)
 800909a:	f006 f877 	bl	800f18c <iprintf>
}
 800909e:	b006      	add	sp, #24
 80090a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 80090a4:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80090a6:	8833      	ldrh	r3, [r6, #0]
 80090a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ac:	d108      	bne.n	80090c0 <etharp_input+0x3c>
 80090ae:	7933      	ldrb	r3, [r6, #4]
 80090b0:	2b06      	cmp	r3, #6
 80090b2:	d105      	bne.n	80090c0 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80090b4:	7973      	ldrb	r3, [r6, #5]
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	d102      	bne.n	80090c0 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80090ba:	8873      	ldrh	r3, [r6, #2]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d003      	beq.n	80090c8 <etharp_input+0x44>
  pbuf_free(p);
 80090c0:	4640      	mov	r0, r8
 80090c2:	f001 fe7d 	bl	800adc0 <pbuf_free>
 80090c6:	e7ea      	b.n	800909e <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80090c8:	f8d6 300e 	ldr.w	r3, [r6, #14]
 80090cc:	f106 0708 	add.w	r7, r6, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80090d0:	684d      	ldr	r5, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80090d2:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80090d4:	69b3      	ldr	r3, [r6, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80090d6:	b115      	cbz	r5, 80090de <etharp_input+0x5a>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80090d8:	429d      	cmp	r5, r3
 80090da:	d05a      	beq.n	8009192 <etharp_input+0x10e>
    for_us = 0;
 80090dc:	2500      	movs	r5, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80090de:	f04f 0a02 	mov.w	sl, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80090e2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d006      	beq.n	80090f8 <etharp_input+0x74>
 80090ea:	4b34      	ldr	r3, [pc, #208]	; (80091bc <etharp_input+0x138>)
 80090ec:	f240 12a9 	movw	r2, #425	; 0x1a9
 80090f0:	4935      	ldr	r1, [pc, #212]	; (80091c8 <etharp_input+0x144>)
 80090f2:	4834      	ldr	r0, [pc, #208]	; (80091c4 <etharp_input+0x140>)
 80090f4:	f006 f84a 	bl	800f18c <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 80090f8:	9805      	ldr	r0, [sp, #20]
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d03d      	beq.n	800917a <etharp_input+0xf6>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80090fe:	4621      	mov	r1, r4
 8009100:	f000 fcd5 	bl	8009aae <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8009104:	4681      	mov	r9, r0
 8009106:	bbc0      	cbnz	r0, 800917a <etharp_input+0xf6>
      ip4_addr_ismulticast(ipaddr)) {
 8009108:	9b05      	ldr	r3, [sp, #20]
 800910a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800910e:	2be0      	cmp	r3, #224	; 0xe0
 8009110:	d033      	beq.n	800917a <etharp_input+0xf6>
  i = etharp_find_entry(ipaddr, flags, netif);
 8009112:	4622      	mov	r2, r4
 8009114:	4651      	mov	r1, sl
 8009116:	a805      	add	r0, sp, #20
 8009118:	f7ff fea2 	bl	8008e60 <etharp_find_entry>
  if (i < 0) {
 800911c:	2800      	cmp	r0, #0
 800911e:	db2c      	blt.n	800917a <etharp_input+0xf6>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009120:	2218      	movs	r2, #24
 8009122:	4b2a      	ldr	r3, [pc, #168]	; (80091cc <etharp_input+0x148>)
 8009124:	f04f 0e02 	mov.w	lr, #2
 8009128:	fb02 f100 	mul.w	r1, r2, r0
 800912c:	eb03 0c01 	add.w	ip, r3, r1
 8009130:	f88c e014 	strb.w	lr, [ip, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8009134:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8009138:	f8cc 4008 	str.w	r4, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800913c:	fb10 e202 	smlabb	r2, r0, r2, lr
 8009140:	6838      	ldr	r0, [r7, #0]
 8009142:	eb03 0e02 	add.w	lr, r3, r2
 8009146:	5098      	str	r0, [r3, r2]
 8009148:	88ba      	ldrh	r2, [r7, #4]
 800914a:	f8ae 2004 	strh.w	r2, [lr, #4]
  if (arp_table[i].q != NULL) {
 800914e:	f853 a001 	ldr.w	sl, [r3, r1]
  arp_table[i].ctime = 0;
 8009152:	f8ac 9012 	strh.w	r9, [ip, #18]
  if (arp_table[i].q != NULL) {
 8009156:	f1ba 0f00 	cmp.w	sl, #0
 800915a:	d00e      	beq.n	800917a <etharp_input+0xf6>
    arp_table[i].q = NULL;
 800915c:	f843 9001 	str.w	r9, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009160:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009164:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 8009168:	4651      	mov	r1, sl
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	4620      	mov	r0, r4
 800916e:	463b      	mov	r3, r7
 8009170:	f005 fe66 	bl	800ee40 <ethernet_output>
    pbuf_free(p);
 8009174:	4650      	mov	r0, sl
 8009176:	f001 fe23 	bl	800adc0 <pbuf_free>
  switch (hdr->opcode) {
 800917a:	88f3      	ldrh	r3, [r6, #6]
 800917c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009180:	d00a      	beq.n	8009198 <etharp_input+0x114>
 8009182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009186:	d19b      	bne.n	80090c0 <etharp_input+0x3c>
      dhcp_arp_reply(netif, &sipaddr);
 8009188:	a905      	add	r1, sp, #20
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fbc4 	bl	8008918 <dhcp_arp_reply>
      break;
 8009190:	e796      	b.n	80090c0 <etharp_input+0x3c>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009192:	2501      	movs	r5, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009194:	46aa      	mov	sl, r5
 8009196:	e7a4      	b.n	80090e2 <etharp_input+0x5e>
      if (for_us) {
 8009198:	2d00      	cmp	r5, #0
 800919a:	d091      	beq.n	80090c0 <etharp_input+0x3c>
        etharp_raw(netif,
 800919c:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800919e:	f104 032a 	add.w	r3, r4, #42	; 0x2a
        etharp_raw(netif,
 80091a2:	4620      	mov	r0, r4
 80091a4:	9203      	str	r2, [sp, #12]
 80091a6:	aa05      	add	r2, sp, #20
 80091a8:	4619      	mov	r1, r3
 80091aa:	e9cd 7201 	strd	r7, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80091ae:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 80091b0:	9200      	str	r2, [sp, #0]
 80091b2:	463a      	mov	r2, r7
 80091b4:	f7ff fee2 	bl	8008f7c <etharp_raw>
 80091b8:	e782      	b.n	80090c0 <etharp_input+0x3c>
 80091ba:	bf00      	nop
 80091bc:	0801e8e3 	.word	0x0801e8e3
 80091c0:	0801e7a9 	.word	0x0801e7a9
 80091c4:	0801d8d1 	.word	0x0801d8d1
 80091c8:	0801ea4a 	.word	0x0801ea4a
 80091cc:	20006834 	.word	0x20006834

080091d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80091d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091d2:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091d4:	2401      	movs	r4, #1
 80091d6:	f100 032a 	add.w	r3, r0, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80091da:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091dc:	e9cd 1402 	strd	r1, r4, [sp, #8]
 80091e0:	4904      	ldr	r1, [pc, #16]	; (80091f4 <etharp_request+0x24>)
 80091e2:	9200      	str	r2, [sp, #0]
 80091e4:	9101      	str	r1, [sp, #4]
 80091e6:	4619      	mov	r1, r3
 80091e8:	4a03      	ldr	r2, [pc, #12]	; (80091f8 <etharp_request+0x28>)
 80091ea:	f7ff fec7 	bl	8008f7c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80091ee:	b004      	add	sp, #16
 80091f0:	bd10      	pop	{r4, pc}
 80091f2:	bf00      	nop
 80091f4:	08014ac2 	.word	0x08014ac2
 80091f8:	08014abc 	.word	0x08014abc

080091fc <etharp_tmr>:
{
 80091fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009200:	4c15      	ldr	r4, [pc, #84]	; (8009258 <etharp_tmr+0x5c>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009202:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009204:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009206:	2704      	movs	r7, #4
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009208:	f1a4 0804 	sub.w	r8, r4, #4
    u8_t state = arp_table[i].state;
 800920c:	7b22      	ldrb	r2, [r4, #12]
    if (state != ETHARP_STATE_EMPTY
 800920e:	b16a      	cbz	r2, 800922c <etharp_tmr+0x30>
      arp_table[i].ctime++;
 8009210:	8963      	ldrh	r3, [r4, #10]
 8009212:	3301      	adds	r3, #1
 8009214:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009216:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800921a:	8163      	strh	r3, [r4, #10]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800921c:	d203      	bcs.n	8009226 <etharp_tmr+0x2a>
 800921e:	2a01      	cmp	r2, #1
 8009220:	d10a      	bne.n	8009238 <etharp_tmr+0x3c>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009222:	2b04      	cmp	r3, #4
 8009224:	d90c      	bls.n	8009240 <etharp_tmr+0x44>
        etharp_free_entry(i);
 8009226:	4628      	mov	r0, r5
 8009228:	f7ff fe06 	bl	8008e38 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800922c:	3501      	adds	r5, #1
 800922e:	3418      	adds	r4, #24
 8009230:	2d0a      	cmp	r5, #10
 8009232:	d1eb      	bne.n	800920c <etharp_tmr+0x10>
}
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009238:	2a03      	cmp	r2, #3
 800923a:	d108      	bne.n	800924e <etharp_tmr+0x52>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800923c:	7327      	strb	r7, [r4, #12]
 800923e:	e7f5      	b.n	800922c <etharp_tmr+0x30>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8009240:	2118      	movs	r1, #24
 8009242:	6820      	ldr	r0, [r4, #0]
 8009244:	fb01 8105 	mla	r1, r1, r5, r8
 8009248:	f7ff ffc2 	bl	80091d0 <etharp_request>
 800924c:	e7ee      	b.n	800922c <etharp_tmr+0x30>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800924e:	2a04      	cmp	r2, #4
 8009250:	d1ec      	bne.n	800922c <etharp_tmr+0x30>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009252:	7326      	strb	r6, [r4, #12]
 8009254:	e7ea      	b.n	800922c <etharp_tmr+0x30>
 8009256:	bf00      	nop
 8009258:	2000683c 	.word	0x2000683c

0800925c <etharp_output_to_arp_index>:
{
 800925c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009260:	2318      	movs	r3, #24
 8009262:	4d25      	ldr	r5, [pc, #148]	; (80092f8 <etharp_output_to_arp_index+0x9c>)
{
 8009264:	b085      	sub	sp, #20
 8009266:	4606      	mov	r6, r0
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009268:	fb03 5302 	mla	r3, r3, r2, r5
{
 800926c:	4689      	mov	r9, r1
 800926e:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009270:	7d1b      	ldrb	r3, [r3, #20]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d806      	bhi.n	8009284 <etharp_output_to_arp_index+0x28>
 8009276:	4b21      	ldr	r3, [pc, #132]	; (80092fc <etharp_output_to_arp_index+0xa0>)
 8009278:	f240 22ef 	movw	r2, #751	; 0x2ef
 800927c:	4920      	ldr	r1, [pc, #128]	; (8009300 <etharp_output_to_arp_index+0xa4>)
 800927e:	4821      	ldr	r0, [pc, #132]	; (8009304 <etharp_output_to_arp_index+0xa8>)
 8009280:	f005 ff84 	bl	800f18c <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009284:	2318      	movs	r3, #24
 8009286:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800928a:	f106 082a 	add.w	r8, r6, #42	; 0x2a
 800928e:	fb03 5404 	mla	r4, r3, r4, r5
 8009292:	00c9      	lsls	r1, r1, #3
 8009294:	7d23      	ldrb	r3, [r4, #20]
 8009296:	f101 070c 	add.w	r7, r1, #12
 800929a:	2b02      	cmp	r3, #2
 800929c:	442f      	add	r7, r5
 800929e:	d10b      	bne.n	80092b8 <etharp_output_to_arp_index+0x5c>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80092a0:	8a63      	ldrh	r3, [r4, #18]
 80092a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80092a6:	d913      	bls.n	80092d0 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80092a8:	3104      	adds	r1, #4
 80092aa:	4630      	mov	r0, r6
 80092ac:	4429      	add	r1, r5
 80092ae:	f7ff ff8f 	bl	80091d0 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80092b2:	b908      	cbnz	r0, 80092b8 <etharp_output_to_arp_index+0x5c>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80092b4:	2303      	movs	r3, #3
 80092b6:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80092b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092bc:	4642      	mov	r2, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	4630      	mov	r0, r6
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	463b      	mov	r3, r7
 80092c6:	f005 fdbb 	bl	800ee40 <ethernet_output>
}
 80092ca:	b005      	add	sp, #20
 80092cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80092d0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80092d4:	d3f0      	bcc.n	80092b8 <etharp_output_to_arp_index+0x5c>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092d6:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80092d8:	3104      	adds	r1, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092da:	463a      	mov	r2, r7
 80092dc:	4630      	mov	r0, r6
 80092de:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80092e0:	4429      	add	r1, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092e2:	4b09      	ldr	r3, [pc, #36]	; (8009308 <etharp_output_to_arp_index+0xac>)
 80092e4:	9102      	str	r1, [sp, #8]
 80092e6:	4641      	mov	r1, r8
 80092e8:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80092ea:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	4643      	mov	r3, r8
 80092f0:	f7ff fe44 	bl	8008f7c <etharp_raw>
 80092f4:	e7dd      	b.n	80092b2 <etharp_output_to_arp_index+0x56>
 80092f6:	bf00      	nop
 80092f8:	20006834 	.word	0x20006834
 80092fc:	0801e8e3 	.word	0x0801e8e3
 8009300:	0801ea6e 	.word	0x0801ea6e
 8009304:	0801d8d1 	.word	0x0801d8d1
 8009308:	08014ac2 	.word	0x08014ac2

0800930c <etharp_query>:
{
 800930c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	4689      	mov	r9, r1
 8009312:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009314:	4601      	mov	r1, r0
{
 8009316:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009318:	f8d9 0000 	ldr.w	r0, [r9]
 800931c:	f000 fbc7 	bl	8009aae <ip4_addr_isbroadcast_u32>
 8009320:	2800      	cmp	r0, #0
 8009322:	f040 8081 	bne.w	8009428 <etharp_query+0x11c>
      ip4_addr_ismulticast(ipaddr) ||
 8009326:	f8d9 3000 	ldr.w	r3, [r9]
 800932a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800932e:	2ae0      	cmp	r2, #224	; 0xe0
 8009330:	d07a      	beq.n	8009428 <etharp_query+0x11c>
      ip4_addr_isany(ipaddr)) {
 8009332:	2b00      	cmp	r3, #0
 8009334:	d078      	beq.n	8009428 <etharp_query+0x11c>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009336:	463a      	mov	r2, r7
 8009338:	2101      	movs	r1, #1
 800933a:	4648      	mov	r0, r9
 800933c:	f7ff fd90 	bl	8008e60 <etharp_find_entry>
  if (i_err < 0) {
 8009340:	1e04      	subs	r4, r0, #0
 8009342:	da03      	bge.n	800934c <etharp_query+0x40>
    return (err_t)i_err;
 8009344:	b260      	sxtb	r0, r4
}
 8009346:	b002      	add	sp, #8
 8009348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800934c:	2c7e      	cmp	r4, #126	; 0x7e
 800934e:	dd06      	ble.n	800935e <etharp_query+0x52>
 8009350:	4b3e      	ldr	r3, [pc, #248]	; (800944c <etharp_query+0x140>)
 8009352:	f240 32c1 	movw	r2, #961	; 0x3c1
 8009356:	493e      	ldr	r1, [pc, #248]	; (8009450 <etharp_query+0x144>)
 8009358:	483e      	ldr	r0, [pc, #248]	; (8009454 <etharp_query+0x148>)
 800935a:	f005 ff17 	bl	800f18c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800935e:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009360:	4e3d      	ldr	r6, [pc, #244]	; (8009458 <etharp_query+0x14c>)
 8009362:	2218      	movs	r2, #24
 8009364:	fb02 6204 	mla	r2, r2, r4, r6
 8009368:	7d13      	ldrb	r3, [r2, #20]
 800936a:	bb83      	cbnz	r3, 80093ce <etharp_query+0xc2>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800936c:	f04f 0801 	mov.w	r8, #1
    arp_table[i].netif = netif;
 8009370:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009372:	f882 8014 	strb.w	r8, [r2, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009376:	2318      	movs	r3, #24
 8009378:	fb03 6304 	mla	r3, r3, r4, r6
 800937c:	7d1b      	ldrb	r3, [r3, #20]
 800937e:	b933      	cbnz	r3, 800938e <etharp_query+0x82>
 8009380:	4b32      	ldr	r3, [pc, #200]	; (800944c <etharp_query+0x140>)
 8009382:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009386:	4935      	ldr	r1, [pc, #212]	; (800945c <etharp_query+0x150>)
 8009388:	4832      	ldr	r0, [pc, #200]	; (8009454 <etharp_query+0x148>)
 800938a:	f005 feff 	bl	800f18c <iprintf>
  if (is_new_entry || (q == NULL)) {
 800938e:	f1b8 0f00 	cmp.w	r8, #0
 8009392:	d101      	bne.n	8009398 <etharp_query+0x8c>
 8009394:	2d00      	cmp	r5, #0
 8009396:	d14a      	bne.n	800942e <etharp_query+0x122>
    result = etharp_request(netif, ipaddr);
 8009398:	4649      	mov	r1, r9
 800939a:	4638      	mov	r0, r7
 800939c:	f7ff ff18 	bl	80091d0 <etharp_request>
    if (q == NULL) {
 80093a0:	2d00      	cmp	r5, #0
 80093a2:	d0d0      	beq.n	8009346 <etharp_query+0x3a>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80093a4:	2318      	movs	r3, #24
 80093a6:	fb03 6204 	mla	r2, r3, r4, r6
 80093aa:	7d12      	ldrb	r2, [r2, #20]
 80093ac:	2a01      	cmp	r2, #1
 80093ae:	d911      	bls.n	80093d4 <etharp_query+0xc8>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80093b0:	fb03 6304 	mla	r3, r3, r4, r6
 80093b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b8:	4629      	mov	r1, r5
 80093ba:	4638      	mov	r0, r7
 80093bc:	9200      	str	r2, [sp, #0]
 80093be:	330c      	adds	r3, #12
 80093c0:	f107 022a 	add.w	r2, r7, #42	; 0x2a
    ETHARP_SET_ADDRHINT(netif, i);
 80093c4:	f886 40f0 	strb.w	r4, [r6, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80093c8:	f005 fd3a 	bl	800ee40 <ethernet_output>
 80093cc:	e7bb      	b.n	8009346 <etharp_query+0x3a>
  int is_new_entry = 0;
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	e7d0      	b.n	8009376 <etharp_query+0x6a>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80093d4:	d1b7      	bne.n	8009346 <etharp_query+0x3a>
 80093d6:	462f      	mov	r7, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80093d8:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800944c <etharp_query+0x140>
 80093dc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8009460 <etharp_query+0x154>
 80093e0:	f8df a070 	ldr.w	sl, [pc, #112]	; 8009454 <etharp_query+0x148>
 80093e4:	897a      	ldrh	r2, [r7, #10]
 80093e6:	893b      	ldrh	r3, [r7, #8]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d108      	bne.n	80093fe <etharp_query+0xf2>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	b133      	cbz	r3, 80093fe <etharp_query+0xf2>
 80093f0:	4643      	mov	r3, r8
 80093f2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80093f6:	4649      	mov	r1, r9
 80093f8:	4650      	mov	r0, sl
 80093fa:	f005 fec7 	bl	800f18c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80093fe:	7b3b      	ldrb	r3, [r7, #12]
 8009400:	065b      	lsls	r3, r3, #25
 8009402:	d417      	bmi.n	8009434 <etharp_query+0x128>
      p = p->next;
 8009404:	683f      	ldr	r7, [r7, #0]
    while (p) {
 8009406:	2f00      	cmp	r7, #0
 8009408:	d1ec      	bne.n	80093e4 <etharp_query+0xd8>
      pbuf_ref(p);
 800940a:	4628      	mov	r0, r5
 800940c:	f001 fe1e 	bl	800b04c <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8009410:	2318      	movs	r3, #24
 8009412:	fb03 f204 	mul.w	r2, r3, r4
 8009416:	461f      	mov	r7, r3
 8009418:	58b0      	ldr	r0, [r6, r2]
 800941a:	b108      	cbz	r0, 8009420 <etharp_query+0x114>
        pbuf_free(arp_table[i].q);
 800941c:	f001 fcd0 	bl	800adc0 <pbuf_free>
      arp_table[i].q = p;
 8009420:	437c      	muls	r4, r7
      result = ERR_OK;
 8009422:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8009424:	5135      	str	r5, [r6, r4]
 8009426:	e78e      	b.n	8009346 <etharp_query+0x3a>
    return ERR_ARG;
 8009428:	f06f 000f 	mvn.w	r0, #15
 800942c:	e78b      	b.n	8009346 <etharp_query+0x3a>
  err_t result = ERR_MEM;
 800942e:	f04f 30ff 	mov.w	r0, #4294967295
 8009432:	e7b7      	b.n	80093a4 <etharp_query+0x98>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009434:	462a      	mov	r2, r5
 8009436:	f44f 7120 	mov.w	r1, #640	; 0x280
 800943a:	200e      	movs	r0, #14
 800943c:	f001 ff2e 	bl	800b29c <pbuf_clone>
    if (p != NULL) {
 8009440:	4605      	mov	r5, r0
 8009442:	2800      	cmp	r0, #0
 8009444:	d1e4      	bne.n	8009410 <etharp_query+0x104>
      result = ERR_MEM;
 8009446:	f04f 30ff 	mov.w	r0, #4294967295
 800944a:	e77c      	b.n	8009346 <etharp_query+0x3a>
 800944c:	0801e8e3 	.word	0x0801e8e3
 8009450:	0801ea9e 	.word	0x0801ea9e
 8009454:	0801d8d1 	.word	0x0801d8d1
 8009458:	20006834 	.word	0x20006834
 800945c:	0801eaac 	.word	0x0801eaac
 8009460:	0801ead4 	.word	0x0801ead4

08009464 <etharp_output>:
{
 8009464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009466:	460e      	mov	r6, r1
 8009468:	b085      	sub	sp, #20
 800946a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800946c:	4604      	mov	r4, r0
 800946e:	b930      	cbnz	r0, 800947e <etharp_output+0x1a>
 8009470:	4b41      	ldr	r3, [pc, #260]	; (8009578 <etharp_output+0x114>)
 8009472:	f240 321e 	movw	r2, #798	; 0x31e
 8009476:	4941      	ldr	r1, [pc, #260]	; (800957c <etharp_output+0x118>)
 8009478:	4841      	ldr	r0, [pc, #260]	; (8009580 <etharp_output+0x11c>)
 800947a:	f005 fe87 	bl	800f18c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800947e:	b936      	cbnz	r6, 800948e <etharp_output+0x2a>
 8009480:	4b3d      	ldr	r3, [pc, #244]	; (8009578 <etharp_output+0x114>)
 8009482:	f240 321f 	movw	r2, #799	; 0x31f
 8009486:	493f      	ldr	r1, [pc, #252]	; (8009584 <etharp_output+0x120>)
 8009488:	483d      	ldr	r0, [pc, #244]	; (8009580 <etharp_output+0x11c>)
 800948a:	f005 fe7f 	bl	800f18c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800948e:	b935      	cbnz	r5, 800949e <etharp_output+0x3a>
 8009490:	4b39      	ldr	r3, [pc, #228]	; (8009578 <etharp_output+0x114>)
 8009492:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009496:	493c      	ldr	r1, [pc, #240]	; (8009588 <etharp_output+0x124>)
 8009498:	4839      	ldr	r0, [pc, #228]	; (8009580 <etharp_output+0x11c>)
 800949a:	f005 fe77 	bl	800f18c <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800949e:	4621      	mov	r1, r4
 80094a0:	6828      	ldr	r0, [r5, #0]
 80094a2:	f000 fb04 	bl	8009aae <ip4_addr_isbroadcast_u32>
 80094a6:	2800      	cmp	r0, #0
 80094a8:	d160      	bne.n	800956c <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80094aa:	682b      	ldr	r3, [r5, #0]
 80094ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80094b0:	2ae0      	cmp	r2, #224	; 0xe0
 80094b2:	d11b      	bne.n	80094ec <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80094ba:	235e      	movs	r3, #94	; 0x5e
 80094bc:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80094c0:	786b      	ldrb	r3, [r5, #1]
 80094c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c6:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80094ca:	78ab      	ldrb	r3, [r5, #2]
 80094cc:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80094d0:	78eb      	ldrb	r3, [r5, #3]
 80094d2:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 80094d6:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80094d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094dc:	4631      	mov	r1, r6
 80094de:	4620      	mov	r0, r4
 80094e0:	9200      	str	r2, [sp, #0]
 80094e2:	f104 022a 	add.w	r2, r4, #42	; 0x2a
 80094e6:	f005 fcab 	bl	800ee40 <ethernet_output>
 80094ea:	e023      	b.n	8009534 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80094ec:	6862      	ldr	r2, [r4, #4]
 80094ee:	68a1      	ldr	r1, [r4, #8]
 80094f0:	405a      	eors	r2, r3
 80094f2:	420a      	tst	r2, r1
 80094f4:	d009      	beq.n	800950a <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 80094f6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80094f8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d004      	beq.n	800950a <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009500:	68e3      	ldr	r3, [r4, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d034      	beq.n	8009570 <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 8009506:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800950a:	4920      	ldr	r1, [pc, #128]	; (800958c <etharp_output+0x128>)
 800950c:	2318      	movs	r3, #24
 800950e:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8009512:	468c      	mov	ip, r1
 8009514:	fb03 1302 	mla	r3, r3, r2, r1
 8009518:	7d18      	ldrb	r0, [r3, #20]
 800951a:	2801      	cmp	r0, #1
 800951c:	d90c      	bls.n	8009538 <etharp_output+0xd4>
 800951e:	6899      	ldr	r1, [r3, #8]
 8009520:	42a1      	cmp	r1, r4
 8009522:	d109      	bne.n	8009538 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009524:	6829      	ldr	r1, [r5, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4299      	cmp	r1, r3
 800952a:	d105      	bne.n	8009538 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 800952c:	4631      	mov	r1, r6
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff fe94 	bl	800925c <etharp_output_to_arp_index>
}
 8009534:	b005      	add	sp, #20
 8009536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009538:	4b15      	ldr	r3, [pc, #84]	; (8009590 <etharp_output+0x12c>)
{
 800953a:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800953c:	7c1f      	ldrb	r7, [r3, #16]
 800953e:	b2ca      	uxtb	r2, r1
 8009540:	2f01      	cmp	r7, #1
 8009542:	d909      	bls.n	8009558 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8009544:	685f      	ldr	r7, [r3, #4]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009546:	42a7      	cmp	r7, r4
 8009548:	d106      	bne.n	8009558 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 800954a:	681f      	ldr	r7, [r3, #0]
 800954c:	6828      	ldr	r0, [r5, #0]
 800954e:	42b8      	cmp	r0, r7
 8009550:	d102      	bne.n	8009558 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 8009552:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 8009556:	e7e9      	b.n	800952c <etharp_output+0xc8>
 8009558:	3101      	adds	r1, #1
 800955a:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800955c:	290a      	cmp	r1, #10
 800955e:	d1ed      	bne.n	800953c <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8009560:	4632      	mov	r2, r6
 8009562:	4629      	mov	r1, r5
 8009564:	4620      	mov	r0, r4
 8009566:	f7ff fed1 	bl	800930c <etharp_query>
 800956a:	e7e3      	b.n	8009534 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 800956c:	4b09      	ldr	r3, [pc, #36]	; (8009594 <etharp_output+0x130>)
 800956e:	e7b3      	b.n	80094d8 <etharp_output+0x74>
            return ERR_RTE;
 8009570:	f06f 0003 	mvn.w	r0, #3
 8009574:	e7de      	b.n	8009534 <etharp_output+0xd0>
 8009576:	bf00      	nop
 8009578:	0801e8e3 	.word	0x0801e8e3
 800957c:	0801e7a9 	.word	0x0801e7a9
 8009580:	0801d8d1 	.word	0x0801d8d1
 8009584:	0801f54f 	.word	0x0801f54f
 8009588:	0801ea2b 	.word	0x0801ea2b
 800958c:	20006834 	.word	0x20006834
 8009590:	20006838 	.word	0x20006838
 8009594:	08014abc 	.word	0x08014abc

08009598 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8009598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	b087      	sub	sp, #28
 800959e:	460f      	mov	r7, r1
 80095a0:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80095a2:	2124      	movs	r1, #36	; 0x24
 80095a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80095a8:	2022      	movs	r0, #34	; 0x22
 80095aa:	f001 fc71 	bl	800ae90 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80095ae:	4605      	mov	r5, r0
 80095b0:	b3a0      	cbz	r0, 800961c <icmp_send_response.isra.0+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80095b2:	8943      	ldrh	r3, [r0, #10]
 80095b4:	2b23      	cmp	r3, #35	; 0x23
 80095b6:	d806      	bhi.n	80095c6 <icmp_send_response.isra.0+0x2e>
 80095b8:	4b19      	ldr	r3, [pc, #100]	; (8009620 <icmp_send_response.isra.0+0x88>)
 80095ba:	f240 1269 	movw	r2, #361	; 0x169
 80095be:	4919      	ldr	r1, [pc, #100]	; (8009624 <icmp_send_response.isra.0+0x8c>)
 80095c0:	4819      	ldr	r0, [pc, #100]	; (8009628 <icmp_send_response.isra.0+0x90>)
 80095c2:	f005 fde3 	bl	800f18c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80095c6:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 80095c8:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80095ca:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80095cc:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 80095d0:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80095d2:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 80095d6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 80095d8:	71a3      	strb	r3, [r4, #6]
 80095da:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80095dc:	4613      	mov	r3, r2
  icmphdr->type = type;
 80095de:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 80095e0:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80095e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80095e6:	4283      	cmp	r3, r0
 80095e8:	f841 6b04 	str.w	r6, [r1], #4
 80095ec:	d1f9      	bne.n	80095e2 <icmp_send_response.isra.0+0x4a>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80095ee:	ae06      	add	r6, sp, #24
 80095f0:	68d3      	ldr	r3, [r2, #12]
 80095f2:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 f8da 	bl	80097b0 <ip4_route>
#endif
  if (netif != NULL) {
 80095fc:	b158      	cbz	r0, 8009616 <icmp_send_response.isra.0+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80095fe:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009600:	2301      	movs	r3, #1
 8009602:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8009604:	70a1      	strb	r1, [r4, #2]
 8009606:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009608:	9002      	str	r0, [sp, #8]
 800960a:	4628      	mov	r0, r5
 800960c:	e9cd 1300 	strd	r1, r3, [sp]
 8009610:	23ff      	movs	r3, #255	; 0xff
 8009612:	f000 fa3b 	bl	8009a8c <ip4_output_if>
  }
  pbuf_free(q);
 8009616:	4628      	mov	r0, r5
 8009618:	f001 fbd2 	bl	800adc0 <pbuf_free>
}
 800961c:	b007      	add	sp, #28
 800961e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009620:	0801eaee 	.word	0x0801eaee
 8009624:	0801eb60 	.word	0x0801eb60
 8009628:	0801d8d1 	.word	0x0801d8d1

0800962c <icmp_input>:
  iphdr_in = ip4_current_header();
 800962c:	4b48      	ldr	r3, [pc, #288]	; (8009750 <icmp_input+0x124>)
{
 800962e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8009632:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8009636:	b085      	sub	sp, #20
 8009638:	4604      	mov	r4, r0
 800963a:	4688      	mov	r8, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 800963c:	f899 5000 	ldrb.w	r5, [r9]
 8009640:	461f      	mov	r7, r3
 8009642:	f005 050f 	and.w	r5, r5, #15
 8009646:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8009648:	2d13      	cmp	r5, #19
 800964a:	d916      	bls.n	800967a <icmp_input+0x4e>
  if (p->len < sizeof(u16_t) * 2) {
 800964c:	8942      	ldrh	r2, [r0, #10]
 800964e:	2a03      	cmp	r2, #3
 8009650:	d913      	bls.n	800967a <icmp_input+0x4e>
  type = *((u8_t *)p->payload);
 8009652:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	2a08      	cmp	r2, #8
 8009658:	d10f      	bne.n	800967a <icmp_input+0x4e>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800965a:	6958      	ldr	r0, [r3, #20]
 800965c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8009660:	2ae0      	cmp	r2, #224	; 0xe0
 8009662:	d00a      	beq.n	800967a <icmp_input+0x4e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009664:	6819      	ldr	r1, [r3, #0]
 8009666:	f000 fa22 	bl	8009aae <ip4_addr_isbroadcast_u32>
 800966a:	b930      	cbnz	r0, 800967a <icmp_input+0x4e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800966c:	8923      	ldrh	r3, [r4, #8]
 800966e:	2b07      	cmp	r3, #7
 8009670:	d903      	bls.n	800967a <icmp_input+0x4e>
        if (inet_chksum_pbuf(p) != 0) {
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fe72 	bl	800a35c <inet_chksum_pbuf>
 8009678:	b128      	cbz	r0, 8009686 <icmp_input+0x5a>
  pbuf_free(p);
 800967a:	4620      	mov	r0, r4
}
 800967c:	b005      	add	sp, #20
 800967e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8009682:	f001 bb9d 	b.w	800adc0 <pbuf_free>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009686:	f105 060e 	add.w	r6, r5, #14
 800968a:	4620      	mov	r0, r4
 800968c:	4631      	mov	r1, r6
 800968e:	f001 fb60 	bl	800ad52 <pbuf_add_header>
 8009692:	2800      	cmp	r0, #0
 8009694:	d04e      	beq.n	8009734 <icmp_input+0x108>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009696:	8923      	ldrh	r3, [r4, #8]
 8009698:	1959      	adds	r1, r3, r5
 800969a:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 800969c:	428b      	cmp	r3, r1
 800969e:	d8ec      	bhi.n	800967a <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80096a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80096a4:	200e      	movs	r0, #14
 80096a6:	f001 fbf3 	bl	800ae90 <pbuf_alloc>
        if (r == NULL) {
 80096aa:	4606      	mov	r6, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d0e4      	beq.n	800967a <icmp_input+0x4e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80096b0:	8942      	ldrh	r2, [r0, #10]
 80096b2:	f105 0308 	add.w	r3, r5, #8
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d203      	bcs.n	80096c2 <icmp_input+0x96>
          pbuf_free(r);
 80096ba:	4630      	mov	r0, r6
 80096bc:	f001 fb80 	bl	800adc0 <pbuf_free>
          goto icmperr;
 80096c0:	e7db      	b.n	800967a <icmp_input+0x4e>
        MEMCPY(r->payload, iphdr_in, hlen);
 80096c2:	4649      	mov	r1, r9
 80096c4:	462a      	mov	r2, r5
 80096c6:	6840      	ldr	r0, [r0, #4]
 80096c8:	f005 fd33 	bl	800f132 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80096cc:	4629      	mov	r1, r5
 80096ce:	4630      	mov	r0, r6
 80096d0:	f001 fb42 	bl	800ad58 <pbuf_remove_header>
 80096d4:	b130      	cbz	r0, 80096e4 <icmp_input+0xb8>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80096d6:	4b1f      	ldr	r3, [pc, #124]	; (8009754 <icmp_input+0x128>)
 80096d8:	22b6      	movs	r2, #182	; 0xb6
 80096da:	491f      	ldr	r1, [pc, #124]	; (8009758 <icmp_input+0x12c>)
 80096dc:	481f      	ldr	r0, [pc, #124]	; (800975c <icmp_input+0x130>)
 80096de:	f005 fd55 	bl	800f18c <iprintf>
 80096e2:	e7ea      	b.n	80096ba <icmp_input+0x8e>
        if (pbuf_copy(r, p) != ERR_OK) {
 80096e4:	4621      	mov	r1, r4
 80096e6:	4630      	mov	r0, r6
 80096e8:	f001 fd10 	bl	800b10c <pbuf_copy>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1e4      	bne.n	80096ba <icmp_input+0x8e>
        pbuf_free(p);
 80096f0:	4620      	mov	r0, r4
 80096f2:	4634      	mov	r4, r6
 80096f4:	f001 fb64 	bl	800adc0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80096f8:	4629      	mov	r1, r5
 80096fa:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 80096fc:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 80096fe:	f001 fb28 	bl	800ad52 <pbuf_add_header>
 8009702:	4602      	mov	r2, r0
 8009704:	2800      	cmp	r0, #0
 8009706:	d1b8      	bne.n	800967a <icmp_input+0x4e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8009708:	6861      	ldr	r1, [r4, #4]
        ip4_addr_copy(iphdr->src, *src);
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	610b      	str	r3, [r1, #16]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8009712:	23ff      	movs	r3, #255	; 0xff
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8009714:	7030      	strb	r0, [r6, #0]
        iecho->chksum = 0;
 8009716:	70b0      	strb	r0, [r6, #2]
 8009718:	70f0      	strb	r0, [r6, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800971a:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800971c:	7288      	strb	r0, [r1, #10]
 800971e:	72c8      	strb	r0, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8009720:	2101      	movs	r1, #1
 8009722:	f8cd 8008 	str.w	r8, [sp, #8]
 8009726:	e9cd 0100 	strd	r0, r1, [sp]
 800972a:	490d      	ldr	r1, [pc, #52]	; (8009760 <icmp_input+0x134>)
 800972c:	4620      	mov	r0, r4
 800972e:	f000 f9ad 	bl	8009a8c <ip4_output_if>
 8009732:	e7a2      	b.n	800967a <icmp_input+0x4e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009734:	4631      	mov	r1, r6
 8009736:	4620      	mov	r0, r4
 8009738:	f001 fb0e 	bl	800ad58 <pbuf_remove_header>
 800973c:	2800      	cmp	r0, #0
 800973e:	d0db      	beq.n	80096f8 <icmp_input+0xcc>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <icmp_input+0x128>)
 8009742:	22c7      	movs	r2, #199	; 0xc7
 8009744:	4907      	ldr	r1, [pc, #28]	; (8009764 <icmp_input+0x138>)
 8009746:	4805      	ldr	r0, [pc, #20]	; (800975c <icmp_input+0x130>)
 8009748:	f005 fd20 	bl	800f18c <iprintf>
          goto icmperr;
 800974c:	e795      	b.n	800967a <icmp_input+0x4e>
 800974e:	bf00      	nop
 8009750:	2000a8c4 	.word	0x2000a8c4
 8009754:	0801eaee 	.word	0x0801eaee
 8009758:	0801eb8c 	.word	0x0801eb8c
 800975c:	0801d8d1 	.word	0x0801d8d1
 8009760:	2000a8d8 	.word	0x2000a8d8
 8009764:	0801ebc1 	.word	0x0801ebc1

08009768 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8009768:	460a      	mov	r2, r1
 800976a:	3004      	adds	r0, #4
 800976c:	2103      	movs	r1, #3
 800976e:	f7ff bf13 	b.w	8009598 <icmp_send_response.isra.0>

08009772 <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8009772:	460a      	mov	r2, r1
 8009774:	3004      	adds	r0, #4
 8009776:	210b      	movs	r1, #11
 8009778:	f7ff bf0e 	b.w	8009598 <icmp_send_response.isra.0>

0800977c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800977c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800977e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
{
 8009782:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8009784:	f013 0301 	ands.w	r3, r3, #1
 8009788:	d00b      	beq.n	80097a2 <ip4_input_accept+0x26>
 800978a:	6843      	ldr	r3, [r0, #4]
 800978c:	b14b      	cbz	r3, 80097a2 <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800978e:	4a07      	ldr	r2, [pc, #28]	; (80097ac <ip4_input_accept+0x30>)
 8009790:	6950      	ldr	r0, [r2, #20]
 8009792:	4283      	cmp	r3, r0
 8009794:	d007      	beq.n	80097a6 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009796:	f000 f98a 	bl	8009aae <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800979a:	3000      	adds	r0, #0
 800979c:	bf18      	it	ne
 800979e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 80097a0:	bd08      	pop	{r3, pc}
  return 0;
 80097a2:	4618      	mov	r0, r3
 80097a4:	e7fc      	b.n	80097a0 <ip4_input_accept+0x24>
      return 1;
 80097a6:	2001      	movs	r0, #1
 80097a8:	e7fa      	b.n	80097a0 <ip4_input_accept+0x24>
 80097aa:	bf00      	nop
 80097ac:	2000a8c4 	.word	0x2000a8c4

080097b0 <ip4_route>:
  NETIF_FOREACH(netif) {
 80097b0:	4b14      	ldr	r3, [pc, #80]	; (8009804 <ip4_route+0x54>)
{
 80097b2:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	b97b      	cbnz	r3, 80097d8 <ip4_route+0x28>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80097b8:	4a13      	ldr	r2, [pc, #76]	; (8009808 <ip4_route+0x58>)
 80097ba:	6812      	ldr	r2, [r2, #0]
 80097bc:	b1fa      	cbz	r2, 80097fe <ip4_route+0x4e>
 80097be:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 80097c2:	f001 0105 	and.w	r1, r1, #5
 80097c6:	2905      	cmp	r1, #5
 80097c8:	d119      	bne.n	80097fe <ip4_route+0x4e>
 80097ca:	6851      	ldr	r1, [r2, #4]
 80097cc:	b1b9      	cbz	r1, 80097fe <ip4_route+0x4e>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80097ce:	7801      	ldrb	r1, [r0, #0]
 80097d0:	297f      	cmp	r1, #127	; 0x7f
 80097d2:	bf18      	it	ne
 80097d4:	4613      	movne	r3, r2
 80097d6:	e012      	b.n	80097fe <ip4_route+0x4e>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80097d8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80097dc:	07cd      	lsls	r5, r1, #31
 80097de:	d5e9      	bpl.n	80097b4 <ip4_route+0x4>
 80097e0:	074c      	lsls	r4, r1, #29
 80097e2:	d5e7      	bpl.n	80097b4 <ip4_route+0x4>
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	d0e4      	beq.n	80097b4 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80097ea:	6804      	ldr	r4, [r0, #0]
 80097ec:	689d      	ldr	r5, [r3, #8]
 80097ee:	4062      	eors	r2, r4
 80097f0:	422a      	tst	r2, r5
 80097f2:	d004      	beq.n	80097fe <ip4_route+0x4e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80097f4:	078a      	lsls	r2, r1, #30
 80097f6:	d4dd      	bmi.n	80097b4 <ip4_route+0x4>
 80097f8:	68da      	ldr	r2, [r3, #12]
 80097fa:	4294      	cmp	r4, r2
 80097fc:	d1da      	bne.n	80097b4 <ip4_route+0x4>
}
 80097fe:	4618      	mov	r0, r3
 8009800:	bd30      	pop	{r4, r5, pc}
 8009802:	bf00      	nop
 8009804:	20010dec 	.word	0x20010dec
 8009808:	20010df0 	.word	0x20010df0

0800980c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800980c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8009810:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8009814:	4605      	mov	r5, r0
 8009816:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 8009818:	f898 9000 	ldrb.w	r9, [r8]
 800981c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8009820:	2b04      	cmp	r3, #4
 8009822:	d005      	beq.n	8009830 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8009824:	4628      	mov	r0, r5
 8009826:	f001 facb 	bl	800adc0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800982a:	2000      	movs	r0, #0
 800982c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009830:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009834:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009838:	f000 fd5e 	bl	800a2f8 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800983c:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800983e:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009842:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8009844:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8009846:	fa1f f689 	uxth.w	r6, r9
  if (iphdr_len < p->tot_len) {
 800984a:	d903      	bls.n	8009854 <ip4_input+0x48>
    pbuf_realloc(p, iphdr_len);
 800984c:	4601      	mov	r1, r0
 800984e:	4628      	mov	r0, r5
 8009850:	f001 fb9c 	bl	800af8c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009854:	896b      	ldrh	r3, [r5, #10]
 8009856:	42b3      	cmp	r3, r6
 8009858:	d3e4      	bcc.n	8009824 <ip4_input+0x18>
 800985a:	892b      	ldrh	r3, [r5, #8]
 800985c:	42a3      	cmp	r3, r4
 800985e:	d3e1      	bcc.n	8009824 <ip4_input+0x18>
 8009860:	2e13      	cmp	r6, #19
 8009862:	d9df      	bls.n	8009824 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009864:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009868:	4c49      	ldr	r4, [pc, #292]	; (8009990 <ip4_input+0x184>)
 800986a:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800986c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009870:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009874:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8009876:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009878:	d143      	bne.n	8009902 <ip4_input+0xf6>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800987a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800987e:	07db      	lsls	r3, r3, #31
 8009880:	d405      	bmi.n	800988e <ip4_input+0x82>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8009882:	f898 3009 	ldrb.w	r3, [r8, #9]
 8009886:	2b11      	cmp	r3, #17
 8009888:	d053      	beq.n	8009932 <ip4_input+0x126>
 800988a:	2600      	movs	r6, #0
 800988c:	e003      	b.n	8009896 <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d0f6      	beq.n	8009882 <ip4_input+0x76>
{
 8009894:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8009896:	6920      	ldr	r0, [r4, #16]
 8009898:	b148      	cbz	r0, 80098ae <ip4_input+0xa2>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800989a:	4639      	mov	r1, r7
 800989c:	f000 f907 	bl	8009aae <ip4_addr_isbroadcast_u32>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d1bf      	bne.n	8009824 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80098a4:	6923      	ldr	r3, [r4, #16]
 80098a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80098aa:	2be0      	cmp	r3, #224	; 0xe0
 80098ac:	d0ba      	beq.n	8009824 <ip4_input+0x18>
  if (netif == NULL) {
 80098ae:	2e00      	cmp	r6, #0
 80098b0:	d0b8      	beq.n	8009824 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80098b2:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80098b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098ba:	b13b      	cbz	r3, 80098cc <ip4_input+0xc0>
    p = ip4_reass(p);
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 fa77 	bl	8009db0 <ip4_reass>
    if (p == NULL) {
 80098c2:	4605      	mov	r5, r0
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d0b0      	beq.n	800982a <ip4_input+0x1e>
    iphdr = (const struct ip_hdr *)p->payload;
 80098c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 80098cc:	f8c4 8008 	str.w	r8, [r4, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80098d0:	4649      	mov	r1, r9
 80098d2:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 80098d4:	e9c4 6700 	strd	r6, r7, [r4]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80098d8:	f898 3000 	ldrb.w	r3, [r8]
 80098dc:	f003 030f 	and.w	r3, r3, #15
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	81a3      	strh	r3, [r4, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80098e4:	f001 fa38 	bl	800ad58 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80098e8:	f898 3009 	ldrb.w	r3, [r8, #9]
 80098ec:	2b06      	cmp	r3, #6
 80098ee:	d034      	beq.n	800995a <ip4_input+0x14e>
 80098f0:	2b11      	cmp	r3, #17
 80098f2:	d026      	beq.n	8009942 <ip4_input+0x136>
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d135      	bne.n	8009964 <ip4_input+0x158>
        icmp_input(p, inp);
 80098f8:	4639      	mov	r1, r7
 80098fa:	4628      	mov	r0, r5
 80098fc:	f7ff fe96 	bl	800962c <icmp_input>
        break;
 8009900:	e023      	b.n	800994a <ip4_input+0x13e>
    if (ip4_input_accept(inp)) {
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ff3a 	bl	800977c <ip4_input_accept>
 8009908:	b980      	cbnz	r0, 800992c <ip4_input+0x120>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800990a:	7d23      	ldrb	r3, [r4, #20]
 800990c:	2b7f      	cmp	r3, #127	; 0x7f
 800990e:	d0b8      	beq.n	8009882 <ip4_input+0x76>
        NETIF_FOREACH(netif) {
 8009910:	4b20      	ldr	r3, [pc, #128]	; (8009994 <ip4_input+0x188>)
 8009912:	681e      	ldr	r6, [r3, #0]
 8009914:	2e00      	cmp	r6, #0
 8009916:	d0b4      	beq.n	8009882 <ip4_input+0x76>
          if (netif == inp) {
 8009918:	42be      	cmp	r6, r7
 800991a:	d101      	bne.n	8009920 <ip4_input+0x114>
        NETIF_FOREACH(netif) {
 800991c:	6836      	ldr	r6, [r6, #0]
 800991e:	e7f9      	b.n	8009914 <ip4_input+0x108>
          if (ip4_input_accept(netif)) {
 8009920:	4630      	mov	r0, r6
 8009922:	f7ff ff2b 	bl	800977c <ip4_input_accept>
 8009926:	2800      	cmp	r0, #0
 8009928:	d0f8      	beq.n	800991c <ip4_input+0x110>
 800992a:	e7b4      	b.n	8009896 <ip4_input+0x8a>
  if (netif == NULL) {
 800992c:	2f00      	cmp	r7, #0
 800992e:	d1b1      	bne.n	8009894 <ip4_input+0x88>
 8009930:	e7a7      	b.n	8009882 <ip4_input+0x76>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8009932:	eb08 0309 	add.w	r3, r8, r9
 8009936:	885b      	ldrh	r3, [r3, #2]
 8009938:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800993c:	d1a5      	bne.n	800988a <ip4_input+0x7e>
 800993e:	463e      	mov	r6, r7
 8009940:	e7b5      	b.n	80098ae <ip4_input+0xa2>
        udp_input(p, inp);
 8009942:	4639      	mov	r1, r7
 8009944:	4628      	mov	r0, r5
 8009946:	f004 ff7f 	bl	800e848 <udp_input>
  ip_data.current_netif = NULL;
 800994a:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800994c:	e9c4 3300 	strd	r3, r3, [r4]
  ip_data.current_ip4_header = NULL;
 8009950:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009952:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8009954:	e9c4 3304 	strd	r3, r3, [r4, #16]
  return ERR_OK;
 8009958:	e767      	b.n	800982a <ip4_input+0x1e>
        tcp_input(p, inp);
 800995a:	4639      	mov	r1, r7
 800995c:	4628      	mov	r0, r5
 800995e:	f003 f831 	bl	800c9c4 <tcp_input>
        break;
 8009962:	e7f2      	b.n	800994a <ip4_input+0x13e>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009964:	4631      	mov	r1, r6
 8009966:	6960      	ldr	r0, [r4, #20]
 8009968:	f000 f8a1 	bl	8009aae <ip4_addr_isbroadcast_u32>
 800996c:	b960      	cbnz	r0, 8009988 <ip4_input+0x17c>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800996e:	6963      	ldr	r3, [r4, #20]
 8009970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8009974:	2be0      	cmp	r3, #224	; 0xe0
 8009976:	d007      	beq.n	8009988 <ip4_input+0x17c>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009978:	4649      	mov	r1, r9
 800997a:	4628      	mov	r0, r5
 800997c:	f001 fa18 	bl	800adb0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8009980:	2102      	movs	r1, #2
 8009982:	4628      	mov	r0, r5
 8009984:	f7ff fef0 	bl	8009768 <icmp_dest_unreach>
        pbuf_free(p);
 8009988:	4628      	mov	r0, r5
 800998a:	f001 fa19 	bl	800adc0 <pbuf_free>
        break;
 800998e:	e7dc      	b.n	800994a <ip4_input+0x13e>
 8009990:	2000a8c4 	.word	0x2000a8c4
 8009994:	20010dec 	.word	0x20010dec

08009998 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8009998:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800999e:	7b83      	ldrb	r3, [r0, #14]
{
 80099a0:	4605      	mov	r5, r0
 80099a2:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80099a4:	2b01      	cmp	r3, #1
{
 80099a6:	4616      	mov	r6, r2
 80099a8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80099ac:	d006      	beq.n	80099bc <ip4_output_if_src+0x24>
 80099ae:	4b31      	ldr	r3, [pc, #196]	; (8009a74 <ip4_output_if_src+0xdc>)
 80099b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80099b4:	4930      	ldr	r1, [pc, #192]	; (8009a78 <ip4_output_if_src+0xe0>)
 80099b6:	4831      	ldr	r0, [pc, #196]	; (8009a7c <ip4_output_if_src+0xe4>)
 80099b8:	f005 fbe8 	bl	800f18c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80099bc:	2e00      	cmp	r6, #0
 80099be:	d049      	beq.n	8009a54 <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80099c0:	2114      	movs	r1, #20
 80099c2:	4628      	mov	r0, r5
 80099c4:	f001 f9c5 	bl	800ad52 <pbuf_add_header>
 80099c8:	b120      	cbz	r0, 80099d4 <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80099ca:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80099ce:	b002      	add	sp, #8
 80099d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80099d4:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80099d6:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80099d8:	2b13      	cmp	r3, #19
 80099da:	d806      	bhi.n	80099ea <ip4_output_if_src+0x52>
 80099dc:	4b25      	ldr	r3, [pc, #148]	; (8009a74 <ip4_output_if_src+0xdc>)
 80099de:	f240 3289 	movw	r2, #905	; 0x389
 80099e2:	4927      	ldr	r1, [pc, #156]	; (8009a80 <ip4_output_if_src+0xe8>)
 80099e4:	4825      	ldr	r0, [pc, #148]	; (8009a7c <ip4_output_if_src+0xe4>)
 80099e6:	f005 fbd1 	bl	800f18c <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80099ea:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80099ee:	7227      	strb	r7, [r4, #8]
    IPH_OFFSET_SET(iphdr, 0);
 80099f0:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80099f2:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80099f4:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80099f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8009a88 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 80099fa:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80099fc:	2345      	movs	r3, #69	; 0x45
 80099fe:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8009a00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8009a04:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009a06:	8928      	ldrh	r0, [r5, #8]
 8009a08:	f000 fc76 	bl	800a2f8 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8009a0c:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8009a0e:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8009a10:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009a12:	f8b9 0000 	ldrh.w	r0, [r9]
 8009a16:	f000 fc6f 	bl	800a2f8 <lwip_htons>
    ++ip_id;
 8009a1a:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8009a1e:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8009a20:	3301      	adds	r3, #1
 8009a22:	f8a9 3000 	strh.w	r3, [r9]
    if (src == NULL) {
 8009a26:	f1ba 0f00 	cmp.w	sl, #0
 8009a2a:	d110      	bne.n	8009a4e <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009a2c:	4b15      	ldr	r3, [pc, #84]	; (8009a84 <ip4_output_if_src+0xec>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
      ip4_addr_copy(iphdr->src, *src);
 8009a30:	60e3      	str	r3, [r4, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 8009a32:	72a7      	strb	r7, [r4, #10]
 8009a34:	72e7      	strb	r7, [r4, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8009a36:	f8b8 3028 	ldrh.w	r3, [r8, #40]	; 0x28
 8009a3a:	b1a3      	cbz	r3, 8009a66 <ip4_output_if_src+0xce>
 8009a3c:	892a      	ldrh	r2, [r5, #8]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d911      	bls.n	8009a66 <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
 8009a42:	4632      	mov	r2, r6
 8009a44:	4641      	mov	r1, r8
 8009a46:	4628      	mov	r0, r5
 8009a48:	f000 fb74 	bl	800a134 <ip4_frag>
 8009a4c:	e7bf      	b.n	80099ce <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 8009a4e:	f8da 3000 	ldr.w	r3, [sl]
 8009a52:	e7ed      	b.n	8009a30 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 8009a54:	896b      	ldrh	r3, [r5, #10]
 8009a56:	2b13      	cmp	r3, #19
 8009a58:	d9b7      	bls.n	80099ca <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009a5a:	686b      	ldr	r3, [r5, #4]
 8009a5c:	ae02      	add	r6, sp, #8
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f846 3d04 	str.w	r3, [r6, #-4]!
 8009a64:	e7e7      	b.n	8009a36 <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 8009a66:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	4629      	mov	r1, r5
 8009a6e:	4640      	mov	r0, r8
 8009a70:	4798      	blx	r3
 8009a72:	e7ac      	b.n	80099ce <ip4_output_if_src+0x36>
 8009a74:	0801ebf3 	.word	0x0801ebf3
 8009a78:	0801ec64 	.word	0x0801ec64
 8009a7c:	0801d8d1 	.word	0x0801d8d1
 8009a80:	0801ec70 	.word	0x0801ec70
 8009a84:	0801496c 	.word	0x0801496c
 8009a88:	20006926 	.word	0x20006926

08009a8c <ip4_output_if>:
{
 8009a8c:	b4f0      	push	{r4, r5, r6, r7}
 8009a8e:	9c06      	ldr	r4, [sp, #24]
 8009a90:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8009a94:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8009a98:	b11a      	cbz	r2, 8009aa2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8009a9a:	b109      	cbz	r1, 8009aa0 <ip4_output_if+0x14>
 8009a9c:	680f      	ldr	r7, [r1, #0]
 8009a9e:	b907      	cbnz	r7, 8009aa2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8009aa0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009aa2:	9504      	str	r5, [sp, #16]
 8009aa4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8009aa8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009aaa:	f7ff bf75 	b.w	8009998 <ip4_output_if_src>

08009aae <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009aae:	1e43      	subs	r3, r0, #1
 8009ab0:	3303      	adds	r3, #3
 8009ab2:	d811      	bhi.n	8009ad8 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009ab4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
 8009ab8:	f013 0302 	ands.w	r3, r3, #2
 8009abc:	d00e      	beq.n	8009adc <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009abe:	684a      	ldr	r2, [r1, #4]
 8009ac0:	4282      	cmp	r2, r0
 8009ac2:	d00b      	beq.n	8009adc <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009ac4:	688b      	ldr	r3, [r1, #8]
 8009ac6:	4042      	eors	r2, r0
 8009ac8:	421a      	tst	r2, r3
 8009aca:	d107      	bne.n	8009adc <ip4_addr_isbroadcast_u32+0x2e>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009acc:	43db      	mvns	r3, r3
 8009ace:	4383      	bics	r3, r0
    return 1;
 8009ad0:	bf0c      	ite	eq
 8009ad2:	2001      	moveq	r0, #1
 8009ad4:	2000      	movne	r0, #0
 8009ad6:	4770      	bx	lr
 8009ad8:	2001      	movs	r0, #1
 8009ada:	4770      	bx	lr
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009adc:	2000      	movs	r0, #0
  }
}
 8009ade:	4770      	bx	lr

08009ae0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8009ae0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8009ae4:	6803      	ldr	r3, [r0, #0]
 8009ae6:	a802      	add	r0, sp, #8

  rp = buf;
 8009ae8:	460f      	mov	r7, r1
  int len = 0;
 8009aea:	2500      	movs	r5, #0
  s_addr = ip4_addr_get_u32(addr);
 8009aec:	f840 3d04 	str.w	r3, [r0, #-4]!
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 8009af0:	ab02      	add	r3, sp, #8
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8009af2:	f04f 0c0a 	mov.w	ip, #10
      *rp++ = inv[i];
    }
    if (len++ >= buflen) {
      return NULL;
    }
    *rp++ = '.';
 8009af6:	f04f 082e 	mov.w	r8, #46	; 0x2e
  for (n = 0; n < 4; n++) {
 8009afa:	fa5f fe83 	uxtb.w	lr, r3
 8009afe:	f810 4b01 	ldrb.w	r4, [r0], #1
    i = 0;
 8009b02:	2300      	movs	r3, #0
      inv[i++] = (char)('0' + rem);
 8009b04:	f10d 0a08 	add.w	sl, sp, #8
 8009b08:	f103 0901 	add.w	r9, r3, #1
      rem = *ap % (u8_t)10;
 8009b0c:	fbb4 f6fc 	udiv	r6, r4, ip
 8009b10:	fb0c 4416 	mls	r4, ip, r6, r4
      inv[i++] = (char)('0' + rem);
 8009b14:	449a      	add	sl, r3
 8009b16:	fa5f f989 	uxtb.w	r9, r9
 8009b1a:	3430      	adds	r4, #48	; 0x30
 8009b1c:	f80a 4c08 	strb.w	r4, [sl, #-8]
    } while (*ap);
 8009b20:	f016 04ff 	ands.w	r4, r6, #255	; 0xff
 8009b24:	d115      	bne.n	8009b52 <ip4addr_ntoa_r+0x72>
 8009b26:	f800 4c01 	strb.w	r4, [r0, #-1]
 8009b2a:	462e      	mov	r6, r5
 8009b2c:	463c      	mov	r4, r7
    while (i--) {
 8009b2e:	2bff      	cmp	r3, #255	; 0xff
 8009b30:	f105 0501 	add.w	r5, r5, #1
 8009b34:	d10f      	bne.n	8009b56 <ip4addr_ntoa_r+0x76>
    if (len++ >= buflen) {
 8009b36:	4296      	cmp	r6, r2
 8009b38:	da1a      	bge.n	8009b70 <ip4addr_ntoa_r+0x90>
  for (n = 0; n < 4; n++) {
 8009b3a:	b2c3      	uxtb	r3, r0
    *rp++ = '.';
 8009b3c:	1c67      	adds	r7, r4, #1
 8009b3e:	f884 8000 	strb.w	r8, [r4]
  for (n = 0; n < 4; n++) {
 8009b42:	459e      	cmp	lr, r3
 8009b44:	d1db      	bne.n	8009afe <ip4addr_ntoa_r+0x1e>
    ap++;
  }
  *--rp = 0;
 8009b46:	2300      	movs	r3, #0
  return buf;
 8009b48:	4608      	mov	r0, r1
  *--rp = 0;
 8009b4a:	7023      	strb	r3, [r4, #0]
}
 8009b4c:	b002      	add	sp, #8
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      inv[i++] = (char)('0' + rem);
 8009b52:	464b      	mov	r3, r9
 8009b54:	e7d6      	b.n	8009b04 <ip4addr_ntoa_r+0x24>
 8009b56:	1e5f      	subs	r7, r3, #1
      if (len++ >= buflen) {
 8009b58:	4296      	cmp	r6, r2
 8009b5a:	b2ff      	uxtb	r7, r7
 8009b5c:	da08      	bge.n	8009b70 <ip4addr_ntoa_r+0x90>
      *rp++ = inv[i];
 8009b5e:	ae02      	add	r6, sp, #8
 8009b60:	4433      	add	r3, r6
 8009b62:	462e      	mov	r6, r5
 8009b64:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8009b68:	f804 3b01 	strb.w	r3, [r4], #1
 8009b6c:	463b      	mov	r3, r7
 8009b6e:	e7de      	b.n	8009b2e <ip4addr_ntoa_r+0x4e>
        return NULL;
 8009b70:	2000      	movs	r0, #0
 8009b72:	e7eb      	b.n	8009b4c <ip4addr_ntoa_r+0x6c>

08009b74 <ip4addr_ntoa>:
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8009b74:	2210      	movs	r2, #16
 8009b76:	4901      	ldr	r1, [pc, #4]	; (8009b7c <ip4addr_ntoa+0x8>)
 8009b78:	f7ff bfb2 	b.w	8009ae0 <ip4addr_ntoa_r>
 8009b7c:	20006928 	.word	0x20006928

08009b80 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009b80:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009b82:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <ip_reass_dequeue_datagram+0x34>)
{
 8009b84:	4604      	mov	r4, r0
 8009b86:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	4282      	cmp	r2, r0
 8009b8c:	d107      	bne.n	8009b9e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8009b8e:	6802      	ldr	r2, [r0, #0]
 8009b90:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009b92:	4621      	mov	r1, r4
 8009b94:	2004      	movs	r0, #4
}
 8009b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8009b9a:	f000 bee7 	b.w	800a96c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009b9e:	b931      	cbnz	r1, 8009bae <ip_reass_dequeue_datagram+0x2e>
 8009ba0:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <ip_reass_dequeue_datagram+0x38>)
 8009ba2:	f240 1245 	movw	r2, #325	; 0x145
 8009ba6:	4905      	ldr	r1, [pc, #20]	; (8009bbc <ip_reass_dequeue_datagram+0x3c>)
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <ip_reass_dequeue_datagram+0x40>)
 8009baa:	f005 faef 	bl	800f18c <iprintf>
    prev->next = ipr->next;
 8009bae:	6823      	ldr	r3, [r4, #0]
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	e7ee      	b.n	8009b92 <ip_reass_dequeue_datagram+0x12>
 8009bb4:	20006938 	.word	0x20006938
 8009bb8:	0801ec9d 	.word	0x0801ec9d
 8009bbc:	0801ed13 	.word	0x0801ed13
 8009bc0:	0801d8d1 	.word	0x0801d8d1

08009bc4 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009bc4:	4281      	cmp	r1, r0
{
 8009bc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bca:	4605      	mov	r5, r0
 8009bcc:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009bce:	d105      	bne.n	8009bdc <ip_reass_free_complete_datagram+0x18>
 8009bd0:	4b2f      	ldr	r3, [pc, #188]	; (8009c90 <ip_reass_free_complete_datagram+0xcc>)
 8009bd2:	22ab      	movs	r2, #171	; 0xab
 8009bd4:	492f      	ldr	r1, [pc, #188]	; (8009c94 <ip_reass_free_complete_datagram+0xd0>)
 8009bd6:	4830      	ldr	r0, [pc, #192]	; (8009c98 <ip_reass_free_complete_datagram+0xd4>)
 8009bd8:	f005 fad8 	bl	800f18c <iprintf>
  if (prev != NULL) {
 8009bdc:	b147      	cbz	r7, 8009bf0 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	42ab      	cmp	r3, r5
 8009be2:	d005      	beq.n	8009bf0 <ip_reass_free_complete_datagram+0x2c>
 8009be4:	4b2a      	ldr	r3, [pc, #168]	; (8009c90 <ip_reass_free_complete_datagram+0xcc>)
 8009be6:	22ad      	movs	r2, #173	; 0xad
 8009be8:	492c      	ldr	r1, [pc, #176]	; (8009c9c <ip_reass_free_complete_datagram+0xd8>)
 8009bea:	482b      	ldr	r0, [pc, #172]	; (8009c98 <ip_reass_free_complete_datagram+0xd4>)
 8009bec:	f005 face 	bl	800f18c <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009bf0:	686e      	ldr	r6, [r5, #4]
 8009bf2:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8009bf4:	889a      	ldrh	r2, [r3, #4]
 8009bf6:	bb92      	cbnz	r2, 8009c5e <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8009bf8:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009bfa:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8009bfe:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009c00:	f105 0208 	add.w	r2, r5, #8
 8009c04:	f852 0b04 	ldr.w	r0, [r2], #4
 8009c08:	428a      	cmp	r2, r1
 8009c0a:	f843 0b04 	str.w	r0, [r3], #4
 8009c0e:	d1f9      	bne.n	8009c04 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009c10:	2101      	movs	r1, #1
 8009c12:	4630      	mov	r0, r6
 8009c14:	f7ff fdad 	bl	8009772 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f001 fa0f 	bl	800b03c <pbuf_clen>
 8009c1e:	4604      	mov	r4, r0
    pbuf_free(p);
 8009c20:	4630      	mov	r0, r6
 8009c22:	f001 f8cd 	bl	800adc0 <pbuf_free>
  p = ipr->p;
 8009c26:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009c28:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8009c90 <ip_reass_free_complete_datagram+0xcc>
 8009c2c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8009ca8 <ip_reass_free_complete_datagram+0xe4>
 8009c30:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009c98 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8009c34:	b9ae      	cbnz	r6, 8009c62 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8009c36:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009c38:	4d19      	ldr	r5, [pc, #100]	; (8009ca0 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7ff ffa0 	bl	8009b80 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009c40:	88ab      	ldrh	r3, [r5, #4]
 8009c42:	42a3      	cmp	r3, r4
 8009c44:	d205      	bcs.n	8009c52 <ip_reass_free_complete_datagram+0x8e>
 8009c46:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <ip_reass_free_complete_datagram+0xcc>)
 8009c48:	22d2      	movs	r2, #210	; 0xd2
 8009c4a:	4916      	ldr	r1, [pc, #88]	; (8009ca4 <ip_reass_free_complete_datagram+0xe0>)
 8009c4c:	4812      	ldr	r0, [pc, #72]	; (8009c98 <ip_reass_free_complete_datagram+0xd4>)
 8009c4e:	f005 fa9d 	bl	800f18c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009c52:	88ab      	ldrh	r3, [r5, #4]
}
 8009c54:	4620      	mov	r0, r4
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009c56:	1b1b      	subs	r3, r3, r4
 8009c58:	80ab      	strh	r3, [r5, #4]
}
 8009c5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8009c5e:	2400      	movs	r4, #0
 8009c60:	e7e1      	b.n	8009c26 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8009c62:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8009c64:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8009c66:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8009c6a:	f001 f9e7 	bl	800b03c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009c6e:	4404      	add	r4, r0
 8009c70:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8009c74:	db05      	blt.n	8009c82 <ip_reass_free_complete_datagram+0xbe>
 8009c76:	4643      	mov	r3, r8
 8009c78:	22cc      	movs	r2, #204	; 0xcc
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4650      	mov	r0, sl
 8009c7e:	f005 fa85 	bl	800f18c <iprintf>
    pbuf_free(pcur);
 8009c82:	4630      	mov	r0, r6
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009c84:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8009c86:	f001 f89b 	bl	800adc0 <pbuf_free>
    p = iprh->next_pbuf;
 8009c8a:	465e      	mov	r6, fp
 8009c8c:	e7d2      	b.n	8009c34 <ip_reass_free_complete_datagram+0x70>
 8009c8e:	bf00      	nop
 8009c90:	0801ec9d 	.word	0x0801ec9d
 8009c94:	0801ed2c 	.word	0x0801ed2c
 8009c98:	0801d8d1 	.word	0x0801d8d1
 8009c9c:	0801ed38 	.word	0x0801ed38
 8009ca0:	20006938 	.word	0x20006938
 8009ca4:	0801ed67 	.word	0x0801ed67
 8009ca8:	0801ed4a 	.word	0x0801ed4a

08009cac <ip_reass_remove_oldest_datagram>:
{
 8009cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009cb4:	2500      	movs	r5, #0
    r = reassdatagrams;
 8009cb6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8009d20 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8009cba:	2400      	movs	r4, #0
    r = reassdatagrams;
 8009cbc:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8009cc0:	4621      	mov	r1, r4
    prev = NULL;
 8009cc2:	46a4      	mov	ip, r4
    oldest = NULL;
 8009cc4:	4620      	mov	r0, r4
    while (r != NULL) {
 8009cc6:	b953      	cbnz	r3, 8009cde <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8009cc8:	b110      	cbz	r0, 8009cd0 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009cca:	f7ff ff7b 	bl	8009bc4 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8009cce:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009cd0:	42bd      	cmp	r5, r7
 8009cd2:	da01      	bge.n	8009cd8 <ip_reass_remove_oldest_datagram+0x2c>
 8009cd4:	2c01      	cmp	r4, #1
 8009cd6:	dcf0      	bgt.n	8009cba <ip_reass_remove_oldest_datagram+0xe>
}
 8009cd8:	4628      	mov	r0, r5
 8009cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009cde:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 8009ce2:	695a      	ldr	r2, [r3, #20]
 8009ce4:	4572      	cmp	r2, lr
 8009ce6:	d109      	bne.n	8009cfc <ip_reass_remove_oldest_datagram+0x50>
 8009ce8:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8009cec:	699a      	ldr	r2, [r3, #24]
 8009cee:	4572      	cmp	r2, lr
 8009cf0:	d104      	bne.n	8009cfc <ip_reass_remove_oldest_datagram+0x50>
 8009cf2:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8009cf6:	88b2      	ldrh	r2, [r6, #4]
 8009cf8:	4596      	cmp	lr, r2
 8009cfa:	d008      	beq.n	8009d0e <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8009cfc:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8009cfe:	b160      	cbz	r0, 8009d1a <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8009d00:	7fc2      	ldrb	r2, [r0, #31]
 8009d02:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8009d06:	4596      	cmp	lr, r2
 8009d08:	bf9c      	itt	ls
 8009d0a:	4661      	movls	r1, ip
 8009d0c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	2a00      	cmp	r2, #0
 8009d12:	bf18      	it	ne
 8009d14:	469c      	movne	ip, r3
 8009d16:	4613      	mov	r3, r2
 8009d18:	e7d5      	b.n	8009cc6 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8009d1a:	4661      	mov	r1, ip
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	e7f6      	b.n	8009d0e <ip_reass_remove_oldest_datagram+0x62>
 8009d20:	20006938 	.word	0x20006938

08009d24 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009d24:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009d26:	4604      	mov	r4, r0
 8009d28:	b930      	cbnz	r0, 8009d38 <ip_frag_free_pbuf_custom_ref+0x14>
 8009d2a:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <ip_frag_free_pbuf_custom_ref+0x20>)
 8009d2c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009d30:	4905      	ldr	r1, [pc, #20]	; (8009d48 <ip_frag_free_pbuf_custom_ref+0x24>)
 8009d32:	4806      	ldr	r0, [pc, #24]	; (8009d4c <ip_frag_free_pbuf_custom_ref+0x28>)
 8009d34:	f005 fa2a 	bl	800f18c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8009d38:	4621      	mov	r1, r4
 8009d3a:	2005      	movs	r0, #5
}
 8009d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8009d40:	f000 be14 	b.w	800a96c <memp_free>
 8009d44:	0801ec9d 	.word	0x0801ec9d
 8009d48:	0801f537 	.word	0x0801f537
 8009d4c:	0801d8d1 	.word	0x0801d8d1

08009d50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009d50:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009d52:	4604      	mov	r4, r0
 8009d54:	b930      	cbnz	r0, 8009d64 <ipfrag_free_pbuf_custom+0x14>
 8009d56:	4b08      	ldr	r3, [pc, #32]	; (8009d78 <ipfrag_free_pbuf_custom+0x28>)
 8009d58:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009d5c:	4907      	ldr	r1, [pc, #28]	; (8009d7c <ipfrag_free_pbuf_custom+0x2c>)
 8009d5e:	4808      	ldr	r0, [pc, #32]	; (8009d80 <ipfrag_free_pbuf_custom+0x30>)
 8009d60:	f005 fa14 	bl	800f18c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8009d64:	6960      	ldr	r0, [r4, #20]
 8009d66:	b108      	cbz	r0, 8009d6c <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8009d68:	f001 f82a 	bl	800adc0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009d6c:	4620      	mov	r0, r4
}
 8009d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8009d72:	f7ff bfd7 	b.w	8009d24 <ip_frag_free_pbuf_custom_ref>
 8009d76:	bf00      	nop
 8009d78:	0801ec9d 	.word	0x0801ec9d
 8009d7c:	0801ed89 	.word	0x0801ed89
 8009d80:	0801d8d1 	.word	0x0801d8d1

08009d84 <ip_reass_tmr>:
{
 8009d84:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8009d86:	4b09      	ldr	r3, [pc, #36]	; (8009dac <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 8009d88:	2400      	movs	r4, #0
  r = reassdatagrams;
 8009d8a:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8009d8c:	b900      	cbnz	r0, 8009d90 <ip_reass_tmr+0xc>
}
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 8009d90:	7fc3      	ldrb	r3, [r0, #31]
 8009d92:	6805      	ldr	r5, [r0, #0]
 8009d94:	b123      	cbz	r3, 8009da0 <ip_reass_tmr+0x1c>
      r->timer--;
 8009d96:	3b01      	subs	r3, #1
 8009d98:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	e7f5      	b.n	8009d8c <ip_reass_tmr+0x8>
 8009da0:	4621      	mov	r1, r4
 8009da2:	f7ff ff0f 	bl	8009bc4 <ip_reass_free_complete_datagram>
 8009da6:	4620      	mov	r0, r4
 8009da8:	e7f7      	b.n	8009d9a <ip_reass_tmr+0x16>
 8009daa:	bf00      	nop
 8009dac:	20006938 	.word	0x20006938

08009db0 <ip4_reass>:
{
 8009db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8009db4:	6845      	ldr	r5, [r0, #4]
{
 8009db6:	4607      	mov	r7, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009db8:	782b      	ldrb	r3, [r5, #0]
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	2b05      	cmp	r3, #5
 8009dc0:	f040 8095 	bne.w	8009eee <ip4_reass+0x13e>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009dc4:	88e8      	ldrh	r0, [r5, #6]
 8009dc6:	f000 fa97 	bl	800a2f8 <lwip_htons>
 8009dca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009dce:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009dd2:	8868      	ldrh	r0, [r5, #2]
 8009dd4:	f000 fa90 	bl	800a2f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009dd8:	782b      	ldrb	r3, [r5, #0]
 8009dda:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4283      	cmp	r3, r0
 8009de2:	f200 8084 	bhi.w	8009eee <ip4_reass+0x13e>
  len = (u16_t)(len - hlen);
 8009de6:	1ac0      	subs	r0, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009de8:	4eb7      	ldr	r6, [pc, #732]	; (800a0c8 <ip4_reass+0x318>)
  len = (u16_t)(len - hlen);
 8009dea:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8009dec:	4638      	mov	r0, r7
  len = (u16_t)(len - hlen);
 8009dee:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8009df0:	f001 f924 	bl	800b03c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009df4:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8009df6:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009df8:	4403      	add	r3, r0
 8009dfa:	2b0a      	cmp	r3, #10
 8009dfc:	dc6e      	bgt.n	8009edc <ip4_reass+0x12c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009dfe:	6834      	ldr	r4, [r6, #0]
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	d179      	bne.n	8009ef8 <ip4_reass+0x148>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009e04:	2004      	movs	r0, #4
 8009e06:	f000 fd95 	bl	800a934 <memp_malloc>
  if (ipr == NULL) {
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	b958      	cbnz	r0, 8009e26 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009e0e:	4651      	mov	r1, sl
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7ff ff4b 	bl	8009cac <ip_reass_remove_oldest_datagram>
 8009e16:	4582      	cmp	sl, r0
 8009e18:	dc69      	bgt.n	8009eee <ip4_reass+0x13e>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009e1a:	2004      	movs	r0, #4
 8009e1c:	f000 fd8a 	bl	800a934 <memp_malloc>
    if (ipr == NULL)
 8009e20:	4604      	mov	r4, r0
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d063      	beq.n	8009eee <ip4_reass+0x13e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8009e26:	221c      	movs	r2, #28
 8009e28:	2100      	movs	r1, #0
 8009e2a:	1d20      	adds	r0, r4, #4
 8009e2c:	f005 f9a5 	bl	800f17a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8009e30:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009e32:	f104 0208 	add.w	r2, r4, #8
 8009e36:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8009e3a:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8009e3c:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8009e3e:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8009e40:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8009e42:	462b      	mov	r3, r5
 8009e44:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e48:	428b      	cmp	r3, r1
 8009e4a:	f842 0b04 	str.w	r0, [r2], #4
 8009e4e:	d1f9      	bne.n	8009e44 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009e50:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8009e54:	f01b 0b20 	ands.w	fp, fp, #32
 8009e58:	d10a      	bne.n	8009e70 <ip4_reass+0xc0>
    u16_t datagram_len = (u16_t)(offset + len);
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	444b      	add	r3, r9
 8009e5e:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009e60:	4599      	cmp	r9, r3
 8009e62:	f200 811d 	bhi.w	800a0a0 <ip4_reass+0x2f0>
 8009e66:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	f200 8118 	bhi.w	800a0a0 <ip4_reass+0x2f0>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009e70:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009e72:	8868      	ldrh	r0, [r5, #2]
 8009e74:	f000 fa40 	bl	800a2f8 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009e78:	782b      	ldrb	r3, [r5, #0]
 8009e7a:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4298      	cmp	r0, r3
 8009e82:	f0c0 810d 	bcc.w	800a0a0 <ip4_reass+0x2f0>
  len = (u16_t)(len - hlen);
 8009e86:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009e88:	88e8      	ldrh	r0, [r5, #6]
  iprh->next_pbuf = NULL;
 8009e8a:	2500      	movs	r5, #0
  len = (u16_t)(len - hlen);
 8009e8c:	fa1f f883 	uxth.w	r8, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009e90:	f000 fa32 	bl	800a2f8 <lwip_htons>
 8009e94:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009e98:	687e      	ldr	r6, [r7, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009e9a:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 8009e9c:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 8009e9e:	eb08 0300 	add.w	r3, r8, r0
  iprh->next_pbuf = NULL;
 8009ea2:	7075      	strb	r5, [r6, #1]
 8009ea4:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8009ea6:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 8009ea8:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8009eaa:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 8009eac:	4298      	cmp	r0, r3
  iprh->end = (u16_t)(offset + len);
 8009eae:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 8009eb0:	f200 80f6 	bhi.w	800a0a0 <ip4_reass+0x2f0>
  for (q = ipr->p; q != NULL;) {
 8009eb4:	f8d4 c004 	ldr.w	ip, [r4, #4]
  int valid = 1;
 8009eb8:	f04f 0801 	mov.w	r8, #1
  for (q = ipr->p; q != NULL;) {
 8009ebc:	4662      	mov	r2, ip
 8009ebe:	bb52      	cbnz	r2, 8009f16 <ip4_reass+0x166>
    if (iprh_prev != NULL) {
 8009ec0:	2d00      	cmp	r5, #0
 8009ec2:	f040 808c 	bne.w	8009fde <ip4_reass+0x22e>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8009ec6:	f1bc 0f00 	cmp.w	ip, #0
 8009eca:	d079      	beq.n	8009fc0 <ip4_reass+0x210>
 8009ecc:	4b7f      	ldr	r3, [pc, #508]	; (800a0cc <ip4_reass+0x31c>)
 8009ece:	f240 12bf 	movw	r2, #447	; 0x1bf
 8009ed2:	497f      	ldr	r1, [pc, #508]	; (800a0d0 <ip4_reass+0x320>)
 8009ed4:	487f      	ldr	r0, [pc, #508]	; (800a0d4 <ip4_reass+0x324>)
 8009ed6:	f005 f959 	bl	800f18c <iprintf>
 8009eda:	e071      	b.n	8009fc0 <ip4_reass+0x210>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009edc:	4601      	mov	r1, r0
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f7ff fee4 	bl	8009cac <ip_reass_remove_oldest_datagram>
 8009ee4:	b118      	cbz	r0, 8009eee <ip4_reass+0x13e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009ee6:	88b3      	ldrh	r3, [r6, #4]
 8009ee8:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009eea:	2b0a      	cmp	r3, #10
 8009eec:	dd87      	ble.n	8009dfe <ip4_reass+0x4e>
  pbuf_free(p);
 8009eee:	4638      	mov	r0, r7
 8009ef0:	f000 ff66 	bl	800adc0 <pbuf_free>
  return NULL;
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	e0cf      	b.n	800a098 <ip4_reass+0x2e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009ef8:	68eb      	ldr	r3, [r5, #12]
 8009efa:	6962      	ldr	r2, [r4, #20]
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d108      	bne.n	8009f12 <ip4_reass+0x162>
 8009f00:	692b      	ldr	r3, [r5, #16]
 8009f02:	69a2      	ldr	r2, [r4, #24]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d104      	bne.n	8009f12 <ip4_reass+0x162>
 8009f08:	89a2      	ldrh	r2, [r4, #12]
 8009f0a:	88ab      	ldrh	r3, [r5, #4]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	f000 80ed 	beq.w	800a0ec <ip4_reass+0x33c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009f12:	6824      	ldr	r4, [r4, #0]
 8009f14:	e774      	b.n	8009e00 <ip4_reass+0x50>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8009f16:	6851      	ldr	r1, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8009f18:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8009f1c:	4570      	cmp	r0, lr
 8009f1e:	d251      	bcs.n	8009fc4 <ip4_reass+0x214>
      iprh->next_pbuf = q;
 8009f20:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 8009f22:	2d00      	cmp	r5, #0
 8009f24:	d04a      	beq.n	8009fbc <ip4_reass+0x20c>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009f26:	88ea      	ldrh	r2, [r5, #6]
 8009f28:	4290      	cmp	r0, r2
 8009f2a:	f0c0 80b9 	bcc.w	800a0a0 <ip4_reass+0x2f0>
 8009f2e:	4573      	cmp	r3, lr
 8009f30:	f200 80b6 	bhi.w	800a0a0 <ip4_reass+0x2f0>
        if (iprh_prev->end != iprh->start) {
 8009f34:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 8009f36:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8009f38:	f040 80f4 	bne.w	800a124 <ip4_reass+0x374>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009f3c:	f1bb 0f00 	cmp.w	fp, #0
 8009f40:	d003      	beq.n	8009f4a <ip4_reass+0x19a>
 8009f42:	7fa3      	ldrb	r3, [r4, #30]
 8009f44:	f013 0301 	ands.w	r3, r3, #1
 8009f48:	d07d      	beq.n	800a046 <ip4_reass+0x296>
    if (valid) {
 8009f4a:	f1b8 0f00 	cmp.w	r8, #0
 8009f4e:	d155      	bne.n	8009ffc <ip4_reass+0x24c>
          q = iprh->next_pbuf;
 8009f50:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009f54:	4d5c      	ldr	r5, [pc, #368]	; (800a0c8 <ip4_reass+0x318>)
 8009f56:	88ab      	ldrh	r3, [r5, #4]
 8009f58:	449a      	add	sl, r3
 8009f5a:	f8a5 a004 	strh.w	sl, [r5, #4]
  if (is_last) {
 8009f5e:	f1bb 0f00 	cmp.w	fp, #0
 8009f62:	d107      	bne.n	8009f74 <ip4_reass+0x1c4>
    u16_t datagram_len = (u16_t)(offset + len);
 8009f64:	9b01      	ldr	r3, [sp, #4]
 8009f66:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009f68:	7fa3      	ldrb	r3, [r4, #30]
 8009f6a:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8009f6e:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8009f72:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8009f74:	f1b8 0f01 	cmp.w	r8, #1
 8009f78:	d1bc      	bne.n	8009ef4 <ip4_reass+0x144>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009f7a:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009f7c:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009f80:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009f82:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009f84:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009f88:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8009f8a:	6837      	ldr	r7, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009f8c:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8009f8e:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8009f90:	f853 cb04 	ldr.w	ip, [r3], #4
 8009f94:	428b      	cmp	r3, r1
 8009f96:	f842 cb04 	str.w	ip, [r2], #4
 8009f9a:	d1f9      	bne.n	8009f90 <ip4_reass+0x1e0>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009f9c:	f000 f9ac 	bl	800a2f8 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8009fa0:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8009fa2:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8009fa4:	71b3      	strb	r3, [r6, #6]
 8009fa6:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8009fa8:	72b3      	strb	r3, [r6, #10]
 8009faa:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8009fac:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8009fae:	2f00      	cmp	r7, #0
 8009fb0:	d14b      	bne.n	800a04a <ip4_reass+0x29a>
    if (ipr == reassdatagrams) {
 8009fb2:	6829      	ldr	r1, [r5, #0]
 8009fb4:	42a1      	cmp	r1, r4
 8009fb6:	d159      	bne.n	800a06c <ip4_reass+0x2bc>
      ipr_prev = NULL;
 8009fb8:	4639      	mov	r1, r7
 8009fba:	e059      	b.n	800a070 <ip4_reass+0x2c0>
        if (iprh->end > iprh_tmp->start) {
 8009fbc:	4573      	cmp	r3, lr
 8009fbe:	d86f      	bhi.n	800a0a0 <ip4_reass+0x2f0>
      ipr->p = new_p;
 8009fc0:	6067      	str	r7, [r4, #4]
 8009fc2:	e7bb      	b.n	8009f3c <ip4_reass+0x18c>
    } else if (iprh->start == iprh_tmp->start) {
 8009fc4:	d06c      	beq.n	800a0a0 <ip4_reass+0x2f0>
    } else if (iprh->start < iprh_tmp->end) {
 8009fc6:	88ca      	ldrh	r2, [r1, #6]
 8009fc8:	4282      	cmp	r2, r0
 8009fca:	d869      	bhi.n	800a0a0 <ip4_reass+0x2f0>
      if (iprh_prev != NULL) {
 8009fcc:	b125      	cbz	r5, 8009fd8 <ip4_reass+0x228>
        if (iprh_prev->end != iprh_tmp->start) {
 8009fce:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8009fd0:	4572      	cmp	r2, lr
 8009fd2:	bf18      	it	ne
 8009fd4:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8009fd8:	680a      	ldr	r2, [r1, #0]
 8009fda:	460d      	mov	r5, r1
 8009fdc:	e76f      	b.n	8009ebe <ip4_reass+0x10e>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8009fde:	88eb      	ldrh	r3, [r5, #6]
 8009fe0:	4283      	cmp	r3, r0
 8009fe2:	d906      	bls.n	8009ff2 <ip4_reass+0x242>
 8009fe4:	4b39      	ldr	r3, [pc, #228]	; (800a0cc <ip4_reass+0x31c>)
 8009fe6:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8009fea:	493b      	ldr	r1, [pc, #236]	; (800a0d8 <ip4_reass+0x328>)
 8009fec:	4839      	ldr	r0, [pc, #228]	; (800a0d4 <ip4_reass+0x324>)
 8009fee:	f005 f8cd 	bl	800f18c <iprintf>
      iprh_prev->next_pbuf = new_p;
 8009ff2:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8009ff4:	88ea      	ldrh	r2, [r5, #6]
 8009ff6:	88b3      	ldrh	r3, [r6, #4]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	e79d      	b.n	8009f38 <ip4_reass+0x188>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0a6      	beq.n	8009f50 <ip4_reass+0x1a0>
 800a002:	6859      	ldr	r1, [r3, #4]
 800a004:	888b      	ldrh	r3, [r1, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1a2      	bne.n	8009f50 <ip4_reass+0x1a0>
        q = iprh->next_pbuf;
 800a00a:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800a00c:	b99b      	cbnz	r3, 800a036 <ip4_reass+0x286>
          LWIP_ASSERT("sanity check",
 800a00e:	42b1      	cmp	r1, r6
 800a010:	d106      	bne.n	800a020 <ip4_reass+0x270>
 800a012:	4b2e      	ldr	r3, [pc, #184]	; (800a0cc <ip4_reass+0x31c>)
 800a014:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a018:	4930      	ldr	r1, [pc, #192]	; (800a0dc <ip4_reass+0x32c>)
 800a01a:	482e      	ldr	r0, [pc, #184]	; (800a0d4 <ip4_reass+0x324>)
 800a01c:	f005 f8b6 	bl	800f18c <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a020:	6833      	ldr	r3, [r6, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d096      	beq.n	8009f54 <ip4_reass+0x1a4>
 800a026:	4b29      	ldr	r3, [pc, #164]	; (800a0cc <ip4_reass+0x31c>)
 800a028:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a02c:	492c      	ldr	r1, [pc, #176]	; (800a0e0 <ip4_reass+0x330>)
 800a02e:	4829      	ldr	r0, [pc, #164]	; (800a0d4 <ip4_reass+0x324>)
 800a030:	f005 f8ac 	bl	800f18c <iprintf>
 800a034:	e78e      	b.n	8009f54 <ip4_reass+0x1a4>
          iprh = (struct ip_reass_helper *)q->payload;
 800a036:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800a038:	88f0      	ldrh	r0, [r6, #6]
 800a03a:	8893      	ldrh	r3, [r2, #4]
 800a03c:	4298      	cmp	r0, r3
 800a03e:	d187      	bne.n	8009f50 <ip4_reass+0x1a0>
          q = iprh->next_pbuf;
 800a040:	6813      	ldr	r3, [r2, #0]
 800a042:	4616      	mov	r6, r2
 800a044:	e7e2      	b.n	800a00c <ip4_reass+0x25c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800a046:	4698      	mov	r8, r3
 800a048:	e784      	b.n	8009f54 <ip4_reass+0x1a4>
      iprh = (struct ip_reass_helper *)r->payload;
 800a04a:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_remove_header(r, IP_HLEN);
 800a04e:	2114      	movs	r1, #20
 800a050:	4638      	mov	r0, r7
 800a052:	f000 fe81 	bl	800ad58 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a056:	4639      	mov	r1, r7
 800a058:	4630      	mov	r0, r6
 800a05a:	f001 f813 	bl	800b084 <pbuf_cat>
      r = iprh->next_pbuf;
 800a05e:	f8d8 7000 	ldr.w	r7, [r8]
 800a062:	e7a4      	b.n	8009fae <ip4_reass+0x1fe>
        if (ipr_prev->next == ipr) {
 800a064:	680b      	ldr	r3, [r1, #0]
 800a066:	42a3      	cmp	r3, r4
 800a068:	d002      	beq.n	800a070 <ip4_reass+0x2c0>
 800a06a:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a06c:	2900      	cmp	r1, #0
 800a06e:	d1f9      	bne.n	800a064 <ip4_reass+0x2b4>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a070:	4620      	mov	r0, r4
 800a072:	f7ff fd85 	bl	8009b80 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800a076:	4630      	mov	r0, r6
 800a078:	f000 ffe0 	bl	800b03c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a07c:	88ab      	ldrh	r3, [r5, #4]
    clen = pbuf_clen(p);
 800a07e:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a080:	4283      	cmp	r3, r0
 800a082:	d206      	bcs.n	800a092 <ip4_reass+0x2e2>
 800a084:	4b11      	ldr	r3, [pc, #68]	; (800a0cc <ip4_reass+0x31c>)
 800a086:	f240 229b 	movw	r2, #667	; 0x29b
 800a08a:	4916      	ldr	r1, [pc, #88]	; (800a0e4 <ip4_reass+0x334>)
 800a08c:	4811      	ldr	r0, [pc, #68]	; (800a0d4 <ip4_reass+0x324>)
 800a08e:	f005 f87d 	bl	800f18c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a092:	88a8      	ldrh	r0, [r5, #4]
 800a094:	1b00      	subs	r0, r0, r4
 800a096:	80a8      	strh	r0, [r5, #4]
}
 800a098:	4630      	mov	r0, r6
 800a09a:	b003      	add	sp, #12
 800a09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (ipr->p == NULL) {
 800a0a0:	6863      	ldr	r3, [r4, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f47f af23 	bne.w	8009eee <ip4_reass+0x13e>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a0a8:	4b07      	ldr	r3, [pc, #28]	; (800a0c8 <ip4_reass+0x318>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d006      	beq.n	800a0be <ip4_reass+0x30e>
 800a0b0:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <ip4_reass+0x31c>)
 800a0b2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a0b6:	490c      	ldr	r1, [pc, #48]	; (800a0e8 <ip4_reass+0x338>)
 800a0b8:	4806      	ldr	r0, [pc, #24]	; (800a0d4 <ip4_reass+0x324>)
 800a0ba:	f005 f867 	bl	800f18c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a0be:	2100      	movs	r1, #0
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f7ff fd5d 	bl	8009b80 <ip_reass_dequeue_datagram>
 800a0c6:	e712      	b.n	8009eee <ip4_reass+0x13e>
 800a0c8:	20006938 	.word	0x20006938
 800a0cc:	0801ec9d 	.word	0x0801ec9d
 800a0d0:	0801edb3 	.word	0x0801edb3
 800a0d4:	0801d8d1 	.word	0x0801d8d1
 800a0d8:	0801ed95 	.word	0x0801ed95
 800a0dc:	0801edea 	.word	0x0801edea
 800a0e0:	0801edf7 	.word	0x0801edf7
 800a0e4:	0801ee19 	.word	0x0801ee19
 800a0e8:	0801ee34 	.word	0x0801ee34
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a0ec:	88e8      	ldrh	r0, [r5, #6]
 800a0ee:	f000 f903 	bl	800a2f8 <lwip_htons>
 800a0f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f47f aeaa 	bne.w	8009e50 <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800a0fc:	89e0      	ldrh	r0, [r4, #14]
 800a0fe:	f000 f8fb 	bl	800a2f8 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800a102:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800a106:	2800      	cmp	r0, #0
 800a108:	f43f aea2 	beq.w	8009e50 <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800a10c:	462b      	mov	r3, r5
 800a10e:	f104 0208 	add.w	r2, r4, #8
 800a112:	f105 0114 	add.w	r1, r5, #20
 800a116:	f853 0b04 	ldr.w	r0, [r3], #4
 800a11a:	428b      	cmp	r3, r1
 800a11c:	f842 0b04 	str.w	r0, [r2], #4
 800a120:	d1f9      	bne.n	800a116 <ip4_reass+0x366>
 800a122:	e695      	b.n	8009e50 <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a124:	f1bb 0f00 	cmp.w	fp, #0
 800a128:	f43f af12 	beq.w	8009f50 <ip4_reass+0x1a0>
 800a12c:	f04f 0800 	mov.w	r8, #0
 800a130:	e707      	b.n	8009f42 <ip4_reass+0x192>
 800a132:	bf00      	nop

0800a134 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a138:	8d0b      	ldrh	r3, [r1, #40]	; 0x28
{
 800a13a:	b08d      	sub	sp, #52	; 0x34
 800a13c:	4607      	mov	r7, r0
 800a13e:	468b      	mov	fp, r1
 800a140:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a142:	3b14      	subs	r3, #20
 800a144:	2208      	movs	r2, #8
 800a146:	fb93 f3f2 	sdiv	r3, r3, r2
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	9307      	str	r3, [sp, #28]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a14e:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a150:	781d      	ldrb	r5, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 800a152:	9303      	str	r3, [sp, #12]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a154:	f005 050f 	and.w	r5, r5, #15
 800a158:	00ad      	lsls	r5, r5, #2
 800a15a:	2d14      	cmp	r5, #20
 800a15c:	d109      	bne.n	800a172 <ip4_frag+0x3e>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a15e:	8943      	ldrh	r3, [r0, #10]
 800a160:	2b13      	cmp	r3, #19
 800a162:	d809      	bhi.n	800a178 <ip4_frag+0x44>
 800a164:	4b5e      	ldr	r3, [pc, #376]	; (800a2e0 <ip4_frag+0x1ac>)
 800a166:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a16a:	495e      	ldr	r1, [pc, #376]	; (800a2e4 <ip4_frag+0x1b0>)
 800a16c:	485e      	ldr	r0, [pc, #376]	; (800a2e8 <ip4_frag+0x1b4>)
 800a16e:	f005 f80d 	bl	800f18c <iprintf>
    return ERR_VAL;
 800a172:	f06f 0005 	mvn.w	r0, #5
 800a176:	e013      	b.n	800a1a0 <ip4_frag+0x6c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a178:	9b03      	ldr	r3, [sp, #12]
  u16_t newpbuflen = 0;
 800a17a:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a17c:	88d8      	ldrh	r0, [r3, #6]
 800a17e:	f000 f8bb 	bl	800a2f8 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800a182:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a186:	893c      	ldrh	r4, [r7, #8]
  ofo = tmp & IP_OFFMASK;
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 800a18e:	3c14      	subs	r4, #20
 800a190:	9309      	str	r3, [sp, #36]	; 0x24

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a192:	9b07      	ldr	r3, [sp, #28]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800a194:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	b29b      	uxth	r3, r3
 800a19a:	9308      	str	r3, [sp, #32]
  while (left) {
 800a19c:	b91c      	cbnz	r4, 800a1a6 <ip4_frag+0x72>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a19e:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800a1a0:	b00d      	add	sp, #52	; 0x34
 800a1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a1a6:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a1a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a1ac:	2114      	movs	r1, #20
 800a1ae:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a1b0:	42a3      	cmp	r3, r4
 800a1b2:	bf28      	it	cs
 800a1b4:	4623      	movcs	r3, r4
 800a1b6:	9306      	str	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a1b8:	f000 fe6a 	bl	800ae90 <pbuf_alloc>
    if (rambuf == NULL) {
 800a1bc:	4680      	mov	r8, r0
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d037      	beq.n	800a232 <ip4_frag+0xfe>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a1c2:	8943      	ldrh	r3, [r0, #10]
 800a1c4:	2b13      	cmp	r3, #19
 800a1c6:	d806      	bhi.n	800a1d6 <ip4_frag+0xa2>
 800a1c8:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <ip4_frag+0x1ac>)
 800a1ca:	f240 3225 	movw	r2, #805	; 0x325
 800a1ce:	4947      	ldr	r1, [pc, #284]	; (800a2ec <ip4_frag+0x1b8>)
 800a1d0:	4845      	ldr	r0, [pc, #276]	; (800a2e8 <ip4_frag+0x1b4>)
 800a1d2:	f004 ffdb 	bl	800f18c <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a1d6:	9b03      	ldr	r3, [sp, #12]
 800a1d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	3114      	adds	r1, #20
 800a1e0:	f853 0b04 	ldr.w	r0, [r3], #4
 800a1e4:	428b      	cmp	r3, r1
 800a1e6:	f842 0b04 	str.w	r0, [r2], #4
 800a1ea:	d1f9      	bne.n	800a1e0 <ip4_frag+0xac>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a1ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 800a1f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a1f4:	9304      	str	r3, [sp, #16]
    while (left_to_copy) {
 800a1f6:	f1b9 0f00 	cmp.w	r9, #0
 800a1fa:	d040      	beq.n	800a27e <ip4_frag+0x14a>
      u16_t plen = (u16_t)(p->len - poff);
 800a1fc:	897b      	ldrh	r3, [r7, #10]
 800a1fe:	1b5e      	subs	r6, r3, r5
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a200:	42ab      	cmp	r3, r5
      u16_t plen = (u16_t)(p->len - poff);
 800a202:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a204:	d206      	bcs.n	800a214 <ip4_frag+0xe0>
 800a206:	4b36      	ldr	r3, [pc, #216]	; (800a2e0 <ip4_frag+0x1ac>)
 800a208:	f240 322d 	movw	r2, #813	; 0x32d
 800a20c:	4938      	ldr	r1, [pc, #224]	; (800a2f0 <ip4_frag+0x1bc>)
 800a20e:	4836      	ldr	r0, [pc, #216]	; (800a2e8 <ip4_frag+0x1b4>)
 800a210:	f004 ffbc 	bl	800f18c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a214:	454e      	cmp	r6, r9
 800a216:	bf28      	it	cs
 800a218:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 800a21a:	b916      	cbnz	r6, 800a222 <ip4_frag+0xee>
        p = p->next;
 800a21c:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800a21e:	2500      	movs	r5, #0
 800a220:	e7e9      	b.n	800a1f6 <ip4_frag+0xc2>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a222:	2005      	movs	r0, #5
 800a224:	f000 fb86 	bl	800a934 <memp_malloc>
      if (pcr == NULL) {
 800a228:	4682      	mov	sl, r0
 800a22a:	b928      	cbnz	r0, 800a238 <ip4_frag+0x104>
        pbuf_free(rambuf);
 800a22c:	4640      	mov	r0, r8
 800a22e:	f000 fdc7 	bl	800adc0 <pbuf_free>
  return ERR_MEM;
 800a232:	f04f 30ff 	mov.w	r0, #4294967295
 800a236:	e7b3      	b.n	800a1a0 <ip4_frag+0x6c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a238:	9601      	str	r6, [sp, #4]
 800a23a:	2241      	movs	r2, #65	; 0x41
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4631      	mov	r1, r6
 800a240:	442b      	add	r3, r5
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	4603      	mov	r3, r0
 800a246:	2000      	movs	r0, #0
 800a248:	f000 fd68 	bl	800ad1c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800a24c:	b918      	cbnz	r0, 800a256 <ip4_frag+0x122>
        ip_frag_free_pbuf_custom_ref(pcr);
 800a24e:	4650      	mov	r0, sl
 800a250:	f7ff fd68 	bl	8009d24 <ip_frag_free_pbuf_custom_ref>
 800a254:	e7ea      	b.n	800a22c <ip4_frag+0xf8>
 800a256:	900b      	str	r0, [sp, #44]	; 0x2c
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a258:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 800a25c:	4638      	mov	r0, r7
 800a25e:	f000 fef5 	bl	800b04c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a262:	4b24      	ldr	r3, [pc, #144]	; (800a2f4 <ip4_frag+0x1c0>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a264:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 800a268:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a26c:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800a270:	4640      	mov	r0, r8
 800a272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a274:	f000 ff06 	bl	800b084 <pbuf_cat>
      if (left_to_copy) {
 800a278:	f1b9 0f00 	cmp.w	r9, #0
 800a27c:	d1ce      	bne.n	800a21c <ip4_frag+0xe8>
    tmp = (IP_OFFMASK & (ofo));
 800a27e:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 800a280:	4435      	add	r5, r6
    tmp = (IP_OFFMASK & (ofo));
 800a282:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800a286:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
    poff = (u16_t)(poff + newpbuflen);
 800a28a:	b2ad      	uxth	r5, r5
    last = (left <= netif->mtu - IP_HLEN);
 800a28c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800a28e:	42a3      	cmp	r3, r4
 800a290:	dd01      	ble.n	800a296 <ip4_frag+0x162>
 800a292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a294:	b10b      	cbz	r3, 800a29a <ip4_frag+0x166>
      tmp = tmp | IP_MF;
 800a296:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a29a:	f000 f82d 	bl	800a2f8 <lwip_htons>
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a2a2:	9b06      	ldr	r3, [sp, #24]
 800a2a4:	f103 0014 	add.w	r0, r3, #20
 800a2a8:	b280      	uxth	r0, r0
 800a2aa:	f000 f825 	bl	800a2f8 <lwip_htons>
 800a2ae:	9b04      	ldr	r3, [sp, #16]
    IPH_CHKSUM_SET(iphdr, 0);
 800a2b0:	9a04      	ldr	r2, [sp, #16]
    netif->output(netif, rambuf, dest);
 800a2b2:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a2b4:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a2b6:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800a2b8:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 800a2ba:	7293      	strb	r3, [r2, #10]
 800a2bc:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 800a2be:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a2c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2c4:	4798      	blx	r3
    pbuf_free(rambuf);
 800a2c6:	4640      	mov	r0, r8
 800a2c8:	f000 fd7a 	bl	800adc0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a2cc:	9b06      	ldr	r3, [sp, #24]
    ofo = (u16_t)(ofo + nfb);
 800a2ce:	9a07      	ldr	r2, [sp, #28]
    left = (u16_t)(left - fragsize);
 800a2d0:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 800a2d6:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	9305      	str	r3, [sp, #20]
 800a2dc:	e75e      	b.n	800a19c <ip4_frag+0x68>
 800a2de:	bf00      	nop
 800a2e0:	0801ec9d 	.word	0x0801ec9d
 800a2e4:	0801ee54 	.word	0x0801ee54
 800a2e8:	0801d8d1 	.word	0x0801d8d1
 800a2ec:	0801ee6f 	.word	0x0801ee6f
 800a2f0:	0801ee8f 	.word	0x0801ee8f
 800a2f4:	08009d51 	.word	0x08009d51

0800a2f8 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800a2f8:	ba40      	rev16	r0, r0
}
 800a2fa:	b280      	uxth	r0, r0
 800a2fc:	4770      	bx	lr

0800a2fe <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800a2fe:	ba00      	rev	r0, r0
 800a300:	4770      	bx	lr

0800a302 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800a302:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 800a304:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800a306:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800a30a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800a30e:	d007      	beq.n	800a320 <lwip_standard_chksum+0x1e>
 800a310:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 800a312:	bfc1      	itttt	gt
 800a314:	7803      	ldrbgt	r3, [r0, #0]
    len--;
 800a316:	f101 31ff 	addgt.w	r1, r1, #4294967295
    ((u8_t *)&t)[1] = *pb++;
 800a31a:	3001      	addgt	r0, #1
 800a31c:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 800a320:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 800a322:	2901      	cmp	r1, #1
 800a324:	dc15      	bgt.n	800a352 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800a326:	bf04      	itt	eq
 800a328:	7803      	ldrbeq	r3, [r0, #0]
 800a32a:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 800a32e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a332:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800a334:	b298      	uxth	r0, r3
 800a336:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 800a33a:	b298      	uxth	r0, r3
 800a33c:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 800a340:	b124      	cbz	r4, 800a34c <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 800a342:	0203      	lsls	r3, r0, #8
 800a344:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800a348:	b29b      	uxth	r3, r3
 800a34a:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 800a34c:	b280      	uxth	r0, r0
 800a34e:	b002      	add	sp, #8
 800a350:	bd10      	pop	{r4, pc}
    sum += *ps++;
 800a352:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 800a356:	3902      	subs	r1, #2
    sum += *ps++;
 800a358:	441a      	add	r2, r3
 800a35a:	e7e2      	b.n	800a322 <lwip_standard_chksum+0x20>

0800a35c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800a35c:	b570      	push	{r4, r5, r6, lr}
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800a35e:	2600      	movs	r6, #0
{
 800a360:	4605      	mov	r5, r0

  acc = 0;
 800a362:	4634      	mov	r4, r6
  for (q = p; q != NULL; q = q->next) {
 800a364:	b945      	cbnz	r5, 800a378 <inet_chksum_pbuf+0x1c>
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
    }
  }

  if (swapped) {
 800a366:	b126      	cbz	r6, 800a372 <inet_chksum_pbuf+0x16>
    acc = SWAP_BYTES_IN_WORD(acc);
 800a368:	0223      	lsls	r3, r4, #8
 800a36a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a36e:	b29b      	uxth	r3, r3
 800a370:	431c      	orrs	r4, r3
  }
  return (u16_t)~(acc & 0xffffUL);
 800a372:	43e0      	mvns	r0, r4
}
 800a374:	b280      	uxth	r0, r0
 800a376:	bd70      	pop	{r4, r5, r6, pc}
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a378:	8969      	ldrh	r1, [r5, #10]
 800a37a:	6868      	ldr	r0, [r5, #4]
 800a37c:	f7ff ffc1 	bl	800a302 <lwip_standard_chksum>
    if (q->len % 2 != 0) {
 800a380:	896b      	ldrh	r3, [r5, #10]
    acc += LWIP_CHKSUM(q->payload, q->len);
 800a382:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 800a384:	07db      	lsls	r3, r3, #31
    acc = FOLD_U32T(acc);
 800a386:	b284      	uxth	r4, r0
 800a388:	eb04 4410 	add.w	r4, r4, r0, lsr #16
    if (q->len % 2 != 0) {
 800a38c:	d506      	bpl.n	800a39c <inet_chksum_pbuf+0x40>
      acc = SWAP_BYTES_IN_WORD(acc);
 800a38e:	0223      	lsls	r3, r4, #8
 800a390:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800a394:	f086 0601 	eor.w	r6, r6, #1
 800a398:	b29b      	uxth	r3, r3
 800a39a:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 800a39c:	682d      	ldr	r5, [r5, #0]
 800a39e:	e7e1      	b.n	800a364 <inet_chksum_pbuf+0x8>

0800a3a0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a3a0:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a3a2:	f004 fe25 	bl	800eff0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3a6:	f000 f80d 	bl	800a3c4 <mem_init>
  memp_init();
 800a3aa:	f000 fab5 	bl	800a918 <memp_init>
  pbuf_init();
  netif_init();
 800a3ae:	f000 fb4d 	bl	800aa4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3b2:	f004 fa3d 	bl	800e830 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3b6:	f000 ffe5 	bl	800b384 <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800a3ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 800a3be:	f004 b9e3 	b.w	800e788 <sys_timeouts_init>
	...

0800a3c4 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3c4:	4b13      	ldr	r3, [pc, #76]	; (800a414 <mem_init+0x50>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800a3c6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3ca:	4813      	ldr	r0, [pc, #76]	; (800a418 <mem_init+0x54>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 800a3cc:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3d0:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a3d4:	300c      	adds	r0, #12
{
 800a3d6:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 800a3d8:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800a3da:	2200      	movs	r2, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a3dc:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->prev = 0;
 800a3e0:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 800a3e2:	f503 5220 	add.w	r2, r3, #10240	; 0x2800
  lfree = (struct mem *)(void *)ram;
 800a3e6:	f840 3c04 	str.w	r3, [r0, #-4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a3ea:	6011      	str	r1, [r2, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a3ec:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a3ee:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a3f2:	f642 0204 	movw	r2, #10244	; 0x2804
 800a3f6:	5499      	strb	r1, [r3, r2]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a3f8:	f004 fe06 	bl	800f008 <sys_mutex_new>
 800a3fc:	b140      	cbz	r0, 800a410 <mem_init+0x4c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <mem_init+0x58>)
 800a400:	f240 221f 	movw	r2, #543	; 0x21f
 800a404:	4906      	ldr	r1, [pc, #24]	; (800a420 <mem_init+0x5c>)
 800a406:	4807      	ldr	r0, [pc, #28]	; (800a424 <mem_init+0x60>)
  }
}
 800a408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a40c:	f004 bebe 	b.w	800f18c <iprintf>
}
 800a410:	bd10      	pop	{r4, pc}
 800a412:	bf00      	nop
 800a414:	2000a8df 	.word	0x2000a8df
 800a418:	20006940 	.word	0x20006940
 800a41c:	0801ee9e 	.word	0x0801ee9e
 800a420:	0801ef0a 	.word	0x0801ef0a
 800a424:	0801d8d1 	.word	0x0801d8d1

0800a428 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a42a:	4604      	mov	r4, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f000 80b9 	beq.w	800a5a4 <mem_free+0x17c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a432:	0783      	lsls	r3, r0, #30
 800a434:	d00c      	beq.n	800a450 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a436:	4b5c      	ldr	r3, [pc, #368]	; (800a5a8 <mem_free+0x180>)
 800a438:	f240 2273 	movw	r2, #627	; 0x273
 800a43c:	495b      	ldr	r1, [pc, #364]	; (800a5ac <mem_free+0x184>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a43e:	485c      	ldr	r0, [pc, #368]	; (800a5b0 <mem_free+0x188>)
 800a440:	f004 fea4 	bl	800f18c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a444:	f004 fe08 	bl	800f058 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 800a44c:	f004 be10 	b.w	800f070 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a450:	4f58      	ldr	r7, [pc, #352]	; (800a5b4 <mem_free+0x18c>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a452:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	463d      	mov	r5, r7
 800a45a:	42b3      	cmp	r3, r6
 800a45c:	d804      	bhi.n	800a468 <mem_free+0x40>
 800a45e:	f100 030c 	add.w	r3, r0, #12
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	429a      	cmp	r2, r3
 800a466:	d204      	bcs.n	800a472 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a468:	4b4f      	ldr	r3, [pc, #316]	; (800a5a8 <mem_free+0x180>)
 800a46a:	f240 227f 	movw	r2, #639	; 0x27f
 800a46e:	4952      	ldr	r1, [pc, #328]	; (800a5b8 <mem_free+0x190>)
 800a470:	e7e5      	b.n	800a43e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 800a472:	f107 000c 	add.w	r0, r7, #12
 800a476:	f004 fdd6 	bl	800f026 <sys_mutex_lock>
  if (!mem->used) {
 800a47a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a47e:	b95b      	cbnz	r3, 800a498 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a480:	4b49      	ldr	r3, [pc, #292]	; (800a5a8 <mem_free+0x180>)
 800a482:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a486:	494d      	ldr	r1, [pc, #308]	; (800a5bc <mem_free+0x194>)
 800a488:	4849      	ldr	r0, [pc, #292]	; (800a5b0 <mem_free+0x188>)
 800a48a:	f004 fe7f 	bl	800f18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a48e:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 800a492:	f004 fdcd 	bl	800f030 <sys_mutex_unlock>
 800a496:	e7d5      	b.n	800a444 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 800a498:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a49c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a4a0:	d875      	bhi.n	800a58e <mem_free+0x166>
  pmem = ptr_to_mem(mem->prev);
 800a4a2:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a4a6:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 800a4aa:	d870      	bhi.n	800a58e <mem_free+0x166>
  return (mem_size_t)((u8_t *)mem - ram);
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	1a73      	subs	r3, r6, r1
 800a4b0:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a4b2:	4283      	cmp	r3, r0
 800a4b4:	d002      	beq.n	800a4bc <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a4b6:	5a08      	ldrh	r0, [r1, r0]
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	d168      	bne.n	800a58e <mem_free+0x166>
  return (struct mem *)(void *)&ram[ptr];
 800a4bc:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a4be:	6868      	ldr	r0, [r5, #4]
 800a4c0:	4282      	cmp	r2, r0
 800a4c2:	d002      	beq.n	800a4ca <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a4c4:	8852      	ldrh	r2, [r2, #2]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d161      	bne.n	800a58e <mem_free+0x166>
  mem->used = 0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800a4d0:	68ab      	ldr	r3, [r5, #8]
 800a4d2:	42b3      	cmp	r3, r6
 800a4d4:	d864      	bhi.n	800a5a0 <mem_free+0x178>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a4d6:	428e      	cmp	r6, r1
 800a4d8:	d206      	bcs.n	800a4e8 <mem_free+0xc0>
 800a4da:	4b33      	ldr	r3, [pc, #204]	; (800a5a8 <mem_free+0x180>)
 800a4dc:	f240 12df 	movw	r2, #479	; 0x1df
 800a4e0:	4937      	ldr	r1, [pc, #220]	; (800a5c0 <mem_free+0x198>)
 800a4e2:	4833      	ldr	r0, [pc, #204]	; (800a5b0 <mem_free+0x188>)
 800a4e4:	f004 fe52 	bl	800f18c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a4e8:	686b      	ldr	r3, [r5, #4]
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	d306      	bcc.n	800a4fc <mem_free+0xd4>
 800a4ee:	4b2e      	ldr	r3, [pc, #184]	; (800a5a8 <mem_free+0x180>)
 800a4f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a4f4:	4933      	ldr	r1, [pc, #204]	; (800a5c4 <mem_free+0x19c>)
 800a4f6:	482e      	ldr	r0, [pc, #184]	; (800a5b0 <mem_free+0x188>)
 800a4f8:	f004 fe48 	bl	800f18c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a4fc:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800a500:	b133      	cbz	r3, 800a510 <mem_free+0xe8>
 800a502:	4b29      	ldr	r3, [pc, #164]	; (800a5a8 <mem_free+0x180>)
 800a504:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a508:	492f      	ldr	r1, [pc, #188]	; (800a5c8 <mem_free+0x1a0>)
 800a50a:	4829      	ldr	r0, [pc, #164]	; (800a5b0 <mem_free+0x188>)
 800a50c:	f004 fe3e 	bl	800f18c <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a510:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800a514:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a518:	d906      	bls.n	800a528 <mem_free+0x100>
 800a51a:	4b23      	ldr	r3, [pc, #140]	; (800a5a8 <mem_free+0x180>)
 800a51c:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a520:	492a      	ldr	r1, [pc, #168]	; (800a5cc <mem_free+0x1a4>)
 800a522:	4823      	ldr	r0, [pc, #140]	; (800a5b0 <mem_free+0x188>)
 800a524:	f004 fe32 	bl	800f18c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a52e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a530:	4296      	cmp	r6, r2
 800a532:	d012      	beq.n	800a55a <mem_free+0x132>
 800a534:	7910      	ldrb	r0, [r2, #4]
 800a536:	b980      	cbnz	r0, 800a55a <mem_free+0x132>
 800a538:	6868      	ldr	r0, [r5, #4]
 800a53a:	4282      	cmp	r2, r0
 800a53c:	d00d      	beq.n	800a55a <mem_free+0x132>
    if (lfree == nmem) {
 800a53e:	68a8      	ldr	r0, [r5, #8]
 800a540:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 800a542:	5a5a      	ldrh	r2, [r3, r1]
 800a544:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a548:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 800a54a:	bf08      	it	eq
 800a54c:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a54e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a552:	bf1e      	ittt	ne
 800a554:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800a556:	1af1      	subne	r1, r6, r3
 800a558:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800a55a:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 800a55e:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 800a560:	428e      	cmp	r6, r1
 800a562:	d00f      	beq.n	800a584 <mem_free+0x15c>
 800a564:	7908      	ldrb	r0, [r1, #4]
 800a566:	b968      	cbnz	r0, 800a584 <mem_free+0x15c>
    if (lfree == mem) {
 800a568:	68a8      	ldr	r0, [r5, #8]
 800a56a:	4286      	cmp	r6, r0
      lfree = pmem;
 800a56c:	bf08      	it	eq
 800a56e:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 800a570:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a574:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a576:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800a57a:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a57e:	bf1c      	itt	ne
 800a580:	185b      	addne	r3, r3, r1
 800a582:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800a584:	4812      	ldr	r0, [pc, #72]	; (800a5d0 <mem_free+0x1a8>)
}
 800a586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 800a58a:	f004 bd51 	b.w	800f030 <sys_mutex_unlock>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a58e:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <mem_free+0x180>)
 800a590:	f240 2295 	movw	r2, #661	; 0x295
 800a594:	490f      	ldr	r1, [pc, #60]	; (800a5d4 <mem_free+0x1ac>)
 800a596:	4806      	ldr	r0, [pc, #24]	; (800a5b0 <mem_free+0x188>)
 800a598:	f004 fdf8 	bl	800f18c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a59c:	480c      	ldr	r0, [pc, #48]	; (800a5d0 <mem_free+0x1a8>)
 800a59e:	e778      	b.n	800a492 <mem_free+0x6a>
    lfree = mem;
 800a5a0:	60ae      	str	r6, [r5, #8]
 800a5a2:	e798      	b.n	800a4d6 <mem_free+0xae>
}
 800a5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	0801ee9e 	.word	0x0801ee9e
 800a5ac:	0801ef25 	.word	0x0801ef25
 800a5b0:	0801d8d1 	.word	0x0801d8d1
 800a5b4:	20006940 	.word	0x20006940
 800a5b8:	0801ef46 	.word	0x0801ef46
 800a5bc:	0801ef5f 	.word	0x0801ef5f
 800a5c0:	0801efb7 	.word	0x0801efb7
 800a5c4:	0801efce 	.word	0x0801efce
 800a5c8:	0801efe8 	.word	0x0801efe8
 800a5cc:	0801f003 	.word	0x0801f003
 800a5d0:	2000694c 	.word	0x2000694c
 800a5d4:	0801ef85 	.word	0x0801ef85

0800a5d8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a5d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a5dc:	1cce      	adds	r6, r1, #3
{
 800a5de:	4604      	mov	r4, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a5e0:	f026 0603 	bic.w	r6, r6, #3
 800a5e4:	b2b6      	uxth	r6, r6
  if (newsize < MIN_SIZE_ALIGNED) {
 800a5e6:	2e0b      	cmp	r6, #11
 800a5e8:	d904      	bls.n	800a5f4 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a5ea:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 800a5ee:	d902      	bls.n	800a5f6 <mem_trim+0x1e>
    return NULL;
 800a5f0:	2400      	movs	r4, #0
 800a5f2:	e01a      	b.n	800a62a <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 800a5f4:	260c      	movs	r6, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a5f6:	42b1      	cmp	r1, r6
 800a5f8:	d8fa      	bhi.n	800a5f0 <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a5fa:	4d43      	ldr	r5, [pc, #268]	; (800a708 <mem_trim+0x130>)
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d802      	bhi.n	800a608 <mem_trim+0x30>
 800a602:	686b      	ldr	r3, [r5, #4]
 800a604:	42a3      	cmp	r3, r4
 800a606:	d806      	bhi.n	800a616 <mem_trim+0x3e>
 800a608:	4b40      	ldr	r3, [pc, #256]	; (800a70c <mem_trim+0x134>)
 800a60a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a60e:	4940      	ldr	r1, [pc, #256]	; (800a710 <mem_trim+0x138>)
 800a610:	4840      	ldr	r0, [pc, #256]	; (800a714 <mem_trim+0x13c>)
 800a612:	f004 fdbb 	bl	800f18c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a616:	682b      	ldr	r3, [r5, #0]
 800a618:	42a3      	cmp	r3, r4
 800a61a:	d802      	bhi.n	800a622 <mem_trim+0x4a>
 800a61c:	686a      	ldr	r2, [r5, #4]
 800a61e:	42a2      	cmp	r2, r4
 800a620:	d806      	bhi.n	800a630 <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a622:	f004 fd19 	bl	800f058 <sys_arch_protect>
 800a626:	f004 fd23 	bl	800f070 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800a62a:	4620      	mov	r0, r4
 800a62c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a630:	f1a4 0708 	sub.w	r7, r4, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a634:	f834 9c08 	ldrh.w	r9, [r4, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 800a638:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a63a:	f1a9 0908 	sub.w	r9, r9, #8
  return (mem_size_t)((u8_t *)mem - ram);
 800a63e:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a640:	eba9 0907 	sub.w	r9, r9, r7
 800a644:	fa1f f989 	uxth.w	r9, r9
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a648:	45b1      	cmp	r9, r6
 800a64a:	d226      	bcs.n	800a69a <mem_trim+0xc2>
 800a64c:	4b2f      	ldr	r3, [pc, #188]	; (800a70c <mem_trim+0x134>)
 800a64e:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a652:	4931      	ldr	r1, [pc, #196]	; (800a718 <mem_trim+0x140>)
 800a654:	482f      	ldr	r0, [pc, #188]	; (800a714 <mem_trim+0x13c>)
 800a656:	f004 fd99 	bl	800f18c <iprintf>
 800a65a:	e7c9      	b.n	800a5f0 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a65c:	f106 0314 	add.w	r3, r6, #20
 800a660:	454b      	cmp	r3, r9
 800a662:	d84c      	bhi.n	800a6fe <mem_trim+0x126>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a664:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a668:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a66c:	441e      	add	r6, r3
 800a66e:	b2b6      	uxth	r6, r6
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a670:	d106      	bne.n	800a680 <mem_trim+0xa8>
 800a672:	4b26      	ldr	r3, [pc, #152]	; (800a70c <mem_trim+0x134>)
 800a674:	f240 3216 	movw	r2, #790	; 0x316
 800a678:	4928      	ldr	r1, [pc, #160]	; (800a71c <mem_trim+0x144>)
 800a67a:	4826      	ldr	r0, [pc, #152]	; (800a714 <mem_trim+0x13c>)
 800a67c:	f004 fd86 	bl	800f18c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800a680:	682b      	ldr	r3, [r5, #0]
    if (mem2 < lfree) {
 800a682:	68a9      	ldr	r1, [r5, #8]
  return (struct mem *)(void *)&ram[ptr];
 800a684:	199a      	adds	r2, r3, r6
    if (mem2 < lfree) {
 800a686:	4291      	cmp	r1, r2
    mem2->used = 0;
 800a688:	f04f 0100 	mov.w	r1, #0
 800a68c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 800a68e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
      lfree = mem2;
 800a692:	bf88      	it	hi
 800a694:	60aa      	strhi	r2, [r5, #8]
    mem2->next = mem->next;
 800a696:	5399      	strh	r1, [r3, r6]
 800a698:	e028      	b.n	800a6ec <mem_trim+0x114>
  if (newsize == size) {
 800a69a:	d0c6      	beq.n	800a62a <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 800a69c:	4820      	ldr	r0, [pc, #128]	; (800a720 <mem_trim+0x148>)
 800a69e:	f004 fcc2 	bl	800f026 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800a6a2:	f834 ac08 	ldrh.w	sl, [r4, #-8]
  return (struct mem *)(void *)&ram[ptr];
 800a6a6:	f8d5 b000 	ldr.w	fp, [r5]
 800a6aa:	eb0b 080a 	add.w	r8, fp, sl
  if (mem2->used == 0) {
 800a6ae:	f898 3004 	ldrb.w	r3, [r8, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1d2      	bne.n	800a65c <mem_trim+0x84>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a6b6:	f5ba 5f20 	cmp.w	sl, #10240	; 0x2800
 800a6ba:	d106      	bne.n	800a6ca <mem_trim+0xf2>
 800a6bc:	4b13      	ldr	r3, [pc, #76]	; (800a70c <mem_trim+0x134>)
 800a6be:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a6c2:	4916      	ldr	r1, [pc, #88]	; (800a71c <mem_trim+0x144>)
 800a6c4:	4813      	ldr	r0, [pc, #76]	; (800a714 <mem_trim+0x13c>)
 800a6c6:	f004 fd61 	bl	800f18c <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6ca:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 800a6ce:	68a9      	ldr	r1, [r5, #8]
    next = mem2->next;
 800a6d0:	f83b 000a 	ldrh.w	r0, [fp, sl]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6d4:	441e      	add	r6, r3
 800a6d6:	682b      	ldr	r3, [r5, #0]
    if (lfree == mem2) {
 800a6d8:	4541      	cmp	r1, r8
    mem2->used = 0;
 800a6da:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a6de:	b2b6      	uxth	r6, r6
 800a6e0:	eb03 0206 	add.w	r2, r3, r6
    mem2->used = 0;
 800a6e4:	7111      	strb	r1, [r2, #4]
      lfree = ptr_to_mem(ptr2);
 800a6e6:	bf08      	it	eq
 800a6e8:	60aa      	streq	r2, [r5, #8]
    mem2->next = next;
 800a6ea:	5398      	strh	r0, [r3, r6]
    mem2->prev = ptr;
 800a6ec:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 800a6ee:	f824 6c08 	strh.w	r6, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6f2:	5b9a      	ldrh	r2, [r3, r6]
 800a6f4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a6f8:	bf1c      	itt	ne
 800a6fa:	189b      	addne	r3, r3, r2
 800a6fc:	805e      	strhne	r6, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800a6fe:	4808      	ldr	r0, [pc, #32]	; (800a720 <mem_trim+0x148>)
 800a700:	f004 fc96 	bl	800f030 <sys_mutex_unlock>
  return rmem;
 800a704:	e791      	b.n	800a62a <mem_trim+0x52>
 800a706:	bf00      	nop
 800a708:	20006940 	.word	0x20006940
 800a70c:	0801ee9e 	.word	0x0801ee9e
 800a710:	0801f02d 	.word	0x0801f02d
 800a714:	0801d8d1 	.word	0x0801d8d1
 800a718:	0801f044 	.word	0x0801f044
 800a71c:	0801f064 	.word	0x0801f064
 800a720:	2000694c 	.word	0x2000694c

0800a724 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a728:	2800      	cmp	r0, #0
 800a72a:	f000 808a 	beq.w	800a842 <mem_malloc+0x11e>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a72e:	1cc5      	adds	r5, r0, #3
 800a730:	f025 0503 	bic.w	r5, r5, #3
 800a734:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 800a736:	2d0b      	cmp	r5, #11
 800a738:	d904      	bls.n	800a744 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a73a:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 800a73e:	d902      	bls.n	800a746 <mem_malloc+0x22>
    return NULL;
 800a740:	2000      	movs	r0, #0
 800a742:	e07e      	b.n	800a842 <mem_malloc+0x11e>
    size = MIN_SIZE_ALIGNED;
 800a744:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a746:	42a8      	cmp	r0, r5
 800a748:	d8fa      	bhi.n	800a740 <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a74a:	4f43      	ldr	r7, [pc, #268]	; (800a858 <mem_malloc+0x134>)
 800a74c:	f107 000c 	add.w	r0, r7, #12
 800a750:	f004 fc69 	bl	800f026 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a758:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a75c:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 800a760:	1ab6      	subs	r6, r6, r2
 800a762:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a764:	4286      	cmp	r6, r0
 800a766:	d303      	bcc.n	800a770 <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a768:	483c      	ldr	r0, [pc, #240]	; (800a85c <mem_malloc+0x138>)
 800a76a:	f004 fc61 	bl	800f030 <sys_mutex_unlock>
 800a76e:	e7e7      	b.n	800a740 <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 800a770:	1994      	adds	r4, r2, r6
 800a772:	5b91      	ldrh	r1, [r2, r6]
      if ((!mem->used) &&
 800a774:	7923      	ldrb	r3, [r4, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d16b      	bne.n	800a852 <mem_malloc+0x12e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a77a:	ebac 0306 	sub.w	r3, ip, r6
 800a77e:	440b      	add	r3, r1
      if ((!mem->used) &&
 800a780:	42ab      	cmp	r3, r5
 800a782:	d366      	bcc.n	800a852 <mem_malloc+0x12e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a784:	f105 0214 	add.w	r2, r5, #20
 800a788:	4293      	cmp	r3, r2
 800a78a:	d35c      	bcc.n	800a846 <mem_malloc+0x122>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a78c:	f105 0808 	add.w	r8, r5, #8
 800a790:	44b0      	add	r8, r6
 800a792:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a796:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 800a79a:	d106      	bne.n	800a7aa <mem_malloc+0x86>
 800a79c:	4b30      	ldr	r3, [pc, #192]	; (800a860 <mem_malloc+0x13c>)
 800a79e:	f240 3287 	movw	r2, #903	; 0x387
 800a7a2:	4930      	ldr	r1, [pc, #192]	; (800a864 <mem_malloc+0x140>)
 800a7a4:	4830      	ldr	r0, [pc, #192]	; (800a868 <mem_malloc+0x144>)
 800a7a6:	f004 fcf1 	bl	800f18c <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 800a7aa:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 800a7ac:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 800a7ae:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 800a7b2:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 800a7b4:	8821      	ldrh	r1, [r4, #0]
 800a7b6:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 800a7ba:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 800a7bc:	2201      	movs	r2, #1
          mem->next = ptr2;
 800a7be:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 800a7c2:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a7c4:	f833 2008 	ldrh.w	r2, [r3, r8]
 800a7c8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 800a7cc:	d002      	beq.n	800a7d4 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	d112      	bne.n	800a800 <mem_malloc+0xdc>
  return (struct mem *)(void *)&ram[ptr];
 800a7da:	4623      	mov	r3, r4
 800a7dc:	e9d7 0200 	ldrd	r0, r2, [r7]
          while (cur->used && cur != ram_end) {
 800a7e0:	7919      	ldrb	r1, [r3, #4]
 800a7e2:	b111      	cbz	r1, 800a7ea <mem_malloc+0xc6>
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d131      	bne.n	800a84c <mem_malloc+0x128>
 800a7e8:	4613      	mov	r3, r2
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a7ea:	429a      	cmp	r2, r3
          lfree = cur;
 800a7ec:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a7ee:	d007      	beq.n	800a800 <mem_malloc+0xdc>
 800a7f0:	b131      	cbz	r1, 800a800 <mem_malloc+0xdc>
 800a7f2:	4b1b      	ldr	r3, [pc, #108]	; (800a860 <mem_malloc+0x13c>)
 800a7f4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a7f8:	491c      	ldr	r1, [pc, #112]	; (800a86c <mem_malloc+0x148>)
 800a7fa:	481b      	ldr	r0, [pc, #108]	; (800a868 <mem_malloc+0x144>)
 800a7fc:	f004 fcc6 	bl	800f18c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a800:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 800a802:	4816      	ldr	r0, [pc, #88]	; (800a85c <mem_malloc+0x138>)
 800a804:	f004 fc14 	bl	800f030 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4425      	add	r5, r4
 800a80c:	42ab      	cmp	r3, r5
 800a80e:	d206      	bcs.n	800a81e <mem_malloc+0xfa>
 800a810:	4b13      	ldr	r3, [pc, #76]	; (800a860 <mem_malloc+0x13c>)
 800a812:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a816:	4916      	ldr	r1, [pc, #88]	; (800a870 <mem_malloc+0x14c>)
 800a818:	4813      	ldr	r0, [pc, #76]	; (800a868 <mem_malloc+0x144>)
 800a81a:	f004 fcb7 	bl	800f18c <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a81e:	07a3      	lsls	r3, r4, #30
 800a820:	d00d      	beq.n	800a83e <mem_malloc+0x11a>
 800a822:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <mem_malloc+0x13c>)
 800a824:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a828:	4912      	ldr	r1, [pc, #72]	; (800a874 <mem_malloc+0x150>)
 800a82a:	480f      	ldr	r0, [pc, #60]	; (800a868 <mem_malloc+0x144>)
 800a82c:	f004 fcae 	bl	800f18c <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a830:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <mem_malloc+0x13c>)
 800a832:	f240 32be 	movw	r2, #958	; 0x3be
 800a836:	4910      	ldr	r1, [pc, #64]	; (800a878 <mem_malloc+0x154>)
 800a838:	480b      	ldr	r0, [pc, #44]	; (800a868 <mem_malloc+0x144>)
 800a83a:	f004 fca7 	bl	800f18c <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a83e:	f104 0008 	add.w	r0, r4, #8
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 800a842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 800a846:	2301      	movs	r3, #1
 800a848:	7123      	strb	r3, [r4, #4]
 800a84a:	e7c3      	b.n	800a7d4 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	4403      	add	r3, r0
 800a850:	e7c6      	b.n	800a7e0 <mem_malloc+0xbc>
 800a852:	460e      	mov	r6, r1
 800a854:	e786      	b.n	800a764 <mem_malloc+0x40>
 800a856:	bf00      	nop
 800a858:	20006940 	.word	0x20006940
 800a85c:	2000694c 	.word	0x2000694c
 800a860:	0801ee9e 	.word	0x0801ee9e
 800a864:	0801f064 	.word	0x0801f064
 800a868:	0801d8d1 	.word	0x0801d8d1
 800a86c:	0801f075 	.word	0x0801f075
 800a870:	0801f08e 	.word	0x0801f08e
 800a874:	0801f0be 	.word	0x0801f0be
 800a878:	0801f0ed 	.word	0x0801f0ed

0800a87c <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a880:	f004 fbea 	bl	800f058 <sys_arch_protect>
 800a884:	4605      	mov	r5, r0

  memp = *desc->tab;
 800a886:	6823      	ldr	r3, [r4, #0]
 800a888:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a88a:	b15c      	cbz	r4, 800a8a4 <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a890:	07a3      	lsls	r3, r4, #30
 800a892:	d006      	beq.n	800a8a2 <do_memp_malloc_pool.isra.0+0x26>
 800a894:	4b05      	ldr	r3, [pc, #20]	; (800a8ac <do_memp_malloc_pool.isra.0+0x30>)
 800a896:	f240 1219 	movw	r2, #281	; 0x119
 800a89a:	4905      	ldr	r1, [pc, #20]	; (800a8b0 <do_memp_malloc_pool.isra.0+0x34>)
 800a89c:	4805      	ldr	r0, [pc, #20]	; (800a8b4 <do_memp_malloc_pool.isra.0+0x38>)
 800a89e:	f004 fc75 	bl	800f18c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a8a2:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a8a4:	f004 fbe4 	bl	800f070 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	bd38      	pop	{r3, r4, r5, pc}
 800a8ac:	0801f110 	.word	0x0801f110
 800a8b0:	0801f17d 	.word	0x0801f17d
 800a8b4:	0801d8d1 	.word	0x0801d8d1

0800a8b8 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800a8b8:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8ba:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 800a8bc:	4605      	mov	r5, r0
 800a8be:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8c0:	d006      	beq.n	800a8d0 <do_memp_free_pool.isra.1+0x18>
 800a8c2:	4b08      	ldr	r3, [pc, #32]	; (800a8e4 <do_memp_free_pool.isra.1+0x2c>)
 800a8c4:	f240 126d 	movw	r2, #365	; 0x16d
 800a8c8:	4907      	ldr	r1, [pc, #28]	; (800a8e8 <do_memp_free_pool.isra.1+0x30>)
 800a8ca:	4808      	ldr	r0, [pc, #32]	; (800a8ec <do_memp_free_pool.isra.1+0x34>)
 800a8cc:	f004 fc5e 	bl	800f18c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 800a8d0:	f004 fbc2 	bl	800f058 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a8d4:	682b      	ldr	r3, [r5, #0]
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800a8da:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 800a8e0:	f004 bbc6 	b.w	800f070 <sys_arch_unprotect>
 800a8e4:	0801f110 	.word	0x0801f110
 800a8e8:	0801f1a0 	.word	0x0801f1a0
 800a8ec:	0801d8d1 	.word	0x0801d8d1

0800a8f0 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a8f0:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a8f6:	3303      	adds	r3, #3
{
 800a8f8:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a8fa:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800a8fe:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 800a900:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800a902:	4294      	cmp	r4, r2
 800a904:	dc00      	bgt.n	800a908 <memp_init_pool+0x18>
}
 800a906:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 800a908:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800a90a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800a90c:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a90e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 800a910:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a912:	442b      	add	r3, r5
 800a914:	e7f5      	b.n	800a902 <memp_init_pool+0x12>
	...

0800a918 <memp_init>:
{
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 800a91c:	4d04      	ldr	r5, [pc, #16]	; (800a930 <memp_init+0x18>)
 800a91e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800a922:	3401      	adds	r4, #1
 800a924:	f7ff ffe4 	bl	800a8f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a928:	2c0d      	cmp	r4, #13
 800a92a:	d1f8      	bne.n	800a91e <memp_init+0x6>
}
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	bf00      	nop
 800a930:	08014970 	.word	0x08014970

0800a934 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a934:	280c      	cmp	r0, #12
{
 800a936:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a938:	d807      	bhi.n	800a94a <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a93a:	4b08      	ldr	r3, [pc, #32]	; (800a95c <memp_malloc+0x28>)
 800a93c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 800a940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a944:	3008      	adds	r0, #8
 800a946:	f7ff bf99 	b.w	800a87c <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <memp_malloc+0x2c>)
 800a94c:	f240 1257 	movw	r2, #343	; 0x157
 800a950:	4904      	ldr	r1, [pc, #16]	; (800a964 <memp_malloc+0x30>)
 800a952:	4805      	ldr	r0, [pc, #20]	; (800a968 <memp_malloc+0x34>)
 800a954:	f004 fc1a 	bl	800f18c <iprintf>
}
 800a958:	2000      	movs	r0, #0
 800a95a:	bd08      	pop	{r3, pc}
 800a95c:	08014970 	.word	0x08014970
 800a960:	0801f110 	.word	0x0801f110
 800a964:	0801f1d2 	.word	0x0801f1d2
 800a968:	0801d8d1 	.word	0x0801d8d1

0800a96c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a96c:	280c      	cmp	r0, #12
 800a96e:	d906      	bls.n	800a97e <memp_free+0x12>
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <memp_free+0x24>)
 800a972:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a976:	4907      	ldr	r1, [pc, #28]	; (800a994 <memp_free+0x28>)
 800a978:	4807      	ldr	r0, [pc, #28]	; (800a998 <memp_free+0x2c>)
 800a97a:	f004 bc07 	b.w	800f18c <iprintf>

  if (mem == NULL) {
 800a97e:	b129      	cbz	r1, 800a98c <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a980:	4b06      	ldr	r3, [pc, #24]	; (800a99c <memp_free+0x30>)
 800a982:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800a986:	3008      	adds	r0, #8
 800a988:	f7ff bf96 	b.w	800a8b8 <do_memp_free_pool.isra.1>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	0801f110 	.word	0x0801f110
 800a994:	0801f1ef 	.word	0x0801f1ef
 800a998:	0801d8d1 	.word	0x0801d8d1
 800a99c:	08014970 	.word	0x08014970

0800a9a0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800a9a0:	f06f 000b 	mvn.w	r0, #11
 800a9a4:	4770      	bx	lr
	...

0800a9a8 <netif_issue_reports>:
{
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	b930      	cbnz	r0, 800a9be <netif_issue_reports+0x16>
 800a9b0:	4b0c      	ldr	r3, [pc, #48]	; (800a9e4 <netif_issue_reports+0x3c>)
 800a9b2:	f240 326d 	movw	r2, #877	; 0x36d
 800a9b6:	490c      	ldr	r1, [pc, #48]	; (800a9e8 <netif_issue_reports+0x40>)
 800a9b8:	480c      	ldr	r0, [pc, #48]	; (800a9ec <netif_issue_reports+0x44>)
 800a9ba:	f004 fbe7 	bl	800f18c <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a9be:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800a9c2:	f003 0205 	and.w	r2, r3, #5
 800a9c6:	2a05      	cmp	r2, #5
 800a9c8:	d10b      	bne.n	800a9e2 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a9ca:	07ea      	lsls	r2, r5, #31
 800a9cc:	d509      	bpl.n	800a9e2 <netif_issue_reports+0x3a>
 800a9ce:	6862      	ldr	r2, [r4, #4]
 800a9d0:	b13a      	cbz	r2, 800a9e2 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a9d2:	071b      	lsls	r3, r3, #28
 800a9d4:	d505      	bpl.n	800a9e2 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800a9d6:	1d21      	adds	r1, r4, #4
 800a9d8:	4620      	mov	r0, r4
}
 800a9da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 800a9de:	f7fe bbf7 	b.w	80091d0 <etharp_request>
}
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	0801f20a 	.word	0x0801f20a
 800a9e8:	0801f278 	.word	0x0801f278
 800a9ec:	0801d8d1 	.word	0x0801d8d1

0800a9f0 <netif_do_set_ipaddr>:
{
 800a9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	4617      	mov	r7, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	b931      	cbnz	r1, 800aa08 <netif_do_set_ipaddr+0x18>
 800a9fa:	4b11      	ldr	r3, [pc, #68]	; (800aa40 <netif_do_set_ipaddr+0x50>)
 800a9fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 800aa00:	4910      	ldr	r1, [pc, #64]	; (800aa44 <netif_do_set_ipaddr+0x54>)
 800aa02:	4811      	ldr	r0, [pc, #68]	; (800aa48 <netif_do_set_ipaddr+0x58>)
 800aa04:	f004 fbc2 	bl	800f18c <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aa08:	6873      	ldr	r3, [r6, #4]
 800aa0a:	682a      	ldr	r2, [r5, #0]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d101      	bne.n	800aa14 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 800aa10:	2000      	movs	r0, #0
 800aa12:	e012      	b.n	800aa3a <netif_do_set_ipaddr+0x4a>
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aa14:	ac02      	add	r4, sp, #8
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aa16:	603b      	str	r3, [r7, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aa18:	4638      	mov	r0, r7
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aa1a:	f844 2d04 	str.w	r2, [r4, #-4]!
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aa1e:	4621      	mov	r1, r4
 800aa20:	f001 fc9a 	bl	800c358 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aa24:	4621      	mov	r1, r4
 800aa26:	4638      	mov	r0, r7
 800aa28:	f004 f9a4 	bl	800ed74 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aa2c:	682b      	ldr	r3, [r5, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aa2e:	4630      	mov	r0, r6
 800aa30:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aa32:	6073      	str	r3, [r6, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aa34:	f7ff ffb8 	bl	800a9a8 <netif_issue_reports>
    return 1; /* address changed */
 800aa38:	2001      	movs	r0, #1
}
 800aa3a:	b003      	add	sp, #12
 800aa3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	0801f20a 	.word	0x0801f20a
 800aa44:	0801dda4 	.word	0x0801dda4
 800aa48:	0801d8d1 	.word	0x0801d8d1

0800aa4c <netif_init>:
}
 800aa4c:	4770      	bx	lr
	...

0800aa50 <netif_set_addr>:
{
 800aa50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 800aa52:	4d14      	ldr	r5, [pc, #80]	; (800aaa4 <netif_set_addr+0x54>)
{
 800aa54:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 800aa56:	2900      	cmp	r1, #0
 800aa58:	bf14      	ite	ne
 800aa5a:	460e      	movne	r6, r1
 800aa5c:	462e      	moveq	r6, r5
    netmask = IP4_ADDR_ANY4;
 800aa5e:	2a00      	cmp	r2, #0
 800aa60:	bf14      	ite	ne
 800aa62:	4617      	movne	r7, r2
 800aa64:	462f      	moveq	r7, r5
    gw = IP4_ADDR_ANY4;
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	bf18      	it	ne
 800aa6a:	461d      	movne	r5, r3
  remove = ip4_addr_isany(ipaddr);
 800aa6c:	6833      	ldr	r3, [r6, #0]
 800aa6e:	b9b3      	cbnz	r3, 800aa9e <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa70:	aa01      	add	r2, sp, #4
 800aa72:	4631      	mov	r1, r6
 800aa74:	f7ff ffbc 	bl	800a9f0 <netif_do_set_ipaddr>
 800aa78:	2301      	movs	r3, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	68a1      	ldr	r1, [r4, #8]
 800aa7e:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa80:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aa82:	bf18      	it	ne
 800aa84:	60a2      	strne	r2, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa86:	682a      	ldr	r2, [r5, #0]
 800aa88:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aa8a:	bf18      	it	ne
 800aa8c:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800aa8e:	b923      	cbnz	r3, 800aa9a <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa90:	aa01      	add	r2, sp, #4
 800aa92:	4631      	mov	r1, r6
 800aa94:	4620      	mov	r0, r4
 800aa96:	f7ff ffab 	bl	800a9f0 <netif_do_set_ipaddr>
}
 800aa9a:	b003      	add	sp, #12
 800aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	e7eb      	b.n	800aa7a <netif_set_addr+0x2a>
 800aaa2:	bf00      	nop
 800aaa4:	0801496c 	.word	0x0801496c

0800aaa8 <netif_add>:
{
 800aaa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800aaae:	469e      	mov	lr, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800aab0:	4604      	mov	r4, r0
 800aab2:	b948      	cbnz	r0, 800aac8 <netif_add+0x20>
 800aab4:	4b3e      	ldr	r3, [pc, #248]	; (800abb0 <netif_add+0x108>)
 800aab6:	f240 1227 	movw	r2, #295	; 0x127
 800aaba:	493e      	ldr	r1, [pc, #248]	; (800abb4 <netif_add+0x10c>)
 800aabc:	483e      	ldr	r0, [pc, #248]	; (800abb8 <netif_add+0x110>)
 800aabe:	f004 fb65 	bl	800f18c <iprintf>
}
 800aac2:	4620      	mov	r0, r4
 800aac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aac8:	b947      	cbnz	r7, 800aadc <netif_add+0x34>
 800aaca:	4b39      	ldr	r3, [pc, #228]	; (800abb0 <netif_add+0x108>)
 800aacc:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aad0:	493a      	ldr	r1, [pc, #232]	; (800abbc <netif_add+0x114>)
 800aad2:	463c      	mov	r4, r7
 800aad4:	4838      	ldr	r0, [pc, #224]	; (800abb8 <netif_add+0x110>)
 800aad6:	f004 fb59 	bl	800f18c <iprintf>
 800aada:	e7f2      	b.n	800aac2 <netif_add+0x1a>
  netif->state = state;
 800aadc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aade:	2500      	movs	r5, #0
  netif->output = netif_null_output_ip4;
 800aae0:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 800abcc <netif_add+0x124>
  netif->num = netif_num;
 800aae4:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800abd0 <netif_add+0x128>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aae8:	4e35      	ldr	r6, [pc, #212]	; (800abc0 <netif_add+0x118>)
  netif->output = netif_null_output_ip4;
 800aaea:	f8c0 c014 	str.w	ip, [r0, #20]
  netif->state = state;
 800aaee:	6203      	str	r3, [r0, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aaf0:	42aa      	cmp	r2, r5
 800aaf2:	bf08      	it	eq
 800aaf4:	4632      	moveq	r2, r6
  netif->num = netif_num;
 800aaf6:	f898 c000 	ldrb.w	ip, [r8]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aafa:	42a9      	cmp	r1, r5
 800aafc:	bf08      	it	eq
 800aafe:	4631      	moveq	r1, r6
  netif->input = input;
 800ab00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif->num = netif_num;
 800ab02:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  netif->input = input;
 800ab06:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ab08:	45ae      	cmp	lr, r5
 800ab0a:	bf14      	ite	ne
 800ab0c:	4673      	movne	r3, lr
 800ab0e:	4633      	moveq	r3, r6
  ip_addr_set_zero_ip4(&netif->gw);
 800ab10:	60c5      	str	r5, [r0, #12]
 800ab12:	4646      	mov	r6, r8
  netif->mtu = 0;
 800ab14:	8505      	strh	r5, [r0, #40]	; 0x28
  netif->flags = 0;
 800ab16:	f880 5031 	strb.w	r5, [r0, #49]	; 0x31
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ab1a:	6245      	str	r5, [r0, #36]	; 0x24
  netif->link_callback = NULL;
 800ab1c:	61c5      	str	r5, [r0, #28]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ab1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ab22:	f7ff ff95 	bl	800aa50 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800ab26:	4620      	mov	r0, r4
 800ab28:	47b8      	blx	r7
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d13e      	bne.n	800abac <netif_add+0x104>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab2e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800abd4 <netif_add+0x12c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ab32:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800abb0 <netif_add+0x108>
 800ab36:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 800ab38:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
      num_netifs = 0;
 800ab3c:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab3e:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 800ab42:	2bff      	cmp	r3, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ab44:	f8df b070 	ldr.w	fp, [pc, #112]	; 800abb8 <netif_add+0x110>
        netif->num = 0;
 800ab48:	bf04      	itt	eq
 800ab4a:	2300      	moveq	r3, #0
 800ab4c:	f884 3034 	strbeq.w	r3, [r4, #52]	; 0x34
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab50:	b955      	cbnz	r5, 800ab68 <netif_add+0xc0>
  if (netif->num == 254) {
 800ab52:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ab56:	2bfe      	cmp	r3, #254	; 0xfe
 800ab58:	d125      	bne.n	800aba6 <netif_add+0xfe>
    netif_num = 0;
 800ab5a:	7035      	strb	r5, [r6, #0]
  netif->next = netif_list;
 800ab5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab60:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800ab62:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 800ab66:	e7ac      	b.n	800aac2 <netif_add+0x1a>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ab68:	42a5      	cmp	r5, r4
 800ab6a:	d106      	bne.n	800ab7a <netif_add+0xd2>
 800ab6c:	4653      	mov	r3, sl
 800ab6e:	f240 128b 	movw	r2, #395	; 0x18b
 800ab72:	4914      	ldr	r1, [pc, #80]	; (800abc4 <netif_add+0x11c>)
 800ab74:	4658      	mov	r0, fp
 800ab76:	f004 fb09 	bl	800f18c <iprintf>
        num_netifs++;
 800ab7a:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ab7c:	2fff      	cmp	r7, #255	; 0xff
 800ab7e:	dd06      	ble.n	800ab8e <netif_add+0xe6>
 800ab80:	4653      	mov	r3, sl
 800ab82:	f240 128d 	movw	r2, #397	; 0x18d
 800ab86:	4910      	ldr	r1, [pc, #64]	; (800abc8 <netif_add+0x120>)
 800ab88:	4658      	mov	r0, fp
 800ab8a:	f004 faff 	bl	800f18c <iprintf>
        if (netif2->num == netif->num) {
 800ab8e:	f895 2034 	ldrb.w	r2, [r5, #52]	; 0x34
 800ab92:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d103      	bne.n	800aba2 <netif_add+0xfa>
          netif->num++;
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800aba0:	e7ca      	b.n	800ab38 <netif_add+0x90>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aba2:	682d      	ldr	r5, [r5, #0]
 800aba4:	e7d4      	b.n	800ab50 <netif_add+0xa8>
    netif_num = (u8_t)(netif->num + 1);
 800aba6:	3301      	adds	r3, #1
 800aba8:	7033      	strb	r3, [r6, #0]
 800abaa:	e7d7      	b.n	800ab5c <netif_add+0xb4>
    return NULL;
 800abac:	462c      	mov	r4, r5
 800abae:	e788      	b.n	800aac2 <netif_add+0x1a>
 800abb0:	0801f20a 	.word	0x0801f20a
 800abb4:	0801f32d 	.word	0x0801f32d
 800abb8:	0801d8d1 	.word	0x0801d8d1
 800abbc:	0801f346 	.word	0x0801f346
 800abc0:	0801496c 	.word	0x0801496c
 800abc4:	0801f368 	.word	0x0801f368
 800abc8:	0801f37c 	.word	0x0801f37c
 800abcc:	0800a9a1 	.word	0x0800a9a1
 800abd0:	20006984 	.word	0x20006984
 800abd4:	20010dec 	.word	0x20010dec

0800abd8 <netif_set_default>:
  netif_default = netif;
 800abd8:	4b01      	ldr	r3, [pc, #4]	; (800abe0 <netif_set_default+0x8>)
 800abda:	6018      	str	r0, [r3, #0]
}
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20010df0 	.word	0x20010df0

0800abe4 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800abe4:	b930      	cbnz	r0, 800abf4 <netif_set_up+0x10>
 800abe6:	4b09      	ldr	r3, [pc, #36]	; (800ac0c <netif_set_up+0x28>)
 800abe8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800abec:	4908      	ldr	r1, [pc, #32]	; (800ac10 <netif_set_up+0x2c>)
 800abee:	4809      	ldr	r0, [pc, #36]	; (800ac14 <netif_set_up+0x30>)
 800abf0:	f004 bacc 	b.w	800f18c <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800abf4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800abf8:	07d9      	lsls	r1, r3, #31
 800abfa:	d406      	bmi.n	800ac0a <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800abfc:	f043 0301 	orr.w	r3, r3, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac00:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ac02:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac06:	f7ff becf 	b.w	800a9a8 <netif_issue_reports>
}
 800ac0a:	4770      	bx	lr
 800ac0c:	0801f20a 	.word	0x0801f20a
 800ac10:	0801f3aa 	.word	0x0801f3aa
 800ac14:	0801d8d1 	.word	0x0801d8d1

0800ac18 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ac18:	b930      	cbnz	r0, 800ac28 <netif_set_down+0x10>
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <netif_set_down+0x2c>)
 800ac1c:	f240 329b 	movw	r2, #923	; 0x39b
 800ac20:	4909      	ldr	r1, [pc, #36]	; (800ac48 <netif_set_down+0x30>)
 800ac22:	480a      	ldr	r0, [pc, #40]	; (800ac4c <netif_set_down+0x34>)
 800ac24:	f004 bab2 	b.w	800f18c <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 800ac28:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 800ac2c:	07d9      	lsls	r1, r3, #31
 800ac2e:	d507      	bpl.n	800ac40 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac30:	f023 0101 	bic.w	r1, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac34:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac36:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac3a:	d501      	bpl.n	800ac40 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 800ac3c:	f7fe ba0c 	b.w	8009058 <etharp_cleanup_netif>
}
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop
 800ac44:	0801f20a 	.word	0x0801f20a
 800ac48:	0801f3c6 	.word	0x0801f3c6
 800ac4c:	0801d8d1 	.word	0x0801d8d1

0800ac50 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ac50:	b150      	cbz	r0, 800ac68 <netif_get_by_index+0x18>
    NETIF_FOREACH(netif) {
 800ac52:	4b06      	ldr	r3, [pc, #24]	; (800ac6c <netif_get_by_index+0x1c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	b12b      	cbz	r3, 800ac64 <netif_get_by_index+0x14>
      if (idx == netif_get_index(netif)) {
 800ac58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800ac5c:	3201      	adds	r2, #1
 800ac5e:	b2d2      	uxtb	r2, r2
 800ac60:	4282      	cmp	r2, r0
 800ac62:	d1f7      	bne.n	800ac54 <netif_get_by_index+0x4>
      }
    }
  }

  return NULL;
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	4770      	bx	lr
  return NULL;
 800ac68:	4603      	mov	r3, r0
 800ac6a:	e7fb      	b.n	800ac64 <netif_get_by_index+0x14>
 800ac6c:	20010dec 	.word	0x20010dec

0800ac70 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800ac70:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ac72:	b968      	cbnz	r0, 800ac90 <pbuf_add_header_impl+0x20>
 800ac74:	4b14      	ldr	r3, [pc, #80]	; (800acc8 <pbuf_add_header_impl+0x58>)
 800ac76:	f240 12df 	movw	r2, #479	; 0x1df
 800ac7a:	4914      	ldr	r1, [pc, #80]	; (800accc <pbuf_add_header_impl+0x5c>)
 800ac7c:	4814      	ldr	r0, [pc, #80]	; (800acd0 <pbuf_add_header_impl+0x60>)
 800ac7e:	f004 fa85 	bl	800f18c <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 800ac82:	2001      	movs	r0, #1
 800ac84:	e01e      	b.n	800acc4 <pbuf_add_header_impl+0x54>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	d0fb      	beq.n	800ac82 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 800ac8a:	6842      	ldr	r2, [r0, #4]
 800ac8c:	1a51      	subs	r1, r2, r1
 800ac8e:	e013      	b.n	800acb8 <pbuf_add_header_impl+0x48>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ac90:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ac94:	d2f5      	bcs.n	800ac82 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 800ac96:	b1a1      	cbz	r1, 800acc2 <pbuf_add_header_impl+0x52>
  increment_magnitude = (u16_t)header_size_increment;
 800ac98:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ac9a:	8903      	ldrh	r3, [r0, #8]
 800ac9c:	4423      	add	r3, r4
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	429c      	cmp	r4, r3
 800aca2:	d8ee      	bhi.n	800ac82 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800aca4:	f990 500c 	ldrsb.w	r5, [r0, #12]
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	daec      	bge.n	800ac86 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 800acac:	6842      	ldr	r2, [r0, #4]
 800acae:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800acb0:	f100 0210 	add.w	r2, r0, #16
 800acb4:	4291      	cmp	r1, r2
 800acb6:	d3e4      	bcc.n	800ac82 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 800acb8:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 800acba:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800acbc:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800acbe:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 800acc0:	8144      	strh	r4, [r0, #10]


  return 0;
 800acc2:	2000      	movs	r0, #0
}
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	bf00      	nop
 800acc8:	0801f428 	.word	0x0801f428
 800accc:	0801f537 	.word	0x0801f537
 800acd0:	0801d8d1 	.word	0x0801d8d1

0800acd4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800acd4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 800acd8:	2b01      	cmp	r3, #1
{
 800acda:	b570      	push	{r4, r5, r6, lr}
 800acdc:	4606      	mov	r6, r0
 800acde:	460d      	mov	r5, r1
 800ace0:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ace2:	d006      	beq.n	800acf2 <pbuf_alloc_reference+0x1e>
 800ace4:	4b0a      	ldr	r3, [pc, #40]	; (800ad10 <pbuf_alloc_reference+0x3c>)
 800ace6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800acea:	490a      	ldr	r1, [pc, #40]	; (800ad14 <pbuf_alloc_reference+0x40>)
 800acec:	480a      	ldr	r0, [pc, #40]	; (800ad18 <pbuf_alloc_reference+0x44>)
 800acee:	f004 fa4d 	bl	800f18c <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800acf2:	200b      	movs	r0, #11
 800acf4:	f7ff fe1e 	bl	800a934 <memp_malloc>
  if (p == NULL) {
 800acf8:	b148      	cbz	r0, 800ad0e <pbuf_alloc_reference+0x3a>
  p->next = NULL;
 800acfa:	2300      	movs	r3, #0
  p->ref = 1;
 800acfc:	2201      	movs	r2, #1
  p->tot_len = tot_len;
 800acfe:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800ad00:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800ad02:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800ad04:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 800ad06:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ad08:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 800ad0a:	e9c0 3600 	strd	r3, r6, [r0]
}
 800ad0e:	bd70      	pop	{r4, r5, r6, pc}
 800ad10:	0801f428 	.word	0x0801f428
 800ad14:	0801f495 	.word	0x0801f495
 800ad18:	0801d8d1 	.word	0x0801d8d1

0800ad1c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ad1c:	3003      	adds	r0, #3
 800ad1e:	f020 0003 	bic.w	r0, r0, #3
{
 800ad22:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ad24:	180e      	adds	r6, r1, r0
 800ad26:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800ad2a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ad2c:	42ae      	cmp	r6, r5
 800ad2e:	d80e      	bhi.n	800ad4e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 800ad30:	b104      	cbz	r4, 800ad34 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ad32:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ad34:	4618      	mov	r0, r3
  p->next = NULL;
 800ad36:	2300      	movs	r3, #0
  p->type_internal = (u8_t)type;
 800ad38:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 800ad3a:	2202      	movs	r2, #2
  p->tot_len = tot_len;
 800ad3c:	8101      	strh	r1, [r0, #8]
  p->flags = flags;
 800ad3e:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800ad40:	2201      	movs	r2, #1
  p->len = len;
 800ad42:	8141      	strh	r1, [r0, #10]
  p->ref = 1;
 800ad44:	7382      	strb	r2, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ad46:	73c3      	strb	r3, [r0, #15]
  p->payload = payload;
 800ad48:	e9c0 3400 	strd	r3, r4, [r0]
}
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800ad4e:	2000      	movs	r0, #0
 800ad50:	e7fc      	b.n	800ad4c <pbuf_alloced_custom+0x30>

0800ad52 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ad52:	2200      	movs	r2, #0
 800ad54:	f7ff bf8c 	b.w	800ac70 <pbuf_add_header_impl>

0800ad58 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ad58:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ad5a:	b990      	cbnz	r0, 800ad82 <pbuf_remove_header+0x2a>
 800ad5c:	4b10      	ldr	r3, [pc, #64]	; (800ada0 <pbuf_remove_header+0x48>)
 800ad5e:	f240 224b 	movw	r2, #587	; 0x24b
 800ad62:	4910      	ldr	r1, [pc, #64]	; (800ada4 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ad64:	4810      	ldr	r0, [pc, #64]	; (800ada8 <pbuf_remove_header+0x50>)
 800ad66:	f004 fa11 	bl	800f18c <iprintf>
    return 1;
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	e008      	b.n	800ad80 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ad6e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ad70:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 800ad72:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ad74:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ad76:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ad78:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ad7e:	2000      	movs	r0, #0
}
 800ad80:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ad82:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800ad86:	d2f0      	bcs.n	800ad6a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 800ad88:	2900      	cmp	r1, #0
 800ad8a:	d0f8      	beq.n	800ad7e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 800ad8c:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ad8e:	8943      	ldrh	r3, [r0, #10]
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d2ec      	bcs.n	800ad6e <pbuf_remove_header+0x16>
 800ad94:	4b02      	ldr	r3, [pc, #8]	; (800ada0 <pbuf_remove_header+0x48>)
 800ad96:	f240 2255 	movw	r2, #597	; 0x255
 800ad9a:	4904      	ldr	r1, [pc, #16]	; (800adac <pbuf_remove_header+0x54>)
 800ad9c:	e7e2      	b.n	800ad64 <pbuf_remove_header+0xc>
 800ad9e:	bf00      	nop
 800ada0:	0801f428 	.word	0x0801f428
 800ada4:	0801f537 	.word	0x0801f537
 800ada8:	0801d8d1 	.word	0x0801d8d1
 800adac:	0801f4a7 	.word	0x0801f4a7

0800adb0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 800adb0:	1e0b      	subs	r3, r1, #0
 800adb2:	da02      	bge.n	800adba <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800adb4:	4259      	negs	r1, r3
 800adb6:	f7ff bfcf 	b.w	800ad58 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800adba:	2201      	movs	r2, #1
 800adbc:	f7ff bf58 	b.w	800ac70 <pbuf_add_header_impl>

0800adc0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800adc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800adc4:	4604      	mov	r4, r0
 800adc6:	b950      	cbnz	r0, 800adde <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800adc8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800adca:	4b2b      	ldr	r3, [pc, #172]	; (800ae78 <pbuf_free+0xb8>)
 800adcc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800add0:	492a      	ldr	r1, [pc, #168]	; (800ae7c <pbuf_free+0xbc>)
 800add2:	482b      	ldr	r0, [pc, #172]	; (800ae80 <pbuf_free+0xc0>)
 800add4:	f004 f9da 	bl	800f18c <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 800adde:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ade0:	4f25      	ldr	r7, [pc, #148]	; (800ae78 <pbuf_free+0xb8>)
 800ade2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800ae8c <pbuf_free+0xcc>
 800ade6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800ae80 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800adea:	f004 f935 	bl	800f058 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800adee:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800adf0:	4682      	mov	sl, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800adf2:	b933      	cbnz	r3, 800ae02 <pbuf_free+0x42>
 800adf4:	463b      	mov	r3, r7
 800adf6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800adfa:	4649      	mov	r1, r9
 800adfc:	4640      	mov	r0, r8
 800adfe:	f004 f9c5 	bl	800f18c <iprintf>
    ref = --(p->ref);
 800ae02:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800ae04:	4650      	mov	r0, sl
    ref = --(p->ref);
 800ae06:	3e01      	subs	r6, #1
 800ae08:	b2f6      	uxtb	r6, r6
 800ae0a:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800ae0c:	f004 f930 	bl	800f070 <sys_arch_unprotect>
    if (ref == 0) {
 800ae10:	2e00      	cmp	r6, #0
 800ae12:	d1e1      	bne.n	800add8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ae14:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 800ae16:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ae18:	079b      	lsls	r3, r3, #30
 800ae1a:	d511      	bpl.n	800ae40 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b933      	cbnz	r3, 800ae2e <pbuf_free+0x6e>
 800ae20:	463b      	mov	r3, r7
 800ae22:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ae26:	4917      	ldr	r1, [pc, #92]	; (800ae84 <pbuf_free+0xc4>)
 800ae28:	4640      	mov	r0, r8
 800ae2a:	f004 f9af 	bl	800f18c <iprintf>
        pc->custom_free_function(p);
 800ae2e:	6923      	ldr	r3, [r4, #16]
 800ae30:	4620      	mov	r0, r4
 800ae32:	4798      	blx	r3
      count++;
 800ae34:	3501      	adds	r5, #1
  while (p != NULL) {
 800ae36:	4634      	mov	r4, r6
      count++;
 800ae38:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	d1d5      	bne.n	800adea <pbuf_free+0x2a>
 800ae3e:	e7cb      	b.n	800add8 <pbuf_free+0x18>
      alloc_src = pbuf_get_allocsrc(p);
 800ae40:	7b23      	ldrb	r3, [r4, #12]
 800ae42:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d104      	bne.n	800ae54 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800ae4e:	f7ff fd8d 	bl	800a96c <memp_free>
 800ae52:	e7ef      	b.n	800ae34 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d102      	bne.n	800ae5e <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 800ae58:	4621      	mov	r1, r4
 800ae5a:	200b      	movs	r0, #11
 800ae5c:	e7f7      	b.n	800ae4e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ae5e:	b91b      	cbnz	r3, 800ae68 <pbuf_free+0xa8>
          mem_free(p);
 800ae60:	4620      	mov	r0, r4
 800ae62:	f7ff fae1 	bl	800a428 <mem_free>
 800ae66:	e7e5      	b.n	800ae34 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 800ae68:	463b      	mov	r3, r7
 800ae6a:	f240 320f 	movw	r2, #783	; 0x30f
 800ae6e:	4906      	ldr	r1, [pc, #24]	; (800ae88 <pbuf_free+0xc8>)
 800ae70:	4640      	mov	r0, r8
 800ae72:	f004 f98b 	bl	800f18c <iprintf>
 800ae76:	e7dd      	b.n	800ae34 <pbuf_free+0x74>
 800ae78:	0801f428 	.word	0x0801f428
 800ae7c:	0801f537 	.word	0x0801f537
 800ae80:	0801d8d1 	.word	0x0801d8d1
 800ae84:	0801f4db 	.word	0x0801f4db
 800ae88:	0801f4fc 	.word	0x0801f4fc
 800ae8c:	0801f4c5 	.word	0x0801f4c5

0800ae90 <pbuf_alloc>:
  switch (type) {
 800ae90:	2a41      	cmp	r2, #65	; 0x41
{
 800ae92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae96:	4607      	mov	r7, r0
 800ae98:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 800ae9a:	b284      	uxth	r4, r0
  switch (type) {
 800ae9c:	d030      	beq.n	800af00 <pbuf_alloc+0x70>
 800ae9e:	d809      	bhi.n	800aeb4 <pbuf_alloc+0x24>
 800aea0:	2a01      	cmp	r2, #1
 800aea2:	d02d      	beq.n	800af00 <pbuf_alloc+0x70>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aea4:	4b34      	ldr	r3, [pc, #208]	; (800af78 <pbuf_alloc+0xe8>)
 800aea6:	f240 1227 	movw	r2, #295	; 0x127
 800aeaa:	4934      	ldr	r1, [pc, #208]	; (800af7c <pbuf_alloc+0xec>)
 800aeac:	4834      	ldr	r0, [pc, #208]	; (800af80 <pbuf_alloc+0xf0>)
 800aeae:	f004 f96d 	bl	800f18c <iprintf>
 800aeb2:	e038      	b.n	800af26 <pbuf_alloc+0x96>
  switch (type) {
 800aeb4:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 800aeb8:	d028      	beq.n	800af0c <pbuf_alloc+0x7c>
 800aeba:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800aebe:	d1f1      	bne.n	800aea4 <pbuf_alloc+0x14>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800aec0:	3403      	adds	r4, #3
 800aec2:	1ccb      	adds	r3, r1, #3
 800aec4:	f024 0403 	bic.w	r4, r4, #3
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	441c      	add	r4, r3
 800aece:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aed0:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aed4:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aed6:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aed8:	d325      	bcc.n	800af26 <pbuf_alloc+0x96>
 800aeda:	4283      	cmp	r3, r0
 800aedc:	d823      	bhi.n	800af26 <pbuf_alloc+0x96>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aede:	f7ff fc21 	bl	800a724 <mem_malloc>
      if (p == NULL) {
 800aee2:	4605      	mov	r5, r0
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d041      	beq.n	800af6c <pbuf_alloc+0xdc>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aee8:	4407      	add	r7, r0
  p->next = NULL;
 800aeea:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800aeec:	8106      	strh	r6, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aeee:	3713      	adds	r7, #19
  p->next = NULL;
 800aef0:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <pbuf_alloc+0xf4>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aef4:	f027 0703 	bic.w	r7, r7, #3
  p->len = len;
 800aef8:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 800aefa:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800aefc:	6047      	str	r7, [r0, #4]
 800aefe:	e035      	b.n	800af6c <pbuf_alloc+0xdc>
      p = pbuf_alloc_reference(NULL, length, type);
 800af00:	4631      	mov	r1, r6
 800af02:	2000      	movs	r0, #0
}
 800af04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 800af08:	f7ff bee4 	b.w	800acd4 <pbuf_alloc_reference>
      last = NULL;
 800af0c:	f04f 0a00 	mov.w	sl, #0
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af10:	f240 58f4 	movw	r8, #1524	; 0x5f4
  p->type_internal = (u8_t)type;
 800af14:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800af88 <pbuf_alloc+0xf8>
      p = NULL;
 800af18:	4655      	mov	r5, sl
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800af1a:	200c      	movs	r0, #12
 800af1c:	f7ff fd0a 	bl	800a934 <memp_malloc>
        if (q == NULL) {
 800af20:	4607      	mov	r7, r0
 800af22:	b930      	cbnz	r0, 800af32 <pbuf_alloc+0xa2>
          if (p) {
 800af24:	b90d      	cbnz	r5, 800af2a <pbuf_alloc+0x9a>
      return NULL;
 800af26:	2500      	movs	r5, #0
 800af28:	e020      	b.n	800af6c <pbuf_alloc+0xdc>
            pbuf_free(p);
 800af2a:	4628      	mov	r0, r5
 800af2c:	f7ff ff48 	bl	800adc0 <pbuf_free>
 800af30:	e7f9      	b.n	800af26 <pbuf_alloc+0x96>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af32:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800af34:	4404      	add	r4, r0
  p->next = NULL;
 800af36:	2200      	movs	r2, #0
  p->tot_len = tot_len;
 800af38:	8106      	strh	r6, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af3a:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800af3e:	3413      	adds	r4, #19
  p->next = NULL;
 800af40:	6002      	str	r2, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af42:	eba8 0303 	sub.w	r3, r8, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800af46:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 800af4a:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af4e:	b29b      	uxth	r3, r3
  p->payload = payload;
 800af50:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800af52:	42b3      	cmp	r3, r6
 800af54:	bf28      	it	cs
 800af56:	4633      	movcs	r3, r6
  p->len = len;
 800af58:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 800af5a:	b155      	cbz	r5, 800af72 <pbuf_alloc+0xe2>
          last->next = q;
 800af5c:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800af60:	1af3      	subs	r3, r6, r3
        offset = 0;
 800af62:	2400      	movs	r4, #0
 800af64:	46ba      	mov	sl, r7
        rem_len = (u16_t)(rem_len - qlen);
 800af66:	b29e      	uxth	r6, r3
      } while (rem_len > 0);
 800af68:	2e00      	cmp	r6, #0
 800af6a:	d1d6      	bne.n	800af1a <pbuf_alloc+0x8a>
}
 800af6c:	4628      	mov	r0, r5
 800af6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af72:	4605      	mov	r5, r0
 800af74:	e7f4      	b.n	800af60 <pbuf_alloc+0xd0>
 800af76:	bf00      	nop
 800af78:	0801f428 	.word	0x0801f428
 800af7c:	0801f50e 	.word	0x0801f50e
 800af80:	0801d8d1 	.word	0x0801d8d1
 800af84:	00010080 	.word	0x00010080
 800af88:	00010082 	.word	0x00010082

0800af8c <pbuf_realloc>:
{
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800af92:	4604      	mov	r4, r0
 800af94:	b930      	cbnz	r0, 800afa4 <pbuf_realloc+0x18>
 800af96:	4b24      	ldr	r3, [pc, #144]	; (800b028 <pbuf_realloc+0x9c>)
 800af98:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800af9c:	4923      	ldr	r1, [pc, #140]	; (800b02c <pbuf_realloc+0xa0>)
 800af9e:	4824      	ldr	r0, [pc, #144]	; (800b030 <pbuf_realloc+0xa4>)
 800afa0:	f004 f8f4 	bl	800f18c <iprintf>
  if (new_len >= p->tot_len) {
 800afa4:	8923      	ldrh	r3, [r4, #8]
 800afa6:	42ab      	cmp	r3, r5
 800afa8:	d93b      	bls.n	800b022 <pbuf_realloc+0x96>
  shrink = (u16_t)(p->tot_len - new_len);
 800afaa:	1b5b      	subs	r3, r3, r5
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800afac:	4f1e      	ldr	r7, [pc, #120]	; (800b028 <pbuf_realloc+0x9c>)
 800afae:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800b038 <pbuf_realloc+0xac>
  shrink = (u16_t)(p->tot_len - new_len);
 800afb2:	b29e      	uxth	r6, r3
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800afb4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800b030 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 800afb8:	8963      	ldrh	r3, [r4, #10]
 800afba:	42ab      	cmp	r3, r5
 800afbc:	d319      	bcc.n	800aff2 <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800afbe:	7b22      	ldrb	r2, [r4, #12]
 800afc0:	0712      	lsls	r2, r2, #28
 800afc2:	d126      	bne.n	800b012 <pbuf_realloc+0x86>
 800afc4:	42ab      	cmp	r3, r5
 800afc6:	d024      	beq.n	800b012 <pbuf_realloc+0x86>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800afc8:	7b63      	ldrb	r3, [r4, #13]
 800afca:	079b      	lsls	r3, r3, #30
 800afcc:	d421      	bmi.n	800b012 <pbuf_realloc+0x86>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800afce:	6861      	ldr	r1, [r4, #4]
 800afd0:	4620      	mov	r0, r4
 800afd2:	1b09      	subs	r1, r1, r4
 800afd4:	4429      	add	r1, r5
 800afd6:	b289      	uxth	r1, r1
 800afd8:	f7ff fafe 	bl	800a5d8 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800afdc:	4604      	mov	r4, r0
 800afde:	b9c0      	cbnz	r0, 800b012 <pbuf_realloc+0x86>
 800afe0:	4b11      	ldr	r3, [pc, #68]	; (800b028 <pbuf_realloc+0x9c>)
 800afe2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800afe6:	4913      	ldr	r1, [pc, #76]	; (800b034 <pbuf_realloc+0xa8>)
 800afe8:	4811      	ldr	r0, [pc, #68]	; (800b030 <pbuf_realloc+0xa4>)
 800afea:	f004 f8cf 	bl	800f18c <iprintf>
  q->len = rem_len;
 800afee:	8164      	strh	r4, [r4, #10]
 800aff0:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800aff2:	1aed      	subs	r5, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800aff4:	8923      	ldrh	r3, [r4, #8]
 800aff6:	1b9b      	subs	r3, r3, r6
    rem_len = (u16_t)(rem_len - q->len);
 800aff8:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800affa:	8123      	strh	r3, [r4, #8]
    q = q->next;
 800affc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800affe:	2c00      	cmp	r4, #0
 800b000:	d1da      	bne.n	800afb8 <pbuf_realloc+0x2c>
 800b002:	463b      	mov	r3, r7
 800b004:	f240 12af 	movw	r2, #431	; 0x1af
 800b008:	4641      	mov	r1, r8
 800b00a:	4648      	mov	r0, r9
 800b00c:	f004 f8be 	bl	800f18c <iprintf>
 800b010:	e7d2      	b.n	800afb8 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800b012:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800b014:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800b016:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 800b018:	b108      	cbz	r0, 800b01e <pbuf_realloc+0x92>
    pbuf_free(q->next);
 800b01a:	f7ff fed1 	bl	800adc0 <pbuf_free>
  q->next = NULL;
 800b01e:	2300      	movs	r3, #0
 800b020:	6023      	str	r3, [r4, #0]
}
 800b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b026:	bf00      	nop
 800b028:	0801f428 	.word	0x0801f428
 800b02c:	0801f529 	.word	0x0801f529
 800b030:	0801d8d1 	.word	0x0801d8d1
 800b034:	0801f559 	.word	0x0801f559
 800b038:	0801f541 	.word	0x0801f541

0800b03c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b03c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800b03e:	2200      	movs	r2, #0
 800b040:	b290      	uxth	r0, r2
 800b042:	3201      	adds	r2, #1
 800b044:	b903      	cbnz	r3, 800b048 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800b046:	4770      	bx	lr
    p = p->next;
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	e7f9      	b.n	800b040 <pbuf_clen+0x4>

0800b04c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b04c:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800b04e:	4604      	mov	r4, r0
 800b050:	b188      	cbz	r0, 800b076 <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b052:	f004 f801 	bl	800f058 <sys_arch_protect>
 800b056:	7ba3      	ldrb	r3, [r4, #14]
 800b058:	3301      	adds	r3, #1
 800b05a:	73a3      	strb	r3, [r4, #14]
 800b05c:	f004 f808 	bl	800f070 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b060:	7ba3      	ldrb	r3, [r4, #14]
 800b062:	b943      	cbnz	r3, 800b076 <pbuf_ref+0x2a>
 800b064:	4b04      	ldr	r3, [pc, #16]	; (800b078 <pbuf_ref+0x2c>)
 800b066:	f240 3242 	movw	r2, #834	; 0x342
 800b06a:	4904      	ldr	r1, [pc, #16]	; (800b07c <pbuf_ref+0x30>)
 800b06c:	4804      	ldr	r0, [pc, #16]	; (800b080 <pbuf_ref+0x34>)
  }
}
 800b06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b072:	f004 b88b 	b.w	800f18c <iprintf>
}
 800b076:	bd10      	pop	{r4, pc}
 800b078:	0801f428 	.word	0x0801f428
 800b07c:	0801f575 	.word	0x0801f575
 800b080:	0801d8d1 	.word	0x0801d8d1

0800b084 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b084:	b570      	push	{r4, r5, r6, lr}
 800b086:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b088:	4604      	mov	r4, r0
 800b08a:	b100      	cbz	r0, 800b08e <pbuf_cat+0xa>
 800b08c:	b961      	cbnz	r1, 800b0a8 <pbuf_cat+0x24>
 800b08e:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <pbuf_cat+0x60>)
 800b090:	f240 325a 	movw	r2, #858	; 0x35a
 800b094:	4914      	ldr	r1, [pc, #80]	; (800b0e8 <pbuf_cat+0x64>)
 800b096:	4815      	ldr	r0, [pc, #84]	; (800b0ec <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b09c:	f004 b876 	b.w	800f18c <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0a0:	8929      	ldrh	r1, [r5, #8]
 800b0a2:	440b      	add	r3, r1
 800b0a4:	8123      	strh	r3, [r4, #8]
 800b0a6:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	8923      	ldrh	r3, [r4, #8]
 800b0ac:	2a00      	cmp	r2, #0
 800b0ae:	d1f7      	bne.n	800b0a0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b0b0:	8962      	ldrh	r2, [r4, #10]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d006      	beq.n	800b0c4 <pbuf_cat+0x40>
 800b0b6:	4b0b      	ldr	r3, [pc, #44]	; (800b0e4 <pbuf_cat+0x60>)
 800b0b8:	f240 3262 	movw	r2, #866	; 0x362
 800b0bc:	490c      	ldr	r1, [pc, #48]	; (800b0f0 <pbuf_cat+0x6c>)
 800b0be:	480b      	ldr	r0, [pc, #44]	; (800b0ec <pbuf_cat+0x68>)
 800b0c0:	f004 f864 	bl	800f18c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	b133      	cbz	r3, 800b0d6 <pbuf_cat+0x52>
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <pbuf_cat+0x60>)
 800b0ca:	f240 3263 	movw	r2, #867	; 0x363
 800b0ce:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <pbuf_cat+0x70>)
 800b0d0:	4806      	ldr	r0, [pc, #24]	; (800b0ec <pbuf_cat+0x68>)
 800b0d2:	f004 f85b 	bl	800f18c <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0d6:	892a      	ldrh	r2, [r5, #8]
 800b0d8:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800b0da:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b0dc:	4413      	add	r3, r2
 800b0de:	8123      	strh	r3, [r4, #8]
}
 800b0e0:	bd70      	pop	{r4, r5, r6, pc}
 800b0e2:	bf00      	nop
 800b0e4:	0801f428 	.word	0x0801f428
 800b0e8:	0801f587 	.word	0x0801f587
 800b0ec:	0801d8d1 	.word	0x0801d8d1
 800b0f0:	0801f5bc 	.word	0x0801f5bc
 800b0f4:	0801f5e9 	.word	0x0801f5e9

0800b0f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800b0fc:	f7ff ffc2 	bl	800b084 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b100:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 800b106:	f7ff bfa1 	b.w	800b04c <pbuf_ref>
	...

0800b10c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b110:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b112:	4605      	mov	r5, r0
 800b114:	b120      	cbz	r0, 800b120 <pbuf_copy+0x14>
 800b116:	b119      	cbz	r1, 800b120 <pbuf_copy+0x14>
 800b118:	8902      	ldrh	r2, [r0, #8]
 800b11a:	890b      	ldrh	r3, [r1, #8]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d20a      	bcs.n	800b136 <pbuf_copy+0x2a>
 800b120:	4b34      	ldr	r3, [pc, #208]	; (800b1f4 <pbuf_copy+0xe8>)
 800b122:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b126:	4934      	ldr	r1, [pc, #208]	; (800b1f8 <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b128:	4834      	ldr	r0, [pc, #208]	; (800b1fc <pbuf_copy+0xf0>)
 800b12a:	f004 f82f 	bl	800f18c <iprintf>
 800b12e:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 800b132:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800b136:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b138:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800b1f4 <pbuf_copy+0xe8>
 800b13c:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800b20c <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 800b140:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b142:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b1fc <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b146:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800b14a:	8963      	ldrh	r3, [r4, #10]
 800b14c:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b150:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b152:	1b9b      	subs	r3, r3, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b154:	6861      	ldr	r1, [r4, #4]
 800b156:	4438      	add	r0, r7
 800b158:	4598      	cmp	r8, r3
 800b15a:	4431      	add	r1, r6
 800b15c:	bf28      	it	cs
 800b15e:	4698      	movcs	r8, r3
 800b160:	4642      	mov	r2, r8
    offset_to += len;
 800b162:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b164:	f003 ffe5 	bl	800f132 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b168:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800b16a:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b16c:	429f      	cmp	r7, r3
 800b16e:	d906      	bls.n	800b17e <pbuf_copy+0x72>
 800b170:	464b      	mov	r3, r9
 800b172:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b176:	4659      	mov	r1, fp
 800b178:	4650      	mov	r0, sl
 800b17a:	f004 f807 	bl	800f18c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b17e:	8963      	ldrh	r3, [r4, #10]
 800b180:	429e      	cmp	r6, r3
 800b182:	d906      	bls.n	800b192 <pbuf_copy+0x86>
 800b184:	464b      	mov	r3, r9
 800b186:	f240 32da 	movw	r2, #986	; 0x3da
 800b18a:	491d      	ldr	r1, [pc, #116]	; (800b200 <pbuf_copy+0xf4>)
 800b18c:	4650      	mov	r0, sl
 800b18e:	f003 fffd 	bl	800f18c <iprintf>
    if (offset_from >= p_from->len) {
 800b192:	8963      	ldrh	r3, [r4, #10]
 800b194:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800b196:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800b198:	bf24      	itt	cs
 800b19a:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 800b19c:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 800b19e:	429f      	cmp	r7, r3
 800b1a0:	d108      	bne.n	800b1b4 <pbuf_copy+0xa8>
      p_to = p_to->next;
 800b1a2:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b1a4:	b92d      	cbnz	r5, 800b1b2 <pbuf_copy+0xa6>
 800b1a6:	b314      	cbz	r4, 800b1ee <pbuf_copy+0xe2>
 800b1a8:	4b12      	ldr	r3, [pc, #72]	; (800b1f4 <pbuf_copy+0xe8>)
 800b1aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b1ae:	4915      	ldr	r1, [pc, #84]	; (800b204 <pbuf_copy+0xf8>)
 800b1b0:	e7ba      	b.n	800b128 <pbuf_copy+0x1c>
      offset_to = 0;
 800b1b2:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b1b4:	b17c      	cbz	r4, 800b1d6 <pbuf_copy+0xca>
 800b1b6:	8962      	ldrh	r2, [r4, #10]
 800b1b8:	8923      	ldrh	r3, [r4, #8]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d10b      	bne.n	800b1d6 <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b1be:	6823      	ldr	r3, [r4, #0]
 800b1c0:	b14b      	cbz	r3, 800b1d6 <pbuf_copy+0xca>
 800b1c2:	4b0c      	ldr	r3, [pc, #48]	; (800b1f4 <pbuf_copy+0xe8>)
 800b1c4:	f240 32ea 	movw	r2, #1002	; 0x3ea
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b1c8:	490f      	ldr	r1, [pc, #60]	; (800b208 <pbuf_copy+0xfc>)
 800b1ca:	480c      	ldr	r0, [pc, #48]	; (800b1fc <pbuf_copy+0xf0>)
 800b1cc:	f003 ffde 	bl	800f18c <iprintf>
 800b1d0:	f06f 0005 	mvn.w	r0, #5
 800b1d4:	e7ad      	b.n	800b132 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b1d6:	896a      	ldrh	r2, [r5, #10]
 800b1d8:	892b      	ldrh	r3, [r5, #8]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d105      	bne.n	800b1ea <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	b11b      	cbz	r3, 800b1ea <pbuf_copy+0xde>
 800b1e2:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <pbuf_copy+0xe8>)
 800b1e4:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b1e8:	e7ee      	b.n	800b1c8 <pbuf_copy+0xbc>
  } while (p_from);
 800b1ea:	2c00      	cmp	r4, #0
 800b1ec:	d1ab      	bne.n	800b146 <pbuf_copy+0x3a>
  return ERR_OK;
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	e79f      	b.n	800b132 <pbuf_copy+0x26>
 800b1f2:	bf00      	nop
 800b1f4:	0801f428 	.word	0x0801f428
 800b1f8:	0801f630 	.word	0x0801f630
 800b1fc:	0801d8d1 	.word	0x0801d8d1
 800b200:	0801f677 	.word	0x0801f677
 800b204:	0801f692 	.word	0x0801f692
 800b208:	0801f69f 	.word	0x0801f69f
 800b20c:	0801f660 	.word	0x0801f660

0800b210 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b214:	460f      	mov	r7, r1
 800b216:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b218:	4606      	mov	r6, r0
 800b21a:	b950      	cbnz	r0, 800b232 <pbuf_copy_partial+0x22>
 800b21c:	4635      	mov	r5, r6
 800b21e:	4b1b      	ldr	r3, [pc, #108]	; (800b28c <pbuf_copy_partial+0x7c>)
 800b220:	f240 420a 	movw	r2, #1034	; 0x40a
 800b224:	491a      	ldr	r1, [pc, #104]	; (800b290 <pbuf_copy_partial+0x80>)
 800b226:	481b      	ldr	r0, [pc, #108]	; (800b294 <pbuf_copy_partial+0x84>)
 800b228:	f003 ffb0 	bl	800f18c <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 800b22c:	4628      	mov	r0, r5
 800b22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b232:	bb41      	cbnz	r1, 800b286 <pbuf_copy_partial+0x76>
 800b234:	4b15      	ldr	r3, [pc, #84]	; (800b28c <pbuf_copy_partial+0x7c>)
 800b236:	f240 420b 	movw	r2, #1035	; 0x40b
 800b23a:	4917      	ldr	r1, [pc, #92]	; (800b298 <pbuf_copy_partial+0x88>)
 800b23c:	463d      	mov	r5, r7
 800b23e:	4815      	ldr	r0, [pc, #84]	; (800b294 <pbuf_copy_partial+0x84>)
 800b240:	f003 ffa4 	bl	800f18c <iprintf>
 800b244:	e7f2      	b.n	800b22c <pbuf_copy_partial+0x1c>
 800b246:	8972      	ldrh	r2, [r6, #10]
    if ((offset != 0) && (offset >= p->len)) {
 800b248:	b153      	cbz	r3, 800b260 <pbuf_copy_partial+0x50>
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d308      	bcc.n	800b260 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b252:	6836      	ldr	r6, [r6, #0]
 800b254:	f1b8 0f00 	cmp.w	r8, #0
 800b258:	d0e8      	beq.n	800b22c <pbuf_copy_partial+0x1c>
 800b25a:	2e00      	cmp	r6, #0
 800b25c:	d1f3      	bne.n	800b246 <pbuf_copy_partial+0x36>
 800b25e:	e7e5      	b.n	800b22c <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 800b260:	1ad2      	subs	r2, r2, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b262:	6871      	ldr	r1, [r6, #4]
 800b264:	1978      	adds	r0, r7, r5
      buf_copy_len = (u16_t)(p->len - offset);
 800b266:	b294      	uxth	r4, r2
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b268:	4419      	add	r1, r3
 800b26a:	4544      	cmp	r4, r8
 800b26c:	bf28      	it	cs
 800b26e:	4644      	movcs	r4, r8
 800b270:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b272:	4425      	add	r5, r4
      len = (u16_t)(len - buf_copy_len);
 800b274:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b278:	f003 ff5b 	bl	800f132 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b27c:	b2ad      	uxth	r5, r5
      offset = 0;
 800b27e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 800b280:	fa1f f884 	uxth.w	r8, r4
 800b284:	e7e5      	b.n	800b252 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800b286:	2500      	movs	r5, #0
 800b288:	e7e4      	b.n	800b254 <pbuf_copy_partial+0x44>
 800b28a:	bf00      	nop
 800b28c:	0801f428 	.word	0x0801f428
 800b290:	0801f6c9 	.word	0x0801f6c9
 800b294:	0801d8d1 	.word	0x0801d8d1
 800b298:	0801f6e8 	.word	0x0801f6e8

0800b29c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b2a0:	460a      	mov	r2, r1
 800b2a2:	8921      	ldrh	r1, [r4, #8]
 800b2a4:	f7ff fdf4 	bl	800ae90 <pbuf_alloc>
  if (q == NULL) {
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	b150      	cbz	r0, 800b2c2 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	f7ff ff2d 	bl	800b10c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b2b2:	b130      	cbz	r0, 800b2c2 <pbuf_clone+0x26>
 800b2b4:	4b04      	ldr	r3, [pc, #16]	; (800b2c8 <pbuf_clone+0x2c>)
 800b2b6:	f240 5224 	movw	r2, #1316	; 0x524
 800b2ba:	4904      	ldr	r1, [pc, #16]	; (800b2cc <pbuf_clone+0x30>)
 800b2bc:	4804      	ldr	r0, [pc, #16]	; (800b2d0 <pbuf_clone+0x34>)
 800b2be:	f003 ff65 	bl	800f18c <iprintf>
  return q;
}
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	0801f428 	.word	0x0801f428
 800b2cc:	0801f7e8 	.word	0x0801f7e8
 800b2d0:	0801d8d1 	.word	0x0801d8d1

0800b2d4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800b2d4:	4a11      	ldr	r2, [pc, #68]	; (800b31c <tcp_new_port+0x48>)
 800b2d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2dc:	8811      	ldrh	r1, [r2, #0]
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800b2de:	f64f 76ff 	movw	r6, #65535	; 0xffff
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b2e2:	4f0f      	ldr	r7, [pc, #60]	; (800b320 <tcp_new_port+0x4c>)
  tcp_port++;
 800b2e4:	1c48      	adds	r0, r1, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b2e6:	2400      	movs	r4, #0
  tcp_port++;
 800b2e8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800b2ea:	42b0      	cmp	r0, r6
 800b2ec:	bf08      	it	eq
 800b2ee:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b2f2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800b2f6:	680d      	ldr	r5, [r1, #0]
 800b2f8:	b925      	cbnz	r5, 800b304 <tcp_new_port+0x30>
 800b2fa:	3401      	adds	r4, #1
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800b2fc:	2c04      	cmp	r4, #4
 800b2fe:	d1f8      	bne.n	800b2f2 <tcp_new_port+0x1e>
 800b300:	8010      	strh	r0, [r2, #0]
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800b302:	e008      	b.n	800b316 <tcp_new_port+0x42>
      if (pcb->local_port == tcp_port) {
 800b304:	8ae9      	ldrh	r1, [r5, #22]
 800b306:	4281      	cmp	r1, r0
 800b308:	d106      	bne.n	800b318 <tcp_new_port+0x44>
 800b30a:	3b01      	subs	r3, #1
 800b30c:	b29b      	uxth	r3, r3
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e8      	bne.n	800b2e4 <tcp_new_port+0x10>
 800b312:	8010      	strh	r0, [r2, #0]
          return 0;
 800b314:	4618      	mov	r0, r3
}
 800b316:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800b318:	68ed      	ldr	r5, [r5, #12]
 800b31a:	e7ed      	b.n	800b2f8 <tcp_new_port+0x24>
 800b31c:	20000044 	.word	0x20000044
 800b320:	08014a40 	.word	0x08014a40

0800b324 <tcp_close_shutdown_fin>:
{
 800b324:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b326:	4604      	mov	r4, r0
 800b328:	b930      	cbnz	r0, 800b338 <tcp_close_shutdown_fin+0x14>
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <tcp_close_shutdown_fin+0x54>)
 800b32c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b330:	4912      	ldr	r1, [pc, #72]	; (800b37c <tcp_close_shutdown_fin+0x58>)
 800b332:	4813      	ldr	r0, [pc, #76]	; (800b380 <tcp_close_shutdown_fin+0x5c>)
 800b334:	f003 ff2a 	bl	800f18c <iprintf>
  switch (pcb->state) {
 800b338:	7d23      	ldrb	r3, [r4, #20]
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d003      	beq.n	800b346 <tcp_close_shutdown_fin+0x22>
 800b33e:	2b07      	cmp	r3, #7
 800b340:	d00c      	beq.n	800b35c <tcp_close_shutdown_fin+0x38>
 800b342:	2b03      	cmp	r3, #3
 800b344:	d108      	bne.n	800b358 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 800b346:	4620      	mov	r0, r4
 800b348:	f002 fdae 	bl	800dea8 <tcp_send_fin>
      if (err == ERR_OK) {
 800b34c:	b960      	cbnz	r0, 800b368 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 800b34e:	2305      	movs	r3, #5
        pcb->state = LAST_ACK;
 800b350:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800b352:	4620      	mov	r0, r4
 800b354:	f002 ff0c 	bl	800e170 <tcp_output>
      return ERR_OK;
 800b358:	2000      	movs	r0, #0
}
 800b35a:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 800b35c:	4620      	mov	r0, r4
 800b35e:	f002 fda3 	bl	800dea8 <tcp_send_fin>
      if (err == ERR_OK) {
 800b362:	b908      	cbnz	r0, 800b368 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 800b364:	2309      	movs	r3, #9
 800b366:	e7f3      	b.n	800b350 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d1f6      	bne.n	800b35a <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b36c:	8b63      	ldrh	r3, [r4, #26]
 800b36e:	f043 0308 	orr.w	r3, r3, #8
 800b372:	8363      	strh	r3, [r4, #26]
 800b374:	e7f0      	b.n	800b358 <tcp_close_shutdown_fin+0x34>
 800b376:	bf00      	nop
 800b378:	0801f7f9 	.word	0x0801f7f9
 800b37c:	0801f865 	.word	0x0801f865
 800b380:	0801d8d1 	.word	0x0801d8d1

0800b384 <tcp_init>:
{
 800b384:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b386:	f003 ff7d 	bl	800f284 <rand>
 800b38a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800b38e:	4b02      	ldr	r3, [pc, #8]	; (800b398 <tcp_init+0x14>)
 800b390:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800b394:	8018      	strh	r0, [r3, #0]
}
 800b396:	bd08      	pop	{r3, pc}
 800b398:	20000044 	.word	0x20000044

0800b39c <tcp_free>:
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b39c:	7d03      	ldrb	r3, [r0, #20]
 800b39e:	2b01      	cmp	r3, #1
{
 800b3a0:	b510      	push	{r4, lr}
 800b3a2:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b3a4:	d105      	bne.n	800b3b2 <tcp_free+0x16>
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <tcp_free+0x24>)
 800b3a8:	22d4      	movs	r2, #212	; 0xd4
 800b3aa:	4906      	ldr	r1, [pc, #24]	; (800b3c4 <tcp_free+0x28>)
 800b3ac:	4806      	ldr	r0, [pc, #24]	; (800b3c8 <tcp_free+0x2c>)
 800b3ae:	f003 feed 	bl	800f18c <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	2001      	movs	r0, #1
}
 800b3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 800b3ba:	f7ff bad7 	b.w	800a96c <memp_free>
 800b3be:	bf00      	nop
 800b3c0:	0801f7f9 	.word	0x0801f7f9
 800b3c4:	0801f871 	.word	0x0801f871
 800b3c8:	0801d8d1 	.word	0x0801d8d1

0800b3cc <tcp_bind>:
{
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800b3ce:	4d23      	ldr	r5, [pc, #140]	; (800b45c <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3d0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800b3d2:	2900      	cmp	r1, #0
 800b3d4:	bf18      	it	ne
 800b3d6:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b3d8:	b948      	cbnz	r0, 800b3ee <tcp_bind+0x22>
 800b3da:	4b21      	ldr	r3, [pc, #132]	; (800b460 <tcp_bind+0x94>)
 800b3dc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800b3e0:	4920      	ldr	r1, [pc, #128]	; (800b464 <tcp_bind+0x98>)
 800b3e2:	4821      	ldr	r0, [pc, #132]	; (800b468 <tcp_bind+0x9c>)
 800b3e4:	f003 fed2 	bl	800f18c <iprintf>
 800b3e8:	f06f 000f 	mvn.w	r0, #15
}
 800b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800b3ee:	7d03      	ldrb	r3, [r0, #20]
 800b3f0:	b14b      	cbz	r3, 800b406 <tcp_bind+0x3a>
 800b3f2:	4b1b      	ldr	r3, [pc, #108]	; (800b460 <tcp_bind+0x94>)
 800b3f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b3f8:	491c      	ldr	r1, [pc, #112]	; (800b46c <tcp_bind+0xa0>)
 800b3fa:	481b      	ldr	r0, [pc, #108]	; (800b468 <tcp_bind+0x9c>)
 800b3fc:	f003 fec6 	bl	800f18c <iprintf>
 800b400:	f06f 0005 	mvn.w	r0, #5
 800b404:	e7f2      	b.n	800b3ec <tcp_bind+0x20>
  if (port == 0) {
 800b406:	b932      	cbnz	r2, 800b416 <tcp_bind+0x4a>
    port = tcp_new_port();
 800b408:	f7ff ff64 	bl	800b2d4 <tcp_new_port>
    if (port == 0) {
 800b40c:	4602      	mov	r2, r0
 800b40e:	b950      	cbnz	r0, 800b426 <tcp_bind+0x5a>
      return ERR_BUF;
 800b410:	f06f 0001 	mvn.w	r0, #1
 800b414:	e7ea      	b.n	800b3ec <tcp_bind+0x20>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b416:	4f16      	ldr	r7, [pc, #88]	; (800b470 <tcp_bind+0xa4>)
 800b418:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800b41c:	6808      	ldr	r0, [r1, #0]
 800b41e:	b970      	cbnz	r0, 800b43e <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 800b420:	3301      	adds	r3, #1
 800b422:	2b04      	cmp	r3, #4
 800b424:	d1f8      	bne.n	800b418 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 800b426:	682b      	ldr	r3, [r5, #0]
 800b428:	b103      	cbz	r3, 800b42c <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800b42a:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b42c:	4b11      	ldr	r3, [pc, #68]	; (800b474 <tcp_bind+0xa8>)
  pcb->local_port = port;
 800b42e:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	601c      	str	r4, [r3, #0]
 800b434:	60e2      	str	r2, [r4, #12]
 800b436:	f003 f971 	bl	800e71c <tcp_timer_needed>
  return ERR_OK;
 800b43a:	2000      	movs	r0, #0
 800b43c:	e7d6      	b.n	800b3ec <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 800b43e:	8ac1      	ldrh	r1, [r0, #22]
 800b440:	4291      	cmp	r1, r2
 800b442:	d105      	bne.n	800b450 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 800b444:	6806      	ldr	r6, [r0, #0]
 800b446:	b12e      	cbz	r6, 800b454 <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 800b448:	6829      	ldr	r1, [r5, #0]
 800b44a:	b119      	cbz	r1, 800b454 <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800b44c:	428e      	cmp	r6, r1
 800b44e:	d001      	beq.n	800b454 <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800b450:	68c0      	ldr	r0, [r0, #12]
 800b452:	e7e4      	b.n	800b41e <tcp_bind+0x52>
              return ERR_USE;
 800b454:	f06f 0007 	mvn.w	r0, #7
 800b458:	e7c8      	b.n	800b3ec <tcp_bind+0x20>
 800b45a:	bf00      	nop
 800b45c:	0801496c 	.word	0x0801496c
 800b460:	0801f7f9 	.word	0x0801f7f9
 800b464:	0801f882 	.word	0x0801f882
 800b468:	0801d8d1 	.word	0x0801d8d1
 800b46c:	0801f898 	.word	0x0801f898
 800b470:	08014a40 	.word	0x08014a40
 800b474:	20010e04 	.word	0x20010e04

0800b478 <tcp_listen_with_backlog_and_err>:
{
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800b47c:	4605      	mov	r5, r0
 800b47e:	b968      	cbnz	r0, 800b49c <tcp_listen_with_backlog_and_err+0x24>
 800b480:	4b29      	ldr	r3, [pc, #164]	; (800b528 <tcp_listen_with_backlog_and_err+0xb0>)
 800b482:	f240 3259 	movw	r2, #857	; 0x359
 800b486:	4929      	ldr	r1, [pc, #164]	; (800b52c <tcp_listen_with_backlog_and_err+0xb4>)
 800b488:	4829      	ldr	r0, [pc, #164]	; (800b530 <tcp_listen_with_backlog_and_err+0xb8>)
 800b48a:	f003 fe7f 	bl	800f18c <iprintf>
 800b48e:	f06f 030f 	mvn.w	r3, #15
  struct tcp_pcb_listen *lpcb = NULL;
 800b492:	2400      	movs	r4, #0
  if (err != NULL) {
 800b494:	b106      	cbz	r6, 800b498 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 800b496:	7033      	strb	r3, [r6, #0]
}
 800b498:	4620      	mov	r0, r4
 800b49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800b49c:	7d07      	ldrb	r7, [r0, #20]
 800b49e:	b14f      	cbz	r7, 800b4b4 <tcp_listen_with_backlog_and_err+0x3c>
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <tcp_listen_with_backlog_and_err+0xb0>)
 800b4a2:	f240 325a 	movw	r2, #858	; 0x35a
 800b4a6:	4923      	ldr	r1, [pc, #140]	; (800b534 <tcp_listen_with_backlog_and_err+0xbc>)
 800b4a8:	4821      	ldr	r0, [pc, #132]	; (800b530 <tcp_listen_with_backlog_and_err+0xb8>)
 800b4aa:	f003 fe6f 	bl	800f18c <iprintf>
 800b4ae:	f06f 030e 	mvn.w	r3, #14
 800b4b2:	e7ee      	b.n	800b492 <tcp_listen_with_backlog_and_err+0x1a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800b4b4:	2002      	movs	r0, #2
 800b4b6:	f7ff fa3d 	bl	800a934 <memp_malloc>
  if (lpcb == NULL) {
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d02f      	beq.n	800b520 <tcp_listen_with_backlog_and_err+0xa8>
  lpcb->callback_arg = pcb->callback_arg;
 800b4c0:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800b4c2:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800b4c4:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800b4c6:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800b4c8:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800b4ca:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800b4cc:	7d6a      	ldrb	r2, [r5, #21]
 800b4ce:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800b4d0:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800b4d2:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 800b4d4:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 800b4d6:	7aea      	ldrb	r2, [r5, #11]
 800b4d8:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 800b4da:	7aaa      	ldrb	r2, [r5, #10]
 800b4dc:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800b4de:	682a      	ldr	r2, [r5, #0]
 800b4e0:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800b4e2:	b13b      	cbz	r3, 800b4f4 <tcp_listen_with_backlog_and_err+0x7c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b4e4:	4a14      	ldr	r2, [pc, #80]	; (800b538 <tcp_listen_with_backlog_and_err+0xc0>)
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	42ab      	cmp	r3, r5
 800b4ea:	d111      	bne.n	800b510 <tcp_listen_with_backlog_and_err+0x98>
 800b4ec:	68eb      	ldr	r3, [r5, #12]
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	f7ff ff51 	bl	800b39c <tcp_free>
  lpcb->accept = tcp_accept_null;
 800b4fa:	4b10      	ldr	r3, [pc, #64]	; (800b53c <tcp_listen_with_backlog_and_err+0xc4>)
 800b4fc:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800b4fe:	4b10      	ldr	r3, [pc, #64]	; (800b540 <tcp_listen_with_backlog_and_err+0xc8>)
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	601c      	str	r4, [r3, #0]
 800b504:	60e2      	str	r2, [r4, #12]
 800b506:	f003 f909 	bl	800e71c <tcp_timer_needed>
  res = ERR_OK;
 800b50a:	2300      	movs	r3, #0
 800b50c:	e7c2      	b.n	800b494 <tcp_listen_with_backlog_and_err+0x1c>
 800b50e:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800b510:	2b00      	cmp	r3, #0
 800b512:	d0ed      	beq.n	800b4f0 <tcp_listen_with_backlog_and_err+0x78>
 800b514:	68da      	ldr	r2, [r3, #12]
 800b516:	42aa      	cmp	r2, r5
 800b518:	d1f9      	bne.n	800b50e <tcp_listen_with_backlog_and_err+0x96>
 800b51a:	68ea      	ldr	r2, [r5, #12]
 800b51c:	60da      	str	r2, [r3, #12]
 800b51e:	e7e7      	b.n	800b4f0 <tcp_listen_with_backlog_and_err+0x78>
    res = ERR_MEM;
 800b520:	f04f 33ff 	mov.w	r3, #4294967295
 800b524:	e7b6      	b.n	800b494 <tcp_listen_with_backlog_and_err+0x1c>
 800b526:	bf00      	nop
 800b528:	0801f7f9 	.word	0x0801f7f9
 800b52c:	0801f8c0 	.word	0x0801f8c0
 800b530:	0801d8d1 	.word	0x0801d8d1
 800b534:	0801f8ed 	.word	0x0801f8ed
 800b538:	20010e04 	.word	0x20010e04
 800b53c:	0800c105 	.word	0x0800c105
 800b540:	20010e00 	.word	0x20010e00

0800b544 <tcp_update_rcv_ann_wnd>:
{
 800b544:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800b546:	4604      	mov	r4, r0
 800b548:	b930      	cbnz	r0, 800b558 <tcp_update_rcv_ann_wnd+0x14>
 800b54a:	4b15      	ldr	r3, [pc, #84]	; (800b5a0 <tcp_update_rcv_ann_wnd+0x5c>)
 800b54c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b550:	4914      	ldr	r1, [pc, #80]	; (800b5a4 <tcp_update_rcv_ann_wnd+0x60>)
 800b552:	4815      	ldr	r0, [pc, #84]	; (800b5a8 <tcp_update_rcv_ann_wnd+0x64>)
 800b554:	f003 fe1a 	bl	800f18c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b558:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b55a:	f240 56b4 	movw	r6, #1460	; 0x5b4
 800b55e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b560:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b562:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b564:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b566:	42b2      	cmp	r2, r6
 800b568:	4428      	add	r0, r5
 800b56a:	bf94      	ite	ls
 800b56c:	1a82      	subls	r2, r0, r2
 800b56e:	1b82      	subhi	r2, r0, r6
 800b570:	2a00      	cmp	r2, #0
 800b572:	db01      	blt.n	800b578 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b574:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800b576:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b578:	1aea      	subs	r2, r5, r3
 800b57a:	2a00      	cmp	r2, #0
 800b57c:	dd02      	ble.n	800b584 <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 800b57e:	2000      	movs	r0, #0
 800b580:	8560      	strh	r0, [r4, #42]	; 0x2a
 800b582:	e7f8      	b.n	800b576 <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b584:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b586:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800b58a:	d306      	bcc.n	800b59a <tcp_update_rcv_ann_wnd+0x56>
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <tcp_update_rcv_ann_wnd+0x5c>)
 800b58e:	f240 32b6 	movw	r2, #950	; 0x3b6
 800b592:	4906      	ldr	r1, [pc, #24]	; (800b5ac <tcp_update_rcv_ann_wnd+0x68>)
 800b594:	4804      	ldr	r0, [pc, #16]	; (800b5a8 <tcp_update_rcv_ann_wnd+0x64>)
 800b596:	f003 fdf9 	bl	800f18c <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b59a:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 800b59c:	2000      	movs	r0, #0
 800b59e:	e7ea      	b.n	800b576 <tcp_update_rcv_ann_wnd+0x32>
 800b5a0:	0801f7f9 	.word	0x0801f7f9
 800b5a4:	0801f924 	.word	0x0801f924
 800b5a8:	0801d8d1 	.word	0x0801d8d1
 800b5ac:	0801f948 	.word	0x0801f948

0800b5b0 <tcp_recved>:
{
 800b5b0:	b570      	push	{r4, r5, r6, lr}
 800b5b2:	460d      	mov	r5, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	b940      	cbnz	r0, 800b5ca <tcp_recved+0x1a>
 800b5b8:	4b17      	ldr	r3, [pc, #92]	; (800b618 <tcp_recved+0x68>)
 800b5ba:	f240 32cf 	movw	r2, #975	; 0x3cf
 800b5be:	4917      	ldr	r1, [pc, #92]	; (800b61c <tcp_recved+0x6c>)
 800b5c0:	4817      	ldr	r0, [pc, #92]	; (800b620 <tcp_recved+0x70>)
}
 800b5c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800b5c6:	f003 bde1 	b.w	800f18c <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b5ca:	7d03      	ldrb	r3, [r0, #20]
 800b5cc:	2b01      	cmp	r3, #1
 800b5ce:	d106      	bne.n	800b5de <tcp_recved+0x2e>
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <tcp_recved+0x68>)
 800b5d2:	f240 32d3 	movw	r2, #979	; 0x3d3
 800b5d6:	4913      	ldr	r1, [pc, #76]	; (800b624 <tcp_recved+0x74>)
 800b5d8:	4811      	ldr	r0, [pc, #68]	; (800b620 <tcp_recved+0x70>)
 800b5da:	f003 fdd7 	bl	800f18c <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b5de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b5e0:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800b5e4:	1951      	adds	r1, r2, r5
 800b5e6:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800b5e8:	4299      	cmp	r1, r3
 800b5ea:	d801      	bhi.n	800b5f0 <tcp_recved+0x40>
 800b5ec:	428a      	cmp	r2, r1
 800b5ee:	d910      	bls.n	800b612 <tcp_recved+0x62>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b5f0:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff ffa6 	bl	800b544 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b5f8:	f240 23d9 	movw	r3, #729	; 0x2d9
 800b5fc:	4298      	cmp	r0, r3
 800b5fe:	d90a      	bls.n	800b616 <tcp_recved+0x66>
    tcp_ack_now(pcb);
 800b600:	8b63      	ldrh	r3, [r4, #26]
    tcp_output(pcb);
 800b602:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800b604:	f043 0302 	orr.w	r3, r3, #2
 800b608:	8363      	strh	r3, [r4, #26]
}
 800b60a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 800b60e:	f002 bdaf 	b.w	800e170 <tcp_output>
    pcb->rcv_wnd = rcv_wnd;
 800b612:	8521      	strh	r1, [r4, #40]	; 0x28
 800b614:	e7ed      	b.n	800b5f2 <tcp_recved+0x42>
}
 800b616:	bd70      	pop	{r4, r5, r6, pc}
 800b618:	0801f7f9 	.word	0x0801f7f9
 800b61c:	0801f962 	.word	0x0801f962
 800b620:	0801d8d1 	.word	0x0801d8d1
 800b624:	0801f97a 	.word	0x0801f97a

0800b628 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b628:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800b62a:	4604      	mov	r4, r0
 800b62c:	b148      	cbz	r0, 800b642 <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800b62e:	6840      	ldr	r0, [r0, #4]
 800b630:	b108      	cbz	r0, 800b636 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800b632:	f7ff fbc5 	bl	800adc0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b636:	4621      	mov	r1, r4
 800b638:	2003      	movs	r0, #3
  }
}
 800b63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800b63e:	f7ff b995 	b.w	800a96c <memp_free>
}
 800b642:	bd10      	pop	{r4, pc}

0800b644 <tcp_segs_free>:
{
 800b644:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800b646:	b900      	cbnz	r0, 800b64a <tcp_segs_free+0x6>
}
 800b648:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800b64a:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800b64c:	f7ff ffec 	bl	800b628 <tcp_seg_free>
    seg = next;
 800b650:	4620      	mov	r0, r4
 800b652:	e7f8      	b.n	800b646 <tcp_segs_free+0x2>

0800b654 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b654:	b100      	cbz	r0, 800b658 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800b656:	6101      	str	r1, [r0, #16]
  }
}
 800b658:	4770      	bx	lr
	...

0800b65c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b660:	4604      	mov	r4, r0
 800b662:	b158      	cbz	r0, 800b67c <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b664:	7d03      	ldrb	r3, [r0, #20]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d106      	bne.n	800b678 <tcp_recv+0x1c>
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <tcp_recv+0x24>)
 800b66c:	f240 72df 	movw	r2, #2015	; 0x7df
 800b670:	4904      	ldr	r1, [pc, #16]	; (800b684 <tcp_recv+0x28>)
 800b672:	4805      	ldr	r0, [pc, #20]	; (800b688 <tcp_recv+0x2c>)
 800b674:	f003 fd8a 	bl	800f18c <iprintf>
    pcb->recv = recv;
 800b678:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	0801f7f9 	.word	0x0801f7f9
 800b684:	0801f9b9 	.word	0x0801f9b9
 800b688:	0801d8d1 	.word	0x0801d8d1

0800b68c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b690:	4604      	mov	r4, r0
 800b692:	b150      	cbz	r0, 800b6aa <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b694:	7d03      	ldrb	r3, [r0, #20]
 800b696:	2b01      	cmp	r3, #1
 800b698:	d106      	bne.n	800b6a8 <tcp_sent+0x1c>
 800b69a:	4b04      	ldr	r3, [pc, #16]	; (800b6ac <tcp_sent+0x20>)
 800b69c:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b6a0:	4903      	ldr	r1, [pc, #12]	; (800b6b0 <tcp_sent+0x24>)
 800b6a2:	4804      	ldr	r0, [pc, #16]	; (800b6b4 <tcp_sent+0x28>)
 800b6a4:	f003 fd72 	bl	800f18c <iprintf>
    pcb->sent = sent;
 800b6a8:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800b6aa:	bd38      	pop	{r3, r4, r5, pc}
 800b6ac:	0801f7f9 	.word	0x0801f7f9
 800b6b0:	0801f9e0 	.word	0x0801f9e0
 800b6b4:	0801d8d1 	.word	0x0801d8d1

0800b6b8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b6bc:	4604      	mov	r4, r0
 800b6be:	b158      	cbz	r0, 800b6d8 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b6c0:	7d03      	ldrb	r3, [r0, #20]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d106      	bne.n	800b6d4 <tcp_err+0x1c>
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <tcp_err+0x24>)
 800b6c8:	f640 020d 	movw	r2, #2061	; 0x80d
 800b6cc:	4904      	ldr	r1, [pc, #16]	; (800b6e0 <tcp_err+0x28>)
 800b6ce:	4805      	ldr	r0, [pc, #20]	; (800b6e4 <tcp_err+0x2c>)
 800b6d0:	f003 fd5c 	bl	800f18c <iprintf>
    pcb->errf = err;
 800b6d4:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800b6d8:	bd38      	pop	{r3, r4, r5, pc}
 800b6da:	bf00      	nop
 800b6dc:	0801f7f9 	.word	0x0801f7f9
 800b6e0:	0801fa07 	.word	0x0801fa07
 800b6e4:	0801d8d1 	.word	0x0801d8d1

0800b6e8 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b6e8:	b118      	cbz	r0, 800b6f2 <tcp_accept+0xa>
 800b6ea:	7d03      	ldrb	r3, [r0, #20]
 800b6ec:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800b6ee:	bf08      	it	eq
 800b6f0:	6181      	streq	r1, [r0, #24]
  }
}
 800b6f2:	4770      	bx	lr

0800b6f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b6f4:	b570      	push	{r4, r5, r6, lr}
 800b6f6:	460e      	mov	r6, r1
 800b6f8:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	b940      	cbnz	r0, 800b710 <tcp_poll+0x1c>
 800b6fe:	4b0b      	ldr	r3, [pc, #44]	; (800b72c <tcp_poll+0x38>)
 800b700:	f640 023d 	movw	r2, #2109	; 0x83d
 800b704:	490a      	ldr	r1, [pc, #40]	; (800b730 <tcp_poll+0x3c>)
 800b706:	480b      	ldr	r0, [pc, #44]	; (800b734 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 800b708:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b70c:	f003 bd3e 	b.w	800f18c <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b710:	7d03      	ldrb	r3, [r0, #20]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d106      	bne.n	800b724 <tcp_poll+0x30>
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <tcp_poll+0x38>)
 800b718:	f640 023e 	movw	r2, #2110	; 0x83e
 800b71c:	4906      	ldr	r1, [pc, #24]	; (800b738 <tcp_poll+0x44>)
 800b71e:	4805      	ldr	r0, [pc, #20]	; (800b734 <tcp_poll+0x40>)
 800b720:	f003 fd34 	bl	800f18c <iprintf>
  pcb->poll = poll;
 800b724:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 800b728:	7765      	strb	r5, [r4, #29]
}
 800b72a:	bd70      	pop	{r4, r5, r6, pc}
 800b72c:	0801f7f9 	.word	0x0801f7f9
 800b730:	0801fa2d 	.word	0x0801fa2d
 800b734:	0801d8d1 	.word	0x0801d8d1
 800b738:	0801fa43 	.word	0x0801fa43

0800b73c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b73c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b73e:	4604      	mov	r4, r0
 800b740:	b940      	cbnz	r0, 800b754 <tcp_pcb_purge+0x18>
 800b742:	4b11      	ldr	r3, [pc, #68]	; (800b788 <tcp_pcb_purge+0x4c>)
 800b744:	f640 0251 	movw	r2, #2129	; 0x851
 800b748:	4910      	ldr	r1, [pc, #64]	; (800b78c <tcp_pcb_purge+0x50>)
 800b74a:	4811      	ldr	r0, [pc, #68]	; (800b790 <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 800b74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b750:	f003 bd1c 	b.w	800f18c <iprintf>
  if (pcb->state != CLOSED &&
 800b754:	7d03      	ldrb	r3, [r0, #20]
 800b756:	2b01      	cmp	r3, #1
 800b758:	d915      	bls.n	800b786 <tcp_pcb_purge+0x4a>
 800b75a:	2b0a      	cmp	r3, #10
 800b75c:	d013      	beq.n	800b786 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 800b75e:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800b760:	b118      	cbz	r0, 800b76a <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 800b762:	f7ff fb2d 	bl	800adc0 <pbuf_free>
      pcb->refused_data = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 800b76a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 800b76e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 800b770:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 800b772:	f7ff ff67 	bl	800b644 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b776:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b778:	f7ff ff64 	bl	800b644 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 800b782:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800b786:	bd10      	pop	{r4, pc}
 800b788:	0801f7f9 	.word	0x0801f7f9
 800b78c:	0801fa61 	.word	0x0801fa61
 800b790:	0801d8d1 	.word	0x0801d8d1

0800b794 <tcp_slowtmr>:
{
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800b798:	4eb5      	ldr	r6, [pc, #724]	; (800ba70 <tcp_slowtmr+0x2dc>)
{
 800b79a:	b087      	sub	sp, #28
      tcp_active_pcbs_changed = 0;
 800b79c:	f8df a304 	ldr.w	sl, [pc, #772]	; 800baa4 <tcp_slowtmr+0x310>
  ++tcp_ticks;
 800b7a0:	6833      	ldr	r3, [r6, #0]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800b7a6:	4bb3      	ldr	r3, [pc, #716]	; (800ba74 <tcp_slowtmr+0x2e0>)
 800b7a8:	781a      	ldrb	r2, [r3, #0]
 800b7aa:	9304      	str	r3, [sp, #16]
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800b7b0:	4bb1      	ldr	r3, [pc, #708]	; (800ba78 <tcp_slowtmr+0x2e4>)
  prev = NULL;
 800b7b2:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b7b6:	4fb1      	ldr	r7, [pc, #708]	; (800ba7c <tcp_slowtmr+0x2e8>)
  pcb = tcp_active_pcbs;
 800b7b8:	681c      	ldr	r4, [r3, #0]
 800b7ba:	4698      	mov	r8, r3
  while (pcb != NULL) {
 800b7bc:	b96c      	cbnz	r4, 800b7da <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 800b7be:	4fb0      	ldr	r7, [pc, #704]	; (800ba80 <tcp_slowtmr+0x2ec>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7c0:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800ba7c <tcp_slowtmr+0x2e8>
  pcb = tcp_tw_pcbs;
 800b7c4:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b7c6:	f8df a2e0 	ldr.w	sl, [pc, #736]	; 800baa8 <tcp_slowtmr+0x314>
 800b7ca:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 800ba88 <tcp_slowtmr+0x2f4>
  while (pcb != NULL) {
 800b7ce:	2d00      	cmp	r5, #0
 800b7d0:	f040 81b6 	bne.w	800bb40 <tcp_slowtmr+0x3ac>
}
 800b7d4:	b007      	add	sp, #28
 800b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b7da:	7d23      	ldrb	r3, [r4, #20]
 800b7dc:	b933      	cbnz	r3, 800b7ec <tcp_slowtmr+0x58>
 800b7de:	463b      	mov	r3, r7
 800b7e0:	f240 42be 	movw	r2, #1214	; 0x4be
 800b7e4:	49a7      	ldr	r1, [pc, #668]	; (800ba84 <tcp_slowtmr+0x2f0>)
 800b7e6:	48a8      	ldr	r0, [pc, #672]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b7e8:	f003 fcd0 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b7ec:	7d23      	ldrb	r3, [r4, #20]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d106      	bne.n	800b800 <tcp_slowtmr+0x6c>
 800b7f2:	463b      	mov	r3, r7
 800b7f4:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800b7f8:	49a4      	ldr	r1, [pc, #656]	; (800ba8c <tcp_slowtmr+0x2f8>)
 800b7fa:	48a3      	ldr	r0, [pc, #652]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b7fc:	f003 fcc6 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b800:	7d23      	ldrb	r3, [r4, #20]
 800b802:	2b0a      	cmp	r3, #10
 800b804:	d106      	bne.n	800b814 <tcp_slowtmr+0x80>
 800b806:	463b      	mov	r3, r7
 800b808:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800b80c:	49a0      	ldr	r1, [pc, #640]	; (800ba90 <tcp_slowtmr+0x2fc>)
 800b80e:	489e      	ldr	r0, [pc, #632]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b810:	f003 fcbc 	bl	800f18c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b814:	9b04      	ldr	r3, [sp, #16]
 800b816:	7fa2      	ldrb	r2, [r4, #30]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d103      	bne.n	800b826 <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800b81e:	68e5      	ldr	r5, [r4, #12]
 800b820:	46a1      	mov	r9, r4
 800b822:	462c      	mov	r4, r5
 800b824:	e7ca      	b.n	800b7bc <tcp_slowtmr+0x28>
    pcb->last_timer = tcp_timer_ctr;
 800b826:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b828:	7d23      	ldrb	r3, [r4, #20]
 800b82a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d131      	bne.n	800b896 <tcp_slowtmr+0x102>
 800b832:	2a05      	cmp	r2, #5
 800b834:	f200 81ba 	bhi.w	800bbac <tcp_slowtmr+0x418>
      if (pcb->persist_backoff > 0) {
 800b838:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800b83c:	f1bb 0f00 	cmp.w	fp, #0
 800b840:	f000 80c4 	beq.w	800b9cc <tcp_slowtmr+0x238>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800b844:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b846:	b133      	cbz	r3, 800b856 <tcp_slowtmr+0xc2>
 800b848:	463b      	mov	r3, r7
 800b84a:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800b84e:	4991      	ldr	r1, [pc, #580]	; (800ba94 <tcp_slowtmr+0x300>)
 800b850:	488d      	ldr	r0, [pc, #564]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b852:	f003 fc9b 	bl	800f18c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800b856:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b858:	b933      	cbnz	r3, 800b868 <tcp_slowtmr+0xd4>
 800b85a:	463b      	mov	r3, r7
 800b85c:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b860:	498d      	ldr	r1, [pc, #564]	; (800ba98 <tcp_slowtmr+0x304>)
 800b862:	4889      	ldr	r0, [pc, #548]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b864:	f003 fc92 	bl	800f18c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800b868:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800b86c:	2b0b      	cmp	r3, #11
 800b86e:	d814      	bhi.n	800b89a <tcp_slowtmr+0x106>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800b870:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 800b874:	4b89      	ldr	r3, [pc, #548]	; (800ba9c <tcp_slowtmr+0x308>)
 800b876:	4413      	add	r3, r2
 800b878:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 800b87a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800b87e:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800b880:	bf3c      	itt	cc
 800b882:	3301      	addcc	r3, #1
 800b884:	f884 3094 	strbcc.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800b888:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d27c      	bcs.n	800b98a <tcp_slowtmr+0x1f6>
    pcb_remove = 0;
 800b890:	f04f 0b00 	mov.w	fp, #0
 800b894:	e003      	b.n	800b89e <tcp_slowtmr+0x10a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800b896:	2a0b      	cmp	r2, #11
 800b898:	d9ce      	bls.n	800b838 <tcp_slowtmr+0xa4>
      ++pcb_remove;
 800b89a:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 800b89e:	7d23      	ldrb	r3, [r4, #20]
 800b8a0:	2b06      	cmp	r3, #6
 800b8a2:	d10b      	bne.n	800b8bc <tcp_slowtmr+0x128>
      if (pcb->flags & TF_RXCLOSED) {
 800b8a4:	8b62      	ldrh	r2, [r4, #26]
 800b8a6:	06d2      	lsls	r2, r2, #27
 800b8a8:	d508      	bpl.n	800b8bc <tcp_slowtmr+0x128>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8aa:	6832      	ldr	r2, [r6, #0]
 800b8ac:	6a21      	ldr	r1, [r4, #32]
 800b8ae:	1a52      	subs	r2, r2, r1
 800b8b0:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800b8b2:	bf84      	itt	hi
 800b8b4:	f10b 0b01 	addhi.w	fp, fp, #1
 800b8b8:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b8bc:	7a65      	ldrb	r5, [r4, #9]
 800b8be:	f015 0508 	ands.w	r5, r5, #8
 800b8c2:	d019      	beq.n	800b8f8 <tcp_slowtmr+0x164>
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d002      	beq.n	800b8ce <tcp_slowtmr+0x13a>
        ((pcb->state == ESTABLISHED) ||
 800b8c8:	2b07      	cmp	r3, #7
 800b8ca:	f040 8101 	bne.w	800bad0 <tcp_slowtmr+0x33c>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b8ce:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800b8d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8d6:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b8d8:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8dc:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b8de:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8e2:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800b8e4:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b8e8:	4291      	cmp	r1, r2
 800b8ea:	f240 80df 	bls.w	800baac <tcp_slowtmr+0x318>
        ++pcb_remove;
 800b8ee:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800b8f2:	2501      	movs	r5, #1
        ++pcb_remove;
 800b8f4:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 800b8f8:	7d23      	ldrb	r3, [r4, #20]
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	f040 80ea 	bne.w	800bad4 <tcp_slowtmr+0x340>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b900:	6833      	ldr	r3, [r6, #0]
 800b902:	6a22      	ldr	r2, [r4, #32]
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b908:	d803      	bhi.n	800b912 <tcp_slowtmr+0x17e>
    if (pcb_remove) {
 800b90a:	f1bb 0f00 	cmp.w	fp, #0
 800b90e:	f000 80f6 	beq.w	800bafe <tcp_slowtmr+0x36a>
      tcp_pcb_purge(pcb);
 800b912:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800b914:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800b918:	f7ff ff10 	bl	800b73c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b91c:	f8d8 3000 	ldr.w	r3, [r8]
      if (prev != NULL) {
 800b920:	f1b9 0f00 	cmp.w	r9, #0
 800b924:	f000 80de 	beq.w	800bae4 <tcp_slowtmr+0x350>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b928:	42a3      	cmp	r3, r4
 800b92a:	d106      	bne.n	800b93a <tcp_slowtmr+0x1a6>
 800b92c:	463b      	mov	r3, r7
 800b92e:	f240 526d 	movw	r2, #1389	; 0x56d
 800b932:	495b      	ldr	r1, [pc, #364]	; (800baa0 <tcp_slowtmr+0x30c>)
 800b934:	4854      	ldr	r0, [pc, #336]	; (800ba88 <tcp_slowtmr+0x2f4>)
 800b936:	f003 fc29 	bl	800f18c <iprintf>
        prev->next = pcb->next;
 800b93a:	68e3      	ldr	r3, [r4, #12]
 800b93c:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 800b940:	b15d      	cbz	r5, 800b95a <tcp_slowtmr+0x1c6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b942:	8b23      	ldrh	r3, [r4, #24]
 800b944:	4620      	mov	r0, r4
 800b946:	9302      	str	r3, [sp, #8]
 800b948:	8ae3      	ldrh	r3, [r4, #22]
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	1d23      	adds	r3, r4, #4
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4623      	mov	r3, r4
 800b952:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b954:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b956:	f002 fb95 	bl	800e084 <tcp_rst>
      err_arg = pcb->callback_arg;
 800b95a:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 800b95c:	4620      	mov	r0, r4
      pcb = pcb->next;
 800b95e:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800b960:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800b962:	f7ff fd1b 	bl	800b39c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800b966:	2200      	movs	r2, #0
 800b968:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b96c:	f1bb 0f00 	cmp.w	fp, #0
 800b970:	d004      	beq.n	800b97c <tcp_slowtmr+0x1e8>
 800b972:	9b05      	ldr	r3, [sp, #20]
 800b974:	f06f 010c 	mvn.w	r1, #12
 800b978:	4618      	mov	r0, r3
 800b97a:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800b97c:	f89a 3000 	ldrb.w	r3, [sl]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f47f af15 	bne.w	800b7b0 <tcp_slowtmr+0x1c>
 800b986:	464c      	mov	r4, r9
 800b988:	e74a      	b.n	800b820 <tcp_slowtmr+0x8c>
            if (pcb->snd_wnd == 0) {
 800b98a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b98e:	4620      	mov	r0, r4
            if (pcb->snd_wnd == 0) {
 800b990:	b989      	cbnz	r1, 800b9b6 <tcp_slowtmr+0x222>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800b992:	f002 fdf5 	bl	800e580 <tcp_zero_window_probe>
 800b996:	2800      	cmp	r0, #0
 800b998:	f47f af7a 	bne.w	800b890 <tcp_slowtmr+0xfc>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b99c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 800b9a0:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b9a4:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 800b9a6:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b9aa:	f63f af71 	bhi.w	800b890 <tcp_slowtmr+0xfc>
                pcb->persist_backoff++;
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800b9b4:	e773      	b.n	800b89e <tcp_slowtmr+0x10a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800b9b6:	f002 f91d 	bl	800dbf4 <tcp_split_unsent_seg>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	d1ee      	bne.n	800b99c <tcp_slowtmr+0x208>
                if (tcp_output(pcb) == ERR_OK) {
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f002 fbd6 	bl	800e170 <tcp_output>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	f43f af63 	beq.w	800b890 <tcp_slowtmr+0xfc>
 800b9ca:	e7e7      	b.n	800b99c <tcp_slowtmr+0x208>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800b9cc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	db05      	blt.n	800b9e0 <tcp_slowtmr+0x24c>
 800b9d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800b9d8:	4293      	cmp	r3, r2
          ++pcb->rtime;
 800b9da:	bf1c      	itt	ne
 800b9dc:	3301      	addne	r3, #1
 800b9de:	8623      	strhne	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800b9e0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b9e4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	f6ff af51 	blt.w	800b890 <tcp_slowtmr+0xfc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f002 fa8c 	bl	800df0c <tcp_rexmit_rto_prepare>
 800b9f4:	b138      	cbz	r0, 800ba06 <tcp_slowtmr+0x272>
 800b9f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f47f af49 	bne.w	800b890 <tcp_slowtmr+0xfc>
 800b9fe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f43f af45 	beq.w	800b890 <tcp_slowtmr+0xfc>
            if (pcb->state != SYN_SENT) {
 800ba06:	7d23      	ldrb	r3, [r4, #20]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d015      	beq.n	800ba38 <tcp_slowtmr+0x2a4>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ba0c:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 800ba10:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ba14:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ba18:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 800ba1c:	4a1f      	ldr	r2, [pc, #124]	; (800ba9c <tcp_slowtmr+0x308>)
 800ba1e:	290c      	cmp	r1, #12
 800ba20:	bf94      	ite	ls
 800ba22:	1852      	addls	r2, r2, r1
 800ba24:	320c      	addhi	r2, #12
 800ba26:	7dd2      	ldrb	r2, [r2, #23]
 800ba28:	4093      	lsls	r3, r2
 800ba2a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	bfa8      	it	ge
 800ba32:	4613      	movge	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ba34:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ba38:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
            pcb->rtime = 0;
 800ba3c:	2100      	movs	r1, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ba3e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba42:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 800ba44:	4293      	cmp	r3, r2
            pcb->rtime = 0;
 800ba46:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->cwnd = pcb->mss;
 800ba48:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 800ba4c:	bf28      	it	cs
 800ba4e:	4613      	movcs	r3, r2
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba50:	0042      	lsls	r2, r0, #1
            pcb->bytes_acked = 0;
 800ba52:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ba56:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 800ba58:	085b      	lsrs	r3, r3, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba5a:	b292      	uxth	r2, r2
            pcb->ssthresh = eff_wnd >> 1;
 800ba5c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ba60:	4293      	cmp	r3, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ba62:	bf38      	it	cc
 800ba64:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800ba68:	f002 fd2c 	bl	800e4c4 <tcp_rexmit_rto_commit>
 800ba6c:	e717      	b.n	800b89e <tcp_slowtmr+0x10a>
 800ba6e:	bf00      	nop
 800ba70:	20010dfc 	.word	0x20010dfc
 800ba74:	20006985 	.word	0x20006985
 800ba78:	20010df8 	.word	0x20010df8
 800ba7c:	0801f7f9 	.word	0x0801f7f9
 800ba80:	20010e08 	.word	0x20010e08
 800ba84:	0801fa7c 	.word	0x0801fa7c
 800ba88:	0801d8d1 	.word	0x0801d8d1
 800ba8c:	0801faa6 	.word	0x0801faa6
 800ba90:	0801fad0 	.word	0x0801fad0
 800ba94:	0801fafd 	.word	0x0801fafd
 800ba98:	0801fb2f 	.word	0x0801fb2f
 800ba9c:	08014a40 	.word	0x08014a40
 800baa0:	0801fb64 	.word	0x0801fb64
 800baa4:	20010df4 	.word	0x20010df4
 800baa8:	0801fbb9 	.word	0x0801fbb9
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800baac:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800bab0:	4a40      	ldr	r2, [pc, #256]	; (800bbb4 <tcp_slowtmr+0x420>)
 800bab2:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 800bab6:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800baba:	4299      	cmp	r1, r3
 800babc:	d908      	bls.n	800bad0 <tcp_slowtmr+0x33c>
        err = tcp_keepalive(pcb);
 800babe:	4620      	mov	r0, r4
 800bac0:	f002 fd36 	bl	800e530 <tcp_keepalive>
        if (err == ERR_OK) {
 800bac4:	b920      	cbnz	r0, 800bad0 <tcp_slowtmr+0x33c>
          pcb->keep_cnt_sent++;
 800bac6:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 800baca:	3301      	adds	r3, #1
 800bacc:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 800bad0:	2500      	movs	r5, #0
 800bad2:	e711      	b.n	800b8f8 <tcp_slowtmr+0x164>
    if (pcb->state == LAST_ACK) {
 800bad4:	2b09      	cmp	r3, #9
 800bad6:	f47f af18 	bne.w	800b90a <tcp_slowtmr+0x176>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bada:	6833      	ldr	r3, [r6, #0]
 800badc:	6a22      	ldr	r2, [r4, #32]
 800bade:	1a9b      	subs	r3, r3, r2
 800bae0:	2bf0      	cmp	r3, #240	; 0xf0
 800bae2:	e711      	b.n	800b908 <tcp_slowtmr+0x174>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d006      	beq.n	800baf6 <tcp_slowtmr+0x362>
 800bae8:	463b      	mov	r3, r7
 800baea:	f240 5271 	movw	r2, #1393	; 0x571
 800baee:	4932      	ldr	r1, [pc, #200]	; (800bbb8 <tcp_slowtmr+0x424>)
 800baf0:	4832      	ldr	r0, [pc, #200]	; (800bbbc <tcp_slowtmr+0x428>)
 800baf2:	f003 fb4b 	bl	800f18c <iprintf>
        tcp_active_pcbs = pcb->next;
 800baf6:	68e3      	ldr	r3, [r4, #12]
 800baf8:	f8c8 3000 	str.w	r3, [r8]
 800bafc:	e720      	b.n	800b940 <tcp_slowtmr+0x1ac>
      ++prev->polltmr;
 800bafe:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bb00:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 800bb02:	3301      	adds	r3, #1
      pcb = pcb->next;
 800bb04:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800bb06:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800bb08:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800bb0a:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800bb0c:	f63f ae88 	bhi.w	800b820 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800bb10:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800bb14:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 800bb18:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 800bb1c:	b173      	cbz	r3, 800bb3c <tcp_slowtmr+0x3a8>
 800bb1e:	4621      	mov	r1, r4
 800bb20:	6920      	ldr	r0, [r4, #16]
 800bb22:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800bb24:	f89a 3000 	ldrb.w	r3, [sl]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f47f ae41 	bne.w	800b7b0 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f47f ae76 	bne.w	800b820 <tcp_slowtmr+0x8c>
          tcp_output(prev);
 800bb34:	4620      	mov	r0, r4
 800bb36:	f002 fb1b 	bl	800e170 <tcp_output>
 800bb3a:	e671      	b.n	800b820 <tcp_slowtmr+0x8c>
        TCP_EVENT_POLL(prev, err);
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	e7f1      	b.n	800bb24 <tcp_slowtmr+0x390>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bb40:	7d2b      	ldrb	r3, [r5, #20]
 800bb42:	2b0a      	cmp	r3, #10
 800bb44:	d006      	beq.n	800bb54 <tcp_slowtmr+0x3c0>
 800bb46:	4643      	mov	r3, r8
 800bb48:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800bb4c:	4651      	mov	r1, sl
 800bb4e:	4648      	mov	r0, r9
 800bb50:	f003 fb1c 	bl	800f18c <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800bb54:	6833      	ldr	r3, [r6, #0]
 800bb56:	6a2a      	ldr	r2, [r5, #32]
 800bb58:	1a9b      	subs	r3, r3, r2
 800bb5a:	2bf0      	cmp	r3, #240	; 0xf0
 800bb5c:	d910      	bls.n	800bb80 <tcp_slowtmr+0x3ec>
      tcp_pcb_purge(pcb);
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f7ff fdec 	bl	800b73c <tcp_pcb_purge>
      if (prev != NULL) {
 800bb64:	b97c      	cbnz	r4, 800bb86 <tcp_slowtmr+0x3f2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	42ab      	cmp	r3, r5
 800bb6a:	d006      	beq.n	800bb7a <tcp_slowtmr+0x3e6>
 800bb6c:	4643      	mov	r3, r8
 800bb6e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800bb72:	4913      	ldr	r1, [pc, #76]	; (800bbc0 <tcp_slowtmr+0x42c>)
 800bb74:	4648      	mov	r0, r9
 800bb76:	f003 fb09 	bl	800f18c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800bb7a:	68eb      	ldr	r3, [r5, #12]
 800bb7c:	603b      	str	r3, [r7, #0]
 800bb7e:	e00e      	b.n	800bb9e <tcp_slowtmr+0x40a>
      pcb = pcb->next;
 800bb80:	462c      	mov	r4, r5
 800bb82:	68ed      	ldr	r5, [r5, #12]
 800bb84:	e623      	b.n	800b7ce <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	42ab      	cmp	r3, r5
 800bb8a:	d106      	bne.n	800bb9a <tcp_slowtmr+0x406>
 800bb8c:	4643      	mov	r3, r8
 800bb8e:	f240 52af 	movw	r2, #1455	; 0x5af
 800bb92:	490c      	ldr	r1, [pc, #48]	; (800bbc4 <tcp_slowtmr+0x430>)
 800bb94:	4648      	mov	r0, r9
 800bb96:	f003 faf9 	bl	800f18c <iprintf>
        prev->next = pcb->next;
 800bb9a:	68eb      	ldr	r3, [r5, #12]
 800bb9c:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800bb9e:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 800bba2:	4628      	mov	r0, r5
 800bba4:	f7ff fbfa 	bl	800b39c <tcp_free>
      pcb = pcb->next;
 800bba8:	465d      	mov	r5, fp
 800bbaa:	e610      	b.n	800b7ce <tcp_slowtmr+0x3a>
      ++pcb_remove;
 800bbac:	f04f 0b01 	mov.w	fp, #1
 800bbb0:	e684      	b.n	800b8bc <tcp_slowtmr+0x128>
 800bbb2:	bf00      	nop
 800bbb4:	000124f8 	.word	0x000124f8
 800bbb8:	0801fb8f 	.word	0x0801fb8f
 800bbbc:	0801d8d1 	.word	0x0801d8d1
 800bbc0:	0801fc0f 	.word	0x0801fc0f
 800bbc4:	0801fbe8 	.word	0x0801fbe8

0800bbc8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800bbcc:	460c      	mov	r4, r1
 800bbce:	b931      	cbnz	r1, 800bbde <tcp_pcb_remove+0x16>
 800bbd0:	4b24      	ldr	r3, [pc, #144]	; (800bc64 <tcp_pcb_remove+0x9c>)
 800bbd2:	f640 0283 	movw	r2, #2179	; 0x883
 800bbd6:	4924      	ldr	r1, [pc, #144]	; (800bc68 <tcp_pcb_remove+0xa0>)
 800bbd8:	4824      	ldr	r0, [pc, #144]	; (800bc6c <tcp_pcb_remove+0xa4>)
 800bbda:	f003 fad7 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800bbde:	b935      	cbnz	r5, 800bbee <tcp_pcb_remove+0x26>
 800bbe0:	4b20      	ldr	r3, [pc, #128]	; (800bc64 <tcp_pcb_remove+0x9c>)
 800bbe2:	f640 0284 	movw	r2, #2180	; 0x884
 800bbe6:	4922      	ldr	r1, [pc, #136]	; (800bc70 <tcp_pcb_remove+0xa8>)
 800bbe8:	4820      	ldr	r0, [pc, #128]	; (800bc6c <tcp_pcb_remove+0xa4>)
 800bbea:	f003 facf 	bl	800f18c <iprintf>

  TCP_RMV(pcblist, pcb);
 800bbee:	682b      	ldr	r3, [r5, #0]
 800bbf0:	42a3      	cmp	r3, r4
 800bbf2:	d12e      	bne.n	800bc52 <tcp_pcb_remove+0x8a>
 800bbf4:	68e3      	ldr	r3, [r4, #12]
 800bbf6:	602b      	str	r3, [r5, #0]
 800bbf8:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800bbfa:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800bbfc:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800bbfe:	f7ff fd9d 	bl	800b73c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800bc02:	7d23      	ldrb	r3, [r4, #20]
 800bc04:	2b0a      	cmp	r3, #10
 800bc06:	d00a      	beq.n	800bc1e <tcp_pcb_remove+0x56>
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d008      	beq.n	800bc1e <tcp_pcb_remove+0x56>
      (pcb->state != LISTEN) &&
      (pcb->flags & TF_ACK_DELAY)) {
 800bc0c:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 800bc0e:	07da      	lsls	r2, r3, #31
 800bc10:	d505      	bpl.n	800bc1e <tcp_pcb_remove+0x56>
    tcp_ack_now(pcb);
 800bc12:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800bc16:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800bc18:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800bc1a:	f002 faa9 	bl	800e170 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bc1e:	7d23      	ldrb	r3, [r4, #20]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d011      	beq.n	800bc48 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bc24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bc26:	b133      	cbz	r3, 800bc36 <tcp_pcb_remove+0x6e>
 800bc28:	4b0e      	ldr	r3, [pc, #56]	; (800bc64 <tcp_pcb_remove+0x9c>)
 800bc2a:	f640 0293 	movw	r2, #2195	; 0x893
 800bc2e:	4911      	ldr	r1, [pc, #68]	; (800bc74 <tcp_pcb_remove+0xac>)
 800bc30:	480e      	ldr	r0, [pc, #56]	; (800bc6c <tcp_pcb_remove+0xa4>)
 800bc32:	f003 faab 	bl	800f18c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bc36:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bc38:	b133      	cbz	r3, 800bc48 <tcp_pcb_remove+0x80>
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <tcp_pcb_remove+0x9c>)
 800bc3c:	f640 0294 	movw	r2, #2196	; 0x894
 800bc40:	490d      	ldr	r1, [pc, #52]	; (800bc78 <tcp_pcb_remove+0xb0>)
 800bc42:	480a      	ldr	r0, [pc, #40]	; (800bc6c <tcp_pcb_remove+0xa4>)
 800bc44:	f003 faa2 	bl	800f18c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bc4c:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bc4e:	bd38      	pop	{r3, r4, r5, pc}
 800bc50:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0d0      	beq.n	800bbf8 <tcp_pcb_remove+0x30>
 800bc56:	68da      	ldr	r2, [r3, #12]
 800bc58:	42a2      	cmp	r2, r4
 800bc5a:	d1f9      	bne.n	800bc50 <tcp_pcb_remove+0x88>
 800bc5c:	68e2      	ldr	r2, [r4, #12]
 800bc5e:	60da      	str	r2, [r3, #12]
 800bc60:	e7ca      	b.n	800bbf8 <tcp_pcb_remove+0x30>
 800bc62:	bf00      	nop
 800bc64:	0801f7f9 	.word	0x0801f7f9
 800bc68:	0801fc35 	.word	0x0801fc35
 800bc6c:	0801d8d1 	.word	0x0801d8d1
 800bc70:	0801fc51 	.word	0x0801fc51
 800bc74:	0801fc71 	.word	0x0801fc71
 800bc78:	0801fc89 	.word	0x0801fc89

0800bc7c <tcp_close_shutdown>:
{
 800bc7c:	b530      	push	{r4, r5, lr}
 800bc7e:	460d      	mov	r5, r1
 800bc80:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc82:	4604      	mov	r4, r0
 800bc84:	b930      	cbnz	r0, 800bc94 <tcp_close_shutdown+0x18>
 800bc86:	4b4b      	ldr	r3, [pc, #300]	; (800bdb4 <tcp_close_shutdown+0x138>)
 800bc88:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc8c:	494a      	ldr	r1, [pc, #296]	; (800bdb8 <tcp_close_shutdown+0x13c>)
 800bc8e:	484b      	ldr	r0, [pc, #300]	; (800bdbc <tcp_close_shutdown+0x140>)
 800bc90:	f003 fa7c 	bl	800f18c <iprintf>
 800bc94:	7d23      	ldrb	r3, [r4, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc96:	2d00      	cmp	r5, #0
 800bc98:	d040      	beq.n	800bd1c <tcp_close_shutdown+0xa0>
 800bc9a:	2b04      	cmp	r3, #4
 800bc9c:	d001      	beq.n	800bca2 <tcp_close_shutdown+0x26>
 800bc9e:	2b07      	cmp	r3, #7
 800bca0:	d13c      	bne.n	800bd1c <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bca2:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800bca4:	b922      	cbnz	r2, 800bcb0 <tcp_close_shutdown+0x34>
 800bca6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800bca8:	f640 3268 	movw	r2, #2920	; 0xb68
 800bcac:	4291      	cmp	r1, r2
 800bcae:	d035      	beq.n	800bd1c <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bcb0:	8b63      	ldrh	r3, [r4, #26]
 800bcb2:	06db      	lsls	r3, r3, #27
 800bcb4:	d406      	bmi.n	800bcc4 <tcp_close_shutdown+0x48>
 800bcb6:	4b3f      	ldr	r3, [pc, #252]	; (800bdb4 <tcp_close_shutdown+0x138>)
 800bcb8:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bcbc:	4940      	ldr	r1, [pc, #256]	; (800bdc0 <tcp_close_shutdown+0x144>)
 800bcbe:	483f      	ldr	r0, [pc, #252]	; (800bdbc <tcp_close_shutdown+0x140>)
 800bcc0:	f003 fa64 	bl	800f18c <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcc4:	8b23      	ldrh	r3, [r4, #24]
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	9302      	str	r3, [sp, #8]
 800bcca:	8ae3      	ldrh	r3, [r4, #22]
 800bccc:	9301      	str	r3, [sp, #4]
 800bcce:	1d23      	adds	r3, r4, #4
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	4623      	mov	r3, r4
 800bcd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bcd6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bcd8:	f002 f9d4 	bl	800e084 <tcp_rst>
      tcp_pcb_purge(pcb);
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f7ff fd2d 	bl	800b73c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bce2:	4a38      	ldr	r2, [pc, #224]	; (800bdc4 <tcp_close_shutdown+0x148>)
 800bce4:	6813      	ldr	r3, [r2, #0]
 800bce6:	42a3      	cmp	r3, r4
 800bce8:	d110      	bne.n	800bd0c <tcp_close_shutdown+0x90>
 800bcea:	68e3      	ldr	r3, [r4, #12]
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2201      	movs	r2, #1
 800bcf2:	60e3      	str	r3, [r4, #12]
 800bcf4:	4b34      	ldr	r3, [pc, #208]	; (800bdc8 <tcp_close_shutdown+0x14c>)
 800bcf6:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 800bcf8:	4b34      	ldr	r3, [pc, #208]	; (800bdcc <tcp_close_shutdown+0x150>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	42a3      	cmp	r3, r4
 800bcfe:	d122      	bne.n	800bd46 <tcp_close_shutdown+0xca>
        tcp_trigger_input_pcb_close();
 800bd00:	f001 fb54 	bl	800d3ac <tcp_trigger_input_pcb_close>
}
 800bd04:	2000      	movs	r0, #0
 800bd06:	b005      	add	sp, #20
 800bd08:	bd30      	pop	{r4, r5, pc}
 800bd0a:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0ee      	beq.n	800bcee <tcp_close_shutdown+0x72>
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	42a2      	cmp	r2, r4
 800bd14:	d1f9      	bne.n	800bd0a <tcp_close_shutdown+0x8e>
 800bd16:	68e2      	ldr	r2, [r4, #12]
 800bd18:	60da      	str	r2, [r3, #12]
 800bd1a:	e7e8      	b.n	800bcee <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d01f      	beq.n	800bd60 <tcp_close_shutdown+0xe4>
 800bd20:	d307      	bcc.n	800bd32 <tcp_close_shutdown+0xb6>
 800bd22:	2b02      	cmp	r3, #2
 800bd24:	d03d      	beq.n	800bda2 <tcp_close_shutdown+0x126>
      return tcp_close_shutdown_fin(pcb);
 800bd26:	4620      	mov	r0, r4
}
 800bd28:	b005      	add	sp, #20
 800bd2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 800bd2e:	f7ff baf9 	b.w	800b324 <tcp_close_shutdown_fin>
      if (pcb->local_port != 0) {
 800bd32:	8ae3      	ldrh	r3, [r4, #22]
 800bd34:	b13b      	cbz	r3, 800bd46 <tcp_close_shutdown+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd36:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <tcp_close_shutdown+0x154>)
 800bd38:	6813      	ldr	r3, [r2, #0]
 800bd3a:	42a3      	cmp	r3, r4
 800bd3c:	d108      	bne.n	800bd50 <tcp_close_shutdown+0xd4>
 800bd3e:	68e3      	ldr	r3, [r4, #12]
 800bd40:	6013      	str	r3, [r2, #0]
 800bd42:	2300      	movs	r3, #0
 800bd44:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800bd46:	4620      	mov	r0, r4
 800bd48:	f7ff fb28 	bl	800b39c <tcp_free>
      break;
 800bd4c:	e7da      	b.n	800bd04 <tcp_close_shutdown+0x88>
 800bd4e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d0f6      	beq.n	800bd42 <tcp_close_shutdown+0xc6>
 800bd54:	68da      	ldr	r2, [r3, #12]
 800bd56:	42a2      	cmp	r2, r4
 800bd58:	d1f9      	bne.n	800bd4e <tcp_close_shutdown+0xd2>
 800bd5a:	68e2      	ldr	r2, [r4, #12]
 800bd5c:	60da      	str	r2, [r3, #12]
 800bd5e:	e7f0      	b.n	800bd42 <tcp_close_shutdown+0xc6>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd60:	491c      	ldr	r1, [pc, #112]	; (800bdd4 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800bd62:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bd64:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800bd68:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd6a:	b9a2      	cbnz	r2, 800bd96 <tcp_close_shutdown+0x11a>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d1f8      	bne.n	800bd64 <tcp_close_shutdown+0xe8>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bd72:	4621      	mov	r1, r4
 800bd74:	4818      	ldr	r0, [pc, #96]	; (800bdd8 <tcp_close_shutdown+0x15c>)
 800bd76:	f7ff ff27 	bl	800bbc8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bd7a:	7d23      	ldrb	r3, [r4, #20]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d105      	bne.n	800bd8c <tcp_close_shutdown+0x110>
 800bd80:	4b0c      	ldr	r3, [pc, #48]	; (800bdb4 <tcp_close_shutdown+0x138>)
 800bd82:	22df      	movs	r2, #223	; 0xdf
 800bd84:	4915      	ldr	r1, [pc, #84]	; (800bddc <tcp_close_shutdown+0x160>)
 800bd86:	480d      	ldr	r0, [pc, #52]	; (800bdbc <tcp_close_shutdown+0x140>)
 800bd88:	f003 fa00 	bl	800f18c <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bd8c:	4621      	mov	r1, r4
 800bd8e:	2002      	movs	r0, #2
 800bd90:	f7fe fdec 	bl	800a96c <memp_free>
 800bd94:	e7b6      	b.n	800bd04 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 800bd96:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800bd98:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 800bd9a:	bf08      	it	eq
 800bd9c:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bd9e:	68d2      	ldr	r2, [r2, #12]
 800bda0:	e7e3      	b.n	800bd6a <tcp_close_shutdown+0xee>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bda2:	4621      	mov	r1, r4
 800bda4:	4807      	ldr	r0, [pc, #28]	; (800bdc4 <tcp_close_shutdown+0x148>)
 800bda6:	f7ff ff0f 	bl	800bbc8 <tcp_pcb_remove>
 800bdaa:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <tcp_close_shutdown+0x14c>)
 800bdac:	2201      	movs	r2, #1
 800bdae:	701a      	strb	r2, [r3, #0]
 800bdb0:	e7c9      	b.n	800bd46 <tcp_close_shutdown+0xca>
 800bdb2:	bf00      	nop
 800bdb4:	0801f7f9 	.word	0x0801f7f9
 800bdb8:	0801fca2 	.word	0x0801fca2
 800bdbc:	0801d8d1 	.word	0x0801d8d1
 800bdc0:	0801fcc2 	.word	0x0801fcc2
 800bdc4:	20010df8 	.word	0x20010df8
 800bdc8:	20010df4 	.word	0x20010df4
 800bdcc:	20010e0c 	.word	0x20010e0c
 800bdd0:	20010e04 	.word	0x20010e04
 800bdd4:	08014a40 	.word	0x08014a40
 800bdd8:	20010e00 	.word	0x20010e00
 800bddc:	0801fcdb 	.word	0x0801fcdb

0800bde0 <tcp_close>:
{
 800bde0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bde2:	b158      	cbz	r0, 800bdfc <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 800bde4:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800bde6:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800bde8:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bdea:	bf1e      	ittt	ne
 800bdec:	8b43      	ldrhne	r3, [r0, #26]
 800bdee:	f043 0310 	orrne.w	r3, r3, #16
 800bdf2:	8343      	strhne	r3, [r0, #26]
}
 800bdf4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 800bdf8:	f7ff bf40 	b.w	800bc7c <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdfc:	4b04      	ldr	r3, [pc, #16]	; (800be10 <tcp_close+0x30>)
 800bdfe:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800be02:	4904      	ldr	r1, [pc, #16]	; (800be14 <tcp_close+0x34>)
 800be04:	4804      	ldr	r0, [pc, #16]	; (800be18 <tcp_close+0x38>)
 800be06:	f003 f9c1 	bl	800f18c <iprintf>
}
 800be0a:	f06f 000f 	mvn.w	r0, #15
 800be0e:	bd08      	pop	{r3, pc}
 800be10:	0801f7f9 	.word	0x0801f7f9
 800be14:	0801fcf4 	.word	0x0801fcf4
 800be18:	0801d8d1 	.word	0x0801d8d1

0800be1c <tcp_recv_null>:
{
 800be1c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800be1e:	4608      	mov	r0, r1
{
 800be20:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800be22:	b949      	cbnz	r1, 800be38 <tcp_recv_null+0x1c>
 800be24:	4b0c      	ldr	r3, [pc, #48]	; (800be58 <tcp_recv_null+0x3c>)
 800be26:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800be2a:	490c      	ldr	r1, [pc, #48]	; (800be5c <tcp_recv_null+0x40>)
 800be2c:	480c      	ldr	r0, [pc, #48]	; (800be60 <tcp_recv_null+0x44>)
 800be2e:	f003 f9ad 	bl	800f18c <iprintf>
 800be32:	f06f 000f 	mvn.w	r0, #15
}
 800be36:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800be38:	b13a      	cbz	r2, 800be4a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800be3a:	8911      	ldrh	r1, [r2, #8]
 800be3c:	f7ff fbb8 	bl	800b5b0 <tcp_recved>
    pbuf_free(p);
 800be40:	4620      	mov	r0, r4
 800be42:	f7fe ffbd 	bl	800adc0 <pbuf_free>
  return ERR_OK;
 800be46:	2000      	movs	r0, #0
 800be48:	e7f5      	b.n	800be36 <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800be4a:	b91b      	cbnz	r3, 800be54 <tcp_recv_null+0x38>
}
 800be4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800be50:	f7ff bfc6 	b.w	800bde0 <tcp_close>
  return ERR_OK;
 800be54:	4610      	mov	r0, r2
 800be56:	e7ee      	b.n	800be36 <tcp_recv_null+0x1a>
 800be58:	0801f7f9 	.word	0x0801f7f9
 800be5c:	0801fd0b 	.word	0x0801fd0b
 800be60:	0801d8d1 	.word	0x0801d8d1

0800be64 <tcp_process_refused_data>:
{
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800be66:	4604      	mov	r4, r0
 800be68:	b950      	cbnz	r0, 800be80 <tcp_process_refused_data+0x1c>
 800be6a:	f06f 050f 	mvn.w	r5, #15
 800be6e:	4b1d      	ldr	r3, [pc, #116]	; (800bee4 <tcp_process_refused_data+0x80>)
 800be70:	f240 6209 	movw	r2, #1545	; 0x609
 800be74:	491c      	ldr	r1, [pc, #112]	; (800bee8 <tcp_process_refused_data+0x84>)
 800be76:	481d      	ldr	r0, [pc, #116]	; (800beec <tcp_process_refused_data+0x88>)
 800be78:	f003 f988 	bl	800f18c <iprintf>
}
 800be7c:	4628      	mov	r0, r5
 800be7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 800be80:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800be82:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800be84:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800be88:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800be8a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800be8c:	b1e5      	cbz	r5, 800bec8 <tcp_process_refused_data+0x64>
 800be8e:	4601      	mov	r1, r0
 800be90:	4632      	mov	r2, r6
 800be92:	6900      	ldr	r0, [r0, #16]
 800be94:	47a8      	blx	r5
 800be96:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800be98:	b9e8      	cbnz	r0, 800bed6 <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800be9a:	06bb      	lsls	r3, r7, #26
 800be9c:	d5ee      	bpl.n	800be7c <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800be9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800bea0:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 800bea4:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bea8:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800beaa:	bf1c      	itt	ne
 800beac:	3301      	addne	r3, #1
 800beae:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800beb0:	2e00      	cmp	r6, #0
 800beb2:	d0e3      	beq.n	800be7c <tcp_process_refused_data+0x18>
 800beb4:	2300      	movs	r3, #0
 800beb6:	4621      	mov	r1, r4
 800beb8:	6920      	ldr	r0, [r4, #16]
 800beba:	461a      	mov	r2, r3
 800bebc:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800bebe:	300d      	adds	r0, #13
 800bec0:	d1dc      	bne.n	800be7c <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 800bec2:	f06f 050c 	mvn.w	r5, #12
 800bec6:	e7d9      	b.n	800be7c <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800bec8:	4601      	mov	r1, r0
 800beca:	462b      	mov	r3, r5
 800becc:	4632      	mov	r2, r6
 800bece:	4628      	mov	r0, r5
 800bed0:	f7ff ffa4 	bl	800be1c <tcp_recv_null>
 800bed4:	e7df      	b.n	800be96 <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 800bed6:	f110 050d 	adds.w	r5, r0, #13
 800beda:	d0f2      	beq.n	800bec2 <tcp_process_refused_data+0x5e>
      pcb->refused_data = refused_data;
 800bedc:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800bede:	f06f 0504 	mvn.w	r5, #4
 800bee2:	e7cb      	b.n	800be7c <tcp_process_refused_data+0x18>
 800bee4:	0801f7f9 	.word	0x0801f7f9
 800bee8:	0801fd26 	.word	0x0801fd26
 800beec:	0801d8d1 	.word	0x0801d8d1

0800bef0 <tcp_fasttmr>:
{
 800bef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800bef4:	4d1b      	ldr	r5, [pc, #108]	; (800bf64 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800bef6:	4f1c      	ldr	r7, [pc, #112]	; (800bf68 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800bef8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800befa:	4e1c      	ldr	r6, [pc, #112]	; (800bf6c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800befc:	3301      	adds	r3, #1
 800befe:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800bf00:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800bf02:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800bf06:	b90c      	cbnz	r4, 800bf0c <tcp_fasttmr+0x1c>
}
 800bf08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800bf0c:	782b      	ldrb	r3, [r5, #0]
 800bf0e:	7fa2      	ldrb	r2, [r4, #30]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d024      	beq.n	800bf5e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800bf14:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800bf16:	8b63      	ldrh	r3, [r4, #26]
 800bf18:	07d9      	lsls	r1, r3, #31
 800bf1a:	d509      	bpl.n	800bf30 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800bf20:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800bf22:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800bf24:	f002 f924 	bl	800e170 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bf28:	8b63      	ldrh	r3, [r4, #26]
 800bf2a:	f023 0303 	bic.w	r3, r3, #3
 800bf2e:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800bf30:	8b63      	ldrh	r3, [r4, #26]
 800bf32:	071a      	lsls	r2, r3, #28
 800bf34:	d505      	bpl.n	800bf42 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf36:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800bf3a:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800bf3c:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800bf3e:	f7ff f9f1 	bl	800b324 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800bf42:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800bf44:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800bf48:	b13b      	cbz	r3, 800bf5a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800bf4a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800bf4c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800bf50:	f7ff ff88 	bl	800be64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800bf54:	7833      	ldrb	r3, [r6, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1d2      	bne.n	800bf00 <tcp_fasttmr+0x10>
{
 800bf5a:	464c      	mov	r4, r9
 800bf5c:	e7d3      	b.n	800bf06 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800bf5e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800bf62:	e7fa      	b.n	800bf5a <tcp_fasttmr+0x6a>
 800bf64:	20006985 	.word	0x20006985
 800bf68:	20010df8 	.word	0x20010df8
 800bf6c:	20010df4 	.word	0x20010df4

0800bf70 <tcp_tmr>:
{
 800bf70:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800bf72:	f7ff ffbd 	bl	800bef0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800bf76:	4a06      	ldr	r2, [pc, #24]	; (800bf90 <tcp_tmr+0x20>)
 800bf78:	7853      	ldrb	r3, [r2, #1]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	7053      	strb	r3, [r2, #1]
 800bf80:	07db      	lsls	r3, r3, #31
 800bf82:	d503      	bpl.n	800bf8c <tcp_tmr+0x1c>
}
 800bf84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800bf88:	f7ff bc04 	b.w	800b794 <tcp_slowtmr>
}
 800bf8c:	bd08      	pop	{r3, pc}
 800bf8e:	bf00      	nop
 800bf90:	20006985 	.word	0x20006985

0800bf94 <tcp_shutdown>:
{
 800bf94:	b538      	push	{r3, r4, r5, lr}
 800bf96:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf98:	4605      	mov	r5, r0
 800bf9a:	b948      	cbnz	r0, 800bfb0 <tcp_shutdown+0x1c>
 800bf9c:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <tcp_shutdown+0x60>)
 800bf9e:	f240 2207 	movw	r2, #519	; 0x207
 800bfa2:	4915      	ldr	r1, [pc, #84]	; (800bff8 <tcp_shutdown+0x64>)
 800bfa4:	4815      	ldr	r0, [pc, #84]	; (800bffc <tcp_shutdown+0x68>)
 800bfa6:	f003 f8f1 	bl	800f18c <iprintf>
 800bfaa:	f06f 000f 	mvn.w	r0, #15
}
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 800bfb0:	7d02      	ldrb	r2, [r0, #20]
 800bfb2:	2a01      	cmp	r2, #1
 800bfb4:	d01b      	beq.n	800bfee <tcp_shutdown+0x5a>
  if (shut_rx) {
 800bfb6:	b189      	cbz	r1, 800bfdc <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bfb8:	8b43      	ldrh	r3, [r0, #26]
 800bfba:	f043 0310 	orr.w	r3, r3, #16
 800bfbe:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800bfc0:	b124      	cbz	r4, 800bfcc <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 800bfc2:	2101      	movs	r1, #1
}
 800bfc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800bfc8:	f7ff be58 	b.w	800bc7c <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800bfcc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800bfce:	b908      	cbnz	r0, 800bfd4 <tcp_shutdown+0x40>
  return ERR_OK;
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	e7ec      	b.n	800bfae <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 800bfd4:	f7fe fef4 	bl	800adc0 <pbuf_free>
      pcb->refused_data = NULL;
 800bfd8:	676c      	str	r4, [r5, #116]	; 0x74
 800bfda:	e7f9      	b.n	800bfd0 <tcp_shutdown+0x3c>
  if (shut_tx) {
 800bfdc:	2c00      	cmp	r4, #0
 800bfde:	d0f7      	beq.n	800bfd0 <tcp_shutdown+0x3c>
 800bfe0:	2a07      	cmp	r2, #7
 800bfe2:	d804      	bhi.n	800bfee <tcp_shutdown+0x5a>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	4093      	lsls	r3, r2
 800bfe8:	f013 0f98 	tst.w	r3, #152	; 0x98
 800bfec:	d1ea      	bne.n	800bfc4 <tcp_shutdown+0x30>
    return ERR_CONN;
 800bfee:	f06f 000a 	mvn.w	r0, #10
 800bff2:	e7dc      	b.n	800bfae <tcp_shutdown+0x1a>
 800bff4:	0801f7f9 	.word	0x0801f7f9
 800bff8:	0801fd4c 	.word	0x0801fd4c
 800bffc:	0801d8d1 	.word	0x0801d8d1

0800c000 <tcp_abandon>:
{
 800c000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c004:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c006:	4604      	mov	r4, r0
 800c008:	b948      	cbnz	r0, 800c01e <tcp_abandon+0x1e>
 800c00a:	4b34      	ldr	r3, [pc, #208]	; (800c0dc <tcp_abandon+0xdc>)
 800c00c:	f240 223d 	movw	r2, #573	; 0x23d
 800c010:	4933      	ldr	r1, [pc, #204]	; (800c0e0 <tcp_abandon+0xe0>)
 800c012:	4834      	ldr	r0, [pc, #208]	; (800c0e4 <tcp_abandon+0xe4>)
}
 800c014:	b004      	add	sp, #16
 800c016:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c01a:	f003 b8b7 	b.w	800f18c <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c01e:	7d03      	ldrb	r3, [r0, #20]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d106      	bne.n	800c032 <tcp_abandon+0x32>
 800c024:	4b2d      	ldr	r3, [pc, #180]	; (800c0dc <tcp_abandon+0xdc>)
 800c026:	f240 2241 	movw	r2, #577	; 0x241
 800c02a:	492f      	ldr	r1, [pc, #188]	; (800c0e8 <tcp_abandon+0xe8>)
 800c02c:	482d      	ldr	r0, [pc, #180]	; (800c0e4 <tcp_abandon+0xe4>)
 800c02e:	f003 f8ad 	bl	800f18c <iprintf>
  if (pcb->state == TIME_WAIT) {
 800c032:	7d23      	ldrb	r3, [r4, #20]
 800c034:	2b0a      	cmp	r3, #10
 800c036:	d109      	bne.n	800c04c <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c038:	4621      	mov	r1, r4
 800c03a:	482c      	ldr	r0, [pc, #176]	; (800c0ec <tcp_abandon+0xec>)
 800c03c:	f7ff fdc4 	bl	800bbc8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c040:	4620      	mov	r0, r4
}
 800c042:	b004      	add	sp, #16
 800c044:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 800c048:	f7ff b9a8 	b.w	800b39c <tcp_free>
    seqno = pcb->snd_nxt;
 800c04c:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 800c050:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800c054:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800c058:	f8d4 8010 	ldr.w	r8, [r4, #16]
 800c05c:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 800c05e:	b99b      	cbnz	r3, 800c088 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 800c060:	b13d      	cbz	r5, 800c072 <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c062:	4a23      	ldr	r2, [pc, #140]	; (800c0f0 <tcp_abandon+0xf0>)
 800c064:	6813      	ldr	r3, [r2, #0]
 800c066:	42a3      	cmp	r3, r4
 800c068:	d106      	bne.n	800c078 <tcp_abandon+0x78>
 800c06a:	68e3      	ldr	r3, [r4, #12]
 800c06c:	6013      	str	r3, [r2, #0]
 800c06e:	2500      	movs	r5, #0
 800c070:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800c072:	462e      	mov	r6, r5
 800c074:	e00f      	b.n	800c096 <tcp_abandon+0x96>
 800c076:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0f8      	beq.n	800c06e <tcp_abandon+0x6e>
 800c07c:	68da      	ldr	r2, [r3, #12]
 800c07e:	42a2      	cmp	r2, r4
 800c080:	d1f9      	bne.n	800c076 <tcp_abandon+0x76>
 800c082:	68e2      	ldr	r2, [r4, #12]
 800c084:	60da      	str	r2, [r3, #12]
 800c086:	e7f2      	b.n	800c06e <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c088:	4621      	mov	r1, r4
 800c08a:	481a      	ldr	r0, [pc, #104]	; (800c0f4 <tcp_abandon+0xf4>)
 800c08c:	f7ff fd9c 	bl	800bbc8 <tcp_pcb_remove>
 800c090:	4b19      	ldr	r3, [pc, #100]	; (800c0f8 <tcp_abandon+0xf8>)
 800c092:	2201      	movs	r2, #1
 800c094:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800c096:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800c098:	b108      	cbz	r0, 800c09e <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 800c09a:	f7ff fad3 	bl	800b644 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800c09e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800c0a0:	b108      	cbz	r0, 800c0a6 <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800c0a2:	f7ff facf 	bl	800b644 <tcp_segs_free>
    if (send_rst) {
 800c0a6:	b156      	cbz	r6, 800c0be <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c0a8:	8b23      	ldrh	r3, [r4, #24]
 800c0aa:	4652      	mov	r2, sl
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800c0b4:	1d23      	adds	r3, r4, #4
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4623      	mov	r3, r4
 800c0ba:	f001 ffe3 	bl	800e084 <tcp_rst>
    tcp_free(pcb);
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f7ff f96c 	bl	800b39c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0c4:	b13f      	cbz	r7, 800c0d6 <tcp_abandon+0xd6>
 800c0c6:	f06f 010c 	mvn.w	r1, #12
 800c0ca:	4640      	mov	r0, r8
 800c0cc:	463b      	mov	r3, r7
}
 800c0ce:	b004      	add	sp, #16
 800c0d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0d4:	4718      	bx	r3
}
 800c0d6:	b004      	add	sp, #16
 800c0d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0dc:	0801f7f9 	.word	0x0801f7f9
 800c0e0:	0801fd66 	.word	0x0801fd66
 800c0e4:	0801d8d1 	.word	0x0801d8d1
 800c0e8:	0801fd7f 	.word	0x0801fd7f
 800c0ec:	20010e08 	.word	0x20010e08
 800c0f0:	20010e04 	.word	0x20010e04
 800c0f4:	20010df8 	.word	0x20010df8
 800c0f8:	20010df4 	.word	0x20010df4

0800c0fc <tcp_abort>:
  tcp_abandon(pcb, 1);
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	f7ff bf7f 	b.w	800c000 <tcp_abandon>
	...

0800c104 <tcp_accept_null>:
{
 800c104:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c106:	460c      	mov	r4, r1
 800c108:	b931      	cbnz	r1, 800c118 <tcp_accept_null+0x14>
 800c10a:	4b06      	ldr	r3, [pc, #24]	; (800c124 <tcp_accept_null+0x20>)
 800c10c:	f240 320f 	movw	r2, #783	; 0x30f
 800c110:	4905      	ldr	r1, [pc, #20]	; (800c128 <tcp_accept_null+0x24>)
 800c112:	4806      	ldr	r0, [pc, #24]	; (800c12c <tcp_accept_null+0x28>)
 800c114:	f003 f83a 	bl	800f18c <iprintf>
  tcp_abort(pcb);
 800c118:	4620      	mov	r0, r4
 800c11a:	f7ff ffef 	bl	800c0fc <tcp_abort>
}
 800c11e:	f06f 000c 	mvn.w	r0, #12
 800c122:	bd10      	pop	{r4, pc}
 800c124:	0801f7f9 	.word	0x0801f7f9
 800c128:	0801fdb0 	.word	0x0801fdb0
 800c12c:	0801d8d1 	.word	0x0801d8d1

0800c130 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800c130:	b570      	push	{r4, r5, r6, lr}
 800c132:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800c134:	4605      	mov	r5, r0
 800c136:	b930      	cbnz	r0, 800c146 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800c138:	4b09      	ldr	r3, [pc, #36]	; (800c160 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 800c13a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800c13e:	4909      	ldr	r1, [pc, #36]	; (800c164 <tcp_netif_ip_addr_changed_pcblist+0x34>)
 800c140:	4809      	ldr	r0, [pc, #36]	; (800c168 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800c142:	f003 f823 	bl	800f18c <iprintf>

  while (pcb != NULL) {
 800c146:	b904      	cbnz	r4, 800c14a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800c148:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800c14a:	6822      	ldr	r2, [r4, #0]
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	68e6      	ldr	r6, [r4, #12]
 800c150:	429a      	cmp	r2, r3
 800c152:	d102      	bne.n	800c15a <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800c154:	4620      	mov	r0, r4
 800c156:	f7ff ffd1 	bl	800c0fc <tcp_abort>
{
 800c15a:	4634      	mov	r4, r6
 800c15c:	e7f3      	b.n	800c146 <tcp_netif_ip_addr_changed_pcblist+0x16>
 800c15e:	bf00      	nop
 800c160:	0801f7f9 	.word	0x0801f7f9
 800c164:	0801fdcd 	.word	0x0801fdcd
 800c168:	0801d8d1 	.word	0x0801d8d1

0800c16c <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c16c:	4b0c      	ldr	r3, [pc, #48]	; (800c1a0 <tcp_kill_state+0x34>)
{
 800c16e:	b430      	push	{r4, r5}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c170:	6819      	ldr	r1, [r3, #0]
  inactivity = 0;
 800c172:	2400      	movs	r4, #0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c174:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <tcp_kill_state+0x38>)
  inactive = NULL;
 800c176:	4622      	mov	r2, r4
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c178:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c17a:	b921      	cbnz	r1, 800c186 <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800c17c:	b172      	cbz	r2, 800c19c <tcp_kill_state+0x30>
    tcp_abandon(inactive, 0);
 800c17e:	4610      	mov	r0, r2
}
 800c180:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800c182:	f7ff bf3d 	b.w	800c000 <tcp_abandon>
    if (pcb->state == state) {
 800c186:	7d0b      	ldrb	r3, [r1, #20]
 800c188:	4283      	cmp	r3, r0
 800c18a:	d105      	bne.n	800c198 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c18c:	6a0b      	ldr	r3, [r1, #32]
 800c18e:	1aeb      	subs	r3, r5, r3
 800c190:	42a3      	cmp	r3, r4
 800c192:	bf24      	itt	cs
 800c194:	461c      	movcs	r4, r3
 800c196:	460a      	movcs	r2, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c198:	68c9      	ldr	r1, [r1, #12]
 800c19a:	e7ee      	b.n	800c17a <tcp_kill_state+0xe>
}
 800c19c:	bc30      	pop	{r4, r5}
 800c19e:	4770      	bx	lr
 800c1a0:	20010df8 	.word	0x20010df8
 800c1a4:	20010dfc 	.word	0x20010dfc

0800c1a8 <tcp_alloc>:
{
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c1ac:	2001      	movs	r0, #1
 800c1ae:	f7fe fbc1 	bl	800a934 <memp_malloc>
  if (pcb == NULL) {
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d136      	bne.n	800c226 <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800c1b8:	4e41      	ldr	r6, [pc, #260]	; (800c2c0 <tcp_alloc+0x118>)
 800c1ba:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d15a      	bne.n	800c276 <tcp_alloc+0xce>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1c0:	4b40      	ldr	r3, [pc, #256]	; (800c2c4 <tcp_alloc+0x11c>)
  inactivity = 0;
 800c1c2:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c1c4:	4d40      	ldr	r5, [pc, #256]	; (800c2c8 <tcp_alloc+0x120>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1c6:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c1c8:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d15e      	bne.n	800c28c <tcp_alloc+0xe4>
  if (inactive != NULL) {
 800c1ce:	b108      	cbz	r0, 800c1d4 <tcp_alloc+0x2c>
    tcp_abort(inactive);
 800c1d0:	f7ff ff94 	bl	800c0fc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	f7fe fbad 	bl	800a934 <memp_malloc>
    if (pcb == NULL) {
 800c1da:	4603      	mov	r3, r0
 800c1dc:	bb18      	cbnz	r0, 800c226 <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 800c1de:	2009      	movs	r0, #9
 800c1e0:	f7ff ffc4 	bl	800c16c <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c1e4:	2001      	movs	r0, #1
 800c1e6:	f7fe fba5 	bl	800a934 <memp_malloc>
      if (pcb == NULL) {
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	b9d8      	cbnz	r0, 800c226 <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 800c1ee:	2008      	movs	r0, #8
 800c1f0:	f7ff ffbc 	bl	800c16c <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c1f4:	2001      	movs	r0, #1
 800c1f6:	f7fe fb9d 	bl	800a934 <memp_malloc>
        if (pcb == NULL) {
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	b998      	cbnz	r0, 800c226 <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c1fe:	0622      	lsls	r2, r4, #24
 800c200:	d44d      	bmi.n	800c29e <tcp_alloc+0xf6>
  if (mprio == 0) {
 800c202:	b15c      	cbz	r4, 800c21c <tcp_alloc+0x74>
 800c204:	4621      	mov	r1, r4
  mprio--;
 800c206:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c208:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 800c20a:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c20c:	682e      	ldr	r6, [r5, #0]
  mprio--;
 800c20e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c210:	2a00      	cmp	r2, #0
 800c212:	d146      	bne.n	800c2a2 <tcp_alloc+0xfa>
  if (inactive != NULL) {
 800c214:	b113      	cbz	r3, 800c21c <tcp_alloc+0x74>
    tcp_abort(inactive);
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff ff70 	bl	800c0fc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800c21c:	2001      	movs	r0, #1
 800c21e:	f7fe fb89 	bl	800a934 <memp_malloc>
  if (pcb != NULL) {
 800c222:	4603      	mov	r3, r0
 800c224:	b328      	cbz	r0, 800c272 <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c226:	2298      	movs	r2, #152	; 0x98
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f002 ffa5 	bl	800f17a <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c230:	4926      	ldr	r1, [pc, #152]	; (800c2cc <tcp_alloc+0x124>)
    pcb->snd_buf = TCP_SND_BUF;
 800c232:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800c236:	4603      	mov	r3, r0
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c238:	6281      	str	r1, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800c23a:	21ff      	movs	r1, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 800c23c:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->ttl = TCP_TTL;
 800c240:	72c1      	strb	r1, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c242:	2106      	movs	r1, #6
    pcb->ssthresh = TCP_SND_BUF;
 800c244:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800c248:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800c24c:	87c1      	strh	r1, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800c24e:	4920      	ldr	r1, [pc, #128]	; (800c2d0 <tcp_alloc+0x128>)
    pcb->recv = tcp_recv_null;
 800c250:	4a20      	ldr	r2, [pc, #128]	; (800c2d4 <tcp_alloc+0x12c>)
    pcb->rtime = -1;
 800c252:	6301      	str	r1, [r0, #48]	; 0x30
    pcb->cwnd = 1;
 800c254:	2101      	movs	r1, #1
    pcb->recv = tcp_recv_null;
 800c256:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->cwnd = 1;
 800c25a:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800c25e:	491a      	ldr	r1, [pc, #104]	; (800c2c8 <tcp_alloc+0x120>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c260:	4a1d      	ldr	r2, [pc, #116]	; (800c2d8 <tcp_alloc+0x130>)
    pcb->tmr = tcp_ticks;
 800c262:	6809      	ldr	r1, [r1, #0]
    pcb->prio = prio;
 800c264:	7544      	strb	r4, [r0, #21]
    pcb->tmr = tcp_ticks;
 800c266:	6201      	str	r1, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800c268:	491c      	ldr	r1, [pc, #112]	; (800c2dc <tcp_alloc+0x134>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800c26a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    pcb->last_timer = tcp_timer_ctr;
 800c26e:	7809      	ldrb	r1, [r1, #0]
 800c270:	7781      	strb	r1, [r0, #30]
}
 800c272:	4618      	mov	r0, r3
 800c274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 800c276:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800c278:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800c27a:	0719      	lsls	r1, r3, #28
 800c27c:	d504      	bpl.n	800c288 <tcp_alloc+0xe0>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c27e:	f023 0308 	bic.w	r3, r3, #8
 800c282:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 800c284:	f7ff f84e 	bl	800b324 <tcp_close_shutdown_fin>
{
 800c288:	4628      	mov	r0, r5
 800c28a:	e797      	b.n	800c1bc <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c28c:	6a1a      	ldr	r2, [r3, #32]
 800c28e:	1aba      	subs	r2, r7, r2
 800c290:	428a      	cmp	r2, r1
 800c292:	bf34      	ite	cc
 800c294:	460a      	movcc	r2, r1
 800c296:	4618      	movcs	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c298:	68db      	ldr	r3, [r3, #12]
 800c29a:	4611      	mov	r1, r2
 800c29c:	e795      	b.n	800c1ca <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c29e:	217f      	movs	r1, #127	; 0x7f
 800c2a0:	e7b1      	b.n	800c206 <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 800c2a2:	7d57      	ldrb	r7, [r2, #21]
 800c2a4:	428f      	cmp	r7, r1
 800c2a6:	d304      	bcc.n	800c2b2 <tcp_alloc+0x10a>
 800c2a8:	d107      	bne.n	800c2ba <tcp_alloc+0x112>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c2aa:	6a15      	ldr	r5, [r2, #32]
 800c2ac:	1b75      	subs	r5, r6, r5
 800c2ae:	4285      	cmp	r5, r0
 800c2b0:	d303      	bcc.n	800c2ba <tcp_alloc+0x112>
      inactivity = tcp_ticks - pcb->tmr;
 800c2b2:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 800c2b4:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c2ba:	68d2      	ldr	r2, [r2, #12]
 800c2bc:	e7a8      	b.n	800c210 <tcp_alloc+0x68>
 800c2be:	bf00      	nop
 800c2c0:	20010df8 	.word	0x20010df8
 800c2c4:	20010e08 	.word	0x20010e08
 800c2c8:	20010dfc 	.word	0x20010dfc
 800c2cc:	0b680b68 	.word	0x0b680b68
 800c2d0:	0218ffff 	.word	0x0218ffff
 800c2d4:	0800be1d 	.word	0x0800be1d
 800c2d8:	006ddd00 	.word	0x006ddd00
 800c2dc:	20006985 	.word	0x20006985

0800c2e0 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800c2e0:	2040      	movs	r0, #64	; 0x40
 800c2e2:	f7ff bf61 	b.w	800c1a8 <tcp_alloc>
	...

0800c2e8 <tcp_next_iss>:
{
 800c2e8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800c2ea:	b930      	cbnz	r0, 800c2fa <tcp_next_iss+0x12>
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <tcp_next_iss+0x20>)
 800c2ee:	f640 02af 	movw	r2, #2223	; 0x8af
 800c2f2:	4906      	ldr	r1, [pc, #24]	; (800c30c <tcp_next_iss+0x24>)
 800c2f4:	4806      	ldr	r0, [pc, #24]	; (800c310 <tcp_next_iss+0x28>)
 800c2f6:	f002 ff49 	bl	800f18c <iprintf>
  iss += tcp_ticks;       /* XXX */
 800c2fa:	4b06      	ldr	r3, [pc, #24]	; (800c314 <tcp_next_iss+0x2c>)
 800c2fc:	4a06      	ldr	r2, [pc, #24]	; (800c318 <tcp_next_iss+0x30>)
 800c2fe:	6858      	ldr	r0, [r3, #4]
 800c300:	6812      	ldr	r2, [r2, #0]
 800c302:	4410      	add	r0, r2
 800c304:	6058      	str	r0, [r3, #4]
}
 800c306:	bd08      	pop	{r3, pc}
 800c308:	0801f7f9 	.word	0x0801f7f9
 800c30c:	0801fe01 	.word	0x0801fe01
 800c310:	0801d8d1 	.word	0x0801d8d1
 800c314:	20000044 	.word	0x20000044
 800c318:	20010dfc 	.word	0x20010dfc

0800c31c <tcp_eff_send_mss_netif>:
{
 800c31c:	b538      	push	{r3, r4, r5, lr}
 800c31e:	4604      	mov	r4, r0
 800c320:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800c322:	b932      	cbnz	r2, 800c332 <tcp_eff_send_mss_netif+0x16>
 800c324:	4b09      	ldr	r3, [pc, #36]	; (800c34c <tcp_eff_send_mss_netif+0x30>)
 800c326:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800c32a:	4909      	ldr	r1, [pc, #36]	; (800c350 <tcp_eff_send_mss_netif+0x34>)
 800c32c:	4809      	ldr	r0, [pc, #36]	; (800c354 <tcp_eff_send_mss_netif+0x38>)
 800c32e:	f002 ff2d 	bl	800f18c <iprintf>
    if (outif == NULL) {
 800c332:	b14d      	cbz	r5, 800c348 <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 800c334:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
  if (mtu != 0) {
 800c336:	b13b      	cbz	r3, 800c348 <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800c338:	2b28      	cmp	r3, #40	; 0x28
 800c33a:	bf8a      	itet	hi
 800c33c:	3b28      	subhi	r3, #40	; 0x28
 800c33e:	2300      	movls	r3, #0
 800c340:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 800c342:	429c      	cmp	r4, r3
 800c344:	bf28      	it	cs
 800c346:	461c      	movcs	r4, r3
}
 800c348:	4620      	mov	r0, r4
 800c34a:	bd38      	pop	{r3, r4, r5, pc}
 800c34c:	0801f7f9 	.word	0x0801f7f9
 800c350:	0801fe1b 	.word	0x0801fe1b
 800c354:	0801d8d1 	.word	0x0801d8d1

0800c358 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c358:	b538      	push	{r3, r4, r5, lr}
 800c35a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800c35c:	4604      	mov	r4, r0
 800c35e:	b180      	cbz	r0, 800c382 <tcp_netif_ip_addr_changed+0x2a>
 800c360:	6803      	ldr	r3, [r0, #0]
 800c362:	b173      	cbz	r3, 800c382 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <tcp_netif_ip_addr_changed+0x3c>)
 800c366:	6819      	ldr	r1, [r3, #0]
 800c368:	f7ff fee2 	bl	800c130 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800c36c:	4b0a      	ldr	r3, [pc, #40]	; (800c398 <tcp_netif_ip_addr_changed+0x40>)
 800c36e:	4620      	mov	r0, r4
 800c370:	6819      	ldr	r1, [r3, #0]
 800c372:	f7ff fedd 	bl	800c130 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800c376:	b125      	cbz	r5, 800c382 <tcp_netif_ip_addr_changed+0x2a>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b113      	cbz	r3, 800c382 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c37c:	4b07      	ldr	r3, [pc, #28]	; (800c39c <tcp_netif_ip_addr_changed+0x44>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	b903      	cbnz	r3, 800c384 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800c382:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800c384:	6819      	ldr	r1, [r3, #0]
 800c386:	6822      	ldr	r2, [r4, #0]
 800c388:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800c38a:	bf04      	itt	eq
 800c38c:	682a      	ldreq	r2, [r5, #0]
 800c38e:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	e7f5      	b.n	800c380 <tcp_netif_ip_addr_changed+0x28>
 800c394:	20010df8 	.word	0x20010df8
 800c398:	20010e04 	.word	0x20010e04
 800c39c:	20010e00 	.word	0x20010e00

0800c3a0 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 800c3a0:	4a08      	ldr	r2, [pc, #32]	; (800c3c4 <tcp_get_next_optbyte+0x24>)
 800c3a2:	8813      	ldrh	r3, [r2, #0]
 800c3a4:	4610      	mov	r0, r2
 800c3a6:	1c59      	adds	r1, r3, #1
 800c3a8:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800c3aa:	6851      	ldr	r1, [r2, #4]
 800c3ac:	b111      	cbz	r1, 800c3b4 <tcp_get_next_optbyte+0x14>
 800c3ae:	8912      	ldrh	r2, [r2, #8]
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d203      	bcs.n	800c3bc <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 800c3b4:	68c2      	ldr	r2, [r0, #12]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	7d18      	ldrb	r0, [r3, #20]
 800c3ba:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800c3bc:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 800c3be:	b2db      	uxtb	r3, r3
 800c3c0:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 800c3c2:	4770      	bx	lr
 800c3c4:	20006988 	.word	0x20006988

0800c3c8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800c3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	b930      	cbnz	r0, 800c3de <tcp_parseopt+0x16>
 800c3d0:	4b1e      	ldr	r3, [pc, #120]	; (800c44c <tcp_parseopt+0x84>)
 800c3d2:	f240 727d 	movw	r2, #1917	; 0x77d
 800c3d6:	491e      	ldr	r1, [pc, #120]	; (800c450 <tcp_parseopt+0x88>)
 800c3d8:	481e      	ldr	r0, [pc, #120]	; (800c454 <tcp_parseopt+0x8c>)
 800c3da:	f002 fed7 	bl	800f18c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800c3de:	4d1e      	ldr	r5, [pc, #120]	; (800c458 <tcp_parseopt+0x90>)
 800c3e0:	8a2b      	ldrh	r3, [r5, #16]
 800c3e2:	b14b      	cbz	r3, 800c3f8 <tcp_parseopt+0x30>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3e4:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c3e6:	f240 57b3 	movw	r7, #1459	; 0x5b3
 800c3ea:	f240 58b4 	movw	r8, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800c3ee:	802b      	strh	r3, [r5, #0]
 800c3f0:	8a2c      	ldrh	r4, [r5, #16]
 800c3f2:	882b      	ldrh	r3, [r5, #0]
 800c3f4:	42a3      	cmp	r3, r4
 800c3f6:	d301      	bcc.n	800c3fc <tcp_parseopt+0x34>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 800c3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8_t opt = tcp_get_next_optbyte();
 800c3fc:	f7ff ffd0 	bl	800c3a0 <tcp_get_next_optbyte>
      switch (opt) {
 800c400:	2801      	cmp	r0, #1
 800c402:	d0f5      	beq.n	800c3f0 <tcp_parseopt+0x28>
 800c404:	d3f8      	bcc.n	800c3f8 <tcp_parseopt+0x30>
 800c406:	2802      	cmp	r0, #2
 800c408:	d116      	bne.n	800c438 <tcp_parseopt+0x70>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800c40a:	f7ff ffc9 	bl	800c3a0 <tcp_get_next_optbyte>
 800c40e:	2804      	cmp	r0, #4
 800c410:	d1f2      	bne.n	800c3f8 <tcp_parseopt+0x30>
 800c412:	882b      	ldrh	r3, [r5, #0]
 800c414:	3301      	adds	r3, #1
 800c416:	42a3      	cmp	r3, r4
 800c418:	daee      	bge.n	800c3f8 <tcp_parseopt+0x30>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800c41a:	f7ff ffc1 	bl	800c3a0 <tcp_get_next_optbyte>
 800c41e:	0200      	lsls	r0, r0, #8
 800c420:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 800c422:	f7ff ffbd 	bl	800c3a0 <tcp_get_next_optbyte>
 800c426:	4320      	orrs	r0, r4
 800c428:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800c42a:	1e43      	subs	r3, r0, #1
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	42bb      	cmp	r3, r7
 800c430:	bf88      	it	hi
 800c432:	4640      	movhi	r0, r8
 800c434:	8670      	strh	r0, [r6, #50]	; 0x32
 800c436:	e7db      	b.n	800c3f0 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 800c438:	f7ff ffb2 	bl	800c3a0 <tcp_get_next_optbyte>
          if (data < 2) {
 800c43c:	2801      	cmp	r0, #1
 800c43e:	d9db      	bls.n	800c3f8 <tcp_parseopt+0x30>
          tcp_optidx += data - 2;
 800c440:	882b      	ldrh	r3, [r5, #0]
 800c442:	3b02      	subs	r3, #2
 800c444:	4418      	add	r0, r3
 800c446:	8028      	strh	r0, [r5, #0]
 800c448:	e7d2      	b.n	800c3f0 <tcp_parseopt+0x28>
 800c44a:	bf00      	nop
 800c44c:	0801ff01 	.word	0x0801ff01
 800c450:	0801ff70 	.word	0x0801ff70
 800c454:	0801d8d1 	.word	0x0801d8d1
 800c458:	20006988 	.word	0x20006988

0800c45c <tcp_input_delayed_close>:
{
 800c45c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c45e:	4604      	mov	r4, r0
 800c460:	b930      	cbnz	r0, 800c470 <tcp_input_delayed_close+0x14>
 800c462:	4b0f      	ldr	r3, [pc, #60]	; (800c4a0 <tcp_input_delayed_close+0x44>)
 800c464:	f240 225a 	movw	r2, #602	; 0x25a
 800c468:	490e      	ldr	r1, [pc, #56]	; (800c4a4 <tcp_input_delayed_close+0x48>)
 800c46a:	480f      	ldr	r0, [pc, #60]	; (800c4a8 <tcp_input_delayed_close+0x4c>)
 800c46c:	f002 fe8e 	bl	800f18c <iprintf>
  if (recv_flags & TF_CLOSED) {
 800c470:	4b0e      	ldr	r3, [pc, #56]	; (800c4ac <tcp_input_delayed_close+0x50>)
 800c472:	7c98      	ldrb	r0, [r3, #18]
 800c474:	f010 0010 	ands.w	r0, r0, #16
 800c478:	d011      	beq.n	800c49e <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c47a:	8b63      	ldrh	r3, [r4, #26]
 800c47c:	06db      	lsls	r3, r3, #27
 800c47e:	d406      	bmi.n	800c48e <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c480:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800c484:	b11b      	cbz	r3, 800c48e <tcp_input_delayed_close+0x32>
 800c486:	f06f 010e 	mvn.w	r1, #14
 800c48a:	6920      	ldr	r0, [r4, #16]
 800c48c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c48e:	4621      	mov	r1, r4
 800c490:	4807      	ldr	r0, [pc, #28]	; (800c4b0 <tcp_input_delayed_close+0x54>)
 800c492:	f7ff fb99 	bl	800bbc8 <tcp_pcb_remove>
    tcp_free(pcb);
 800c496:	4620      	mov	r0, r4
 800c498:	f7fe ff80 	bl	800b39c <tcp_free>
 800c49c:	2001      	movs	r0, #1
}
 800c49e:	bd10      	pop	{r4, pc}
 800c4a0:	0801ff01 	.word	0x0801ff01
 800c4a4:	0801ff8a 	.word	0x0801ff8a
 800c4a8:	0801d8d1 	.word	0x0801d8d1
 800c4ac:	20006988 	.word	0x20006988
 800c4b0:	20010df8 	.word	0x20010df8

0800c4b4 <tcp_free_acked_segments.isra.2>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	4690      	mov	r8, r2
 800c4bc:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c4be:	4f24      	ldr	r7, [pc, #144]	; (800c550 <tcp_free_acked_segments.isra.2+0x9c>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4c0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800c55c <tcp_free_acked_segments.isra.2+0xa8>
  while (seg_list != NULL &&
 800c4c4:	2c00      	cmp	r4, #0
 800c4c6:	d034      	beq.n	800c532 <tcp_free_acked_segments.isra.2+0x7e>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c4c8:	68e3      	ldr	r3, [r4, #12]
 800c4ca:	6858      	ldr	r0, [r3, #4]
 800c4cc:	f7fd ff17 	bl	800a2fe <lwip_htonl>
 800c4d0:	68e3      	ldr	r3, [r4, #12]
 800c4d2:	4682      	mov	sl, r0
 800c4d4:	8925      	ldrh	r5, [r4, #8]
 800c4d6:	8998      	ldrh	r0, [r3, #12]
 800c4d8:	f7fd ff0e 	bl	800a2f8 <lwip_htons>
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	f010 0003 	ands.w	r0, r0, #3
 800c4e2:	eba5 0503 	sub.w	r5, r5, r3
 800c4e6:	bf18      	it	ne
 800c4e8:	2001      	movne	r0, #1
 800c4ea:	4455      	add	r5, sl
 800c4ec:	4405      	add	r5, r0
  while (seg_list != NULL &&
 800c4ee:	2d00      	cmp	r5, #0
 800c4f0:	dc20      	bgt.n	800c534 <tcp_free_acked_segments.isra.2+0x80>
    clen = pbuf_clen(next->p);
 800c4f2:	e9d4 5000 	ldrd	r5, r0, [r4]
 800c4f6:	f7fe fda1 	bl	800b03c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4fa:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 800c4fc:	4682      	mov	sl, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4fe:	4283      	cmp	r3, r0
 800c500:	d206      	bcs.n	800c510 <tcp_free_acked_segments.isra.2+0x5c>
 800c502:	464b      	mov	r3, r9
 800c504:	f240 4257 	movw	r2, #1111	; 0x457
 800c508:	4912      	ldr	r1, [pc, #72]	; (800c554 <tcp_free_acked_segments.isra.2+0xa0>)
 800c50a:	4813      	ldr	r0, [pc, #76]	; (800c558 <tcp_free_acked_segments.isra.2+0xa4>)
 800c50c:	f002 fe3e 	bl	800f18c <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c510:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c512:	8aba      	ldrh	r2, [r7, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c514:	eba0 000a 	sub.w	r0, r0, sl
 800c518:	8030      	strh	r0, [r6, #0]
    tcp_seg_free(next);
 800c51a:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c51c:	8923      	ldrh	r3, [r4, #8]
 800c51e:	4413      	add	r3, r2
 800c520:	82bb      	strh	r3, [r7, #20]
    tcp_seg_free(next);
 800c522:	f7ff f881 	bl	800b628 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800c526:	8833      	ldrh	r3, [r6, #0]
 800c528:	b17b      	cbz	r3, 800c54a <tcp_free_acked_segments.isra.2+0x96>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c52a:	b975      	cbnz	r5, 800c54a <tcp_free_acked_segments.isra.2+0x96>
 800c52c:	f1b8 0f00 	cmp.w	r8, #0
 800c530:	d003      	beq.n	800c53a <tcp_free_acked_segments.isra.2+0x86>
    seg_list = seg_list->next;
 800c532:	2400      	movs	r4, #0
}
 800c534:	4620      	mov	r0, r4
 800c536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c53a:	4b08      	ldr	r3, [pc, #32]	; (800c55c <tcp_free_acked_segments.isra.2+0xa8>)
 800c53c:	f240 4262 	movw	r2, #1122	; 0x462
 800c540:	4907      	ldr	r1, [pc, #28]	; (800c560 <tcp_free_acked_segments.isra.2+0xac>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <tcp_free_acked_segments.isra.2+0xa4>)
 800c544:	f002 fe22 	bl	800f18c <iprintf>
 800c548:	e7f3      	b.n	800c532 <tcp_free_acked_segments.isra.2+0x7e>
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 800c54a:	462c      	mov	r4, r5
 800c54c:	e7ba      	b.n	800c4c4 <tcp_free_acked_segments.isra.2+0x10>
 800c54e:	bf00      	nop
 800c550:	20006988 	.word	0x20006988
 800c554:	0801ffaf 	.word	0x0801ffaf
 800c558:	0801d8d1 	.word	0x0801d8d1
 800c55c:	0801ff01 	.word	0x0801ff01
 800c560:	0801ffd7 	.word	0x0801ffd7

0800c564 <tcp_receive>:
{
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c566:	4604      	mov	r4, r0
 800c568:	b930      	cbnz	r0, 800c578 <tcp_receive+0x14>
 800c56a:	4bb3      	ldr	r3, [pc, #716]	; (800c838 <tcp_receive+0x2d4>)
 800c56c:	f240 427b 	movw	r2, #1147	; 0x47b
 800c570:	49b2      	ldr	r1, [pc, #712]	; (800c83c <tcp_receive+0x2d8>)
 800c572:	48b3      	ldr	r0, [pc, #716]	; (800c840 <tcp_receive+0x2dc>)
 800c574:	f002 fe0a 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c578:	7d23      	ldrb	r3, [r4, #20]
 800c57a:	2b03      	cmp	r3, #3
 800c57c:	d806      	bhi.n	800c58c <tcp_receive+0x28>
 800c57e:	4bae      	ldr	r3, [pc, #696]	; (800c838 <tcp_receive+0x2d4>)
 800c580:	f240 427c 	movw	r2, #1148	; 0x47c
 800c584:	49af      	ldr	r1, [pc, #700]	; (800c844 <tcp_receive+0x2e0>)
 800c586:	48ae      	ldr	r0, [pc, #696]	; (800c840 <tcp_receive+0x2dc>)
 800c588:	f002 fe00 	bl	800f18c <iprintf>
  if (flags & TCP_ACK) {
 800c58c:	4dae      	ldr	r5, [pc, #696]	; (800c848 <tcp_receive+0x2e4>)
 800c58e:	7f2b      	ldrb	r3, [r5, #28]
 800c590:	06de      	lsls	r6, r3, #27
 800c592:	d578      	bpl.n	800c686 <tcp_receive+0x122>
 800c594:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c596:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800c59a:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c59c:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 800c5a0:	1af7      	subs	r7, r6, r3
 800c5a2:	2f00      	cmp	r7, #0
 800c5a4:	db0a      	blt.n	800c5bc <tcp_receive+0x58>
 800c5a6:	429e      	cmp	r6, r3
 800c5a8:	d102      	bne.n	800c5b0 <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5aa:	1a86      	subs	r6, r0, r2
 800c5ac:	2e00      	cmp	r6, #0
 800c5ae:	db05      	blt.n	800c5bc <tcp_receive+0x58>
 800c5b0:	4290      	cmp	r0, r2
 800c5b2:	d10f      	bne.n	800c5d4 <tcp_receive+0x70>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c5b4:	68ee      	ldr	r6, [r5, #12]
 800c5b6:	89f6      	ldrh	r6, [r6, #14]
 800c5b8:	428e      	cmp	r6, r1
 800c5ba:	d90b      	bls.n	800c5d4 <tcp_receive+0x70>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5bc:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5be:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5c2:	89f6      	ldrh	r6, [r6, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c5c4:	42b7      	cmp	r7, r6
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c5c6:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c5ca:	bf38      	it	cc
 800c5cc:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
      pcb->snd_wl2 = ackno;
 800c5d0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c5d4:	6c66      	ldr	r6, [r4, #68]	; 0x44
 800c5d6:	1b93      	subs	r3, r2, r6
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f300 8143 	bgt.w	800c864 <tcp_receive+0x300>
      if (tcplen == 0) {
 800c5de:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f040 8124 	bne.w	800c82e <tcp_receive+0x2ca>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c5e6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5ea:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c5ec:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800c5ee:	443b      	add	r3, r7
 800c5f0:	428b      	cmp	r3, r1
 800c5f2:	f040 811c 	bne.w	800c82e <tcp_receive+0x2ca>
          if (pcb->rtime >= 0) {
 800c5f6:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f2c0 8117 	blt.w	800c82e <tcp_receive+0x2ca>
            if (pcb->lastack == ackno) {
 800c600:	4296      	cmp	r6, r2
 800c602:	f040 8114 	bne.w	800c82e <tcp_receive+0x2ca>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c60a:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800c60c:	bf1c      	itt	ne
 800c60e:	3301      	addne	r3, #1
 800c610:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800c614:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d90e      	bls.n	800c63a <tcp_receive+0xd6>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c61c:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800c620:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c622:	4413      	add	r3, r2
 800c624:	b29b      	uxth	r3, r3
 800c626:	429a      	cmp	r2, r3
 800c628:	bf88      	it	hi
 800c62a:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800c62e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800c632:	4620      	mov	r0, r4
 800c634:	f001 fcee 	bl	800e014 <tcp_rexmit_fast>
 800c638:	e000      	b.n	800c63c <tcp_receive+0xd8>
              if (pcb->dupacks >= 3) {
 800c63a:	d0fa      	beq.n	800c632 <tcp_receive+0xce>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c63c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c63e:	b312      	cbz	r2, 800c686 <tcp_receive+0x122>
 800c640:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c642:	69a9      	ldr	r1, [r5, #24]
 800c644:	1a5b      	subs	r3, r3, r1
 800c646:	2b00      	cmp	r3, #0
 800c648:	da1d      	bge.n	800c686 <tcp_receive+0x122>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c64a:	4b80      	ldr	r3, [pc, #512]	; (800c84c <tcp_receive+0x2e8>)
      m = (s16_t)(m - (pcb->sa >> 3));
 800c64c:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c650:	6819      	ldr	r1, [r3, #0]
 800c652:	1a89      	subs	r1, r1, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 800c654:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = (s16_t)(m - (pcb->sa >> 3));
 800c658:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 800c65c:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = (s16_t)(m - (pcb->sa >> 3));
 800c660:	b289      	uxth	r1, r1
 800c662:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800c664:	4408      	add	r0, r1
      if (m < 0) {
 800c666:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 800c668:	b200      	sxth	r0, r0
        m = (s16_t) - m;
 800c66a:	bfb8      	it	lt
 800c66c:	4249      	neglt	r1, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800c66e:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 800c670:	bfb8      	it	lt
 800c672:	b20b      	sxthlt	r3, r1
      pcb->sv = (s16_t)(pcb->sv + m);
 800c674:	4413      	add	r3, r2
 800c676:	b29b      	uxth	r3, r3
 800c678:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c67a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 800c67e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800c682:	2300      	movs	r3, #0
 800c684:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c686:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800c688:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c68a:	6a2b      	ldr	r3, [r5, #32]
 800c68c:	2800      	cmp	r0, #0
 800c68e:	f000 818e 	beq.w	800c9ae <tcp_receive+0x44a>
 800c692:	7d21      	ldrb	r1, [r4, #20]
 800c694:	2906      	cmp	r1, #6
 800c696:	f200 818a 	bhi.w	800c9ae <tcp_receive+0x44a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c69a:	1ad7      	subs	r7, r2, r3
 800c69c:	2f01      	cmp	r7, #1
 800c69e:	f100 8175 	bmi.w	800c98c <tcp_receive+0x428>
 800c6a2:	f1c3 0101 	rsb	r1, r3, #1
 800c6a6:	1a09      	subs	r1, r1, r0
 800c6a8:	4411      	add	r1, r2
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	f300 816e 	bgt.w	800c98c <tcp_receive+0x428>
      struct pbuf *p = inseg.p;
 800c6b0:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c6b2:	b936      	cbnz	r6, 800c6c2 <tcp_receive+0x15e>
 800c6b4:	4b60      	ldr	r3, [pc, #384]	; (800c838 <tcp_receive+0x2d4>)
 800c6b6:	f240 5294 	movw	r2, #1428	; 0x594
 800c6ba:	4965      	ldr	r1, [pc, #404]	; (800c850 <tcp_receive+0x2ec>)
 800c6bc:	4860      	ldr	r0, [pc, #384]	; (800c840 <tcp_receive+0x2dc>)
 800c6be:	f002 fd65 	bl	800f18c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c6c2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800c6c6:	429f      	cmp	r7, r3
 800c6c8:	d906      	bls.n	800c6d8 <tcp_receive+0x174>
 800c6ca:	4b5b      	ldr	r3, [pc, #364]	; (800c838 <tcp_receive+0x2d4>)
 800c6cc:	f240 5295 	movw	r2, #1429	; 0x595
 800c6d0:	4960      	ldr	r1, [pc, #384]	; (800c854 <tcp_receive+0x2f0>)
 800c6d2:	485b      	ldr	r0, [pc, #364]	; (800c840 <tcp_receive+0x2dc>)
 800c6d4:	f002 fd5a 	bl	800f18c <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c6d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 800c6da:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c6dc:	891b      	ldrh	r3, [r3, #8]
 800c6de:	42bb      	cmp	r3, r7
 800c6e0:	d206      	bcs.n	800c6f0 <tcp_receive+0x18c>
 800c6e2:	4b55      	ldr	r3, [pc, #340]	; (800c838 <tcp_receive+0x2d4>)
 800c6e4:	f240 5297 	movw	r2, #1431	; 0x597
 800c6e8:	495b      	ldr	r1, [pc, #364]	; (800c858 <tcp_receive+0x2f4>)
 800c6ea:	4855      	ldr	r0, [pc, #340]	; (800c840 <tcp_receive+0x2dc>)
 800c6ec:	f002 fd4e 	bl	800f18c <iprintf>
      inseg.len -= off;
 800c6f0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 800c6f2:	2100      	movs	r1, #0
      inseg.len -= off;
 800c6f4:	1bdb      	subs	r3, r3, r7
 800c6f6:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c6f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c6fa:	891b      	ldrh	r3, [r3, #8]
 800c6fc:	1bdb      	subs	r3, r3, r7
 800c6fe:	b29b      	uxth	r3, r3
      while (p->len < off) {
 800c700:	8972      	ldrh	r2, [r6, #10]
 800c702:	42ba      	cmp	r2, r7
 800c704:	f0c0 813c 	bcc.w	800c980 <tcp_receive+0x41c>
      pbuf_remove_header(p, off);
 800c708:	4639      	mov	r1, r7
 800c70a:	4630      	mov	r0, r6
 800c70c:	f7fe fb24 	bl	800ad58 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c712:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800c714:	622b      	str	r3, [r5, #32]
 800c716:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c718:	6a29      	ldr	r1, [r5, #32]
 800c71a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c71c:	1a8b      	subs	r3, r1, r2
 800c71e:	2b00      	cmp	r3, #0
 800c720:	f2c0 8140 	blt.w	800c9a4 <tcp_receive+0x440>
 800c724:	1c4b      	adds	r3, r1, #1
 800c726:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800c728:	1a9b      	subs	r3, r3, r2
 800c72a:	1a1b      	subs	r3, r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f300 8139 	bgt.w	800c9a4 <tcp_receive+0x440>
      if (pcb->rcv_nxt == seqno) {
 800c732:	4291      	cmp	r1, r2
 800c734:	f040 8136 	bne.w	800c9a4 <tcp_receive+0x440>
        tcplen = TCP_TCPLEN(&inseg);
 800c738:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c73a:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800c73c:	8998      	ldrh	r0, [r3, #12]
 800c73e:	f7fd fddb 	bl	800a2f8 <lwip_htons>
 800c742:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 800c746:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800c748:	bf18      	it	ne
 800c74a:	2001      	movne	r0, #1
 800c74c:	4430      	add	r0, r6
 800c74e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800c750:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800c752:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 800c754:	d23d      	bcs.n	800c7d2 <tcp_receive+0x26e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c756:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c758:	8998      	ldrh	r0, [r3, #12]
 800c75a:	f7fd fdcd 	bl	800a2f8 <lwip_htons>
 800c75e:	07c6      	lsls	r6, r0, #31
 800c760:	d50d      	bpl.n	800c77e <tcp_receive+0x21a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c762:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c764:	899e      	ldrh	r6, [r3, #12]
 800c766:	4630      	mov	r0, r6
 800c768:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800c76c:	f7fd fdc4 	bl	800a2f8 <lwip_htons>
 800c770:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800c774:	f7fd fdc0 	bl	800a2f8 <lwip_htons>
 800c778:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c77a:	4306      	orrs	r6, r0
 800c77c:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c77e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c780:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c782:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c784:	8998      	ldrh	r0, [r3, #12]
 800c786:	f7fd fdb7 	bl	800a2f8 <lwip_htons>
 800c78a:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 800c78c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 800c78e:	bf42      	ittt	mi
 800c790:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 800c792:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800c796:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 800c798:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800c79a:	f7fe fbf7 	bl	800af8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c79e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c7a0:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 800c7a2:	8998      	ldrh	r0, [r3, #12]
 800c7a4:	f7fd fda8 	bl	800a2f8 <lwip_htons>
 800c7a8:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7ac:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 800c7ae:	bf18      	it	ne
 800c7b0:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800c7b4:	4430      	add	r0, r6
 800c7b6:	b280      	uxth	r0, r0
 800c7b8:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c7ba:	4418      	add	r0, r3
 800c7bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c7be:	4413      	add	r3, r2
 800c7c0:	4298      	cmp	r0, r3
 800c7c2:	d006      	beq.n	800c7d2 <tcp_receive+0x26e>
 800c7c4:	4b1c      	ldr	r3, [pc, #112]	; (800c838 <tcp_receive+0x2d4>)
 800c7c6:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800c7ca:	4924      	ldr	r1, [pc, #144]	; (800c85c <tcp_receive+0x2f8>)
 800c7cc:	481c      	ldr	r0, [pc, #112]	; (800c840 <tcp_receive+0x2dc>)
 800c7ce:	f002 fcdd 	bl	800f18c <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 800c7d2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800c7d4:	6a2b      	ldr	r3, [r5, #32]
 800c7d6:	4413      	add	r3, r2
 800c7d8:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c7da:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d206      	bcs.n	800c7ee <tcp_receive+0x28a>
 800c7e0:	4b15      	ldr	r3, [pc, #84]	; (800c838 <tcp_receive+0x2d4>)
 800c7e2:	f240 6207 	movw	r2, #1543	; 0x607
 800c7e6:	491e      	ldr	r1, [pc, #120]	; (800c860 <tcp_receive+0x2fc>)
 800c7e8:	4815      	ldr	r0, [pc, #84]	; (800c840 <tcp_receive+0x2dc>)
 800c7ea:	f002 fccf 	bl	800f18c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c7ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c7f0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800c7f2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 800c7f4:	1a9b      	subs	r3, r3, r2
 800c7f6:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800c7f8:	f7fe fea4 	bl	800b544 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800c7fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c7fe:	891a      	ldrh	r2, [r3, #8]
 800c800:	b112      	cbz	r2, 800c808 <tcp_receive+0x2a4>
          recv_data = inseg.p;
 800c802:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c808:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c80a:	8998      	ldrh	r0, [r3, #12]
 800c80c:	f7fd fd74 	bl	800a2f8 <lwip_htons>
 800c810:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 800c812:	bf42      	ittt	mi
 800c814:	7cab      	ldrbmi	r3, [r5, #18]
 800c816:	f043 0320 	orrmi.w	r3, r3, #32
 800c81a:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 800c81c:	8b63      	ldrh	r3, [r4, #26]
 800c81e:	07da      	lsls	r2, r3, #31
 800c820:	f140 80bc 	bpl.w	800c99c <tcp_receive+0x438>
 800c824:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800c828:	f043 0302 	orr.w	r3, r3, #2
 800c82c:	e0b8      	b.n	800c9a0 <tcp_receive+0x43c>
        pcb->dupacks = 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c834:	e702      	b.n	800c63c <tcp_receive+0xd8>
 800c836:	bf00      	nop
 800c838:	0801ff01 	.word	0x0801ff01
 800c83c:	0801fff7 	.word	0x0801fff7
 800c840:	0801d8d1 	.word	0x0801d8d1
 800c844:	08020010 	.word	0x08020010
 800c848:	20006988 	.word	0x20006988
 800c84c:	20010dfc 	.word	0x20010dfc
 800c850:	08020029 	.word	0x08020029
 800c854:	08020039 	.word	0x08020039
 800c858:	08020048 	.word	0x08020048
 800c85c:	08020058 	.word	0x08020058
 800c860:	0802008f 	.word	0x0802008f
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c864:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c866:	1a51      	subs	r1, r2, r1
 800c868:	2900      	cmp	r1, #0
 800c86a:	f300 8085 	bgt.w	800c978 <tcp_receive+0x414>
      if (pcb->flags & TF_INFR) {
 800c86e:	8b61      	ldrh	r1, [r4, #26]
 800c870:	0748      	lsls	r0, r1, #29
 800c872:	d509      	bpl.n	800c888 <tcp_receive+0x324>
        tcp_clear_flags(pcb, TF_INFR);
 800c874:	f021 0104 	bic.w	r1, r1, #4
 800c878:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800c87a:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800c87e:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c882:	2100      	movs	r1, #0
 800c884:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c888:	f9b4 603c 	ldrsh.w	r6, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 800c88c:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c88e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 800c890:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800c892:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c894:	eb01 01e6 	add.w	r1, r1, r6, asr #3
      pcb->nrtx = 0;
 800c898:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800c89c:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c89e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800c8a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      if (pcb->state >= ESTABLISHED) {
 800c8a6:	d91b      	bls.n	800c8e0 <tcp_receive+0x37c>
        if (pcb->cwnd < pcb->ssthresh) {
 800c8a8:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c8ac:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800c8ae:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c8b2:	428a      	cmp	r2, r1
 800c8b4:	d93d      	bls.n	800c932 <tcp_receive+0x3ce>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c8b6:	8b62      	ldrh	r2, [r4, #26]
 800c8b8:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c8bc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c8be:	bf0c      	ite	eq
 800c8c0:	2002      	moveq	r0, #2
 800c8c2:	2001      	movne	r0, #1
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c8c4:	fb12 f200 	smulbb	r2, r2, r0
 800c8c8:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	bf94      	ite	ls
 800c8ce:	188b      	addls	r3, r1, r2
 800c8d0:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	4299      	cmp	r1, r3
 800c8d6:	d901      	bls.n	800c8dc <tcp_receive+0x378>
          TCP_WND_INC(pcb->cwnd, increase);
 800c8d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8dc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800c8e0:	f104 0666 	add.w	r6, r4, #102	; 0x66
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c8e4:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fde3 	bl	800c4b4 <tcp_free_acked_segments.isra.2>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c8ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	f7ff fddd 	bl	800c4b4 <tcp_free_acked_segments.isra.2>
      if (pcb->unacked == NULL) {
 800c8fa:	6f23      	ldr	r3, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c8fc:	66e0      	str	r0, [r4, #108]	; 0x6c
 800c8fe:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 800c900:	bb5b      	cbnz	r3, 800c95a <tcp_receive+0x3f6>
        pcb->rtime = -1;
 800c902:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c906:	8621      	strh	r1, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800c908:	7722      	strb	r2, [r4, #28]
      if (pcb->unsent == NULL) {
 800c90a:	b908      	cbnz	r0, 800c910 <tcp_receive+0x3ac>
        pcb->unsent_oversize = 0;
 800c90c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c910:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
 800c914:	8aa9      	ldrh	r1, [r5, #20]
 800c916:	440a      	add	r2, r1
 800c918:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800c91c:	8b62      	ldrh	r2, [r4, #26]
 800c91e:	0517      	lsls	r7, r2, #20
 800c920:	f57f ae8c 	bpl.w	800c63c <tcp_receive+0xd8>
        if (pcb->unacked == NULL) {
 800c924:	bb2b      	cbnz	r3, 800c972 <tcp_receive+0x40e>
          if ((pcb->unsent == NULL) ||
 800c926:	b9d0      	cbnz	r0, 800c95e <tcp_receive+0x3fa>
          tcp_clear_flags(pcb, TF_RTO);
 800c928:	8b63      	ldrh	r3, [r4, #26]
 800c92a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c92e:	8363      	strh	r3, [r4, #26]
 800c930:	e684      	b.n	800c63c <tcp_receive+0xd8>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c932:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800c936:	4413      	add	r3, r2
 800c938:	b29b      	uxth	r3, r3
 800c93a:	429a      	cmp	r2, r3
 800c93c:	bf88      	it	hi
 800c93e:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800c942:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c946:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800c94a:	4299      	cmp	r1, r3
 800c94c:	d8c8      	bhi.n	800c8e0 <tcp_receive+0x37c>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c94e:	1a5b      	subs	r3, r3, r1
 800c950:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c954:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c956:	440b      	add	r3, r1
 800c958:	e7bb      	b.n	800c8d2 <tcp_receive+0x36e>
        pcb->rtime = 0;
 800c95a:	8622      	strh	r2, [r4, #48]	; 0x30
 800c95c:	e7d4      	b.n	800c908 <tcp_receive+0x3a4>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c95e:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800c960:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c962:	6858      	ldr	r0, [r3, #4]
 800c964:	f7fd fccb 	bl	800a2fe <lwip_htonl>
 800c968:	1a30      	subs	r0, r6, r0
 800c96a:	2800      	cmp	r0, #0
 800c96c:	f73f ae66 	bgt.w	800c63c <tcp_receive+0xd8>
 800c970:	e7da      	b.n	800c928 <tcp_receive+0x3c4>
 800c972:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800c974:	68db      	ldr	r3, [r3, #12]
 800c976:	e7f4      	b.n	800c962 <tcp_receive+0x3fe>
      tcp_send_empty_ack(pcb);
 800c978:	4620      	mov	r0, r4
 800c97a:	f001 fbc7 	bl	800e10c <tcp_send_empty_ack>
 800c97e:	e65d      	b.n	800c63c <tcp_receive+0xd8>
        off -= p->len;
 800c980:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800c982:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800c984:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800c986:	b2bf      	uxth	r7, r7
        p = p->next;
 800c988:	6836      	ldr	r6, [r6, #0]
 800c98a:	e6b9      	b.n	800c700 <tcp_receive+0x19c>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c98c:	1a9b      	subs	r3, r3, r2
 800c98e:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800c990:	bfbe      	ittt	lt
 800c992:	8b63      	ldrhlt	r3, [r4, #26]
 800c994:	f043 0302 	orrlt.w	r3, r3, #2
 800c998:	8363      	strhlt	r3, [r4, #26]
 800c99a:	e6bd      	b.n	800c718 <tcp_receive+0x1b4>
        tcp_ack(pcb);
 800c99c:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800c9a0:	8363      	strh	r3, [r4, #26]
}
 800c9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800c9a4:	4620      	mov	r0, r4
}
 800c9a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800c9aa:	f001 bbaf 	b.w	800e10c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800c9ae:	1a99      	subs	r1, r3, r2
 800c9b0:	2900      	cmp	r1, #0
 800c9b2:	db05      	blt.n	800c9c0 <tcp_receive+0x45c>
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	1a9b      	subs	r3, r3, r2
 800c9b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	ddf0      	ble.n	800c9a2 <tcp_receive+0x43e>
      tcp_ack_now(pcb);
 800c9c0:	8b63      	ldrh	r3, [r4, #26]
 800c9c2:	e731      	b.n	800c828 <tcp_receive+0x2c4>

0800c9c4 <tcp_input>:
{
 800c9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c9c8:	4606      	mov	r6, r0
{
 800c9ca:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800c9cc:	b928      	cbnz	r0, 800c9da <tcp_input+0x16>
 800c9ce:	4b9d      	ldr	r3, [pc, #628]	; (800cc44 <tcp_input+0x280>)
 800c9d0:	2283      	movs	r2, #131	; 0x83
 800c9d2:	499d      	ldr	r1, [pc, #628]	; (800cc48 <tcp_input+0x284>)
 800c9d4:	489d      	ldr	r0, [pc, #628]	; (800cc4c <tcp_input+0x288>)
 800c9d6:	f002 fbd9 	bl	800f18c <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800c9da:	6873      	ldr	r3, [r6, #4]
 800c9dc:	4d9c      	ldr	r5, [pc, #624]	; (800cc50 <tcp_input+0x28c>)
 800c9de:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800c9e0:	8973      	ldrh	r3, [r6, #10]
 800c9e2:	2b13      	cmp	r3, #19
 800c9e4:	f240 809d 	bls.w	800cb22 <tcp_input+0x15e>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800c9e8:	4f9a      	ldr	r7, [pc, #616]	; (800cc54 <tcp_input+0x290>)
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6978      	ldr	r0, [r7, #20]
 800c9ee:	f7fd f85e 	bl	8009aae <ip4_addr_isbroadcast_u32>
 800c9f2:	4604      	mov	r4, r0
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	f040 8094 	bne.w	800cb22 <tcp_input+0x15e>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ca00:	2be0      	cmp	r3, #224	; 0xe0
 800ca02:	f000 808e 	beq.w	800cb22 <tcp_input+0x15e>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ca06:	68eb      	ldr	r3, [r5, #12]
 800ca08:	8998      	ldrh	r0, [r3, #12]
 800ca0a:	f7fd fc75 	bl	800a2f8 <lwip_htons>
 800ca0e:	0a81      	lsrs	r1, r0, #10
 800ca10:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ca14:	2913      	cmp	r1, #19
 800ca16:	f240 8084 	bls.w	800cb22 <tcp_input+0x15e>
 800ca1a:	b28a      	uxth	r2, r1
 800ca1c:	8933      	ldrh	r3, [r6, #8]
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d37f      	bcc.n	800cb22 <tcp_input+0x15e>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ca22:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800ca26:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800ca28:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ca2a:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800ca2c:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ca2e:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800ca30:	d33e      	bcc.n	800cab0 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ca32:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800ca34:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ca36:	f7fe f98f 	bl	800ad58 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ca3a:	68ec      	ldr	r4, [r5, #12]
 800ca3c:	8820      	ldrh	r0, [r4, #0]
 800ca3e:	f7fd fc5b 	bl	800a2f8 <lwip_htons>
 800ca42:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ca44:	68ec      	ldr	r4, [r5, #12]
 800ca46:	8860      	ldrh	r0, [r4, #2]
 800ca48:	f7fd fc56 	bl	800a2f8 <lwip_htons>
 800ca4c:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca4e:	68ec      	ldr	r4, [r5, #12]
 800ca50:	6860      	ldr	r0, [r4, #4]
 800ca52:	f7fd fc54 	bl	800a2fe <lwip_htonl>
 800ca56:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca58:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ca5a:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca5c:	68a0      	ldr	r0, [r4, #8]
 800ca5e:	f7fd fc4e 	bl	800a2fe <lwip_htonl>
 800ca62:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca64:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ca66:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca68:	89e0      	ldrh	r0, [r4, #14]
 800ca6a:	f7fd fc45 	bl	800a2f8 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800ca6e:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ca70:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ca72:	8998      	ldrh	r0, [r3, #12]
 800ca74:	f7fd fc40 	bl	800a2f8 <lwip_htons>
  tcplen = p->tot_len;
 800ca78:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800ca7a:	b2c0      	uxtb	r0, r0
 800ca7c:	f000 033f 	and.w	r3, r0, #63	; 0x3f
 800ca80:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ca82:	0783      	lsls	r3, r0, #30
 800ca84:	d148      	bne.n	800cb18 <tcp_input+0x154>
  tcplen = p->tot_len;
 800ca86:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca88:	4b73      	ldr	r3, [pc, #460]	; (800cc58 <tcp_input+0x294>)
  prev = NULL;
 800ca8a:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ca8e:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800cc44 <tcp_input+0x280>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca92:	681c      	ldr	r4, [r3, #0]
 800ca94:	4698      	mov	r8, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ca96:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 800cc4c <tcp_input+0x288>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9a:	2c00      	cmp	r4, #0
 800ca9c:	d147      	bne.n	800cb2e <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9e:	4b6f      	ldr	r3, [pc, #444]	; (800cc5c <tcp_input+0x298>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800caa0:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 800cc44 <tcp_input+0x280>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa4:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800caa6:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 800cc84 <tcp_input+0x2c0>
 800caaa:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800cc4c <tcp_input+0x288>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800caae:	e13c      	b.n	800cd2a <tcp_input+0x366>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800cab0:	6833      	ldr	r3, [r6, #0]
 800cab2:	b92b      	cbnz	r3, 800cac0 <tcp_input+0xfc>
 800cab4:	4b63      	ldr	r3, [pc, #396]	; (800cc44 <tcp_input+0x280>)
 800cab6:	22c2      	movs	r2, #194	; 0xc2
 800cab8:	4969      	ldr	r1, [pc, #420]	; (800cc60 <tcp_input+0x29c>)
 800caba:	4864      	ldr	r0, [pc, #400]	; (800cc4c <tcp_input+0x288>)
 800cabc:	f002 fb66 	bl	800f18c <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800cac0:	2114      	movs	r1, #20
 800cac2:	4630      	mov	r0, r6
 800cac4:	f7fe f948 	bl	800ad58 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800cac8:	8971      	ldrh	r1, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800caca:	8a2c      	ldrh	r4, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800cacc:	4630      	mov	r0, r6
    tcphdr_opt1len = p->len;
 800cace:	8129      	strh	r1, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cad0:	1a64      	subs	r4, r4, r1
    pbuf_remove_header(p, tcphdr_opt1len);
 800cad2:	f7fe f941 	bl	800ad58 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800cad6:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800cad8:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 800cada:	8943      	ldrh	r3, [r0, #10]
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d320      	bcc.n	800cb22 <tcp_input+0x15e>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cae0:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800cae2:	4621      	mov	r1, r4
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800cae4:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800cae6:	f7fe f937 	bl	800ad58 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800caea:	8933      	ldrh	r3, [r6, #8]
 800caec:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800caee:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800caf0:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800caf2:	b12b      	cbz	r3, 800cb00 <tcp_input+0x13c>
 800caf4:	4b53      	ldr	r3, [pc, #332]	; (800cc44 <tcp_input+0x280>)
 800caf6:	22df      	movs	r2, #223	; 0xdf
 800caf8:	495a      	ldr	r1, [pc, #360]	; (800cc64 <tcp_input+0x2a0>)
 800cafa:	4854      	ldr	r0, [pc, #336]	; (800cc4c <tcp_input+0x288>)
 800cafc:	f002 fb46 	bl	800f18c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800cb00:	6833      	ldr	r3, [r6, #0]
 800cb02:	8932      	ldrh	r2, [r6, #8]
 800cb04:	891b      	ldrh	r3, [r3, #8]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d097      	beq.n	800ca3a <tcp_input+0x76>
 800cb0a:	4b4e      	ldr	r3, [pc, #312]	; (800cc44 <tcp_input+0x280>)
 800cb0c:	22e0      	movs	r2, #224	; 0xe0
 800cb0e:	4956      	ldr	r1, [pc, #344]	; (800cc68 <tcp_input+0x2a4>)
 800cb10:	484e      	ldr	r0, [pc, #312]	; (800cc4c <tcp_input+0x288>)
 800cb12:	f002 fb3b 	bl	800f18c <iprintf>
 800cb16:	e790      	b.n	800ca3a <tcp_input+0x76>
    tcplen++;
 800cb18:	1c53      	adds	r3, r2, #1
 800cb1a:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800cb1c:	429a      	cmp	r2, r3
    tcplen++;
 800cb1e:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800cb20:	d9b2      	bls.n	800ca88 <tcp_input+0xc4>
  pbuf_free(p);
 800cb22:	4630      	mov	r0, r6
}
 800cb24:	b005      	add	sp, #20
 800cb26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800cb2a:	f7fe b949 	b.w	800adc0 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800cb2e:	7d23      	ldrb	r3, [r4, #20]
 800cb30:	b92b      	cbnz	r3, 800cb3e <tcp_input+0x17a>
 800cb32:	4653      	mov	r3, sl
 800cb34:	22fb      	movs	r2, #251	; 0xfb
 800cb36:	494d      	ldr	r1, [pc, #308]	; (800cc6c <tcp_input+0x2a8>)
 800cb38:	4658      	mov	r0, fp
 800cb3a:	f002 fb27 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800cb3e:	7d23      	ldrb	r3, [r4, #20]
 800cb40:	2b0a      	cmp	r3, #10
 800cb42:	d105      	bne.n	800cb50 <tcp_input+0x18c>
 800cb44:	4653      	mov	r3, sl
 800cb46:	22fc      	movs	r2, #252	; 0xfc
 800cb48:	4949      	ldr	r1, [pc, #292]	; (800cc70 <tcp_input+0x2ac>)
 800cb4a:	4658      	mov	r0, fp
 800cb4c:	f002 fb1e 	bl	800f18c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800cb50:	7d23      	ldrb	r3, [r4, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d105      	bne.n	800cb62 <tcp_input+0x19e>
 800cb56:	4653      	mov	r3, sl
 800cb58:	22fd      	movs	r2, #253	; 0xfd
 800cb5a:	4946      	ldr	r1, [pc, #280]	; (800cc74 <tcp_input+0x2b0>)
 800cb5c:	4658      	mov	r0, fp
 800cb5e:	f002 fb15 	bl	800f18c <iprintf>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb62:	7a21      	ldrb	r1, [r4, #8]
 800cb64:	68e2      	ldr	r2, [r4, #12]
 800cb66:	b131      	cbz	r1, 800cb76 <tcp_input+0x1b2>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb6e:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	4299      	cmp	r1, r3
 800cb74:	d162      	bne.n	800cc3c <tcp_input+0x278>
    if (pcb->remote_port == tcphdr->src &&
 800cb76:	68eb      	ldr	r3, [r5, #12]
 800cb78:	8b20      	ldrh	r0, [r4, #24]
 800cb7a:	8819      	ldrh	r1, [r3, #0]
 800cb7c:	4288      	cmp	r0, r1
 800cb7e:	d15d      	bne.n	800cc3c <tcp_input+0x278>
 800cb80:	8ae1      	ldrh	r1, [r4, #22]
 800cb82:	885b      	ldrh	r3, [r3, #2]
 800cb84:	4299      	cmp	r1, r3
 800cb86:	d159      	bne.n	800cc3c <tcp_input+0x278>
        pcb->local_port == tcphdr->dest &&
 800cb88:	6861      	ldr	r1, [r4, #4]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	4299      	cmp	r1, r3
 800cb8e:	d155      	bne.n	800cc3c <tcp_input+0x278>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800cb90:	6821      	ldr	r1, [r4, #0]
 800cb92:	697b      	ldr	r3, [r7, #20]
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d151      	bne.n	800cc3c <tcp_input+0x278>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800cb98:	42a2      	cmp	r2, r4
 800cb9a:	f040 83f9 	bne.w	800d390 <tcp_input+0x9cc>
 800cb9e:	4b29      	ldr	r3, [pc, #164]	; (800cc44 <tcp_input+0x280>)
 800cba0:	f240 120d 	movw	r2, #269	; 0x10d
 800cba4:	4934      	ldr	r1, [pc, #208]	; (800cc78 <tcp_input+0x2b4>)
 800cba6:	4829      	ldr	r0, [pc, #164]	; (800cc4c <tcp_input+0x288>)
 800cba8:	f002 faf0 	bl	800f18c <iprintf>
      if (prev != NULL) {
 800cbac:	f1b9 0f00 	cmp.w	r9, #0
 800cbb0:	d007      	beq.n	800cbc2 <tcp_input+0x1fe>
        prev->next = pcb->next;
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 800cbb8:	f8d8 3000 	ldr.w	r3, [r8]
        tcp_active_pcbs = pcb;
 800cbbc:	f8c8 4000 	str.w	r4, [r8]
        pcb->next = tcp_active_pcbs;
 800cbc0:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	42a3      	cmp	r3, r4
 800cbc6:	d106      	bne.n	800cbd6 <tcp_input+0x212>
 800cbc8:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <tcp_input+0x280>)
 800cbca:	f240 1215 	movw	r2, #277	; 0x115
 800cbce:	492b      	ldr	r1, [pc, #172]	; (800cc7c <tcp_input+0x2b8>)
 800cbd0:	481e      	ldr	r0, [pc, #120]	; (800cc4c <tcp_input+0x288>)
 800cbd2:	f002 fadb 	bl	800f18c <iprintf>
    inseg.len = p->tot_len;
 800cbd6:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800cbd8:	2300      	movs	r3, #0
    inseg.p = p;
 800cbda:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800cbdc:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800cbde:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800cbe0:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800cbe2:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800cbe4:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800cbe6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800cbea:	7f2b      	ldrb	r3, [r5, #28]
 800cbec:	071a      	lsls	r2, r3, #28
 800cbee:	d503      	bpl.n	800cbf8 <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 800cbf0:	7b73      	ldrb	r3, [r6, #13]
 800cbf2:	f043 0301 	orr.w	r3, r3, #1
 800cbf6:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800cbf8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cbfa:	4e21      	ldr	r6, [pc, #132]	; (800cc80 <tcp_input+0x2bc>)
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 8137 	beq.w	800ce70 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800cc02:	4620      	mov	r0, r4
 800cc04:	f7ff f92e 	bl	800be64 <tcp_process_refused_data>
 800cc08:	300d      	adds	r0, #13
 800cc0a:	d007      	beq.n	800cc1c <tcp_input+0x258>
 800cc0c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f000 812e 	beq.w	800ce70 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800cc14:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f000 812a 	beq.w	800ce70 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800cc1c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800cc1e:	b913      	cbnz	r3, 800cc26 <tcp_input+0x262>
          tcp_send_empty_ack(pcb);
 800cc20:	4620      	mov	r0, r4
 800cc22:	f001 fa73 	bl	800e10c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800cc26:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800cc28:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800cc2a:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800cc2c:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800cc2e:	b110      	cbz	r0, 800cc36 <tcp_input+0x272>
      pbuf_free(inseg.p);
 800cc30:	f7fe f8c6 	bl	800adc0 <pbuf_free>
      inseg.p = NULL;
 800cc34:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800cc36:	b005      	add	sp, #20
 800cc38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc3c:	46a1      	mov	r9, r4
 800cc3e:	4614      	mov	r4, r2
 800cc40:	e72b      	b.n	800ca9a <tcp_input+0xd6>
 800cc42:	bf00      	nop
 800cc44:	0801ff01 	.word	0x0801ff01
 800cc48:	080200ae 	.word	0x080200ae
 800cc4c:	0801d8d1 	.word	0x0801d8d1
 800cc50:	20006988 	.word	0x20006988
 800cc54:	2000a8c4 	.word	0x2000a8c4
 800cc58:	20010df8 	.word	0x20010df8
 800cc5c:	20010e08 	.word	0x20010e08
 800cc60:	080200c6 	.word	0x080200c6
 800cc64:	080200d6 	.word	0x080200d6
 800cc68:	080200e2 	.word	0x080200e2
 800cc6c:	08020101 	.word	0x08020101
 800cc70:	08020128 	.word	0x08020128
 800cc74:	08020152 	.word	0x08020152
 800cc78:	08020179 	.word	0x08020179
 800cc7c:	080201a4 	.word	0x080201a4
 800cc80:	20010e0c 	.word	0x20010e0c
 800cc84:	080201ce 	.word	0x080201ce
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cc88:	7d23      	ldrb	r3, [r4, #20]
 800cc8a:	2b0a      	cmp	r3, #10
 800cc8c:	d006      	beq.n	800cc9c <tcp_input+0x2d8>
 800cc8e:	465b      	mov	r3, fp
 800cc90:	f240 121f 	movw	r2, #287	; 0x11f
 800cc94:	4651      	mov	r1, sl
 800cc96:	4648      	mov	r0, r9
 800cc98:	f002 fa78 	bl	800f18c <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cc9c:	7a22      	ldrb	r2, [r4, #8]
 800cc9e:	b132      	cbz	r2, 800ccae <tcp_input+0x2ea>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cca6:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d13c      	bne.n	800cd28 <tcp_input+0x364>
      if (pcb->remote_port == tcphdr->src &&
 800ccae:	68eb      	ldr	r3, [r5, #12]
 800ccb0:	8b22      	ldrh	r2, [r4, #24]
 800ccb2:	8818      	ldrh	r0, [r3, #0]
 800ccb4:	4290      	cmp	r0, r2
 800ccb6:	d137      	bne.n	800cd28 <tcp_input+0x364>
          pcb->local_port == tcphdr->dest &&
 800ccb8:	8ae2      	ldrh	r2, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 800ccba:	8859      	ldrh	r1, [r3, #2]
 800ccbc:	4291      	cmp	r1, r2
 800ccbe:	d133      	bne.n	800cd28 <tcp_input+0x364>
          pcb->local_port == tcphdr->dest &&
 800ccc0:	6862      	ldr	r2, [r4, #4]
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d12f      	bne.n	800cd28 <tcp_input+0x364>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ccc8:	6822      	ldr	r2, [r4, #0]
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d12b      	bne.n	800cd28 <tcp_input+0x364>
  if (flags & TCP_RST) {
 800ccd0:	7f2b      	ldrb	r3, [r5, #28]
 800ccd2:	075f      	lsls	r7, r3, #29
 800ccd4:	f53f af25 	bmi.w	800cb22 <tcp_input+0x15e>
  if (flags & TCP_SYN) {
 800ccd8:	079a      	lsls	r2, r3, #30
 800ccda:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800ccdc:	d514      	bpl.n	800cd08 <tcp_input+0x344>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ccde:	6a2a      	ldr	r2, [r5, #32]
 800cce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	d415      	bmi.n	800cd12 <tcp_input+0x34e>
 800cce6:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800ccea:	eba3 030c 	sub.w	r3, r3, ip
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	dc0f      	bgt.n	800cd12 <tcp_input+0x34e>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ccf2:	4b8f      	ldr	r3, [pc, #572]	; (800cf30 <tcp_input+0x56c>)
 800ccf4:	443a      	add	r2, r7
 800ccf6:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800ccfa:	9300      	str	r3, [sp, #0]
 800ccfc:	4620      	mov	r0, r4
 800ccfe:	3304      	adds	r3, #4
 800cd00:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd02:	f001 f9bf 	bl	800e084 <tcp_rst>
 800cd06:	e70c      	b.n	800cb22 <tcp_input+0x15e>
  } else if (flags & TCP_FIN) {
 800cd08:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800cd0a:	bf42      	ittt	mi
 800cd0c:	4b89      	ldrmi	r3, [pc, #548]	; (800cf34 <tcp_input+0x570>)
 800cd0e:	681b      	ldrmi	r3, [r3, #0]
 800cd10:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800cd12:	2f00      	cmp	r7, #0
 800cd14:	f43f af05 	beq.w	800cb22 <tcp_input+0x15e>
    tcp_ack_now(pcb);
 800cd18:	8b63      	ldrh	r3, [r4, #26]
 800cd1a:	f043 0302 	orr.w	r3, r3, #2
 800cd1e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800cd20:	4620      	mov	r0, r4
 800cd22:	f001 fa25 	bl	800e170 <tcp_output>
 800cd26:	e6fc      	b.n	800cb22 <tcp_input+0x15e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cd28:	68e4      	ldr	r4, [r4, #12]
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d1ac      	bne.n	800cc88 <tcp_input+0x2c4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd2e:	4a82      	ldr	r2, [pc, #520]	; (800cf38 <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd30:	f8d7 e004 	ldr.w	lr, [r7, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd34:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800cd36:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd38:	f8d7 a014 	ldr.w	sl, [r7, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd3c:	4681      	mov	r9, r0
 800cd3e:	f1b9 0f00 	cmp.w	r9, #0
 800cd42:	d111      	bne.n	800cd68 <tcp_input+0x3a4>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800cd44:	8988      	ldrh	r0, [r1, #12]
 800cd46:	f7fd fad7 	bl	800a2f8 <lwip_htons>
 800cd4a:	0743      	lsls	r3, r0, #29
 800cd4c:	f53f aee9 	bmi.w	800cb22 <tcp_input+0x15e>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd50:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd52:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800cd54:	8818      	ldrh	r0, [r3, #0]
 800cd56:	6a2a      	ldr	r2, [r5, #32]
 800cd58:	9002      	str	r0, [sp, #8]
 800cd5a:	885b      	ldrh	r3, [r3, #2]
 800cd5c:	440a      	add	r2, r1
 800cd5e:	9301      	str	r3, [sp, #4]
 800cd60:	4b73      	ldr	r3, [pc, #460]	; (800cf30 <tcp_input+0x56c>)
 800cd62:	9300      	str	r3, [sp, #0]
 800cd64:	3304      	adds	r3, #4
 800cd66:	e310      	b.n	800d38a <tcp_input+0x9c6>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cd68:	f899 c008 	ldrb.w	ip, [r9, #8]
 800cd6c:	f1bc 0f00 	cmp.w	ip, #0
 800cd70:	d005      	beq.n	800cd7e <tcp_input+0x3ba>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cd72:	f89e 3034 	ldrb.w	r3, [lr, #52]	; 0x34
 800cd76:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	459c      	cmp	ip, r3
 800cd7c:	d10c      	bne.n	800cd98 <tcp_input+0x3d4>
      if (lpcb->local_port == tcphdr->dest) {
 800cd7e:	f8b9 c016 	ldrh.w	ip, [r9, #22]
 800cd82:	884b      	ldrh	r3, [r1, #2]
 800cd84:	4563      	cmp	r3, ip
 800cd86:	d107      	bne.n	800cd98 <tcp_input+0x3d4>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800cd88:	f8d9 3000 	ldr.w	r3, [r9]
 800cd8c:	4553      	cmp	r3, sl
 800cd8e:	f000 82e3 	beq.w	800d358 <tcp_input+0x994>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 82e0 	beq.w	800d358 <tcp_input+0x994>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cd98:	464c      	mov	r4, r9
 800cd9a:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800cd9e:	e7ce      	b.n	800cd3e <tcp_input+0x37a>
  } else if (flags & TCP_SYN) {
 800cda0:	079a      	lsls	r2, r3, #30
 800cda2:	f57f aebe 	bpl.w	800cb22 <tcp_input+0x15e>
    npcb = tcp_alloc(pcb->prio);
 800cda6:	f899 0015 	ldrb.w	r0, [r9, #21]
 800cdaa:	f7ff f9fd 	bl	800c1a8 <tcp_alloc>
    if (npcb == NULL) {
 800cdae:	4604      	mov	r4, r0
 800cdb0:	b958      	cbnz	r0, 800cdca <tcp_input+0x406>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800cdb2:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	f43f aeb3 	beq.w	800cb22 <tcp_input+0x15e>
 800cdbc:	4601      	mov	r1, r0
 800cdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cdc2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800cdc6:	4798      	blx	r3
 800cdc8:	e6ab      	b.n	800cb22 <tcp_input+0x15e>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdca:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 800cdcc:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800cdce:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800cdd4:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800cdd8:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800cdda:	7813      	ldrb	r3, [r2, #0]
 800cddc:	7852      	ldrb	r2, [r2, #1]
 800cdde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800cde2:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800cde4:	2303      	movs	r3, #3
 800cde6:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800cde8:	6a2b      	ldr	r3, [r5, #32]
 800cdea:	3301      	adds	r3, #1
 800cdec:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800cdee:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800cdf0:	f7ff fa7a 	bl	800c2e8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cdf4:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800cdf6:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cdf8:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800cdfa:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800cdfc:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800cdfe:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ce00:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800ce04:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800ce06:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800ce08:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ce0c:	f899 3009 	ldrb.w	r3, [r9, #9]
 800ce10:	f003 030c 	and.w	r3, r3, #12
 800ce14:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ce16:	f899 3008 	ldrb.w	r3, [r9, #8]
 800ce1a:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800ce1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce20:	f8c8 4000 	str.w	r4, [r8]
 800ce24:	60e3      	str	r3, [r4, #12]
 800ce26:	f001 fc79 	bl	800e71c <tcp_timer_needed>
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	4b43      	ldr	r3, [pc, #268]	; (800cf3c <tcp_input+0x578>)
    tcp_parseopt(npcb);
 800ce2e:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800ce30:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ce32:	f7ff fac9 	bl	800c3c8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ce36:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce38:	1d25      	adds	r5, r4, #4
 800ce3a:	8e67      	ldrh	r7, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800ce3c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce3e:	4628      	mov	r0, r5
    npcb->snd_wnd = tcphdr->wnd;
 800ce40:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ce44:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce48:	f7fc fcb2 	bl	80097b0 <ip4_route>
 800ce4c:	462a      	mov	r2, r5
 800ce4e:	4601      	mov	r1, r0
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7ff fa63 	bl	800c31c <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce56:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ce58:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f000 ff90 	bl	800dd80 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800ce60:	2800      	cmp	r0, #0
 800ce62:	f43f af5d 	beq.w	800cd20 <tcp_input+0x35c>
      tcp_abandon(npcb, 0);
 800ce66:	4651      	mov	r1, sl
 800ce68:	4620      	mov	r0, r4
 800ce6a:	f7ff f8c9 	bl	800c000 <tcp_abandon>
 800ce6e:	e658      	b.n	800cb22 <tcp_input+0x15e>
  if (flags & TCP_RST) {
 800ce70:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800ce72:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800ce74:	0753      	lsls	r3, r2, #29
 800ce76:	d537      	bpl.n	800cee8 <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800ce78:	7d21      	ldrb	r1, [r4, #20]
 800ce7a:	2902      	cmp	r1, #2
 800ce7c:	d11e      	bne.n	800cebc <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800ce7e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ce80:	69ab      	ldr	r3, [r5, #24]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d107      	bne.n	800ce96 <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800ce86:	7cab      	ldrb	r3, [r5, #18]
 800ce88:	f043 0308 	orr.w	r3, r3, #8
 800ce8c:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ce8e:	8b63      	ldrh	r3, [r4, #26]
 800ce90:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800ce94:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800ce96:	7cab      	ldrb	r3, [r5, #18]
 800ce98:	0718      	lsls	r0, r3, #28
 800ce9a:	f140 81fc 	bpl.w	800d296 <tcp_input+0x8d2>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ce9e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800cea2:	b11b      	cbz	r3, 800ceac <tcp_input+0x4e8>
 800cea4:	f06f 010d 	mvn.w	r1, #13
 800cea8:	6920      	ldr	r0, [r4, #16]
 800ceaa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ceac:	4621      	mov	r1, r4
 800ceae:	4824      	ldr	r0, [pc, #144]	; (800cf40 <tcp_input+0x57c>)
 800ceb0:	f7fe fe8a 	bl	800bbc8 <tcp_pcb_remove>
        tcp_free(pcb);
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7fe fa71 	bl	800b39c <tcp_free>
 800ceba:	e6b4      	b.n	800cc26 <tcp_input+0x262>
      if (seqno == pcb->rcv_nxt) {
 800cebc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800cebe:	6a2b      	ldr	r3, [r5, #32]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d007      	beq.n	800ced4 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cec4:	1a9b      	subs	r3, r3, r2
 800cec6:	d4e6      	bmi.n	800ce96 <tcp_input+0x4d2>
 800cec8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ceca:	1a9b      	subs	r3, r3, r2
 800cecc:	2b00      	cmp	r3, #0
 800cece:	dce2      	bgt.n	800ce96 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800ced0:	8b63      	ldrh	r3, [r4, #26]
 800ced2:	e010      	b.n	800cef6 <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ced4:	2900      	cmp	r1, #0
 800ced6:	d1d6      	bne.n	800ce86 <tcp_input+0x4c2>
 800ced8:	4b1a      	ldr	r3, [pc, #104]	; (800cf44 <tcp_input+0x580>)
 800ceda:	f44f 724e 	mov.w	r2, #824	; 0x338
 800cede:	491a      	ldr	r1, [pc, #104]	; (800cf48 <tcp_input+0x584>)
 800cee0:	481a      	ldr	r0, [pc, #104]	; (800cf4c <tcp_input+0x588>)
 800cee2:	f002 f953 	bl	800f18c <iprintf>
 800cee6:	e7ce      	b.n	800ce86 <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800cee8:	0797      	lsls	r7, r2, #30
 800ceea:	8b63      	ldrh	r3, [r4, #26]
 800ceec:	d506      	bpl.n	800cefc <tcp_input+0x538>
 800ceee:	7d22      	ldrb	r2, [r4, #20]
 800cef0:	3a02      	subs	r2, #2
 800cef2:	2a01      	cmp	r2, #1
 800cef4:	d902      	bls.n	800cefc <tcp_input+0x538>
        tcp_ack_now(pcb);
 800cef6:	f043 0302 	orr.w	r3, r3, #2
 800cefa:	e7cb      	b.n	800ce94 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800cefc:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800cefe:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800cf00:	bf5e      	ittt	pl
 800cf02:	4b0c      	ldrpl	r3, [pc, #48]	; (800cf34 <tcp_input+0x570>)
 800cf04:	681b      	ldrpl	r3, [r3, #0]
 800cf06:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800cf0e:	f7ff fa5b 	bl	800c3c8 <tcp_parseopt>
  switch (pcb->state) {
 800cf12:	7d23      	ldrb	r3, [r4, #20]
 800cf14:	3b02      	subs	r3, #2
 800cf16:	2b07      	cmp	r3, #7
 800cf18:	d8bd      	bhi.n	800ce96 <tcp_input+0x4d2>
 800cf1a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cf1e:	0019      	.short	0x0019
 800cf20:	011000a5 	.word	0x011000a5
 800cf24:	015d0115 	.word	0x015d0115
 800cf28:	01760110 	.word	0x01760110
 800cf2c:	01a7      	.short	0x01a7
 800cf2e:	bf00      	nop
 800cf30:	2000a8d4 	.word	0x2000a8d4
 800cf34:	20010dfc 	.word	0x20010dfc
 800cf38:	20010e00 	.word	0x20010e00
 800cf3c:	20010df4 	.word	0x20010df4
 800cf40:	20010df8 	.word	0x20010df8
 800cf44:	0801ff01 	.word	0x0801ff01
 800cf48:	080201fb 	.word	0x080201fb
 800cf4c:	0801d8d1 	.word	0x0801d8d1
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800cf50:	7f2b      	ldrb	r3, [r5, #28]
 800cf52:	f003 0212 	and.w	r2, r3, #18
 800cf56:	2a12      	cmp	r2, #18
 800cf58:	d169      	bne.n	800d02e <tcp_input+0x66a>
          && (ackno == pcb->lastack + 1)) {
 800cf5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800cf5c:	69a9      	ldr	r1, [r5, #24]
 800cf5e:	3201      	adds	r2, #1
 800cf60:	428a      	cmp	r2, r1
 800cf62:	d164      	bne.n	800d02e <tcp_input+0x66a>
        pcb->rcv_nxt = seqno + 1;
 800cf64:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800cf66:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800cf68:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800cf6a:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf6c:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf6e:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800cf72:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800cf74:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800cf76:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cf78:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800cf7a:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800cf7c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf80:	18e7      	adds	r7, r4, r3
        pcb->state = ESTABLISHED;
 800cf82:	7523      	strb	r3, [r4, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf84:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800cf88:	4638      	mov	r0, r7
 800cf8a:	f7fc fc11 	bl	80097b0 <ip4_route>
 800cf8e:	463a      	mov	r2, r7
 800cf90:	4601      	mov	r1, r0
 800cf92:	4640      	mov	r0, r8
 800cf94:	f7ff f9c2 	bl	800c31c <tcp_eff_send_mss_netif>
 800cf98:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cf9a:	0042      	lsls	r2, r0, #1
 800cf9c:	0083      	lsls	r3, r0, #2
 800cf9e:	f241 101c 	movw	r0, #4380	; 0x111c
 800cfa2:	4611      	mov	r1, r2
 800cfa4:	4282      	cmp	r2, r0
 800cfa6:	bf38      	it	cc
 800cfa8:	4601      	movcc	r1, r0
 800cfaa:	428b      	cmp	r3, r1
 800cfac:	d233      	bcs.n	800d016 <tcp_input+0x652>
 800cfae:	b298      	uxth	r0, r3
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cfb0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cfb4:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cfb8:	b933      	cbnz	r3, 800cfc8 <tcp_input+0x604>
 800cfba:	4ba3      	ldr	r3, [pc, #652]	; (800d248 <tcp_input+0x884>)
 800cfbc:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800cfc0:	49a2      	ldr	r1, [pc, #648]	; (800d24c <tcp_input+0x888>)
 800cfc2:	48a3      	ldr	r0, [pc, #652]	; (800d250 <tcp_input+0x88c>)
 800cfc4:	f002 f8e2 	bl	800f18c <iprintf>
        --pcb->snd_queuelen;
 800cfc8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800cfcc:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800cfd4:	bb1f      	cbnz	r7, 800d01e <tcp_input+0x65a>
          rseg = pcb->unsent;
 800cfd6:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800cfd8:	b937      	cbnz	r7, 800cfe8 <tcp_input+0x624>
 800cfda:	4b9b      	ldr	r3, [pc, #620]	; (800d248 <tcp_input+0x884>)
 800cfdc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800cfe0:	499c      	ldr	r1, [pc, #624]	; (800d254 <tcp_input+0x890>)
 800cfe2:	489b      	ldr	r0, [pc, #620]	; (800d250 <tcp_input+0x88c>)
 800cfe4:	f002 f8d2 	bl	800f18c <iprintf>
          pcb->unsent = rseg->next;
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800cfec:	4638      	mov	r0, r7
 800cfee:	f7fe fb1b 	bl	800b628 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800cff2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cff4:	b9b3      	cbnz	r3, 800d024 <tcp_input+0x660>
          pcb->rtime = -1;
 800cff6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cffa:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cffc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800d000:	2b00      	cmp	r3, #0
 800d002:	f43f af65 	beq.w	800ced0 <tcp_input+0x50c>
 800d006:	2200      	movs	r2, #0
 800d008:	4621      	mov	r1, r4
 800d00a:	6920      	ldr	r0, [r4, #16]
 800d00c:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800d00e:	300d      	adds	r0, #13
 800d010:	f47f af5e 	bne.w	800ced0 <tcp_input+0x50c>
 800d014:	e607      	b.n	800cc26 <tcp_input+0x262>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d016:	4282      	cmp	r2, r0
 800d018:	bf88      	it	hi
 800d01a:	b290      	uxthhi	r0, r2
 800d01c:	e7c8      	b.n	800cfb0 <tcp_input+0x5ec>
          pcb->unacked = rseg->next;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	6723      	str	r3, [r4, #112]	; 0x70
 800d022:	e7e3      	b.n	800cfec <tcp_input+0x628>
          pcb->rtime = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800d028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d02c:	e7e6      	b.n	800cffc <tcp_input+0x638>
      else if (flags & TCP_ACK) {
 800d02e:	06d9      	lsls	r1, r3, #27
 800d030:	f57f af31 	bpl.w	800ce96 <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d034:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d036:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800d038:	8818      	ldrh	r0, [r3, #0]
 800d03a:	6a2a      	ldr	r2, [r5, #32]
 800d03c:	9002      	str	r0, [sp, #8]
 800d03e:	4620      	mov	r0, r4
 800d040:	885b      	ldrh	r3, [r3, #2]
 800d042:	440a      	add	r2, r1
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	4b84      	ldr	r3, [pc, #528]	; (800d258 <tcp_input+0x894>)
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	3304      	adds	r3, #4
 800d04c:	69a9      	ldr	r1, [r5, #24]
 800d04e:	f001 f819 	bl	800e084 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800d052:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d056:	2b05      	cmp	r3, #5
 800d058:	f63f af1d 	bhi.w	800ce96 <tcp_input+0x4d2>
          pcb->rtime = 0;
 800d05c:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800d05e:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800d060:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800d062:	f001 fa4b 	bl	800e4fc <tcp_rexmit_rto>
 800d066:	e716      	b.n	800ce96 <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800d068:	7f2b      	ldrb	r3, [r5, #28]
 800d06a:	06da      	lsls	r2, r3, #27
 800d06c:	d55a      	bpl.n	800d124 <tcp_input+0x760>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d06e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800d070:	69a9      	ldr	r1, [r5, #24]
 800d072:	43db      	mvns	r3, r3
 800d074:	42cb      	cmn	r3, r1
 800d076:	d446      	bmi.n	800d106 <tcp_input+0x742>
 800d078:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d07a:	1acb      	subs	r3, r1, r3
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	dc42      	bgt.n	800d106 <tcp_input+0x742>
          pcb->state = ESTABLISHED;
 800d080:	2304      	movs	r3, #4
 800d082:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800d084:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d086:	b91b      	cbnz	r3, 800d090 <tcp_input+0x6cc>
            tcp_abort(pcb);
 800d088:	4620      	mov	r0, r4
 800d08a:	f7ff f837 	bl	800c0fc <tcp_abort>
            goto aborted;
 800d08e:	e5ca      	b.n	800cc26 <tcp_input+0x262>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800d090:	699b      	ldr	r3, [r3, #24]
 800d092:	b933      	cbnz	r3, 800d0a2 <tcp_input+0x6de>
 800d094:	4b6c      	ldr	r3, [pc, #432]	; (800d248 <tcp_input+0x884>)
 800d096:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800d09a:	4970      	ldr	r1, [pc, #448]	; (800d25c <tcp_input+0x898>)
 800d09c:	486c      	ldr	r0, [pc, #432]	; (800d250 <tcp_input+0x88c>)
 800d09e:	f002 f875 	bl	800f18c <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800d0a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d0ee      	beq.n	800d088 <tcp_input+0x6c4>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	6920      	ldr	r0, [r4, #16]
 800d0b0:	4798      	blx	r3
          if (err != ERR_OK) {
 800d0b2:	b118      	cbz	r0, 800d0bc <tcp_input+0x6f8>
            if (err != ERR_ABRT) {
 800d0b4:	300d      	adds	r0, #13
 800d0b6:	f43f adb6 	beq.w	800cc26 <tcp_input+0x262>
 800d0ba:	e7e5      	b.n	800d088 <tcp_input+0x6c4>
          tcp_receive(pcb);
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f7ff fa51 	bl	800c564 <tcp_receive>
          if (recv_acked != 0) {
 800d0c2:	4a67      	ldr	r2, [pc, #412]	; (800d260 <tcp_input+0x89c>)
 800d0c4:	8a93      	ldrh	r3, [r2, #20]
 800d0c6:	b10b      	cbz	r3, 800d0cc <tcp_input+0x708>
            recv_acked--;
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d0cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d0ce:	0058      	lsls	r0, r3, #1
 800d0d0:	0099      	lsls	r1, r3, #2
 800d0d2:	f241 131c 	movw	r3, #4380	; 0x111c
 800d0d6:	4607      	mov	r7, r0
 800d0d8:	4298      	cmp	r0, r3
 800d0da:	bf38      	it	cc
 800d0dc:	461f      	movcc	r7, r3
 800d0de:	42b9      	cmp	r1, r7
 800d0e0:	d20d      	bcs.n	800d0fe <tcp_input+0x73a>
 800d0e2:	b28b      	uxth	r3, r1
 800d0e4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800d0e8:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d0ea:	0698      	lsls	r0, r3, #26
 800d0ec:	f57f aed3 	bpl.w	800ce96 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800d0f0:	8b63      	ldrh	r3, [r4, #26]
 800d0f2:	f043 0302 	orr.w	r3, r3, #2
 800d0f6:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800d0f8:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800d0fa:	7523      	strb	r3, [r4, #20]
 800d0fc:	e6cb      	b.n	800ce96 <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800d0fe:	4298      	cmp	r0, r3
 800d100:	bf88      	it	hi
 800d102:	b283      	uxthhi	r3, r0
 800d104:	e7ee      	b.n	800d0e4 <tcp_input+0x720>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d106:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d108:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800d10a:	881f      	ldrh	r7, [r3, #0]
 800d10c:	6a2a      	ldr	r2, [r5, #32]
 800d10e:	9702      	str	r7, [sp, #8]
 800d110:	885b      	ldrh	r3, [r3, #2]
 800d112:	4402      	add	r2, r0
 800d114:	4620      	mov	r0, r4
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	4b4f      	ldr	r3, [pc, #316]	; (800d258 <tcp_input+0x894>)
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	3304      	adds	r3, #4
 800d11e:	f000 ffb1 	bl	800e084 <tcp_rst>
 800d122:	e6b8      	b.n	800ce96 <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800d124:	079f      	lsls	r7, r3, #30
 800d126:	f57f aeb6 	bpl.w	800ce96 <tcp_input+0x4d2>
 800d12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d12c:	6a2a      	ldr	r2, [r5, #32]
 800d12e:	3b01      	subs	r3, #1
 800d130:	4293      	cmp	r3, r2
 800d132:	f47f aeb0 	bne.w	800ce96 <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800d136:	4620      	mov	r0, r4
 800d138:	f000 ff2c 	bl	800df94 <tcp_rexmit>
 800d13c:	e6ab      	b.n	800ce96 <tcp_input+0x4d2>
      tcp_receive(pcb);
 800d13e:	4620      	mov	r0, r4
 800d140:	f7ff fa10 	bl	800c564 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800d144:	7cab      	ldrb	r3, [r5, #18]
 800d146:	e7d0      	b.n	800d0ea <tcp_input+0x726>
      tcp_receive(pcb);
 800d148:	4620      	mov	r0, r4
 800d14a:	f7ff fa0b 	bl	800c564 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d14e:	7cab      	ldrb	r3, [r5, #18]
 800d150:	f013 0f20 	tst.w	r3, #32
 800d154:	7f2b      	ldrb	r3, [r5, #28]
 800d156:	d031      	beq.n	800d1bc <tcp_input+0x7f8>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d158:	f013 0f10 	tst.w	r3, #16
 800d15c:	8b63      	ldrh	r3, [r4, #26]
 800d15e:	d028      	beq.n	800d1b2 <tcp_input+0x7ee>
 800d160:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d162:	69aa      	ldr	r2, [r5, #24]
 800d164:	4291      	cmp	r1, r2
 800d166:	d124      	bne.n	800d1b2 <tcp_input+0x7ee>
 800d168:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800d16a:	bb12      	cbnz	r2, 800d1b2 <tcp_input+0x7ee>
          tcp_ack_now(pcb);
 800d16c:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800d170:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800d172:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800d174:	f7fe fae2 	bl	800b73c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800d178:	f8d8 3000 	ldr.w	r3, [r8]
 800d17c:	429c      	cmp	r4, r3
 800d17e:	d10a      	bne.n	800d196 <tcp_input+0x7d2>
        TCP_RMV_ACTIVE(pcb);
 800d180:	68e3      	ldr	r3, [r4, #12]
 800d182:	f8c8 3000 	str.w	r3, [r8]
 800d186:	e008      	b.n	800d19a <tcp_input+0x7d6>
          TCP_RMV_ACTIVE(pcb);
 800d188:	68da      	ldr	r2, [r3, #12]
 800d18a:	4294      	cmp	r4, r2
 800d18c:	d102      	bne.n	800d194 <tcp_input+0x7d0>
        TCP_RMV_ACTIVE(pcb);
 800d18e:	68e2      	ldr	r2, [r4, #12]
 800d190:	60da      	str	r2, [r3, #12]
 800d192:	e002      	b.n	800d19a <tcp_input+0x7d6>
          TCP_RMV_ACTIVE(pcb);
 800d194:	4613      	mov	r3, r2
 800d196:	2b00      	cmp	r3, #0
 800d198:	d1f6      	bne.n	800d188 <tcp_input+0x7c4>
        TCP_RMV_ACTIVE(pcb);
 800d19a:	4b32      	ldr	r3, [pc, #200]	; (800d264 <tcp_input+0x8a0>)
 800d19c:	2201      	movs	r2, #1
 800d19e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800d1a0:	230a      	movs	r3, #10
 800d1a2:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800d1a4:	4b30      	ldr	r3, [pc, #192]	; (800d268 <tcp_input+0x8a4>)
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	601c      	str	r4, [r3, #0]
 800d1aa:	60e2      	str	r2, [r4, #12]
 800d1ac:	f001 fab6 	bl	800e71c <tcp_timer_needed>
 800d1b0:	e671      	b.n	800ce96 <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800d1b2:	f043 0302 	orr.w	r3, r3, #2
 800d1b6:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800d1b8:	2308      	movs	r3, #8
 800d1ba:	e79e      	b.n	800d0fa <tcp_input+0x736>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800d1bc:	06d9      	lsls	r1, r3, #27
 800d1be:	f57f ae6a 	bpl.w	800ce96 <tcp_input+0x4d2>
 800d1c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d1c4:	69ab      	ldr	r3, [r5, #24]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	f47f ae65 	bne.w	800ce96 <tcp_input+0x4d2>
 800d1cc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f47f ae61 	bne.w	800ce96 <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800d1d4:	2306      	movs	r3, #6
 800d1d6:	e790      	b.n	800d0fa <tcp_input+0x736>
      tcp_receive(pcb);
 800d1d8:	4620      	mov	r0, r4
 800d1da:	f7ff f9c3 	bl	800c564 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800d1de:	7cab      	ldrb	r3, [r5, #18]
 800d1e0:	069a      	lsls	r2, r3, #26
 800d1e2:	f57f ae58 	bpl.w	800ce96 <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800d1e6:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800d1e8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800d1ea:	f043 0302 	orr.w	r3, r3, #2
 800d1ee:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800d1f0:	f7fe faa4 	bl	800b73c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d1f4:	f8d8 3000 	ldr.w	r3, [r8]
 800d1f8:	429c      	cmp	r4, r3
 800d1fa:	d0c1      	beq.n	800d180 <tcp_input+0x7bc>
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d0cc      	beq.n	800d19a <tcp_input+0x7d6>
 800d200:	68da      	ldr	r2, [r3, #12]
 800d202:	4294      	cmp	r4, r2
 800d204:	d0c3      	beq.n	800d18e <tcp_input+0x7ca>
 800d206:	4613      	mov	r3, r2
 800d208:	e7f8      	b.n	800d1fc <tcp_input+0x838>
      tcp_receive(pcb);
 800d20a:	4620      	mov	r0, r4
 800d20c:	f7ff f9aa 	bl	800c564 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d210:	7f2b      	ldrb	r3, [r5, #28]
 800d212:	06db      	lsls	r3, r3, #27
 800d214:	f57f ae3f 	bpl.w	800ce96 <tcp_input+0x4d2>
 800d218:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d21a:	69ab      	ldr	r3, [r5, #24]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	f47f ae3a 	bne.w	800ce96 <tcp_input+0x4d2>
 800d222:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d224:	2b00      	cmp	r3, #0
 800d226:	f47f ae36 	bne.w	800ce96 <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800d22a:	4620      	mov	r0, r4
 800d22c:	f7fe fa86 	bl	800b73c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800d230:	f8d8 3000 	ldr.w	r3, [r8]
 800d234:	429c      	cmp	r4, r3
 800d236:	d0a3      	beq.n	800d180 <tcp_input+0x7bc>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d0ae      	beq.n	800d19a <tcp_input+0x7d6>
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	4294      	cmp	r4, r2
 800d240:	d0a5      	beq.n	800d18e <tcp_input+0x7ca>
 800d242:	4613      	mov	r3, r2
 800d244:	e7f8      	b.n	800d238 <tcp_input+0x874>
 800d246:	bf00      	nop
 800d248:	0801ff01 	.word	0x0801ff01
 800d24c:	0802021b 	.word	0x0802021b
 800d250:	0801d8d1 	.word	0x0801d8d1
 800d254:	08020231 	.word	0x08020231
 800d258:	2000a8d4 	.word	0x2000a8d4
 800d25c:	08020244 	.word	0x08020244
 800d260:	20006988 	.word	0x20006988
 800d264:	20010df4 	.word	0x20010df4
 800d268:	20010e08 	.word	0x20010e08
      tcp_receive(pcb);
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7ff f979 	bl	800c564 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d272:	7f2b      	ldrb	r3, [r5, #28]
 800d274:	06df      	lsls	r7, r3, #27
 800d276:	f57f ae0e 	bpl.w	800ce96 <tcp_input+0x4d2>
 800d27a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800d27c:	69ab      	ldr	r3, [r5, #24]
 800d27e:	429a      	cmp	r2, r3
 800d280:	f47f ae09 	bne.w	800ce96 <tcp_input+0x4d2>
 800d284:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d286:	2b00      	cmp	r3, #0
 800d288:	f47f ae05 	bne.w	800ce96 <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800d28c:	7cab      	ldrb	r3, [r5, #18]
 800d28e:	f043 0310 	orr.w	r3, r3, #16
 800d292:	74ab      	strb	r3, [r5, #18]
 800d294:	e5ff      	b.n	800ce96 <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800d296:	8aaa      	ldrh	r2, [r5, #20]
 800d298:	b11a      	cbz	r2, 800d2a2 <tcp_input+0x8de>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d29a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800d29c:	b9db      	cbnz	r3, 800d2d6 <tcp_input+0x912>
          recv_acked = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f7ff f8da 	bl	800c45c <tcp_input_delayed_close>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	f47f acbc 	bne.w	800cc26 <tcp_input+0x262>
        if (recv_data != NULL) {
 800d2ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d2b0:	b323      	cbz	r3, 800d2fc <tcp_input+0x938>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d2b2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d2b4:	b133      	cbz	r3, 800d2c4 <tcp_input+0x900>
 800d2b6:	4b39      	ldr	r3, [pc, #228]	; (800d39c <tcp_input+0x9d8>)
 800d2b8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d2bc:	4938      	ldr	r1, [pc, #224]	; (800d3a0 <tcp_input+0x9dc>)
 800d2be:	4839      	ldr	r0, [pc, #228]	; (800d3a4 <tcp_input+0x9e0>)
 800d2c0:	f001 ff64 	bl	800f18c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d2c4:	8b63      	ldrh	r3, [r4, #26]
 800d2c6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800d2c8:	f013 0310 	ands.w	r3, r3, #16
 800d2cc:	d009      	beq.n	800d2e2 <tcp_input+0x91e>
            pbuf_free(recv_data);
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	f7fd fd76 	bl	800adc0 <pbuf_free>
 800d2d4:	e6d8      	b.n	800d088 <tcp_input+0x6c4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	6920      	ldr	r0, [r4, #16]
 800d2da:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800d2dc:	300d      	adds	r0, #13
 800d2de:	d1de      	bne.n	800d29e <tcp_input+0x8da>
 800d2e0:	e4a1      	b.n	800cc26 <tcp_input+0x262>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d2e2:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800d2e6:	b1f7      	cbz	r7, 800d326 <tcp_input+0x962>
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	6920      	ldr	r0, [r4, #16]
 800d2ec:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800d2ee:	f110 0f0d 	cmn.w	r0, #13
 800d2f2:	f43f ac98 	beq.w	800cc26 <tcp_input+0x262>
          if (err != ERR_OK) {
 800d2f6:	b108      	cbz	r0, 800d2fc <tcp_input+0x938>
            pcb->refused_data = recv_data;
 800d2f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d2fa:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800d2fc:	7cab      	ldrb	r3, [r5, #18]
 800d2fe:	0699      	lsls	r1, r3, #26
 800d300:	d505      	bpl.n	800d30e <tcp_input+0x94a>
          if (pcb->refused_data != NULL) {
 800d302:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800d304:	b1ab      	cbz	r3, 800d332 <tcp_input+0x96e>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d306:	7b5a      	ldrb	r2, [r3, #13]
 800d308:	f042 0220 	orr.w	r2, r2, #32
 800d30c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800d30e:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800d310:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800d312:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d314:	f7ff f8a2 	bl	800c45c <tcp_input_delayed_close>
 800d318:	2800      	cmp	r0, #0
 800d31a:	f47f ac84 	bne.w	800cc26 <tcp_input+0x262>
        tcp_output(pcb);
 800d31e:	4620      	mov	r0, r4
 800d320:	f000 ff26 	bl	800e170 <tcp_output>
 800d324:	e47f      	b.n	800cc26 <tcp_input+0x262>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d326:	463b      	mov	r3, r7
 800d328:	4621      	mov	r1, r4
 800d32a:	4638      	mov	r0, r7
 800d32c:	f7fe fd76 	bl	800be1c <tcp_recv_null>
 800d330:	e7dd      	b.n	800d2ee <tcp_input+0x92a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d332:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800d334:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800d338:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d33c:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800d33e:	bf1c      	itt	ne
 800d340:	3301      	addne	r3, #1
 800d342:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800d344:	2f00      	cmp	r7, #0
 800d346:	d0e2      	beq.n	800d30e <tcp_input+0x94a>
 800d348:	2300      	movs	r3, #0
 800d34a:	4621      	mov	r1, r4
 800d34c:	6920      	ldr	r0, [r4, #16]
 800d34e:	461a      	mov	r2, r3
 800d350:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800d352:	300d      	adds	r0, #13
 800d354:	d1db      	bne.n	800d30e <tcp_input+0x94a>
aborted:
 800d356:	e466      	b.n	800cc26 <tcp_input+0x262>
      if (prev != NULL) {
 800d358:	b134      	cbz	r4, 800d368 <tcp_input+0x9a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d35a:	f8d9 300c 	ldr.w	r3, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d35e:	f8c2 9000 	str.w	r9, [r2]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d362:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d364:	f8c9 000c 	str.w	r0, [r9, #12]
  if (flags & TCP_RST) {
 800d368:	7f2b      	ldrb	r3, [r5, #28]
 800d36a:	0758      	lsls	r0, r3, #29
 800d36c:	f53f abd9 	bmi.w	800cb22 <tcp_input+0x15e>
  if (flags & TCP_ACK) {
 800d370:	f013 0a10 	ands.w	sl, r3, #16
 800d374:	f43f ad14 	beq.w	800cda0 <tcp_input+0x3dc>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d378:	880b      	ldrh	r3, [r1, #0]
 800d37a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800d37c:	6a2a      	ldr	r2, [r5, #32]
 800d37e:	e9cd c301 	strd	ip, r3, [sp, #4]
 800d382:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <tcp_input+0x9e4>)
 800d384:	4402      	add	r2, r0
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	3304      	adds	r3, #4
 800d38a:	69a9      	ldr	r1, [r5, #24]
 800d38c:	4648      	mov	r0, r9
 800d38e:	e4b8      	b.n	800cd02 <tcp_input+0x33e>
      if (prev != NULL) {
 800d390:	f1b9 0f00 	cmp.w	r9, #0
 800d394:	f47f ac0d 	bne.w	800cbb2 <tcp_input+0x1ee>
 800d398:	e41d      	b.n	800cbd6 <tcp_input+0x212>
 800d39a:	bf00      	nop
 800d39c:	0801ff01 	.word	0x0801ff01
 800d3a0:	08020262 	.word	0x08020262
 800d3a4:	0801d8d1 	.word	0x0801d8d1
 800d3a8:	2000a8d4 	.word	0x2000a8d4

0800d3ac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800d3ac:	4a02      	ldr	r2, [pc, #8]	; (800d3b8 <tcp_trigger_input_pcb_close+0xc>)
 800d3ae:	7c93      	ldrb	r3, [r2, #18]
 800d3b0:	f043 0310 	orr.w	r3, r3, #16
 800d3b4:	7493      	strb	r3, [r2, #18]
}
 800d3b6:	4770      	bx	lr
 800d3b8:	20006988 	.word	0x20006988

0800d3bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d3bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d3be:	4604      	mov	r4, r0
 800d3c0:	b930      	cbnz	r0, 800d3d0 <tcp_output_segment_busy+0x14>
 800d3c2:	4b07      	ldr	r3, [pc, #28]	; (800d3e0 <tcp_output_segment_busy+0x24>)
 800d3c4:	f240 529a 	movw	r2, #1434	; 0x59a
 800d3c8:	4906      	ldr	r1, [pc, #24]	; (800d3e4 <tcp_output_segment_busy+0x28>)
 800d3ca:	4807      	ldr	r0, [pc, #28]	; (800d3e8 <tcp_output_segment_busy+0x2c>)
 800d3cc:	f001 fede 	bl	800f18c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d3d0:	6863      	ldr	r3, [r4, #4]
 800d3d2:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800d3d4:	f110 30ff 	adds.w	r0, r0, #4294967295
 800d3d8:	bf18      	it	ne
 800d3da:	2001      	movne	r0, #1
 800d3dc:	bd10      	pop	{r4, pc}
 800d3de:	bf00      	nop
 800d3e0:	0802027c 	.word	0x0802027c
 800d3e4:	080202ec 	.word	0x080202ec
 800d3e8:	0801d8d1 	.word	0x0801d8d1

0800d3ec <tcp_pbuf_prealloc>:
{
 800d3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f0:	9d08      	ldr	r5, [sp, #32]
 800d3f2:	4607      	mov	r7, r0
 800d3f4:	460c      	mov	r4, r1
 800d3f6:	4690      	mov	r8, r2
 800d3f8:	461e      	mov	r6, r3
 800d3fa:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d3fe:	b92d      	cbnz	r5, 800d40c <tcp_pbuf_prealloc+0x20>
 800d400:	4b1b      	ldr	r3, [pc, #108]	; (800d470 <tcp_pbuf_prealloc+0x84>)
 800d402:	22e9      	movs	r2, #233	; 0xe9
 800d404:	491b      	ldr	r1, [pc, #108]	; (800d474 <tcp_pbuf_prealloc+0x88>)
 800d406:	481c      	ldr	r0, [pc, #112]	; (800d478 <tcp_pbuf_prealloc+0x8c>)
 800d408:	f001 fec0 	bl	800f18c <iprintf>
  if (length < max_length) {
 800d40c:	4544      	cmp	r4, r8
 800d40e:	d22d      	bcs.n	800d46c <tcp_pbuf_prealloc+0x80>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d410:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800d414:	079a      	lsls	r2, r3, #30
 800d416:	d409      	bmi.n	800d42c <tcp_pbuf_prealloc+0x40>
 800d418:	8b6b      	ldrh	r3, [r5, #26]
 800d41a:	065b      	lsls	r3, r3, #25
 800d41c:	d426      	bmi.n	800d46c <tcp_pbuf_prealloc+0x80>
        (!(pcb->flags & TF_NODELAY) &&
 800d41e:	f1b9 0f00 	cmp.w	r9, #0
 800d422:	d003      	beq.n	800d42c <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800d424:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800d426:	b90b      	cbnz	r3, 800d42c <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800d428:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800d42a:	b1fb      	cbz	r3, 800d46c <tcp_pbuf_prealloc+0x80>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d42c:	f204 51b7 	addw	r1, r4, #1463	; 0x5b7
 800d430:	f021 0103 	bic.w	r1, r1, #3
 800d434:	4541      	cmp	r1, r8
 800d436:	bf28      	it	cs
 800d438:	4641      	movcs	r1, r8
 800d43a:	b289      	uxth	r1, r1
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d43c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d440:	4638      	mov	r0, r7
 800d442:	f7fd fd25 	bl	800ae90 <pbuf_alloc>
  if (p == NULL) {
 800d446:	4605      	mov	r5, r0
 800d448:	b168      	cbz	r0, 800d466 <tcp_pbuf_prealloc+0x7a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d44a:	6803      	ldr	r3, [r0, #0]
 800d44c:	b133      	cbz	r3, 800d45c <tcp_pbuf_prealloc+0x70>
 800d44e:	4b08      	ldr	r3, [pc, #32]	; (800d470 <tcp_pbuf_prealloc+0x84>)
 800d450:	f240 120b 	movw	r2, #267	; 0x10b
 800d454:	4909      	ldr	r1, [pc, #36]	; (800d47c <tcp_pbuf_prealloc+0x90>)
 800d456:	4808      	ldr	r0, [pc, #32]	; (800d478 <tcp_pbuf_prealloc+0x8c>)
 800d458:	f001 fe98 	bl	800f18c <iprintf>
  *oversize = p->len - length;
 800d45c:	896b      	ldrh	r3, [r5, #10]
 800d45e:	1b1b      	subs	r3, r3, r4
 800d460:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800d462:	812c      	strh	r4, [r5, #8]
 800d464:	816c      	strh	r4, [r5, #10]
}
 800d466:	4628      	mov	r0, r5
 800d468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46c:	4621      	mov	r1, r4
 800d46e:	e7e5      	b.n	800d43c <tcp_pbuf_prealloc+0x50>
 800d470:	0802027c 	.word	0x0802027c
 800d474:	08020311 	.word	0x08020311
 800d478:	0801d8d1 	.word	0x0801d8d1
 800d47c:	08020330 	.word	0x08020330

0800d480 <tcp_create_segment>:
{
 800d480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d484:	460e      	mov	r6, r1
 800d486:	4690      	mov	r8, r2
 800d488:	4699      	mov	r9, r3
 800d48a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d48e:	4607      	mov	r7, r0
 800d490:	b928      	cbnz	r0, 800d49e <tcp_create_segment+0x1e>
 800d492:	4b2e      	ldr	r3, [pc, #184]	; (800d54c <tcp_create_segment+0xcc>)
 800d494:	22a3      	movs	r2, #163	; 0xa3
 800d496:	492e      	ldr	r1, [pc, #184]	; (800d550 <tcp_create_segment+0xd0>)
 800d498:	482e      	ldr	r0, [pc, #184]	; (800d554 <tcp_create_segment+0xd4>)
 800d49a:	f001 fe77 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d49e:	b92e      	cbnz	r6, 800d4ac <tcp_create_segment+0x2c>
 800d4a0:	4b2a      	ldr	r3, [pc, #168]	; (800d54c <tcp_create_segment+0xcc>)
 800d4a2:	22a4      	movs	r2, #164	; 0xa4
 800d4a4:	492c      	ldr	r1, [pc, #176]	; (800d558 <tcp_create_segment+0xd8>)
 800d4a6:	482b      	ldr	r0, [pc, #172]	; (800d554 <tcp_create_segment+0xd4>)
 800d4a8:	f001 fe70 	bl	800f18c <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d4ac:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d4b0:	2003      	movs	r0, #3
 800d4b2:	f7fd fa3f 	bl	800a934 <memp_malloc>
 800d4b6:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d4b8:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d4bc:	b928      	cbnz	r0, 800d4ca <tcp_create_segment+0x4a>
    pbuf_free(p);
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f7fd fc7e 	bl	800adc0 <pbuf_free>
}
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800d4ca:	2300      	movs	r3, #0
  seg->flags = optflags;
 800d4cc:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d4d0:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800d4d4:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d4d8:	8933      	ldrh	r3, [r6, #8]
 800d4da:	4553      	cmp	r3, sl
 800d4dc:	d205      	bcs.n	800d4ea <tcp_create_segment+0x6a>
 800d4de:	4b1b      	ldr	r3, [pc, #108]	; (800d54c <tcp_create_segment+0xcc>)
 800d4e0:	22b0      	movs	r2, #176	; 0xb0
 800d4e2:	491e      	ldr	r1, [pc, #120]	; (800d55c <tcp_create_segment+0xdc>)
 800d4e4:	481b      	ldr	r0, [pc, #108]	; (800d554 <tcp_create_segment+0xd4>)
 800d4e6:	f001 fe51 	bl	800f18c <iprintf>
  seg->len = p->tot_len - optlen;
 800d4ea:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800d4f0:	eba3 030a 	sub.w	r3, r3, sl
 800d4f4:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d4f6:	f7fd fc2c 	bl	800ad52 <pbuf_add_header>
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	b120      	cbz	r0, 800d508 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800d4fe:	4620      	mov	r0, r4
    return NULL;
 800d500:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800d502:	f7fe f891 	bl	800b628 <tcp_seg_free>
    return NULL;
 800d506:	e7dd      	b.n	800d4c4 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d508:	6863      	ldr	r3, [r4, #4]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d50a:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d50c:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800d510:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d514:	f7fc fef0 	bl	800a2f8 <lwip_htons>
 800d518:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d51c:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800d520:	8b38      	ldrh	r0, [r7, #24]
 800d522:	f7fc fee9 	bl	800a2f8 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d526:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d528:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d52c:	4648      	mov	r0, r9
 800d52e:	f7fc fee6 	bl	800a2fe <lwip_htonl>
 800d532:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d534:	08a8      	lsrs	r0, r5, #2
 800d536:	68e7      	ldr	r7, [r4, #12]
 800d538:	3005      	adds	r0, #5
 800d53a:	ea48 3000 	orr.w	r0, r8, r0, lsl #12
 800d53e:	f7fc fedb 	bl	800a2f8 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800d542:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d544:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800d546:	749e      	strb	r6, [r3, #18]
 800d548:	74de      	strb	r6, [r3, #19]
  return seg;
 800d54a:	e7bb      	b.n	800d4c4 <tcp_create_segment+0x44>
 800d54c:	0802027c 	.word	0x0802027c
 800d550:	08020344 	.word	0x08020344
 800d554:	0801d8d1 	.word	0x0801d8d1
 800d558:	08020364 	.word	0x08020364
 800d55c:	08020385 	.word	0x08020385

0800d560 <tcp_output_alloc_header_common.constprop.4>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d560:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d566:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d568:	4606      	mov	r6, r0
 800d56a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d56c:	2022      	movs	r0, #34	; 0x22
 800d56e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800d572:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d574:	f7fd fc8c 	bl	800ae90 <pbuf_alloc>
  if (p != NULL) {
 800d578:	4605      	mov	r5, r0
 800d57a:	b348      	cbz	r0, 800d5d0 <tcp_output_alloc_header_common.constprop.4+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d57c:	8943      	ldrh	r3, [r0, #10]
 800d57e:	2b13      	cmp	r3, #19
 800d580:	d806      	bhi.n	800d590 <tcp_output_alloc_header_common.constprop.4+0x30>
 800d582:	4b15      	ldr	r3, [pc, #84]	; (800d5d8 <tcp_output_alloc_header_common.constprop.4+0x78>)
 800d584:	f240 7224 	movw	r2, #1828	; 0x724
 800d588:	4914      	ldr	r1, [pc, #80]	; (800d5dc <tcp_output_alloc_header_common.constprop.4+0x7c>)
 800d58a:	4815      	ldr	r0, [pc, #84]	; (800d5e0 <tcp_output_alloc_header_common.constprop.4+0x80>)
 800d58c:	f001 fdfe 	bl	800f18c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d590:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800d592:	4640      	mov	r0, r8
 800d594:	f7fc feb0 	bl	800a2f8 <lwip_htons>
 800d598:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d59a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800d59e:	f7fc feab 	bl	800a2f8 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800d5a2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800d5a4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	f7fc fea9 	bl	800a2fe <lwip_htonl>
 800d5ac:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d5ae:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800d5b2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800d5b6:	f7fc fe9f 	bl	800a2f8 <lwip_htons>
 800d5ba:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d5bc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800d5c0:	f7fc fe9a 	bl	800a2f8 <lwip_htons>
    tcphdr->chksum = 0;
 800d5c4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800d5c6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800d5c8:	7423      	strb	r3, [r4, #16]
 800d5ca:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800d5cc:	74a3      	strb	r3, [r4, #18]
 800d5ce:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d6:	bf00      	nop
 800d5d8:	0802027c 	.word	0x0802027c
 800d5dc:	0802039a 	.word	0x0802039a
 800d5e0:	0801d8d1 	.word	0x0801d8d1

0800d5e4 <tcp_output_alloc_header.constprop.3>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800d5e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800d5e6:	460d      	mov	r5, r1
 800d5e8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	b930      	cbnz	r0, 800d5fc <tcp_output_alloc_header.constprop.3+0x18>
 800d5ee:	4b0d      	ldr	r3, [pc, #52]	; (800d624 <tcp_output_alloc_header.constprop.3+0x40>)
 800d5f0:	f240 7242 	movw	r2, #1858	; 0x742
 800d5f4:	490c      	ldr	r1, [pc, #48]	; (800d628 <tcp_output_alloc_header.constprop.3+0x44>)
 800d5f6:	480d      	ldr	r0, [pc, #52]	; (800d62c <tcp_output_alloc_header.constprop.3+0x48>)
 800d5f8:	f001 fdc8 	bl	800f18c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d5fc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d5fe:	4629      	mov	r1, r5
 800d600:	8ae3      	ldrh	r3, [r4, #22]
 800d602:	9202      	str	r2, [sp, #8]
 800d604:	2210      	movs	r2, #16
 800d606:	9201      	str	r2, [sp, #4]
 800d608:	8b22      	ldrh	r2, [r4, #24]
 800d60a:	9200      	str	r2, [sp, #0]
 800d60c:	4632      	mov	r2, r6
 800d60e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d610:	f7ff ffa6 	bl	800d560 <tcp_output_alloc_header_common.constprop.4>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d614:	b118      	cbz	r0, 800d61e <tcp_output_alloc_header.constprop.3+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d616:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800d618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d61a:	4413      	add	r3, r2
 800d61c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800d61e:	b004      	add	sp, #16
 800d620:	bd70      	pop	{r4, r5, r6, pc}
 800d622:	bf00      	nop
 800d624:	0802027c 	.word	0x0802027c
 800d628:	080203c8 	.word	0x080203c8
 800d62c:	0801d8d1 	.word	0x0801d8d1

0800d630 <tcp_output_fill_options.isra.0.constprop.5>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d630:	b930      	cbnz	r0, 800d640 <tcp_output_fill_options.isra.0.constprop.5+0x10>
 800d632:	4b04      	ldr	r3, [pc, #16]	; (800d644 <tcp_output_fill_options.isra.0.constprop.5+0x14>)
 800d634:	f240 7256 	movw	r2, #1878	; 0x756
 800d638:	4903      	ldr	r1, [pc, #12]	; (800d648 <tcp_output_fill_options.isra.0.constprop.5+0x18>)
 800d63a:	4804      	ldr	r0, [pc, #16]	; (800d64c <tcp_output_fill_options.isra.0.constprop.5+0x1c>)
 800d63c:	f001 bda6 	b.w	800f18c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	0802027c 	.word	0x0802027c
 800d648:	080203ed 	.word	0x080203ed
 800d64c:	0801d8d1 	.word	0x0801d8d1

0800d650 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d652:	4604      	mov	r4, r0
 800d654:	b085      	sub	sp, #20
 800d656:	4617      	mov	r7, r2
 800d658:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d65a:	460d      	mov	r5, r1
 800d65c:	b931      	cbnz	r1, 800d66c <tcp_output_control_segment+0x1c>
 800d65e:	4b15      	ldr	r3, [pc, #84]	; (800d6b4 <tcp_output_control_segment+0x64>)
 800d660:	f240 7287 	movw	r2, #1927	; 0x787
 800d664:	4914      	ldr	r1, [pc, #80]	; (800d6b8 <tcp_output_control_segment+0x68>)
 800d666:	4815      	ldr	r0, [pc, #84]	; (800d6bc <tcp_output_control_segment+0x6c>)
 800d668:	f001 fd90 	bl	800f18c <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d66c:	b164      	cbz	r4, 800d688 <tcp_output_control_segment+0x38>
 800d66e:	7a20      	ldrb	r0, [r4, #8]
 800d670:	b150      	cbz	r0, 800d688 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800d672:	f7fd faed 	bl	800ac50 <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800d676:	b968      	cbnz	r0, 800d694 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800d678:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d67c:	4628      	mov	r0, r5
 800d67e:	f7fd fb9f 	bl	800adc0 <pbuf_free>
  return err;
}
 800d682:	4620      	mov	r0, r4
 800d684:	b005      	add	sp, #20
 800d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800d688:	4630      	mov	r0, r6
 800d68a:	f7fc f891 	bl	80097b0 <ip4_route>
  if (netif == NULL) {
 800d68e:	2800      	cmp	r0, #0
 800d690:	d0f2      	beq.n	800d678 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800d692:	b164      	cbz	r4, 800d6ae <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800d694:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800d696:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d698:	2206      	movs	r2, #6
 800d69a:	9002      	str	r0, [sp, #8]
 800d69c:	4639      	mov	r1, r7
 800d69e:	4628      	mov	r0, r5
 800d6a0:	e9cd 4200 	strd	r4, r2, [sp]
 800d6a4:	4632      	mov	r2, r6
 800d6a6:	f7fc f9f1 	bl	8009a8c <ip4_output_if>
 800d6aa:	4604      	mov	r4, r0
 800d6ac:	e7e6      	b.n	800d67c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800d6ae:	23ff      	movs	r3, #255	; 0xff
 800d6b0:	e7f2      	b.n	800d698 <tcp_output_control_segment+0x48>
 800d6b2:	bf00      	nop
 800d6b4:	0802027c 	.word	0x0802027c
 800d6b8:	08020413 	.word	0x08020413
 800d6bc:	0801d8d1 	.word	0x0801d8d1

0800d6c0 <tcp_write>:
{
 800d6c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c4:	b091      	sub	sp, #68	; 0x44
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6c6:	4604      	mov	r4, r0
{
 800d6c8:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800d6ca:	2300      	movs	r3, #0
{
 800d6cc:	9108      	str	r1, [sp, #32]
 800d6ce:	9205      	str	r2, [sp, #20]
  u16_t oversize = 0;
 800d6d0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6d4:	b958      	cbnz	r0, 800d6ee <tcp_write+0x2e>
 800d6d6:	4baf      	ldr	r3, [pc, #700]	; (800d994 <tcp_write+0x2d4>)
 800d6d8:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800d6dc:	49ae      	ldr	r1, [pc, #696]	; (800d998 <tcp_write+0x2d8>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d6de:	48af      	ldr	r0, [pc, #700]	; (800d99c <tcp_write+0x2dc>)
 800d6e0:	f001 fd54 	bl	800f18c <iprintf>
 800d6e4:	f06f 000f 	mvn.w	r0, #15
}
 800d6e8:	b011      	add	sp, #68	; 0x44
 800d6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d6ee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800d6f0:	9307      	str	r3, [sp, #28]
 800d6f2:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800d6f6:	9a07      	ldr	r2, [sp, #28]
 800d6f8:	085b      	lsrs	r3, r3, #1
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	bf28      	it	cs
 800d6fe:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800d700:	2b00      	cmp	r3, #0
 800d702:	bf18      	it	ne
 800d704:	461a      	movne	r2, r3
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d706:	9b08      	ldr	r3, [sp, #32]
  mss_local = mss_local ? mss_local : pcb->mss;
 800d708:	9207      	str	r2, [sp, #28]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d70a:	b923      	cbnz	r3, 800d716 <tcp_write+0x56>
 800d70c:	4ba1      	ldr	r3, [pc, #644]	; (800d994 <tcp_write+0x2d4>)
 800d70e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800d712:	49a3      	ldr	r1, [pc, #652]	; (800d9a0 <tcp_write+0x2e0>)
 800d714:	e7e3      	b.n	800d6de <tcp_write+0x1e>
  if ((pcb->state != ESTABLISHED) &&
 800d716:	7d03      	ldrb	r3, [r0, #20]
 800d718:	2b07      	cmp	r3, #7
 800d71a:	d003      	beq.n	800d724 <tcp_write+0x64>
      (pcb->state != CLOSE_WAIT) &&
 800d71c:	3b02      	subs	r3, #2
 800d71e:	2b02      	cmp	r3, #2
 800d720:	f200 8250 	bhi.w	800dbc4 <tcp_write+0x504>
  } else if (len == 0) {
 800d724:	9b05      	ldr	r3, [sp, #20]
 800d726:	b1eb      	cbz	r3, 800d764 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800d728:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800d72c:	9a05      	ldr	r2, [sp, #20]
 800d72e:	4293      	cmp	r3, r2
 800d730:	d206      	bcs.n	800d740 <tcp_write+0x80>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d732:	8b63      	ldrh	r3, [r4, #26]
 800d734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d738:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800d73a:	f04f 30ff 	mov.w	r0, #4294967295
 800d73e:	e7d3      	b.n	800d6e8 <tcp_write+0x28>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d740:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800d744:	2a07      	cmp	r2, #7
 800d746:	d8f4      	bhi.n	800d732 <tcp_write+0x72>
 800d748:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 800d74a:	2a00      	cmp	r2, #0
 800d74c:	f000 809f 	beq.w	800d88e <tcp_write+0x1ce>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d750:	b943      	cbnz	r3, 800d764 <tcp_write+0xa4>
 800d752:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d754:	b933      	cbnz	r3, 800d764 <tcp_write+0xa4>
 800d756:	4b8f      	ldr	r3, [pc, #572]	; (800d994 <tcp_write+0x2d4>)
 800d758:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800d75c:	4991      	ldr	r1, [pc, #580]	; (800d9a4 <tcp_write+0x2e4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d75e:	488f      	ldr	r0, [pc, #572]	; (800d99c <tcp_write+0x2dc>)
 800d760:	f001 fd14 	bl	800f18c <iprintf>
  queuelen = pcb->snd_queuelen;
 800d764:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800d768:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800d76c:	9306      	str	r3, [sp, #24]
  if (pcb->unsent != NULL) {
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	f000 80c3 	beq.w	800d8fc <tcp_write+0x23c>
 800d776:	4646      	mov	r6, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d778:	f8d6 b000 	ldr.w	fp, [r6]
 800d77c:	f1bb 0f00 	cmp.w	fp, #0
 800d780:	f040 808f 	bne.w	800d8a2 <tcp_write+0x1e2>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d784:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d786:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d788:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d78a:	9a07      	ldr	r2, [sp, #28]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d78c:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d790:	442b      	add	r3, r5
 800d792:	429a      	cmp	r2, r3
 800d794:	da06      	bge.n	800d7a4 <tcp_write+0xe4>
 800d796:	4b7f      	ldr	r3, [pc, #508]	; (800d994 <tcp_write+0x2d4>)
 800d798:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d79c:	4982      	ldr	r1, [pc, #520]	; (800d9a8 <tcp_write+0x2e8>)
 800d79e:	487f      	ldr	r0, [pc, #508]	; (800d99c <tcp_write+0x2dc>)
 800d7a0:	f001 fcf4 	bl	800f18c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d7a4:	8937      	ldrh	r7, [r6, #8]
 800d7a6:	9b07      	ldr	r3, [sp, #28]
 800d7a8:	1bdf      	subs	r7, r3, r7
 800d7aa:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800d7ac:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d7b0:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800d7b2:	f8ad 503e 	strh.w	r5, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800d7b6:	2d00      	cmp	r5, #0
 800d7b8:	d075      	beq.n	800d8a6 <tcp_write+0x1e6>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d7ba:	42bd      	cmp	r5, r7
 800d7bc:	d906      	bls.n	800d7cc <tcp_write+0x10c>
 800d7be:	4b75      	ldr	r3, [pc, #468]	; (800d994 <tcp_write+0x2d4>)
 800d7c0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800d7c4:	4979      	ldr	r1, [pc, #484]	; (800d9ac <tcp_write+0x2ec>)
 800d7c6:	4875      	ldr	r0, [pc, #468]	; (800d99c <tcp_write+0x2dc>)
 800d7c8:	f001 fce0 	bl	800f18c <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d7cc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800d7d0:	46b0      	mov	r8, r6
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d7d2:	9a05      	ldr	r2, [sp, #20]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	bf28      	it	cs
 800d7d8:	461a      	movcs	r2, r3
 800d7da:	42ba      	cmp	r2, r7
 800d7dc:	4615      	mov	r5, r2
 800d7de:	bfa8      	it	ge
 800d7e0:	463d      	movge	r5, r7
      space -= oversize_used;
 800d7e2:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800d7e4:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800d7e6:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800d7e8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d7ec:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d7f0:	b153      	cbz	r3, 800d808 <tcp_write+0x148>
 800d7f2:	9b05      	ldr	r3, [sp, #20]
 800d7f4:	429d      	cmp	r5, r3
 800d7f6:	f000 81e8 	beq.w	800dbca <tcp_write+0x50a>
 800d7fa:	4b66      	ldr	r3, [pc, #408]	; (800d994 <tcp_write+0x2d4>)
 800d7fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d800:	496b      	ldr	r1, [pc, #428]	; (800d9b0 <tcp_write+0x2f0>)
 800d802:	4866      	ldr	r0, [pc, #408]	; (800d99c <tcp_write+0x2dc>)
 800d804:	f001 fcc2 	bl	800f18c <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d808:	9b05      	ldr	r3, [sp, #20]
 800d80a:	429d      	cmp	r5, r3
 800d80c:	f080 81dd 	bcs.w	800dbca <tcp_write+0x50a>
 800d810:	2f00      	cmp	r7, #0
 800d812:	f000 8166 	beq.w	800dae2 <tcp_write+0x422>
 800d816:	f8b6 a008 	ldrh.w	sl, [r6, #8]
 800d81a:	f1ba 0f00 	cmp.w	sl, #0
 800d81e:	f000 8161 	beq.w	800dae4 <tcp_write+0x424>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d822:	eba3 0a05 	sub.w	sl, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d828:	45ba      	cmp	sl, r7
 800d82a:	bfa8      	it	ge
 800d82c:	46ba      	movge	sl, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d82e:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d830:	fa1f f88a 	uxth.w	r8, sl
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d834:	d539      	bpl.n	800d8aa <tcp_write+0x1ea>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d836:	2301      	movs	r3, #1
 800d838:	463a      	mov	r2, r7
 800d83a:	4641      	mov	r1, r8
 800d83c:	2000      	movs	r0, #0
 800d83e:	9302      	str	r3, [sp, #8]
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	e9cd 4300 	strd	r4, r3, [sp]
 800d846:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800d84a:	f7ff fdcf 	bl	800d3ec <tcp_pbuf_prealloc>
 800d84e:	4681      	mov	r9, r0
 800d850:	2800      	cmp	r0, #0
 800d852:	f000 81b4 	beq.w	800dbbe <tcp_write+0x4fe>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d856:	9b08      	ldr	r3, [sp, #32]
 800d858:	4642      	mov	r2, r8
 800d85a:	6840      	ldr	r0, [r0, #4]
 800d85c:	1959      	adds	r1, r3, r5
 800d85e:	f001 fc68 	bl	800f132 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800d862:	4648      	mov	r0, r9
          queuelen += pbuf_clen(concat_p);
 800d864:	f7fd fbea 	bl	800b03c <pbuf_clen>
 800d868:	9b06      	ldr	r3, [sp, #24]
  u16_t extendlen = 0;
 800d86a:	f04f 0a00 	mov.w	sl, #0
          queuelen += pbuf_clen(concat_p);
 800d86e:	4403      	add	r3, r0
 800d870:	b29b      	uxth	r3, r3
 800d872:	9306      	str	r3, [sp, #24]
      pos += seglen;
 800d874:	eb05 0708 	add.w	r7, r5, r8
 800d878:	46b0      	mov	r8, r6
 800d87a:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      pos += seglen;
 800d87e:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d882:	f003 0301 	and.w	r3, r3, #1
      pos += seglen;
 800d886:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d88a:	930c      	str	r3, [sp, #48]	; 0x30
 800d88c:	e102      	b.n	800da94 <tcp_write+0x3d4>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d88e:	b91b      	cbnz	r3, 800d898 <tcp_write+0x1d8>
 800d890:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800d892:	2b00      	cmp	r3, #0
 800d894:	f43f af66 	beq.w	800d764 <tcp_write+0xa4>
 800d898:	4b3e      	ldr	r3, [pc, #248]	; (800d994 <tcp_write+0x2d4>)
 800d89a:	f240 1259 	movw	r2, #345	; 0x159
 800d89e:	4945      	ldr	r1, [pc, #276]	; (800d9b4 <tcp_write+0x2f4>)
 800d8a0:	e75d      	b.n	800d75e <tcp_write+0x9e>
 800d8a2:	465e      	mov	r6, fp
 800d8a4:	e768      	b.n	800d778 <tcp_write+0xb8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d8a6:	46a8      	mov	r8, r5
 800d8a8:	e7a0      	b.n	800d7ec <tcp_write+0x12c>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d8aa:	6873      	ldr	r3, [r6, #4]
 800d8ac:	f8d3 9000 	ldr.w	r9, [r3]
 800d8b0:	f1b9 0f00 	cmp.w	r9, #0
 800d8b4:	d113      	bne.n	800d8de <tcp_write+0x21e>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8b6:	7b1a      	ldrb	r2, [r3, #12]
 800d8b8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800d8bc:	d111      	bne.n	800d8e2 <tcp_write+0x222>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d8be:	895a      	ldrh	r2, [r3, #10]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d8c4:	9a08      	ldr	r2, [sp, #32]
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d10b      	bne.n	800d8e2 <tcp_write+0x222>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d8ca:	b135      	cbz	r5, 800d8da <tcp_write+0x21a>
 800d8cc:	4b31      	ldr	r3, [pc, #196]	; (800d994 <tcp_write+0x2d4>)
 800d8ce:	f240 2231 	movw	r2, #561	; 0x231
 800d8d2:	4939      	ldr	r1, [pc, #228]	; (800d9b8 <tcp_write+0x2f8>)
 800d8d4:	4831      	ldr	r0, [pc, #196]	; (800d99c <tcp_write+0x2dc>)
 800d8d6:	f001 fc59 	bl	800f18c <iprintf>
          extendlen = seglen;
 800d8da:	46c2      	mov	sl, r8
 800d8dc:	e7ca      	b.n	800d874 <tcp_write+0x1b4>
 800d8de:	464b      	mov	r3, r9
 800d8e0:	e7e4      	b.n	800d8ac <tcp_write+0x1ec>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	4641      	mov	r1, r8
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f7fd fad2 	bl	800ae90 <pbuf_alloc>
 800d8ec:	4681      	mov	r9, r0
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f000 8165 	beq.w	800dbbe <tcp_write+0x4fe>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d8f4:	9b08      	ldr	r3, [sp, #32]
 800d8f6:	442b      	add	r3, r5
 800d8f8:	6043      	str	r3, [r0, #4]
 800d8fa:	e7b3      	b.n	800d864 <tcp_write+0x1a4>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d8fc:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800d900:	2f00      	cmp	r7, #0
 800d902:	f000 80f2 	beq.w	800daea <tcp_write+0x42a>
 800d906:	4b23      	ldr	r3, [pc, #140]	; (800d994 <tcp_write+0x2d4>)
 800d908:	f240 224b 	movw	r2, #587	; 0x24b
 800d90c:	492b      	ldr	r1, [pc, #172]	; (800d9bc <tcp_write+0x2fc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d90e:	4646      	mov	r6, r8
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d910:	4822      	ldr	r0, [pc, #136]	; (800d99c <tcp_write+0x2dc>)
  u16_t extendlen = 0;
 800d912:	46c2      	mov	sl, r8
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d914:	f001 fc3a 	bl	800f18c <iprintf>
  u16_t oversize_used = 0;
 800d918:	4645      	mov	r5, r8
  u16_t pos = 0; /* position in 'arg' data */
 800d91a:	4647      	mov	r7, r8
  struct pbuf *concat_p = NULL;
 800d91c:	46c1      	mov	r9, r8
 800d91e:	e7ad      	b.n	800d87c <tcp_write+0x1bc>
    u16_t left = len - pos;
 800d920:	9b05      	ldr	r3, [sp, #20]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d922:	9a07      	ldr	r2, [sp, #28]
    u16_t left = len - pos;
 800d924:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800d926:	b29b      	uxth	r3, r3
 800d928:	4293      	cmp	r3, r2
 800d92a:	bf28      	it	cs
 800d92c:	4613      	movcs	r3, r2
 800d92e:	b29b      	uxth	r3, r3
 800d930:	9309      	str	r3, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d934:	2b00      	cmp	r3, #0
 800d936:	d045      	beq.n	800d9c4 <tcp_write+0x304>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d938:	fabb f38b 	clz	r3, fp
 800d93c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d93e:	2036      	movs	r0, #54	; 0x36
 800d940:	095b      	lsrs	r3, r3, #5
 800d942:	9302      	str	r3, [sp, #8]
 800d944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d946:	e9cd 4300 	strd	r4, r3, [sp]
 800d94a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800d94e:	f7ff fd4d 	bl	800d3ec <tcp_pbuf_prealloc>
 800d952:	4680      	mov	r8, r0
 800d954:	2800      	cmp	r0, #0
 800d956:	d055      	beq.n	800da04 <tcp_write+0x344>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d958:	8943      	ldrh	r3, [r0, #10]
 800d95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d206      	bcs.n	800d96e <tcp_write+0x2ae>
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <tcp_write+0x2d4>)
 800d962:	f240 2267 	movw	r2, #615	; 0x267
 800d966:	4916      	ldr	r1, [pc, #88]	; (800d9c0 <tcp_write+0x300>)
 800d968:	480c      	ldr	r0, [pc, #48]	; (800d99c <tcp_write+0x2dc>)
 800d96a:	f001 fc0f 	bl	800f18c <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d96e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d972:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800d976:	19d9      	adds	r1, r3, r7
 800d978:	f001 fbdb 	bl	800f132 <memcpy>
    queuelen += pbuf_clen(p);
 800d97c:	4640      	mov	r0, r8
 800d97e:	f7fd fb5d 	bl	800b03c <pbuf_clen>
 800d982:	9b06      	ldr	r3, [sp, #24]
 800d984:	4403      	add	r3, r0
 800d986:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d988:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800d98a:	9306      	str	r3, [sp, #24]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d98c:	d963      	bls.n	800da56 <tcp_write+0x396>
      pbuf_free(p);
 800d98e:	4640      	mov	r0, r8
 800d990:	e036      	b.n	800da00 <tcp_write+0x340>
 800d992:	bf00      	nop
 800d994:	0802027c 	.word	0x0802027c
 800d998:	0802043c 	.word	0x0802043c
 800d99c:	0801d8d1 	.word	0x0801d8d1
 800d9a0:	08020453 	.word	0x08020453
 800d9a4:	08020484 	.word	0x08020484
 800d9a8:	080204f0 	.word	0x080204f0
 800d9ac:	08020507 	.word	0x08020507
 800d9b0:	08020527 	.word	0x08020527
 800d9b4:	080204be 	.word	0x080204be
 800d9b8:	08020545 	.word	0x08020545
 800d9bc:	0802056e 	.word	0x0802056e
 800d9c0:	0802059d 	.word	0x0802059d
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d9c4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800d9c8:	b133      	cbz	r3, 800d9d8 <tcp_write+0x318>
 800d9ca:	4b83      	ldr	r3, [pc, #524]	; (800dbd8 <tcp_write+0x518>)
 800d9cc:	f240 2271 	movw	r2, #625	; 0x271
 800d9d0:	4982      	ldr	r1, [pc, #520]	; (800dbdc <tcp_write+0x51c>)
 800d9d2:	4883      	ldr	r0, [pc, #524]	; (800dbe0 <tcp_write+0x520>)
 800d9d4:	f001 fbda 	bl	800f18c <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d9d8:	2201      	movs	r2, #1
 800d9da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9dc:	2036      	movs	r0, #54	; 0x36
 800d9de:	f7fd fa57 	bl	800ae90 <pbuf_alloc>
 800d9e2:	b178      	cbz	r0, 800da04 <tcp_write+0x344>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d9e4:	9a08      	ldr	r2, [sp, #32]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9e6:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d9e8:	900d      	str	r0, [sp, #52]	; 0x34
 800d9ea:	443a      	add	r2, r7
 800d9ec:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d9ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9f2:	2036      	movs	r0, #54	; 0x36
 800d9f4:	f7fd fa4c 	bl	800ae90 <pbuf_alloc>
 800d9f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d9fa:	4680      	mov	r8, r0
 800d9fc:	bb38      	cbnz	r0, 800da4e <tcp_write+0x38e>
        pbuf_free(p2);
 800d9fe:	4618      	mov	r0, r3
      pbuf_free(p);
 800da00:	f7fd f9de 	bl	800adc0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da04:	8b63      	ldrh	r3, [r4, #26]
 800da06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da0a:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800da0c:	f1b9 0f00 	cmp.w	r9, #0
 800da10:	d002      	beq.n	800da18 <tcp_write+0x358>
    pbuf_free(concat_p);
 800da12:	4648      	mov	r0, r9
 800da14:	f7fd f9d4 	bl	800adc0 <pbuf_free>
  if (queue != NULL) {
 800da18:	f1bb 0f00 	cmp.w	fp, #0
 800da1c:	d002      	beq.n	800da24 <tcp_write+0x364>
    tcp_segs_free(queue);
 800da1e:	4658      	mov	r0, fp
 800da20:	f7fd fe10 	bl	800b644 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800da24:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800da28:	2b00      	cmp	r3, #0
 800da2a:	f43f ae86 	beq.w	800d73a <tcp_write+0x7a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800da2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800da30:	2b00      	cmp	r3, #0
 800da32:	f47f ae82 	bne.w	800d73a <tcp_write+0x7a>
 800da36:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f47f ae7e 	bne.w	800d73a <tcp_write+0x7a>
 800da3e:	4b66      	ldr	r3, [pc, #408]	; (800dbd8 <tcp_write+0x518>)
 800da40:	f44f 724a 	mov.w	r2, #808	; 0x328
 800da44:	4967      	ldr	r1, [pc, #412]	; (800dbe4 <tcp_write+0x524>)
 800da46:	4866      	ldr	r0, [pc, #408]	; (800dbe0 <tcp_write+0x520>)
 800da48:	f001 fba0 	bl	800f18c <iprintf>
 800da4c:	e675      	b.n	800d73a <tcp_write+0x7a>
      pbuf_cat(p/*header*/, p2/*data*/);
 800da4e:	4619      	mov	r1, r3
 800da50:	f7fd fb18 	bl	800b084 <pbuf_cat>
 800da54:	e792      	b.n	800d97c <tcp_write+0x2bc>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800da56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800da58:	2200      	movs	r2, #0
 800da5a:	4641      	mov	r1, r8
 800da5c:	4620      	mov	r0, r4
 800da5e:	9200      	str	r2, [sp, #0]
 800da60:	443b      	add	r3, r7
 800da62:	f7ff fd0d 	bl	800d480 <tcp_create_segment>
 800da66:	4680      	mov	r8, r0
 800da68:	2800      	cmp	r0, #0
 800da6a:	d0cb      	beq.n	800da04 <tcp_write+0x344>
    if (queue == NULL) {
 800da6c:	f1bb 0f00 	cmp.w	fp, #0
 800da70:	d035      	beq.n	800dade <tcp_write+0x41e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800da72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da74:	b933      	cbnz	r3, 800da84 <tcp_write+0x3c4>
 800da76:	4b58      	ldr	r3, [pc, #352]	; (800dbd8 <tcp_write+0x518>)
 800da78:	f240 22ab 	movw	r2, #683	; 0x2ab
 800da7c:	495a      	ldr	r1, [pc, #360]	; (800dbe8 <tcp_write+0x528>)
 800da7e:	4858      	ldr	r0, [pc, #352]	; (800dbe0 <tcp_write+0x520>)
 800da80:	f001 fb84 	bl	800f18c <iprintf>
      prev_seg->next = seg;
 800da84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da86:	f8c3 8000 	str.w	r8, [r3]
    pos += seglen;
 800da8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da8c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 800da90:	441f      	add	r7, r3
 800da92:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800da94:	9b05      	ldr	r3, [sp, #20]
 800da96:	429f      	cmp	r7, r3
 800da98:	f4ff af42 	bcc.w	800d920 <tcp_write+0x260>
  if (oversize_used > 0) {
 800da9c:	b125      	cbz	r5, 800daa8 <tcp_write+0x3e8>
    for (p = last_unsent->p; p; p = p->next) {
 800da9e:	6877      	ldr	r7, [r6, #4]
 800daa0:	bb67      	cbnz	r7, 800dafc <tcp_write+0x43c>
    last_unsent->len += oversize_used;
 800daa2:	8933      	ldrh	r3, [r6, #8]
 800daa4:	441d      	add	r5, r3
 800daa6:	8135      	strh	r5, [r6, #8]
  pcb->unsent_oversize = oversize;
 800daa8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800daac:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800dab0:	f1b9 0f00 	cmp.w	r9, #0
 800dab4:	d033      	beq.n	800db1e <tcp_write+0x45e>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800dab6:	b936      	cbnz	r6, 800dac6 <tcp_write+0x406>
 800dab8:	4b47      	ldr	r3, [pc, #284]	; (800dbd8 <tcp_write+0x518>)
 800daba:	f240 22e1 	movw	r2, #737	; 0x2e1
 800dabe:	494b      	ldr	r1, [pc, #300]	; (800dbec <tcp_write+0x52c>)
 800dac0:	4847      	ldr	r0, [pc, #284]	; (800dbe0 <tcp_write+0x520>)
 800dac2:	f001 fb63 	bl	800f18c <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800dac6:	4649      	mov	r1, r9
 800dac8:	6870      	ldr	r0, [r6, #4]
 800daca:	f7fd fadb 	bl	800b084 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dace:	8933      	ldrh	r3, [r6, #8]
 800dad0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
 800dad4:	4413      	add	r3, r2
 800dad6:	8133      	strh	r3, [r6, #8]
    last_unsent->next = queue;
 800dad8:	f8c6 b000 	str.w	fp, [r6]
 800dadc:	e041      	b.n	800db62 <tcp_write+0x4a2>
 800dade:	4683      	mov	fp, r0
 800dae0:	e7d3      	b.n	800da8a <tcp_write+0x3ca>
  u16_t extendlen = 0;
 800dae2:	46ba      	mov	sl, r7
 800dae4:	462f      	mov	r7, r5
  struct pbuf *concat_p = NULL;
 800dae6:	46d1      	mov	r9, sl
 800dae8:	e6c8      	b.n	800d87c <tcp_write+0x1bc>
  u16_t extendlen = 0;
 800daea:	46ba      	mov	sl, r7
  u16_t oversize_used = 0;
 800daec:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800daee:	463e      	mov	r6, r7
  struct pbuf *concat_p = NULL;
 800daf0:	46b9      	mov	r9, r7
 800daf2:	e6c3      	b.n	800d87c <tcp_write+0x1bc>
  if (oversize_used > 0) {
 800daf4:	f04f 0a00 	mov.w	sl, #0
 800daf8:	46d1      	mov	r9, sl
 800dafa:	e7d0      	b.n	800da9e <tcp_write+0x3de>
      p->tot_len += oversize_used;
 800dafc:	893b      	ldrh	r3, [r7, #8]
 800dafe:	442b      	add	r3, r5
 800db00:	813b      	strh	r3, [r7, #8]
      if (p->next == NULL) {
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	b94b      	cbnz	r3, 800db1a <tcp_write+0x45a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	462a      	mov	r2, r5
 800db0a:	8978      	ldrh	r0, [r7, #10]
 800db0c:	9908      	ldr	r1, [sp, #32]
 800db0e:	4418      	add	r0, r3
 800db10:	f001 fb0f 	bl	800f132 <memcpy>
        p->len += oversize_used;
 800db14:	897b      	ldrh	r3, [r7, #10]
 800db16:	442b      	add	r3, r5
 800db18:	817b      	strh	r3, [r7, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800db1a:	683f      	ldr	r7, [r7, #0]
 800db1c:	e7c0      	b.n	800daa0 <tcp_write+0x3e0>
  } else if (extendlen > 0) {
 800db1e:	f1ba 0f00 	cmp.w	sl, #0
 800db22:	d01a      	beq.n	800db5a <tcp_write+0x49a>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800db24:	b10e      	cbz	r6, 800db2a <tcp_write+0x46a>
 800db26:	6873      	ldr	r3, [r6, #4]
 800db28:	b933      	cbnz	r3, 800db38 <tcp_write+0x478>
 800db2a:	4b2b      	ldr	r3, [pc, #172]	; (800dbd8 <tcp_write+0x518>)
 800db2c:	f240 22e7 	movw	r2, #743	; 0x2e7
 800db30:	492f      	ldr	r1, [pc, #188]	; (800dbf0 <tcp_write+0x530>)
 800db32:	482b      	ldr	r0, [pc, #172]	; (800dbe0 <tcp_write+0x520>)
 800db34:	f001 fb2a 	bl	800f18c <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800db38:	6873      	ldr	r3, [r6, #4]
 800db3a:	891a      	ldrh	r2, [r3, #8]
 800db3c:	6819      	ldr	r1, [r3, #0]
 800db3e:	4452      	add	r2, sl
 800db40:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800db42:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800db44:	b939      	cbnz	r1, 800db56 <tcp_write+0x496>
    p->len += extendlen;
 800db46:	895a      	ldrh	r2, [r3, #10]
 800db48:	4452      	add	r2, sl
 800db4a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800db4c:	8933      	ldrh	r3, [r6, #8]
 800db4e:	449a      	add	sl, r3
 800db50:	f8a6 a008 	strh.w	sl, [r6, #8]
 800db54:	e7c0      	b.n	800dad8 <tcp_write+0x418>
      p->tot_len += extendlen;
 800db56:	460b      	mov	r3, r1
 800db58:	e7ef      	b.n	800db3a <tcp_write+0x47a>
  if (last_unsent == NULL) {
 800db5a:	2e00      	cmp	r6, #0
 800db5c:	d1bc      	bne.n	800dad8 <tcp_write+0x418>
    pcb->unsent = queue;
 800db5e:	f8c4 b06c 	str.w	fp, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800db62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800db64:	9a05      	ldr	r2, [sp, #20]
 800db66:	4413      	add	r3, r2
 800db68:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800db6a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800db6e:	1a9b      	subs	r3, r3, r2
 800db70:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800db74:	9b06      	ldr	r3, [sp, #24]
 800db76:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800db7a:	b153      	cbz	r3, 800db92 <tcp_write+0x4d2>
    LWIP_ASSERT("tcp_write: valid queue length",
 800db7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800db7e:	b943      	cbnz	r3, 800db92 <tcp_write+0x4d2>
 800db80:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800db82:	b933      	cbnz	r3, 800db92 <tcp_write+0x4d2>
 800db84:	4b14      	ldr	r3, [pc, #80]	; (800dbd8 <tcp_write+0x518>)
 800db86:	f240 3213 	movw	r2, #787	; 0x313
 800db8a:	4916      	ldr	r1, [pc, #88]	; (800dbe4 <tcp_write+0x524>)
 800db8c:	4814      	ldr	r0, [pc, #80]	; (800dbe0 <tcp_write+0x520>)
 800db8e:	f001 fafd 	bl	800f18c <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800db92:	f1b8 0f00 	cmp.w	r8, #0
 800db96:	d010      	beq.n	800dbba <tcp_write+0x4fa>
 800db98:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800db9c:	2800      	cmp	r0, #0
 800db9e:	f43f ada3 	beq.w	800d6e8 <tcp_write+0x28>
 800dba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba4:	f013 0502 	ands.w	r5, r3, #2
 800dba8:	d107      	bne.n	800dbba <tcp_write+0x4fa>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dbaa:	8984      	ldrh	r4, [r0, #12]
 800dbac:	2008      	movs	r0, #8
 800dbae:	f7fc fba3 	bl	800a2f8 <lwip_htons>
 800dbb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbb6:	4320      	orrs	r0, r4
 800dbb8:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800dbba:	2000      	movs	r0, #0
 800dbbc:	e594      	b.n	800d6e8 <tcp_write+0x28>
      p->tot_len += extendlen;
 800dbbe:	f04f 0900 	mov.w	r9, #0
 800dbc2:	e71f      	b.n	800da04 <tcp_write+0x344>
    return ERR_CONN;
 800dbc4:	f06f 000a 	mvn.w	r0, #10
 800dbc8:	e58e      	b.n	800d6e8 <tcp_write+0x28>
  if (oversize_used > 0) {
 800dbca:	2d00      	cmp	r5, #0
 800dbcc:	d192      	bne.n	800daf4 <tcp_write+0x434>
  pcb->unsent_oversize = oversize;
 800dbce:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800dbd2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800dbd6:	e77f      	b.n	800dad8 <tcp_write+0x418>
 800dbd8:	0802027c 	.word	0x0802027c
 800dbdc:	080205db 	.word	0x080205db
 800dbe0:	0801d8d1 	.word	0x0801d8d1
 800dbe4:	08020667 	.word	0x08020667
 800dbe8:	080205e9 	.word	0x080205e9
 800dbec:	080205fa 	.word	0x080205fa
 800dbf0:	08020632 	.word	0x08020632

0800dbf4 <tcp_split_unsent_seg>:
{
 800dbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4689      	mov	r9, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	b930      	cbnz	r0, 800dc0c <tcp_split_unsent_seg+0x18>
 800dbfe:	4b5a      	ldr	r3, [pc, #360]	; (800dd68 <tcp_split_unsent_seg+0x174>)
 800dc00:	f240 324b 	movw	r2, #843	; 0x34b
 800dc04:	4959      	ldr	r1, [pc, #356]	; (800dd6c <tcp_split_unsent_seg+0x178>)
 800dc06:	485a      	ldr	r0, [pc, #360]	; (800dd70 <tcp_split_unsent_seg+0x17c>)
 800dc08:	f001 fac0 	bl	800f18c <iprintf>
  useg = pcb->unsent;
 800dc0c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (useg == NULL) {
 800dc0e:	b914      	cbnz	r4, 800dc16 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800dc10:	f04f 30ff 	mov.w	r0, #4294967295
 800dc14:	e00b      	b.n	800dc2e <tcp_split_unsent_seg+0x3a>
  if (split == 0) {
 800dc16:	f1b9 0f00 	cmp.w	r9, #0
 800dc1a:	d10b      	bne.n	800dc34 <tcp_split_unsent_seg+0x40>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800dc1c:	4b52      	ldr	r3, [pc, #328]	; (800dd68 <tcp_split_unsent_seg+0x174>)
 800dc1e:	f240 3253 	movw	r2, #851	; 0x353
 800dc22:	4954      	ldr	r1, [pc, #336]	; (800dd74 <tcp_split_unsent_seg+0x180>)
 800dc24:	4852      	ldr	r0, [pc, #328]	; (800dd70 <tcp_split_unsent_seg+0x17c>)
 800dc26:	f001 fab1 	bl	800f18c <iprintf>
    return ERR_VAL;
 800dc2a:	f06f 0005 	mvn.w	r0, #5
}
 800dc2e:	b003      	add	sp, #12
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800dc34:	8923      	ldrh	r3, [r4, #8]
 800dc36:	454b      	cmp	r3, r9
 800dc38:	d801      	bhi.n	800dc3e <tcp_split_unsent_seg+0x4a>
    return ERR_OK;
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e7f7      	b.n	800dc2e <tcp_split_unsent_seg+0x3a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800dc3e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800dc40:	454b      	cmp	r3, r9
 800dc42:	d206      	bcs.n	800dc52 <tcp_split_unsent_seg+0x5e>
 800dc44:	4b48      	ldr	r3, [pc, #288]	; (800dd68 <tcp_split_unsent_seg+0x174>)
 800dc46:	f240 325b 	movw	r2, #859	; 0x35b
 800dc4a:	494b      	ldr	r1, [pc, #300]	; (800dd78 <tcp_split_unsent_seg+0x184>)
 800dc4c:	4848      	ldr	r0, [pc, #288]	; (800dd70 <tcp_split_unsent_seg+0x17c>)
 800dc4e:	f001 fa9d 	bl	800f18c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800dc52:	8923      	ldrh	r3, [r4, #8]
 800dc54:	b933      	cbnz	r3, 800dc64 <tcp_split_unsent_seg+0x70>
 800dc56:	4b44      	ldr	r3, [pc, #272]	; (800dd68 <tcp_split_unsent_seg+0x174>)
 800dc58:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800dc5c:	4947      	ldr	r1, [pc, #284]	; (800dd7c <tcp_split_unsent_seg+0x188>)
 800dc5e:	4844      	ldr	r0, [pc, #272]	; (800dd70 <tcp_split_unsent_seg+0x17c>)
 800dc60:	f001 fa94 	bl	800f18c <iprintf>
  optflags = useg->flags;
 800dc64:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dc68:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800dc6c:	8927      	ldrh	r7, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dc6e:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dc70:	ea4f 068b 	mov.w	r6, fp, lsl #2
  remainder = useg->len - split;
 800dc74:	eba7 0709 	sub.w	r7, r7, r9
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dc78:	f006 0604 	and.w	r6, r6, #4
  remainder = useg->len - split;
 800dc7c:	b2bf      	uxth	r7, r7
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800dc7e:	19b9      	adds	r1, r7, r6
 800dc80:	b289      	uxth	r1, r1
 800dc82:	f7fd f905 	bl	800ae90 <pbuf_alloc>
  if (p == NULL) {
 800dc86:	4682      	mov	sl, r0
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d0c1      	beq.n	800dc10 <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800dc8c:	6860      	ldr	r0, [r4, #4]
 800dc8e:	8922      	ldrh	r2, [r4, #8]
 800dc90:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dc92:	f8da 1004 	ldr.w	r1, [sl, #4]
  offset = useg->p->tot_len - useg->len + split;
 800dc96:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dc98:	463a      	mov	r2, r7
 800dc9a:	4431      	add	r1, r6
  offset = useg->p->tot_len - useg->len + split;
 800dc9c:	444b      	add	r3, r9
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	f7fd fab6 	bl	800b210 <pbuf_copy_partial>
 800dca4:	42b8      	cmp	r0, r7
 800dca6:	d15b      	bne.n	800dd60 <tcp_split_unsent_seg+0x16c>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dca8:	68e3      	ldr	r3, [r4, #12]
 800dcaa:	8998      	ldrh	r0, [r3, #12]
 800dcac:	f7fc fb24 	bl	800a2f8 <lwip_htons>
 800dcb0:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800dcb2:	f016 0808 	ands.w	r8, r6, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800dcb6:	bf0e      	itee	eq
 800dcb8:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800dcbc:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800dcc0:	f04f 0808 	movne.w	r8, #8
  if (split_flags & TCP_FIN) {
 800dcc4:	07f3      	lsls	r3, r6, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dcc6:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800dcc8:	bf48      	it	mi
 800dcca:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dcce:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800dcd0:	bf48      	it	mi
 800dcd2:	f006 06fe 	andmi.w	r6, r6, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800dcd6:	f7fc fb12 	bl	800a2fe <lwip_htonl>
 800dcda:	4642      	mov	r2, r8
 800dcdc:	eb09 0300 	add.w	r3, r9, r0
 800dce0:	f8cd b000 	str.w	fp, [sp]
 800dce4:	4651      	mov	r1, sl
 800dce6:	4628      	mov	r0, r5
 800dce8:	f7ff fbca 	bl	800d480 <tcp_create_segment>
  if (seg == NULL) {
 800dcec:	4680      	mov	r8, r0
 800dcee:	2800      	cmp	r0, #0
 800dcf0:	d036      	beq.n	800dd60 <tcp_split_unsent_seg+0x16c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800dcf2:	6860      	ldr	r0, [r4, #4]
 800dcf4:	f7fd f9a2 	bl	800b03c <pbuf_clen>
 800dcf8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800dcfc:	1a18      	subs	r0, r3, r0
 800dcfe:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800dd02:	6860      	ldr	r0, [r4, #4]
 800dd04:	8901      	ldrh	r1, [r0, #8]
 800dd06:	1bc9      	subs	r1, r1, r7
 800dd08:	b289      	uxth	r1, r1
 800dd0a:	f7fd f93f 	bl	800af8c <pbuf_realloc>
  useg->len -= remainder;
 800dd0e:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dd10:	4630      	mov	r0, r6
  useg->len -= remainder;
 800dd12:	1bdf      	subs	r7, r3, r7
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dd14:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800dd16:	8127      	strh	r7, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800dd18:	899f      	ldrh	r7, [r3, #12]
 800dd1a:	f7fc faed 	bl	800a2f8 <lwip_htons>
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	4338      	orrs	r0, r7
 800dd22:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dd24:	6860      	ldr	r0, [r4, #4]
 800dd26:	f7fd f989 	bl	800b03c <pbuf_clen>
 800dd2a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800dd2e:	4418      	add	r0, r3
 800dd30:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd38:	f7fd f980 	bl	800b03c <pbuf_clen>
 800dd3c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800dd40:	4418      	add	r0, r3
  seg->next = useg->next;
 800dd42:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd44:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 800dd48:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800dd4c:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800dd50:	f8d8 0000 	ldr.w	r0, [r8]
 800dd54:	2800      	cmp	r0, #0
 800dd56:	f47f af70 	bne.w	800dc3a <tcp_split_unsent_seg+0x46>
    pcb->unsent_oversize = 0;
 800dd5a:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 800dd5e:	e766      	b.n	800dc2e <tcp_split_unsent_seg+0x3a>
    pbuf_free(p);
 800dd60:	4650      	mov	r0, sl
 800dd62:	f7fd f82d 	bl	800adc0 <pbuf_free>
 800dd66:	e753      	b.n	800dc10 <tcp_split_unsent_seg+0x1c>
 800dd68:	0802027c 	.word	0x0802027c
 800dd6c:	08020685 	.word	0x08020685
 800dd70:	0801d8d1 	.word	0x0801d8d1
 800dd74:	080206a7 	.word	0x080206a7
 800dd78:	080206c9 	.word	0x080206c9
 800dd7c:	080206d6 	.word	0x080206d6

0800dd80 <tcp_enqueue_flags>:
{
 800dd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dd84:	f011 0803 	ands.w	r8, r1, #3
{
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dd8c:	d106      	bne.n	800dd9c <tcp_enqueue_flags+0x1c>
 800dd8e:	4b3e      	ldr	r3, [pc, #248]	; (800de88 <tcp_enqueue_flags+0x108>)
 800dd90:	f240 4212 	movw	r2, #1042	; 0x412
 800dd94:	493d      	ldr	r1, [pc, #244]	; (800de8c <tcp_enqueue_flags+0x10c>)
 800dd96:	483e      	ldr	r0, [pc, #248]	; (800de90 <tcp_enqueue_flags+0x110>)
 800dd98:	f001 f9f8 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dd9c:	b934      	cbnz	r4, 800ddac <tcp_enqueue_flags+0x2c>
 800dd9e:	4b3a      	ldr	r3, [pc, #232]	; (800de88 <tcp_enqueue_flags+0x108>)
 800dda0:	f240 4213 	movw	r2, #1043	; 0x413
 800dda4:	493b      	ldr	r1, [pc, #236]	; (800de94 <tcp_enqueue_flags+0x114>)
 800dda6:	483a      	ldr	r0, [pc, #232]	; (800de90 <tcp_enqueue_flags+0x110>)
 800dda8:	f001 f9f0 	bl	800f18c <iprintf>
  if (flags & TCP_SYN) {
 800ddac:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ddb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ddb4:	2036      	movs	r0, #54	; 0x36
 800ddb6:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800ddba:	4649      	mov	r1, r9
 800ddbc:	f7fd f868 	bl	800ae90 <pbuf_alloc>
 800ddc0:	4605      	mov	r5, r0
 800ddc2:	b940      	cbnz	r0, 800ddd6 <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddc4:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800ddc6:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddce:	8363      	strh	r3, [r4, #26]
}
 800ddd0:	b003      	add	sp, #12
 800ddd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ddd6:	8943      	ldrh	r3, [r0, #10]
 800ddd8:	454b      	cmp	r3, r9
 800ddda:	d206      	bcs.n	800ddea <tcp_enqueue_flags+0x6a>
 800dddc:	4b2a      	ldr	r3, [pc, #168]	; (800de88 <tcp_enqueue_flags+0x108>)
 800ddde:	f240 423a 	movw	r2, #1082	; 0x43a
 800dde2:	492d      	ldr	r1, [pc, #180]	; (800de98 <tcp_enqueue_flags+0x118>)
 800dde4:	482a      	ldr	r0, [pc, #168]	; (800de90 <tcp_enqueue_flags+0x110>)
 800dde6:	f001 f9d1 	bl	800f18c <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ddea:	9700      	str	r7, [sp, #0]
 800ddec:	4629      	mov	r1, r5
 800ddee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ddf0:	4632      	mov	r2, r6
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f7ff fb44 	bl	800d480 <tcp_create_segment>
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d0e2      	beq.n	800ddc4 <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ddfe:	68c3      	ldr	r3, [r0, #12]
 800de00:	079a      	lsls	r2, r3, #30
 800de02:	d006      	beq.n	800de12 <tcp_enqueue_flags+0x92>
 800de04:	4b20      	ldr	r3, [pc, #128]	; (800de88 <tcp_enqueue_flags+0x108>)
 800de06:	f240 4242 	movw	r2, #1090	; 0x442
 800de0a:	4924      	ldr	r1, [pc, #144]	; (800de9c <tcp_enqueue_flags+0x11c>)
 800de0c:	4820      	ldr	r0, [pc, #128]	; (800de90 <tcp_enqueue_flags+0x110>)
 800de0e:	f001 f9bd 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800de12:	892b      	ldrh	r3, [r5, #8]
 800de14:	b133      	cbz	r3, 800de24 <tcp_enqueue_flags+0xa4>
 800de16:	4b1c      	ldr	r3, [pc, #112]	; (800de88 <tcp_enqueue_flags+0x108>)
 800de18:	f240 4243 	movw	r2, #1091	; 0x443
 800de1c:	4920      	ldr	r1, [pc, #128]	; (800dea0 <tcp_enqueue_flags+0x120>)
 800de1e:	481c      	ldr	r0, [pc, #112]	; (800de90 <tcp_enqueue_flags+0x110>)
 800de20:	f001 f9b4 	bl	800f18c <iprintf>
  if (pcb->unsent == NULL) {
 800de24:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800de26:	bb4b      	cbnz	r3, 800de7c <tcp_enqueue_flags+0xfc>
    pcb->unsent = seg;
 800de28:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800de30:	f1b8 0f00 	cmp.w	r8, #0
 800de34:	d002      	beq.n	800de3c <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800de36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800de38:	3301      	adds	r3, #1
 800de3a:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800de3c:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de3e:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800de40:	bf42      	ittt	mi
 800de42:	8b63      	ldrhmi	r3, [r4, #26]
 800de44:	f043 0320 	orrmi.w	r3, r3, #32
 800de48:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800de4a:	f7fd f8f7 	bl	800b03c <pbuf_clen>
 800de4e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800de52:	4418      	add	r0, r3
 800de54:	b280      	uxth	r0, r0
 800de56:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800de5a:	2800      	cmp	r0, #0
 800de5c:	d0b8      	beq.n	800ddd0 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800de5e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800de60:	b948      	cbnz	r0, 800de76 <tcp_enqueue_flags+0xf6>
 800de62:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800de64:	2c00      	cmp	r4, #0
 800de66:	d1b3      	bne.n	800ddd0 <tcp_enqueue_flags+0x50>
 800de68:	4b07      	ldr	r3, [pc, #28]	; (800de88 <tcp_enqueue_flags+0x108>)
 800de6a:	f240 4266 	movw	r2, #1126	; 0x466
 800de6e:	490d      	ldr	r1, [pc, #52]	; (800dea4 <tcp_enqueue_flags+0x124>)
 800de70:	4807      	ldr	r0, [pc, #28]	; (800de90 <tcp_enqueue_flags+0x110>)
 800de72:	f001 f98b 	bl	800f18c <iprintf>
  return ERR_OK;
 800de76:	2000      	movs	r0, #0
 800de78:	e7aa      	b.n	800ddd0 <tcp_enqueue_flags+0x50>
 800de7a:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	2a00      	cmp	r2, #0
 800de80:	d1fb      	bne.n	800de7a <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800de82:	601d      	str	r5, [r3, #0]
 800de84:	e7d1      	b.n	800de2a <tcp_enqueue_flags+0xaa>
 800de86:	bf00      	nop
 800de88:	0802027c 	.word	0x0802027c
 800de8c:	080206e4 	.word	0x080206e4
 800de90:	0801d8d1 	.word	0x0801d8d1
 800de94:	08020739 	.word	0x08020739
 800de98:	08020758 	.word	0x08020758
 800de9c:	08020791 	.word	0x08020791
 800dea0:	080207a9 	.word	0x080207a9
 800dea4:	080207d3 	.word	0x080207d3

0800dea8 <tcp_send_fin>:
{
 800dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800deaa:	4605      	mov	r5, r0
 800deac:	b930      	cbnz	r0, 800debc <tcp_send_fin+0x14>
 800deae:	4b14      	ldr	r3, [pc, #80]	; (800df00 <tcp_send_fin+0x58>)
 800deb0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800deb4:	4913      	ldr	r1, [pc, #76]	; (800df04 <tcp_send_fin+0x5c>)
 800deb6:	4814      	ldr	r0, [pc, #80]	; (800df08 <tcp_send_fin+0x60>)
 800deb8:	f001 f968 	bl	800f18c <iprintf>
  if (pcb->unsent != NULL) {
 800debc:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 800debe:	b934      	cbnz	r4, 800dece <tcp_send_fin+0x26>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dec0:	4628      	mov	r0, r5
 800dec2:	2101      	movs	r1, #1
}
 800dec4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dec8:	f7ff bf5a 	b.w	800dd80 <tcp_enqueue_flags>
 800decc:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800dece:	6823      	ldr	r3, [r4, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1fb      	bne.n	800decc <tcp_send_fin+0x24>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ded4:	68e3      	ldr	r3, [r4, #12]
 800ded6:	8998      	ldrh	r0, [r3, #12]
 800ded8:	f7fc fa0e 	bl	800a2f8 <lwip_htons>
 800dedc:	f010 0707 	ands.w	r7, r0, #7
 800dee0:	d1ee      	bne.n	800dec0 <tcp_send_fin+0x18>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dee2:	68e3      	ldr	r3, [r4, #12]
 800dee4:	2001      	movs	r0, #1
 800dee6:	899e      	ldrh	r6, [r3, #12]
 800dee8:	f7fc fa06 	bl	800a2f8 <lwip_htons>
 800deec:	68e3      	ldr	r3, [r4, #12]
 800deee:	4330      	orrs	r0, r6
 800def0:	8198      	strh	r0, [r3, #12]
}
 800def2:	4638      	mov	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 800def4:	8b6b      	ldrh	r3, [r5, #26]
 800def6:	f043 0320 	orr.w	r3, r3, #32
 800defa:	836b      	strh	r3, [r5, #26]
}
 800defc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800defe:	bf00      	nop
 800df00:	0802027c 	.word	0x0802027c
 800df04:	080207fb 	.word	0x080207fb
 800df08:	0801d8d1 	.word	0x0801d8d1

0800df0c <tcp_rexmit_rto_prepare>:
{
 800df0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800df10:	4604      	mov	r4, r0
 800df12:	b930      	cbnz	r0, 800df22 <tcp_rexmit_rto_prepare+0x16>
 800df14:	4b1c      	ldr	r3, [pc, #112]	; (800df88 <tcp_rexmit_rto_prepare+0x7c>)
 800df16:	f240 6263 	movw	r2, #1635	; 0x663
 800df1a:	491c      	ldr	r1, [pc, #112]	; (800df8c <tcp_rexmit_rto_prepare+0x80>)
 800df1c:	481c      	ldr	r0, [pc, #112]	; (800df90 <tcp_rexmit_rto_prepare+0x84>)
 800df1e:	f001 f935 	bl	800f18c <iprintf>
  if (pcb->unacked == NULL) {
 800df22:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800df24:	b945      	cbnz	r5, 800df38 <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800df26:	f06f 0005 	mvn.w	r0, #5
}
 800df2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800df2e:	f7ff fa45 	bl	800d3bc <tcp_output_segment_busy>
 800df32:	2800      	cmp	r0, #0
 800df34:	d1f7      	bne.n	800df26 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800df36:	682d      	ldr	r5, [r5, #0]
 800df38:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800df3a:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1f6      	bne.n	800df2e <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800df40:	f7ff fa3c 	bl	800d3bc <tcp_output_segment_busy>
 800df44:	4606      	mov	r6, r0
 800df46:	2800      	cmp	r0, #0
 800df48:	d1ed      	bne.n	800df26 <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800df4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800df4c:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800df4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800df50:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800df54:	8b63      	ldrh	r3, [r4, #26]
 800df56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800df5a:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df5c:	68eb      	ldr	r3, [r5, #12]
 800df5e:	6858      	ldr	r0, [r3, #4]
 800df60:	f7fc f9cd 	bl	800a2fe <lwip_htonl>
 800df64:	68eb      	ldr	r3, [r5, #12]
 800df66:	4607      	mov	r7, r0
 800df68:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800df6c:	8998      	ldrh	r0, [r3, #12]
 800df6e:	f7fc f9c3 	bl	800a2f8 <lwip_htons>
 800df72:	f010 0003 	ands.w	r0, r0, #3
 800df76:	4447      	add	r7, r8
  pcb->rttest = 0;
 800df78:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800df7a:	bf18      	it	ne
 800df7c:	2001      	movne	r0, #1
 800df7e:	4438      	add	r0, r7
 800df80:	64e0      	str	r0, [r4, #76]	; 0x4c
  return ERR_OK;
 800df82:	4630      	mov	r0, r6
 800df84:	e7d1      	b.n	800df2a <tcp_rexmit_rto_prepare+0x1e>
 800df86:	bf00      	nop
 800df88:	0802027c 	.word	0x0802027c
 800df8c:	08020815 	.word	0x08020815
 800df90:	0801d8d1 	.word	0x0801d8d1

0800df94 <tcp_rexmit>:
{
 800df94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800df96:	4604      	mov	r4, r0
 800df98:	b930      	cbnz	r0, 800dfa8 <tcp_rexmit+0x14>
 800df9a:	4b1b      	ldr	r3, [pc, #108]	; (800e008 <tcp_rexmit+0x74>)
 800df9c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800dfa0:	491a      	ldr	r1, [pc, #104]	; (800e00c <tcp_rexmit+0x78>)
 800dfa2:	481b      	ldr	r0, [pc, #108]	; (800e010 <tcp_rexmit+0x7c>)
 800dfa4:	f001 f8f2 	bl	800f18c <iprintf>
  if (pcb->unacked == NULL) {
 800dfa8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800dfaa:	b915      	cbnz	r5, 800dfb2 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800dfac:	f06f 0005 	mvn.w	r0, #5
}
 800dfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f7ff fa02 	bl	800d3bc <tcp_output_segment_busy>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	d1f7      	bne.n	800dfac <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800dfbc:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800dfbe:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800dfc2:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800dfc4:	6833      	ldr	r3, [r6, #0]
 800dfc6:	b983      	cbnz	r3, 800dfea <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800dfc8:	6833      	ldr	r3, [r6, #0]
 800dfca:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800dfcc:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800dfce:	682b      	ldr	r3, [r5, #0]
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800dfd2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800dfd6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800dfda:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800dfdc:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800dfde:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800dfe0:	bf1c      	itt	ne
 800dfe2:	3301      	addne	r3, #1
 800dfe4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800dfe8:	e7e2      	b.n	800dfb0 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	6858      	ldr	r0, [r3, #4]
 800dfee:	f7fc f986 	bl	800a2fe <lwip_htonl>
 800dff2:	68eb      	ldr	r3, [r5, #12]
 800dff4:	4607      	mov	r7, r0
 800dff6:	6858      	ldr	r0, [r3, #4]
 800dff8:	f7fc f981 	bl	800a2fe <lwip_htonl>
 800dffc:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800dffe:	2800      	cmp	r0, #0
 800e000:	dae2      	bge.n	800dfc8 <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800e002:	6836      	ldr	r6, [r6, #0]
 800e004:	e7de      	b.n	800dfc4 <tcp_rexmit+0x30>
 800e006:	bf00      	nop
 800e008:	0802027c 	.word	0x0802027c
 800e00c:	08020839 	.word	0x08020839
 800e010:	0801d8d1 	.word	0x0801d8d1

0800e014 <tcp_rexmit_fast>:
{
 800e014:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e016:	4604      	mov	r4, r0
 800e018:	b930      	cbnz	r0, 800e028 <tcp_rexmit_fast+0x14>
 800e01a:	4b17      	ldr	r3, [pc, #92]	; (800e078 <tcp_rexmit_fast+0x64>)
 800e01c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e020:	4916      	ldr	r1, [pc, #88]	; (800e07c <tcp_rexmit_fast+0x68>)
 800e022:	4817      	ldr	r0, [pc, #92]	; (800e080 <tcp_rexmit_fast+0x6c>)
 800e024:	f001 f8b2 	bl	800f18c <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e028:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e02a:	b31b      	cbz	r3, 800e074 <tcp_rexmit_fast+0x60>
 800e02c:	8b63      	ldrh	r3, [r4, #26]
 800e02e:	075b      	lsls	r3, r3, #29
 800e030:	d420      	bmi.n	800e074 <tcp_rexmit_fast+0x60>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e032:	4620      	mov	r0, r4
 800e034:	f7ff ffae 	bl	800df94 <tcp_rexmit>
 800e038:	b9e0      	cbnz	r0, 800e074 <tcp_rexmit_fast+0x60>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e03a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800e03e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800e042:	4293      	cmp	r3, r2
 800e044:	bf38      	it	cc
 800e046:	085a      	lsrcc	r2, r3, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e048:	8e63      	ldrh	r3, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e04a:	bf28      	it	cs
 800e04c:	0852      	lsrcs	r2, r2, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e04e:	0059      	lsls	r1, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e050:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e054:	428a      	cmp	r2, r1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e056:	440b      	add	r3, r1
        pcb->ssthresh = 2 * pcb->mss;
 800e058:	bf38      	it	cc
 800e05a:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e05e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800e062:	4413      	add	r3, r2
 800e064:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e068:	8b63      	ldrh	r3, [r4, #26]
 800e06a:	f043 0304 	orr.w	r3, r3, #4
 800e06e:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800e074:	bd10      	pop	{r4, pc}
 800e076:	bf00      	nop
 800e078:	0802027c 	.word	0x0802027c
 800e07c:	08020851 	.word	0x08020851
 800e080:	0801d8d1 	.word	0x0801d8d1

0800e084 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e08a:	4606      	mov	r6, r0
 800e08c:	468a      	mov	sl, r1
 800e08e:	4617      	mov	r7, r2
 800e090:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e094:	461c      	mov	r4, r3
{
 800e096:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e09a:	b933      	cbnz	r3, 800e0aa <tcp_rst+0x26>
 800e09c:	4b17      	ldr	r3, [pc, #92]	; (800e0fc <tcp_rst+0x78>)
 800e09e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e0a2:	4917      	ldr	r1, [pc, #92]	; (800e100 <tcp_rst+0x7c>)
 800e0a4:	4817      	ldr	r0, [pc, #92]	; (800e104 <tcp_rst+0x80>)
 800e0a6:	f001 f871 	bl	800f18c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e0aa:	b935      	cbnz	r5, 800e0ba <tcp_rst+0x36>
 800e0ac:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <tcp_rst+0x78>)
 800e0ae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e0b2:	4915      	ldr	r1, [pc, #84]	; (800e108 <tcp_rst+0x84>)
 800e0b4:	4813      	ldr	r0, [pc, #76]	; (800e104 <tcp_rst+0x80>)
 800e0b6:	f001 f869 	bl	800f18c <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e0ba:	4650      	mov	r0, sl
 800e0bc:	f7fc f91f 	bl	800a2fe <lwip_htonl>
 800e0c0:	2314      	movs	r3, #20
 800e0c2:	f646 020b 	movw	r2, #26635	; 0x680b
 800e0c6:	f8cd 9000 	str.w	r9, [sp]
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	4643      	mov	r3, r8
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f7ff fa43 	bl	800d560 <tcp_output_alloc_header_common.constprop.4>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e0da:	4607      	mov	r7, r0
 800e0dc:	b150      	cbz	r0, 800e0f4 <tcp_rst+0x70>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e0de:	f7ff faa7 	bl	800d630 <tcp_output_fill_options.isra.0.constprop.5>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e0e2:	462b      	mov	r3, r5
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	4639      	mov	r1, r7
 800e0e8:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e0ea:	b004      	add	sp, #16
 800e0ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e0f0:	f7ff baae 	b.w	800d650 <tcp_output_control_segment>
}
 800e0f4:	b004      	add	sp, #16
 800e0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0fa:	bf00      	nop
 800e0fc:	0802027c 	.word	0x0802027c
 800e100:	0802086e 	.word	0x0802086e
 800e104:	0801d8d1 	.word	0x0801d8d1
 800e108:	08020888 	.word	0x08020888

0800e10c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e10c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e10e:	4604      	mov	r4, r0
 800e110:	b930      	cbnz	r0, 800e120 <tcp_send_empty_ack+0x14>
 800e112:	4b14      	ldr	r3, [pc, #80]	; (800e164 <tcp_send_empty_ack+0x58>)
 800e114:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e118:	4913      	ldr	r1, [pc, #76]	; (800e168 <tcp_send_empty_ack+0x5c>)
 800e11a:	4814      	ldr	r0, [pc, #80]	; (800e16c <tcp_send_empty_ack+0x60>)
 800e11c:	f001 f836 	bl	800f18c <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e120:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e122:	f7fc f8ec 	bl	800a2fe <lwip_htonl>
 800e126:	2100      	movs	r1, #0
 800e128:	4602      	mov	r2, r0
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff fa5a 	bl	800d5e4 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800e130:	4605      	mov	r5, r0
 800e132:	b930      	cbnz	r0, 800e142 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e134:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e136:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e13a:	f043 0303 	orr.w	r3, r3, #3
 800e13e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800e140:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e142:	f7ff fa75 	bl	800d630 <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e146:	1d23      	adds	r3, r4, #4
 800e148:	4622      	mov	r2, r4
 800e14a:	4629      	mov	r1, r5
 800e14c:	4620      	mov	r0, r4
 800e14e:	f7ff fa7f 	bl	800d650 <tcp_output_control_segment>
 800e152:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 800e154:	b118      	cbz	r0, 800e15e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e156:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e15a:	8363      	strh	r3, [r4, #26]
 800e15c:	e7f0      	b.n	800e140 <tcp_send_empty_ack+0x34>
 800e15e:	f023 0303 	bic.w	r3, r3, #3
 800e162:	e7fa      	b.n	800e15a <tcp_send_empty_ack+0x4e>
 800e164:	0802027c 	.word	0x0802027c
 800e168:	080208a3 	.word	0x080208a3
 800e16c:	0801d8d1 	.word	0x0801d8d1

0800e170 <tcp_output>:
{
 800e170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e174:	4604      	mov	r4, r0
{
 800e176:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e178:	b930      	cbnz	r0, 800e188 <tcp_output+0x18>
 800e17a:	4b8f      	ldr	r3, [pc, #572]	; (800e3b8 <tcp_output+0x248>)
 800e17c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800e180:	498e      	ldr	r1, [pc, #568]	; (800e3bc <tcp_output+0x24c>)
 800e182:	488f      	ldr	r0, [pc, #572]	; (800e3c0 <tcp_output+0x250>)
 800e184:	f001 f802 	bl	800f18c <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e188:	7d23      	ldrb	r3, [r4, #20]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d106      	bne.n	800e19c <tcp_output+0x2c>
 800e18e:	4b8a      	ldr	r3, [pc, #552]	; (800e3b8 <tcp_output+0x248>)
 800e190:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800e194:	498b      	ldr	r1, [pc, #556]	; (800e3c4 <tcp_output+0x254>)
 800e196:	488a      	ldr	r0, [pc, #552]	; (800e3c0 <tcp_output+0x250>)
 800e198:	f000 fff8 	bl	800f18c <iprintf>
  if (tcp_input_pcb == pcb) {
 800e19c:	4b8a      	ldr	r3, [pc, #552]	; (800e3c8 <tcp_output+0x258>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	42a3      	cmp	r3, r4
 800e1a2:	f000 8170 	beq.w	800e486 <tcp_output+0x316>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e1a6:	f8b4 7060 	ldrh.w	r7, [r4, #96]	; 0x60
 800e1aa:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
  seg = pcb->unsent;
 800e1ae:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e1b0:	429f      	cmp	r7, r3
 800e1b2:	bf28      	it	cs
 800e1b4:	461f      	movcs	r7, r3
  if (seg == NULL) {
 800e1b6:	b94d      	cbnz	r5, 800e1cc <tcp_output+0x5c>
    if (pcb->flags & TF_ACK_NOW) {
 800e1b8:	8b63      	ldrh	r3, [r4, #26]
 800e1ba:	0798      	lsls	r0, r3, #30
 800e1bc:	f140 815f 	bpl.w	800e47e <tcp_output+0x30e>
      return tcp_send_empty_ack(pcb);
 800e1c0:	4620      	mov	r0, r4
}
 800e1c2:	b007      	add	sp, #28
 800e1c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800e1c8:	f7ff bfa0 	b.w	800e10c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e1cc:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e1ce:	f104 0904 	add.w	r9, r4, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e1d2:	b328      	cbz	r0, 800e220 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800e1d4:	f7fc fd3c 	bl	800ac50 <netif_get_by_index>
    return ip_route(src, dst);
 800e1d8:	4680      	mov	r8, r0
  if (netif == NULL) {
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	f000 816c 	beq.w	800e4b8 <tcp_output+0x348>
  if (ip_addr_isany(&pcb->local_ip)) {
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	b90b      	cbnz	r3, 800e1e8 <tcp_output+0x78>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e1e4:	6843      	ldr	r3, [r0, #4]
 800e1e6:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e1e8:	68eb      	ldr	r3, [r5, #12]
 800e1ea:	6858      	ldr	r0, [r3, #4]
 800e1ec:	f7fc f887 	bl	800a2fe <lwip_htonl>
 800e1f0:	892b      	ldrh	r3, [r5, #8]
 800e1f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800e1f4:	1a9b      	subs	r3, r3, r2
 800e1f6:	4418      	add	r0, r3
 800e1f8:	42b8      	cmp	r0, r7
 800e1fa:	d915      	bls.n	800e228 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e1fc:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800e200:	42bb      	cmp	r3, r7
 800e202:	d1d9      	bne.n	800e1b8 <tcp_output+0x48>
 800e204:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e206:	2b00      	cmp	r3, #0
 800e208:	d1d6      	bne.n	800e1b8 <tcp_output+0x48>
 800e20a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1d2      	bne.n	800e1b8 <tcp_output+0x48>
      pcb->persist_cnt = 0;
 800e212:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_backoff = 1;
 800e216:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800e21a:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800e21e:	e7cb      	b.n	800e1b8 <tcp_output+0x48>
    return ip_route(src, dst);
 800e220:	4648      	mov	r0, r9
 800e222:	f7fb fac5 	bl	80097b0 <ip4_route>
 800e226:	e7d7      	b.n	800e1d8 <tcp_output+0x68>
  pcb->persist_backoff = 0;
 800e228:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800e22a:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800e22c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800e230:	b92e      	cbnz	r6, 800e23e <tcp_output+0xce>
    LWIP_ASSERT("RST not expected here!",
 800e232:	f8df a184 	ldr.w	sl, [pc, #388]	; 800e3b8 <tcp_output+0x248>
 800e236:	f8df b188 	ldr.w	fp, [pc, #392]	; 800e3c0 <tcp_output+0x250>
 800e23a:	e0e3      	b.n	800e404 <tcp_output+0x294>
 800e23c:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 800e23e:	6833      	ldr	r3, [r6, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d1fb      	bne.n	800e23c <tcp_output+0xcc>
 800e244:	e7f5      	b.n	800e232 <tcp_output+0xc2>
    if (pcb->state != SYN_SENT) {
 800e246:	7d23      	ldrb	r3, [r4, #20]
 800e248:	2b02      	cmp	r3, #2
 800e24a:	d009      	beq.n	800e260 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e24c:	68eb      	ldr	r3, [r5, #12]
 800e24e:	2010      	movs	r0, #16
 800e250:	899b      	ldrh	r3, [r3, #12]
 800e252:	9304      	str	r3, [sp, #16]
 800e254:	f7fc f850 	bl	800a2f8 <lwip_htons>
 800e258:	9b04      	ldr	r3, [sp, #16]
 800e25a:	68ea      	ldr	r2, [r5, #12]
 800e25c:	4318      	orrs	r0, r3
 800e25e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800e260:	4628      	mov	r0, r5
 800e262:	f7ff f8ab 	bl	800d3bc <tcp_output_segment_busy>
 800e266:	2800      	cmp	r0, #0
 800e268:	d170      	bne.n	800e34c <tcp_output+0x1dc>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e26a:	68eb      	ldr	r3, [r5, #12]
 800e26c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e26e:	9304      	str	r3, [sp, #16]
 800e270:	f7fc f845 	bl	800a2fe <lwip_htonl>
 800e274:	9b04      	ldr	r3, [sp, #16]
 800e276:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e278:	68eb      	ldr	r3, [r5, #12]
 800e27a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800e27c:	9304      	str	r3, [sp, #16]
 800e27e:	f7fc f83b 	bl	800a2f8 <lwip_htons>
 800e282:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e284:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e286:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e288:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e28a:	4413      	add	r3, r2
 800e28c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e28e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e290:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e292:	07d2      	lsls	r2, r2, #31
 800e294:	d44a      	bmi.n	800e32c <tcp_output+0x1bc>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e296:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800e29a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800e29e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800e2a0:	bfbc      	itt	lt
 800e2a2:	2300      	movlt	r3, #0
 800e2a4:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800e2a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e2a8:	b94b      	cbnz	r3, 800e2be <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800e2aa:	4948      	ldr	r1, [pc, #288]	; (800e3cc <tcp_output+0x25c>)
 800e2ac:	68eb      	ldr	r3, [r5, #12]
 800e2ae:	6809      	ldr	r1, [r1, #0]
 800e2b0:	9204      	str	r2, [sp, #16]
 800e2b2:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e2b4:	6858      	ldr	r0, [r3, #4]
 800e2b6:	f7fc f822 	bl	800a2fe <lwip_htonl>
 800e2ba:	9a04      	ldr	r2, [sp, #16]
 800e2bc:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e2be:	6869      	ldr	r1, [r5, #4]
 800e2c0:	68eb      	ldr	r3, [r5, #12]
 800e2c2:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800e2c4:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e2c8:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800e2ca:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e2cc:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800e2ce:	ebac 0c00 	sub.w	ip, ip, r0
 800e2d2:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800e2d6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800e2da:	ebac 0000 	sub.w	r0, ip, r0
 800e2de:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	7419      	strb	r1, [r3, #16]
 800e2e4:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e2e6:	7aa9      	ldrb	r1, [r5, #10]
 800e2e8:	0089      	lsls	r1, r1, #2
 800e2ea:	f001 0104 	and.w	r1, r1, #4
 800e2ee:	3114      	adds	r1, #20
 800e2f0:	440b      	add	r3, r1
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d006      	beq.n	800e304 <tcp_output+0x194>
 800e2f6:	4653      	mov	r3, sl
 800e2f8:	f240 621c 	movw	r2, #1564	; 0x61c
 800e2fc:	4934      	ldr	r1, [pc, #208]	; (800e3d0 <tcp_output+0x260>)
 800e2fe:	4658      	mov	r0, fp
 800e300:	f000 ff44 	bl	800f18c <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e304:	2206      	movs	r2, #6
 800e306:	7ae3      	ldrb	r3, [r4, #11]
 800e308:	f8cd 8008 	str.w	r8, [sp, #8]
 800e30c:	4621      	mov	r1, r4
 800e30e:	9201      	str	r2, [sp, #4]
 800e310:	7aa2      	ldrb	r2, [r4, #10]
 800e312:	9200      	str	r2, [sp, #0]
 800e314:	464a      	mov	r2, r9
 800e316:	6868      	ldr	r0, [r5, #4]
 800e318:	f7fb fbb8 	bl	8009a8c <ip4_output_if>
    if (err != ERR_OK) {
 800e31c:	b1b0      	cbz	r0, 800e34c <tcp_output+0x1dc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e31e:	8b63      	ldrh	r3, [r4, #26]
 800e320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e324:	8363      	strh	r3, [r4, #26]
}
 800e326:	b007      	add	sp, #28
 800e328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e32c:	464a      	mov	r2, r9
 800e32e:	4641      	mov	r1, r8
 800e330:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800e334:	9304      	str	r3, [sp, #16]
 800e336:	f7fd fff1 	bl	800c31c <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e33a:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800e33e:	f7fb ffde 	bl	800a2fe <lwip_htonl>
 800e342:	9b04      	ldr	r3, [sp, #16]
 800e344:	6158      	str	r0, [r3, #20]
    opts += 1;
 800e346:	f103 0218 	add.w	r2, r3, #24
 800e34a:	e7a6      	b.n	800e29a <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800e34c:	682b      	ldr	r3, [r5, #0]
 800e34e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800e350:	7d23      	ldrb	r3, [r4, #20]
 800e352:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e354:	bf1e      	ittt	ne
 800e356:	8b63      	ldrhne	r3, [r4, #26]
 800e358:	f023 0303 	bicne.w	r3, r3, #3
 800e35c:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e35e:	68eb      	ldr	r3, [r5, #12]
 800e360:	6858      	ldr	r0, [r3, #4]
 800e362:	f7fb ffcc 	bl	800a2fe <lwip_htonl>
 800e366:	892a      	ldrh	r2, [r5, #8]
 800e368:	68e9      	ldr	r1, [r5, #12]
 800e36a:	9204      	str	r2, [sp, #16]
 800e36c:	9005      	str	r0, [sp, #20]
 800e36e:	8988      	ldrh	r0, [r1, #12]
 800e370:	f7fb ffc2 	bl	800a2f8 <lwip_htons>
 800e374:	f010 0003 	ands.w	r0, r0, #3
 800e378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e37c:	bf18      	it	ne
 800e37e:	2001      	movne	r0, #1
 800e380:	4413      	add	r3, r2
    if (TCP_TCPLEN(seg) > 0) {
 800e382:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e384:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e386:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e388:	1a1b      	subs	r3, r3, r0
 800e38a:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 800e38c:	892b      	ldrh	r3, [r5, #8]
      pcb->snd_nxt = snd_nxt;
 800e38e:	bfb8      	it	lt
 800e390:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	8990      	ldrh	r0, [r2, #12]
 800e396:	f7fb ffaf 	bl	800a2f8 <lwip_htons>
 800e39a:	f010 0003 	ands.w	r0, r0, #3
 800e39e:	9b04      	ldr	r3, [sp, #16]
 800e3a0:	bf18      	it	ne
 800e3a2:	2001      	movne	r0, #1
 800e3a4:	42d8      	cmn	r0, r3
 800e3a6:	f000 8083 	beq.w	800e4b0 <tcp_output+0x340>
      seg->next = NULL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800e3ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e3b0:	b983      	cbnz	r3, 800e3d4 <tcp_output+0x264>
        pcb->unacked = seg;
 800e3b2:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800e3b4:	462e      	mov	r6, r5
 800e3b6:	e022      	b.n	800e3fe <tcp_output+0x28e>
 800e3b8:	0802027c 	.word	0x0802027c
 800e3bc:	080208c3 	.word	0x080208c3
 800e3c0:	0801d8d1 	.word	0x0801d8d1
 800e3c4:	080208db 	.word	0x080208db
 800e3c8:	20010e0c 	.word	0x20010e0c
 800e3cc:	20010dfc 	.word	0x20010dfc
 800e3d0:	08020918 	.word	0x08020918
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e3d4:	68eb      	ldr	r3, [r5, #12]
 800e3d6:	6858      	ldr	r0, [r3, #4]
 800e3d8:	f7fb ff91 	bl	800a2fe <lwip_htonl>
 800e3dc:	68f2      	ldr	r2, [r6, #12]
 800e3de:	9004      	str	r0, [sp, #16]
 800e3e0:	6850      	ldr	r0, [r2, #4]
 800e3e2:	f7fb ff8c 	bl	800a2fe <lwip_htonl>
 800e3e6:	9b04      	ldr	r3, [sp, #16]
 800e3e8:	1a18      	subs	r0, r3, r0
 800e3ea:	2800      	cmp	r0, #0
 800e3ec:	da5e      	bge.n	800e4ac <tcp_output+0x33c>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e3ee:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	2a00      	cmp	r2, #0
 800e3f6:	d148      	bne.n	800e48a <tcp_output+0x31a>
          seg->next = (*cur_seg);
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800e3fc:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800e3fe:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800e400:	2d00      	cmp	r5, #0
 800e402:	d038      	beq.n	800e476 <tcp_output+0x306>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e404:	68eb      	ldr	r3, [r5, #12]
 800e406:	6858      	ldr	r0, [r3, #4]
 800e408:	f7fb ff79 	bl	800a2fe <lwip_htonl>
 800e40c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e40e:	1ac0      	subs	r0, r0, r3
 800e410:	892b      	ldrh	r3, [r5, #8]
 800e412:	4418      	add	r0, r3
  while (seg != NULL &&
 800e414:	42b8      	cmp	r0, r7
 800e416:	d82e      	bhi.n	800e476 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800e418:	68eb      	ldr	r3, [r5, #12]
 800e41a:	8998      	ldrh	r0, [r3, #12]
 800e41c:	f7fb ff6c 	bl	800a2f8 <lwip_htons>
 800e420:	0741      	lsls	r1, r0, #29
 800e422:	d506      	bpl.n	800e432 <tcp_output+0x2c2>
 800e424:	4653      	mov	r3, sl
 800e426:	f240 5237 	movw	r2, #1335	; 0x537
 800e42a:	4925      	ldr	r1, [pc, #148]	; (800e4c0 <tcp_output+0x350>)
 800e42c:	4658      	mov	r0, fp
 800e42e:	f000 fead 	bl	800f18c <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e432:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e434:	2b00      	cmp	r3, #0
 800e436:	f43f af06 	beq.w	800e246 <tcp_output+0xd6>
 800e43a:	8b62      	ldrh	r2, [r4, #26]
 800e43c:	f012 0f44 	tst.w	r2, #68	; 0x44
 800e440:	f47f af01 	bne.w	800e246 <tcp_output+0xd6>
 800e444:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e446:	b143      	cbz	r3, 800e45a <tcp_output+0x2ea>
 800e448:	6819      	ldr	r1, [r3, #0]
 800e44a:	2900      	cmp	r1, #0
 800e44c:	f47f aefb 	bne.w	800e246 <tcp_output+0xd6>
 800e450:	8919      	ldrh	r1, [r3, #8]
 800e452:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800e454:	4299      	cmp	r1, r3
 800e456:	f4bf aef6 	bcs.w	800e246 <tcp_output+0xd6>
 800e45a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800e45e:	2b00      	cmp	r3, #0
 800e460:	f43f aef1 	beq.w	800e246 <tcp_output+0xd6>
 800e464:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800e468:	2b07      	cmp	r3, #7
 800e46a:	f63f aeec 	bhi.w	800e246 <tcp_output+0xd6>
 800e46e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800e472:	f47f aee8 	bne.w	800e246 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800e476:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800e478:	b90b      	cbnz	r3, 800e47e <tcp_output+0x30e>
    pcb->unsent_oversize = 0;
 800e47a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e47e:	8b63      	ldrh	r3, [r4, #26]
 800e480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e484:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800e486:	2000      	movs	r0, #0
 800e488:	e74d      	b.n	800e326 <tcp_output+0x1b6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e48a:	68d2      	ldr	r2, [r2, #12]
 800e48c:	9305      	str	r3, [sp, #20]
 800e48e:	6850      	ldr	r0, [r2, #4]
 800e490:	f7fb ff35 	bl	800a2fe <lwip_htonl>
 800e494:	68e9      	ldr	r1, [r5, #12]
 800e496:	9004      	str	r0, [sp, #16]
 800e498:	6848      	ldr	r0, [r1, #4]
 800e49a:	f7fb ff30 	bl	800a2fe <lwip_htonl>
 800e49e:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800e4a0:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e4a2:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	daa7      	bge.n	800e3f8 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	e7a2      	b.n	800e3f2 <tcp_output+0x282>
          useg->next = seg;
 800e4ac:	6035      	str	r5, [r6, #0]
 800e4ae:	e781      	b.n	800e3b4 <tcp_output+0x244>
      tcp_seg_free(seg);
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f7fd f8b9 	bl	800b628 <tcp_seg_free>
 800e4b6:	e7a2      	b.n	800e3fe <tcp_output+0x28e>
    return ERR_RTE;
 800e4b8:	f06f 0003 	mvn.w	r0, #3
 800e4bc:	e733      	b.n	800e326 <tcp_output+0x1b6>
 800e4be:	bf00      	nop
 800e4c0:	08020901 	.word	0x08020901

0800e4c4 <tcp_rexmit_rto_commit>:
{
 800e4c4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b930      	cbnz	r0, 800e4d8 <tcp_rexmit_rto_commit+0x14>
 800e4ca:	4b09      	ldr	r3, [pc, #36]	; (800e4f0 <tcp_rexmit_rto_commit+0x2c>)
 800e4cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e4d0:	4908      	ldr	r1, [pc, #32]	; (800e4f4 <tcp_rexmit_rto_commit+0x30>)
 800e4d2:	4809      	ldr	r0, [pc, #36]	; (800e4f8 <tcp_rexmit_rto_commit+0x34>)
 800e4d4:	f000 fe5a 	bl	800f18c <iprintf>
  if (pcb->nrtx < 0xFF) {
 800e4d8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800e4dc:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800e4de:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800e4e0:	bf1c      	itt	ne
 800e4e2:	3301      	addne	r3, #1
 800e4e4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800e4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800e4ec:	f7ff be40 	b.w	800e170 <tcp_output>
 800e4f0:	0802027c 	.word	0x0802027c
 800e4f4:	0802092b 	.word	0x0802092b
 800e4f8:	0801d8d1 	.word	0x0801d8d1

0800e4fc <tcp_rexmit_rto>:
{
 800e4fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e4fe:	4604      	mov	r4, r0
 800e500:	b930      	cbnz	r0, 800e510 <tcp_rexmit_rto+0x14>
 800e502:	4b08      	ldr	r3, [pc, #32]	; (800e524 <tcp_rexmit_rto+0x28>)
 800e504:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e508:	4907      	ldr	r1, [pc, #28]	; (800e528 <tcp_rexmit_rto+0x2c>)
 800e50a:	4808      	ldr	r0, [pc, #32]	; (800e52c <tcp_rexmit_rto+0x30>)
 800e50c:	f000 fe3e 	bl	800f18c <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e510:	4620      	mov	r0, r4
 800e512:	f7ff fcfb 	bl	800df0c <tcp_rexmit_rto_prepare>
 800e516:	b920      	cbnz	r0, 800e522 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800e518:	4620      	mov	r0, r4
}
 800e51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800e51e:	f7ff bfd1 	b.w	800e4c4 <tcp_rexmit_rto_commit>
}
 800e522:	bd10      	pop	{r4, pc}
 800e524:	0802027c 	.word	0x0802027c
 800e528:	0802094e 	.word	0x0802094e
 800e52c:	0801d8d1 	.word	0x0801d8d1

0800e530 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e530:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e532:	4604      	mov	r4, r0
 800e534:	b930      	cbnz	r0, 800e544 <tcp_keepalive+0x14>
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <tcp_keepalive+0x44>)
 800e538:	f640 0224 	movw	r2, #2084	; 0x824
 800e53c:	490e      	ldr	r1, [pc, #56]	; (800e578 <tcp_keepalive+0x48>)
 800e53e:	480f      	ldr	r0, [pc, #60]	; (800e57c <tcp_keepalive+0x4c>)
 800e540:	f000 fe24 	bl	800f18c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e544:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800e546:	3801      	subs	r0, #1
 800e548:	f7fb fed9 	bl	800a2fe <lwip_htonl>
 800e54c:	2100      	movs	r1, #0
 800e54e:	4602      	mov	r2, r0
 800e550:	4620      	mov	r0, r4
 800e552:	f7ff f847 	bl	800d5e4 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800e556:	4605      	mov	r5, r0
 800e558:	b148      	cbz	r0, 800e56e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e55a:	f7ff f869 	bl	800d630 <tcp_output_fill_options.isra.0.constprop.5>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e55e:	1d23      	adds	r3, r4, #4
 800e560:	4622      	mov	r2, r4
 800e562:	4629      	mov	r1, r5
 800e564:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e56a:	f7ff b871 	b.w	800d650 <tcp_output_control_segment>
}
 800e56e:	f04f 30ff 	mov.w	r0, #4294967295
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	0802027c 	.word	0x0802027c
 800e578:	0802096a 	.word	0x0802096a
 800e57c:	0801d8d1 	.word	0x0801d8d1

0800e580 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e584:	4605      	mov	r5, r0
 800e586:	b930      	cbnz	r0, 800e596 <tcp_zero_window_probe+0x16>
 800e588:	4b2c      	ldr	r3, [pc, #176]	; (800e63c <tcp_zero_window_probe+0xbc>)
 800e58a:	f640 024f 	movw	r2, #2127	; 0x84f
 800e58e:	492c      	ldr	r1, [pc, #176]	; (800e640 <tcp_zero_window_probe+0xc0>)
 800e590:	482c      	ldr	r0, [pc, #176]	; (800e644 <tcp_zero_window_probe+0xc4>)
 800e592:	f000 fdfb 	bl	800f18c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e596:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800e598:	2c00      	cmp	r4, #0
 800e59a:	d048      	beq.n	800e62e <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e59c:	f895 3096 	ldrb.w	r3, [r5, #150]	; 0x96
 800e5a0:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800e5a2:	bf1c      	itt	ne
 800e5a4:	3301      	addne	r3, #1
 800e5a6:	f885 3096 	strbne.w	r3, [r5, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e5aa:	68e3      	ldr	r3, [r4, #12]
 800e5ac:	8998      	ldrh	r0, [r3, #12]
 800e5ae:	f7fb fea3 	bl	800a2f8 <lwip_htons>
 800e5b2:	f010 0601 	ands.w	r6, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e5b6:	68e3      	ldr	r3, [r4, #12]
 800e5b8:	4628      	mov	r0, r5
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e5ba:	bf18      	it	ne
 800e5bc:	8926      	ldrhne	r6, [r4, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e5be:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e5c0:	bf1c      	itt	ne
 800e5c2:	fab6 f686 	clzne	r6, r6
 800e5c6:	0976      	lsrne	r6, r6, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e5c8:	f086 0101 	eor.w	r1, r6, #1
 800e5cc:	f7ff f80a 	bl	800d5e4 <tcp_output_alloc_header.constprop.3>
  if (p == NULL) {
 800e5d0:	4607      	mov	r7, r0
 800e5d2:	b378      	cbz	r0, 800e634 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e5d4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800e5d8:	b1f6      	cbz	r6, 800e618 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e5da:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 800e5de:	2011      	movs	r0, #17
 800e5e0:	f7fb fe8a 	bl	800a2f8 <lwip_htons>
 800e5e4:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800e5e8:	4330      	orrs	r0, r6
 800e5ea:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e5ee:	68e3      	ldr	r3, [r4, #12]
 800e5f0:	6858      	ldr	r0, [r3, #4]
 800e5f2:	f7fb fe84 	bl	800a2fe <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5f6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e5f8:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e5fa:	1a1b      	subs	r3, r3, r0
 800e5fc:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800e5fe:	bfb8      	it	lt
 800e600:	6528      	strlt	r0, [r5, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e602:	4638      	mov	r0, r7
 800e604:	f7ff f814 	bl	800d630 <tcp_output_fill_options.isra.0.constprop.5>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e608:	1d2b      	adds	r3, r5, #4
 800e60a:	462a      	mov	r2, r5
 800e60c:	4639      	mov	r1, r7
 800e60e:	4628      	mov	r0, r5

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800e610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e614:	f7ff b81c 	b.w	800d650 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e618:	6860      	ldr	r0, [r4, #4]
 800e61a:	f108 0114 	add.w	r1, r8, #20
 800e61e:	8922      	ldrh	r2, [r4, #8]
 800e620:	8903      	ldrh	r3, [r0, #8]
 800e622:	1a9b      	subs	r3, r3, r2
 800e624:	2201      	movs	r2, #1
 800e626:	b29b      	uxth	r3, r3
 800e628:	f7fc fdf2 	bl	800b210 <pbuf_copy_partial>
 800e62c:	e7df      	b.n	800e5ee <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800e62e:	4620      	mov	r0, r4
}
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800e634:	f04f 30ff 	mov.w	r0, #4294967295
 800e638:	e7fa      	b.n	800e630 <tcp_zero_window_probe+0xb0>
 800e63a:	bf00      	nop
 800e63c:	0802027c 	.word	0x0802027c
 800e640:	08020985 	.word	0x08020985
 800e644:	0801d8d1 	.word	0x0801d8d1

0800e648 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e64c:	200a      	movs	r0, #10
{
 800e64e:	460e      	mov	r6, r1
 800e650:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e652:	f7fc f96f 	bl	800a934 <memp_malloc>
  if (timeout == NULL) {
 800e656:	b938      	cbnz	r0, 800e668 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e658:	4b10      	ldr	r3, [pc, #64]	; (800e69c <sys_timeout_abs+0x54>)
 800e65a:	22be      	movs	r2, #190	; 0xbe
 800e65c:	4910      	ldr	r1, [pc, #64]	; (800e6a0 <sys_timeout_abs+0x58>)
 800e65e:	4811      	ldr	r0, [pc, #68]	; (800e6a4 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800e660:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e664:	f000 bd92 	b.w	800f18c <iprintf>
  timeout->next = NULL;
 800e668:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800e66a:	4a0f      	ldr	r2, [pc, #60]	; (800e6a8 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800e66c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800e66e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800e670:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800e672:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800e676:	b90b      	cbnz	r3, 800e67c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800e678:	6010      	str	r0, [r2, #0]
}
 800e67a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e67c:	6859      	ldr	r1, [r3, #4]
 800e67e:	1a61      	subs	r1, r4, r1
 800e680:	2900      	cmp	r1, #0
 800e682:	da02      	bge.n	800e68a <sys_timeout_abs+0x42>
    timeout->next = next_timeout;
 800e684:	6003      	str	r3, [r0, #0]
 800e686:	e7f7      	b.n	800e678 <sys_timeout_abs+0x30>
 800e688:	4613      	mov	r3, r2
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	b11a      	cbz	r2, 800e696 <sys_timeout_abs+0x4e>
 800e68e:	6851      	ldr	r1, [r2, #4]
 800e690:	1a61      	subs	r1, r4, r1
 800e692:	2900      	cmp	r1, #0
 800e694:	daf8      	bge.n	800e688 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800e696:	6002      	str	r2, [r0, #0]
        t->next = timeout;
 800e698:	6018      	str	r0, [r3, #0]
        break;
 800e69a:	e7ee      	b.n	800e67a <sys_timeout_abs+0x32>
 800e69c:	080209a8 	.word	0x080209a8
 800e6a0:	08020a19 	.word	0x08020a19
 800e6a4:	0801d8d1 	.word	0x0801d8d1
 800e6a8:	200069c4 	.word	0x200069c4

0800e6ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e6ac:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e6ae:	6843      	ldr	r3, [r0, #4]
{
 800e6b0:	4604      	mov	r4, r0
  cyclic->handler();
 800e6b2:	4798      	blx	r3

  now = sys_now();
 800e6b4:	f7f2 faa4 	bl	8000c00 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e6b8:	4b07      	ldr	r3, [pc, #28]	; (800e6d8 <lwip_cyclic_timer+0x2c>)
 800e6ba:	6825      	ldr	r5, [r4, #0]
 800e6bc:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e6be:	4907      	ldr	r1, [pc, #28]	; (800e6dc <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e6c0:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e6c2:	1a1a      	subs	r2, r3, r0
 800e6c4:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e6c6:	4622      	mov	r2, r4
 800e6c8:	bfb4      	ite	lt
 800e6ca:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e6cc:	4618      	movge	r0, r3
#endif
  }
}
 800e6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e6d2:	f7ff bfb9 	b.w	800e648 <sys_timeout_abs>
 800e6d6:	bf00      	nop
 800e6d8:	200069c4 	.word	0x200069c4
 800e6dc:	0800e6ad 	.word	0x0800e6ad

0800e6e0 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e6e0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	460d      	mov	r5, r1
 800e6ea:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e6ec:	d306      	bcc.n	800e6fc <sys_timeout+0x1c>
 800e6ee:	4b08      	ldr	r3, [pc, #32]	; (800e710 <sys_timeout+0x30>)
 800e6f0:	f240 1229 	movw	r2, #297	; 0x129
 800e6f4:	4907      	ldr	r1, [pc, #28]	; (800e714 <sys_timeout+0x34>)
 800e6f6:	4808      	ldr	r0, [pc, #32]	; (800e718 <sys_timeout+0x38>)
 800e6f8:	f000 fd48 	bl	800f18c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e6fc:	f7f2 fa80 	bl	8000c00 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e700:	4632      	mov	r2, r6
 800e702:	4629      	mov	r1, r5
 800e704:	4420      	add	r0, r4
#endif
}
 800e706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e70a:	f7ff bf9d 	b.w	800e648 <sys_timeout_abs>
 800e70e:	bf00      	nop
 800e710:	080209a8 	.word	0x080209a8
 800e714:	08020a56 	.word	0x08020a56
 800e718:	0801d8d1 	.word	0x0801d8d1

0800e71c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e71c:	4b08      	ldr	r3, [pc, #32]	; (800e740 <tcp_timer_needed+0x24>)
 800e71e:	689a      	ldr	r2, [r3, #8]
 800e720:	b962      	cbnz	r2, 800e73c <tcp_timer_needed+0x20>
 800e722:	4a08      	ldr	r2, [pc, #32]	; (800e744 <tcp_timer_needed+0x28>)
 800e724:	6812      	ldr	r2, [r2, #0]
 800e726:	b912      	cbnz	r2, 800e72e <tcp_timer_needed+0x12>
 800e728:	4a07      	ldr	r2, [pc, #28]	; (800e748 <tcp_timer_needed+0x2c>)
 800e72a:	6812      	ldr	r2, [r2, #0]
 800e72c:	b132      	cbz	r2, 800e73c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800e72e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e730:	4906      	ldr	r1, [pc, #24]	; (800e74c <tcp_timer_needed+0x30>)
 800e732:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800e734:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e736:	2200      	movs	r2, #0
 800e738:	f7ff bfd2 	b.w	800e6e0 <sys_timeout>
}
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop
 800e740:	200069c4 	.word	0x200069c4
 800e744:	20010df8 	.word	0x20010df8
 800e748:	20010e08 	.word	0x20010e08
 800e74c:	0800e751 	.word	0x0800e751

0800e750 <tcpip_tcp_timer>:
{
 800e750:	b508      	push	{r3, lr}
  tcp_tmr();
 800e752:	f7fd fc0d 	bl	800bf70 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e756:	4b08      	ldr	r3, [pc, #32]	; (800e778 <tcpip_tcp_timer+0x28>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	b913      	cbnz	r3, 800e762 <tcpip_tcp_timer+0x12>
 800e75c:	4b07      	ldr	r3, [pc, #28]	; (800e77c <tcpip_tcp_timer+0x2c>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	b133      	cbz	r3, 800e770 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e762:	2200      	movs	r2, #0
 800e764:	4906      	ldr	r1, [pc, #24]	; (800e780 <tcpip_tcp_timer+0x30>)
 800e766:	20fa      	movs	r0, #250	; 0xfa
}
 800e768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e76c:	f7ff bfb8 	b.w	800e6e0 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800e770:	4a04      	ldr	r2, [pc, #16]	; (800e784 <tcpip_tcp_timer+0x34>)
 800e772:	6093      	str	r3, [r2, #8]
}
 800e774:	bd08      	pop	{r3, pc}
 800e776:	bf00      	nop
 800e778:	20010df8 	.word	0x20010df8
 800e77c:	20010e08 	.word	0x20010e08
 800e780:	0800e751 	.word	0x0800e751
 800e784:	200069c4 	.word	0x200069c4

0800e788 <sys_timeouts_init>:
{
 800e788:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e78a:	4d10      	ldr	r5, [pc, #64]	; (800e7cc <sys_timeouts_init+0x44>)
 800e78c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e790:	4c0f      	ldr	r4, [pc, #60]	; (800e7d0 <sys_timeouts_init+0x48>)
 800e792:	f105 0208 	add.w	r2, r5, #8
 800e796:	4621      	mov	r1, r4
 800e798:	f7ff ffa2 	bl	800e6e0 <sys_timeout>
 800e79c:	f105 0210 	add.w	r2, r5, #16
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e7a6:	f7ff ff9b 	bl	800e6e0 <sys_timeout>
 800e7aa:	f105 0218 	add.w	r2, r5, #24
 800e7ae:	4621      	mov	r1, r4
 800e7b0:	f64e 2060 	movw	r0, #60000	; 0xea60
 800e7b4:	f7ff ff94 	bl	800e6e0 <sys_timeout>
 800e7b8:	f105 0220 	add.w	r2, r5, #32
 800e7bc:	4621      	mov	r1, r4
 800e7be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800e7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e7c6:	f7ff bf8b 	b.w	800e6e0 <sys_timeout>
 800e7ca:	bf00      	nop
 800e7cc:	08014a90 	.word	0x08014a90
 800e7d0:	0800e6ad 	.word	0x0800e6ad

0800e7d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e7d6:	f7f2 fa13 	bl	8000c00 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e7da:	4c0b      	ldr	r4, [pc, #44]	; (800e808 <sys_check_timeouts+0x34>)
  now = sys_now();
 800e7dc:	4607      	mov	r7, r0
    tmptimeout = next_timeout;
 800e7de:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800e7e0:	b181      	cbz	r1, 800e804 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e7e2:	684b      	ldr	r3, [r1, #4]
 800e7e4:	1afa      	subs	r2, r7, r3
 800e7e6:	2a00      	cmp	r2, #0
 800e7e8:	db0c      	blt.n	800e804 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e7ea:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e7ec:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800e7ee:	6063      	str	r3, [r4, #4]
    next_timeout = tmptimeout->next;
 800e7f0:	6022      	str	r2, [r4, #0]
    arg = tmptimeout->arg;
 800e7f2:	e9d1 5602 	ldrd	r5, r6, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e7f6:	f7fc f8b9 	bl	800a96c <memp_free>
    if (handler != NULL) {
 800e7fa:	2d00      	cmp	r5, #0
 800e7fc:	d0ef      	beq.n	800e7de <sys_check_timeouts+0xa>
      handler(arg);
 800e7fe:	4630      	mov	r0, r6
 800e800:	47a8      	blx	r5
 800e802:	e7ec      	b.n	800e7de <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e806:	bf00      	nop
 800e808:	200069c4 	.word	0x200069c4

0800e80c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e80c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e80e:	4c07      	ldr	r4, [pc, #28]	; (800e82c <sys_timeouts_sleeptime+0x20>)
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	b13b      	cbz	r3, 800e824 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800e814:	f7f2 f9f4 	bl	8000c00 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e818:	6823      	ldr	r3, [r4, #0]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	1a18      	subs	r0, r3, r0
    return 0;
 800e81e:	bf48      	it	mi
 800e820:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800e822:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e824:	f04f 30ff 	mov.w	r0, #4294967295
 800e828:	e7fb      	b.n	800e822 <sys_timeouts_sleeptime+0x16>
 800e82a:	bf00      	nop
 800e82c:	200069c4 	.word	0x200069c4

0800e830 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e830:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e832:	f000 fd27 	bl	800f284 <rand>
 800e836:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800e83a:	4b02      	ldr	r3, [pc, #8]	; (800e844 <udp_init+0x14>)
 800e83c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800e840:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800e842:	bd08      	pop	{r3, pc}
 800e844:	2000004c 	.word	0x2000004c

0800e848 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84c:	4688      	mov	r8, r1
 800e84e:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e850:	4607      	mov	r7, r0
 800e852:	b928      	cbnz	r0, 800e860 <udp_input+0x18>
 800e854:	4b5c      	ldr	r3, [pc, #368]	; (800e9c8 <udp_input+0x180>)
 800e856:	22cf      	movs	r2, #207	; 0xcf
 800e858:	495c      	ldr	r1, [pc, #368]	; (800e9cc <udp_input+0x184>)
 800e85a:	485d      	ldr	r0, [pc, #372]	; (800e9d0 <udp_input+0x188>)
 800e85c:	f000 fc96 	bl	800f18c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e860:	f1b8 0f00 	cmp.w	r8, #0
 800e864:	d105      	bne.n	800e872 <udp_input+0x2a>
 800e866:	4b58      	ldr	r3, [pc, #352]	; (800e9c8 <udp_input+0x180>)
 800e868:	22d0      	movs	r2, #208	; 0xd0
 800e86a:	495a      	ldr	r1, [pc, #360]	; (800e9d4 <udp_input+0x18c>)
 800e86c:	4858      	ldr	r0, [pc, #352]	; (800e9d0 <udp_input+0x188>)
 800e86e:	f000 fc8d 	bl	800f18c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e872:	897b      	ldrh	r3, [r7, #10]
 800e874:	2b07      	cmp	r3, #7
 800e876:	d805      	bhi.n	800e884 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800e878:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800e87a:	b005      	add	sp, #20
 800e87c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800e880:	f7fc ba9e 	b.w	800adc0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e884:	4e54      	ldr	r6, [pc, #336]	; (800e9d8 <udp_input+0x190>)
  uncon_pcb = NULL;
 800e886:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800e888:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e88a:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800e88c:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e88e:	6970      	ldr	r0, [r6, #20]
 800e890:	f7fb f90d 	bl	8009aae <ip4_addr_isbroadcast_u32>
 800e894:	4682      	mov	sl, r0
  src = lwip_ntohs(udphdr->src);
 800e896:	8820      	ldrh	r0, [r4, #0]
 800e898:	f7fb fd2e 	bl	800a2f8 <lwip_htons>
 800e89c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800e89e:	8860      	ldrh	r0, [r4, #2]
 800e8a0:	f7fb fd2a 	bl	800a2f8 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a4:	4b4d      	ldr	r3, [pc, #308]	; (800e9dc <udp_input+0x194>)
  dest = lwip_ntohs(udphdr->dest);
 800e8a6:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8a8:	681c      	ldr	r4, [r3, #0]
 800e8aa:	4699      	mov	r9, r3
 800e8ac:	b99c      	cbnz	r4, 800e8d6 <udp_input+0x8e>
  if (pcb != NULL) {
 800e8ae:	b925      	cbnz	r5, 800e8ba <udp_input+0x72>
  if (for_us) {
 800e8b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e8b4:	6973      	ldr	r3, [r6, #20]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d1de      	bne.n	800e878 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800e8ba:	2108      	movs	r1, #8
 800e8bc:	4638      	mov	r0, r7
 800e8be:	f7fc fa4b 	bl	800ad58 <pbuf_remove_header>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d05c      	beq.n	800e980 <udp_input+0x138>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800e8c6:	4b40      	ldr	r3, [pc, #256]	; (800e9c8 <udp_input+0x180>)
 800e8c8:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800e8cc:	4944      	ldr	r1, [pc, #272]	; (800e9e0 <udp_input+0x198>)
 800e8ce:	4840      	ldr	r0, [pc, #256]	; (800e9d0 <udp_input+0x188>)
 800e8d0:	f000 fc5c 	bl	800f18c <iprintf>
 800e8d4:	e7d0      	b.n	800e878 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800e8d6:	8a63      	ldrh	r3, [r4, #18]
 800e8d8:	9a03      	ldr	r2, [sp, #12]
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d14b      	bne.n	800e976 <udp_input+0x12e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e8de:	f1b8 0f00 	cmp.w	r8, #0
 800e8e2:	d105      	bne.n	800e8f0 <udp_input+0xa8>
 800e8e4:	4b38      	ldr	r3, [pc, #224]	; (800e9c8 <udp_input+0x180>)
 800e8e6:	2288      	movs	r2, #136	; 0x88
 800e8e8:	493e      	ldr	r1, [pc, #248]	; (800e9e4 <udp_input+0x19c>)
 800e8ea:	4839      	ldr	r0, [pc, #228]	; (800e9d0 <udp_input+0x188>)
 800e8ec:	f000 fc4e 	bl	800f18c <iprintf>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8f0:	7a22      	ldrb	r2, [r4, #8]
 800e8f2:	b132      	cbz	r2, 800e902 <udp_input+0xba>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8f4:	6873      	ldr	r3, [r6, #4]
 800e8f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8fa:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8fc:	b2db      	uxtb	r3, r3
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d139      	bne.n	800e976 <udp_input+0x12e>
 800e902:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 800e904:	f1ba 0f00 	cmp.w	sl, #0
 800e908:	d030      	beq.n	800e96c <udp_input+0x124>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e90a:	b13b      	cbz	r3, 800e91c <udp_input+0xd4>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e90c:	6972      	ldr	r2, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e90e:	1c51      	adds	r1, r2, #1
 800e910:	d004      	beq.n	800e91c <udp_input+0xd4>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e912:	405a      	eors	r2, r3
 800e914:	f8d8 1008 	ldr.w	r1, [r8, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e918:	420a      	tst	r2, r1
 800e91a:	d12c      	bne.n	800e976 <udp_input+0x12e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e91c:	7c22      	ldrb	r2, [r4, #16]
 800e91e:	0752      	lsls	r2, r2, #29
 800e920:	d40e      	bmi.n	800e940 <udp_input+0xf8>
        if (uncon_pcb == NULL) {
 800e922:	b35d      	cbz	r5, 800e97c <udp_input+0x134>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800e924:	f1ba 0f00 	cmp.w	sl, #0
 800e928:	d00a      	beq.n	800e940 <udp_input+0xf8>
 800e92a:	6972      	ldr	r2, [r6, #20]
 800e92c:	3201      	adds	r2, #1
 800e92e:	d107      	bne.n	800e940 <udp_input+0xf8>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800e930:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800e934:	6829      	ldr	r1, [r5, #0]
 800e936:	4291      	cmp	r1, r2
 800e938:	d002      	beq.n	800e940 <udp_input+0xf8>
 800e93a:	429a      	cmp	r2, r3
 800e93c:	bf08      	it	eq
 800e93e:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800e940:	8aa3      	ldrh	r3, [r4, #20]
 800e942:	9a02      	ldr	r2, [sp, #8]
 800e944:	4293      	cmp	r3, r2
 800e946:	d116      	bne.n	800e976 <udp_input+0x12e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e948:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800e94a:	b113      	cbz	r3, 800e952 <udp_input+0x10a>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800e94c:	6932      	ldr	r2, [r6, #16]
 800e94e:	4293      	cmp	r3, r2
 800e950:	d111      	bne.n	800e976 <udp_input+0x12e>
        if (prev != NULL) {
 800e952:	f1bb 0f00 	cmp.w	fp, #0
 800e956:	d007      	beq.n	800e968 <udp_input+0x120>
          prev->next = pcb->next;
 800e958:	68e3      	ldr	r3, [r4, #12]
 800e95a:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800e95e:	f8d9 3000 	ldr.w	r3, [r9]
          udp_pcbs = pcb;
 800e962:	f8c9 4000 	str.w	r4, [r9]
          pcb->next = udp_pcbs;
 800e966:	60e3      	str	r3, [r4, #12]
 800e968:	4625      	mov	r5, r4
 800e96a:	e7a6      	b.n	800e8ba <udp_input+0x72>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0d5      	beq.n	800e91c <udp_input+0xd4>
 800e970:	6972      	ldr	r2, [r6, #20]
 800e972:	429a      	cmp	r2, r3
 800e974:	d0d2      	beq.n	800e91c <udp_input+0xd4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e976:	46a3      	mov	fp, r4
 800e978:	68e4      	ldr	r4, [r4, #12]
 800e97a:	e797      	b.n	800e8ac <udp_input+0x64>
 800e97c:	4625      	mov	r5, r4
 800e97e:	e7df      	b.n	800e940 <udp_input+0xf8>
    if (pcb != NULL) {
 800e980:	b16d      	cbz	r5, 800e99e <udp_input+0x156>
      if (pcb->recv != NULL) {
 800e982:	69ac      	ldr	r4, [r5, #24]
 800e984:	2c00      	cmp	r4, #0
 800e986:	f43f af77 	beq.w	800e878 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800e98a:	9b02      	ldr	r3, [sp, #8]
 800e98c:	463a      	mov	r2, r7
 800e98e:	4629      	mov	r1, r5
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <udp_input+0x1a0>)
 800e994:	69e8      	ldr	r0, [r5, #28]
 800e996:	47a0      	blx	r4
}
 800e998:	b005      	add	sp, #20
 800e99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800e99e:	f1ba 0f00 	cmp.w	sl, #0
 800e9a2:	f47f af69 	bne.w	800e878 <udp_input+0x30>
 800e9a6:	6973      	ldr	r3, [r6, #20]
 800e9a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e9ac:	2be0      	cmp	r3, #224	; 0xe0
 800e9ae:	f43f af63 	beq.w	800e878 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800e9b2:	89b1      	ldrh	r1, [r6, #12]
 800e9b4:	4638      	mov	r0, r7
 800e9b6:	3108      	adds	r1, #8
 800e9b8:	b209      	sxth	r1, r1
 800e9ba:	f7fc f9f9 	bl	800adb0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800e9be:	2103      	movs	r1, #3
 800e9c0:	4638      	mov	r0, r7
 800e9c2:	f7fa fed1 	bl	8009768 <icmp_dest_unreach>
 800e9c6:	e757      	b.n	800e878 <udp_input+0x30>
 800e9c8:	08020a8c 	.word	0x08020a8c
 800e9cc:	08020af8 	.word	0x08020af8
 800e9d0:	0801d8d1 	.word	0x0801d8d1
 800e9d4:	08020b10 	.word	0x08020b10
 800e9d8:	2000a8c4 	.word	0x2000a8c4
 800e9dc:	20010e10 	.word	0x20010e10
 800e9e0:	08020b4e 	.word	0x08020b4e
 800e9e4:	08020b29 	.word	0x08020b29
 800e9e8:	2000a8d4 	.word	0x2000a8d4

0800e9ec <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800e9ec:	4b2d      	ldr	r3, [pc, #180]	; (800eaa4 <udp_bind+0xb8>)
{
 800e9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800e9f2:	2900      	cmp	r1, #0
 800e9f4:	bf08      	it	eq
 800e9f6:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e9f8:	b950      	cbnz	r0, 800ea10 <udp_bind+0x24>
 800e9fa:	4b2b      	ldr	r3, [pc, #172]	; (800eaa8 <udp_bind+0xbc>)
 800e9fc:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ea00:	492a      	ldr	r1, [pc, #168]	; (800eaac <udp_bind+0xc0>)
 800ea02:	482b      	ldr	r0, [pc, #172]	; (800eab0 <udp_bind+0xc4>)
 800ea04:	f000 fbc2 	bl	800f18c <iprintf>
 800ea08:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea10:	4f28      	ldr	r7, [pc, #160]	; (800eab4 <udp_bind+0xc8>)
 800ea12:	683e      	ldr	r6, [r7, #0]
 800ea14:	4635      	mov	r5, r6
 800ea16:	b9d5      	cbnz	r5, 800ea4e <udp_bind+0x62>
  if (port == 0) {
 800ea18:	2a00      	cmp	r2, #0
 800ea1a:	d140      	bne.n	800ea9e <udp_bind+0xb2>
 800ea1c:	4b26      	ldr	r3, [pc, #152]	; (800eab8 <udp_bind+0xcc>)
 800ea1e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ea22:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800ea26:	881a      	ldrh	r2, [r3, #0]
 800ea28:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea2a:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ea2c:	bf16      	itet	ne
 800ea2e:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ea30:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ea34:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea36:	f1bc 0f00 	cmp.w	ip, #0
 800ea3a:	d10e      	bne.n	800ea5a <udp_bind+0x6e>
 800ea3c:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ea3e:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800ea40:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ea42:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800ea44:	b90d      	cbnz	r5, 800ea4a <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800ea46:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800ea48:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e7de      	b.n	800ea0c <udp_bind+0x20>
    if (pcb == ipcb) {
 800ea4e:	4285      	cmp	r5, r0
 800ea50:	d001      	beq.n	800ea56 <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea52:	68ed      	ldr	r5, [r5, #12]
 800ea54:	e7df      	b.n	800ea16 <udp_bind+0x2a>
      rebind = 1;
 800ea56:	2501      	movs	r5, #1
 800ea58:	e7de      	b.n	800ea18 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800ea5a:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800ea5e:	4590      	cmp	r8, r2
 800ea60:	d107      	bne.n	800ea72 <udp_bind+0x86>
 800ea62:	3c01      	subs	r4, #1
 800ea64:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ea66:	2c00      	cmp	r4, #0
 800ea68:	d1de      	bne.n	800ea28 <udp_bind+0x3c>
 800ea6a:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800ea6c:	f06f 0007 	mvn.w	r0, #7
 800ea70:	e7cc      	b.n	800ea0c <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea72:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800ea76:	e7de      	b.n	800ea36 <udp_bind+0x4a>
      if (pcb != ipcb) {
 800ea78:	4283      	cmp	r3, r0
 800ea7a:	d00c      	beq.n	800ea96 <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800ea7c:	8a5c      	ldrh	r4, [r3, #18]
 800ea7e:	4294      	cmp	r4, r2
 800ea80:	d109      	bne.n	800ea96 <udp_bind+0xaa>
 800ea82:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea86:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ea88:	4564      	cmp	r4, ip
 800ea8a:	d0ef      	beq.n	800ea6c <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ea8c:	f1bc 0f00 	cmp.w	ip, #0
 800ea90:	d0ec      	beq.n	800ea6c <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800ea92:	2c00      	cmp	r4, #0
 800ea94:	d0ea      	beq.n	800ea6c <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1ed      	bne.n	800ea78 <udp_bind+0x8c>
 800ea9c:	e7cf      	b.n	800ea3e <udp_bind+0x52>
 800ea9e:	4633      	mov	r3, r6
 800eaa0:	e7fa      	b.n	800ea98 <udp_bind+0xac>
 800eaa2:	bf00      	nop
 800eaa4:	0801496c 	.word	0x0801496c
 800eaa8:	08020a8c 	.word	0x08020a8c
 800eaac:	08020b69 	.word	0x08020b69
 800eab0:	0801d8d1 	.word	0x0801d8d1
 800eab4:	20010e10 	.word	0x20010e10
 800eab8:	2000004c 	.word	0x2000004c

0800eabc <udp_sendto_if_src>:
{
 800eabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac0:	b085      	sub	sp, #20
 800eac2:	460e      	mov	r6, r1
 800eac4:	4691      	mov	r9, r2
 800eac6:	469b      	mov	fp, r3
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800eac8:	4607      	mov	r7, r0
{
 800eaca:	e9dd a80e 	ldrd	sl, r8, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800eace:	b960      	cbnz	r0, 800eaea <udp_sendto_if_src+0x2e>
 800ead0:	4b3e      	ldr	r3, [pc, #248]	; (800ebcc <udp_sendto_if_src+0x110>)
 800ead2:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ead6:	493e      	ldr	r1, [pc, #248]	; (800ebd0 <udp_sendto_if_src+0x114>)
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ead8:	f06f 040f 	mvn.w	r4, #15
 800eadc:	483d      	ldr	r0, [pc, #244]	; (800ebd4 <udp_sendto_if_src+0x118>)
 800eade:	f000 fb55 	bl	800f18c <iprintf>
}
 800eae2:	4620      	mov	r0, r4
 800eae4:	b005      	add	sp, #20
 800eae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800eaea:	b921      	cbnz	r1, 800eaf6 <udp_sendto_if_src+0x3a>
 800eaec:	4b37      	ldr	r3, [pc, #220]	; (800ebcc <udp_sendto_if_src+0x110>)
 800eaee:	f240 22d2 	movw	r2, #722	; 0x2d2
 800eaf2:	4939      	ldr	r1, [pc, #228]	; (800ebd8 <udp_sendto_if_src+0x11c>)
 800eaf4:	e7f0      	b.n	800ead8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800eaf6:	b922      	cbnz	r2, 800eb02 <udp_sendto_if_src+0x46>
 800eaf8:	4b34      	ldr	r3, [pc, #208]	; (800ebcc <udp_sendto_if_src+0x110>)
 800eafa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800eafe:	4937      	ldr	r1, [pc, #220]	; (800ebdc <udp_sendto_if_src+0x120>)
 800eb00:	e7ea      	b.n	800ead8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800eb02:	f1b8 0f00 	cmp.w	r8, #0
 800eb06:	d104      	bne.n	800eb12 <udp_sendto_if_src+0x56>
 800eb08:	4b30      	ldr	r3, [pc, #192]	; (800ebcc <udp_sendto_if_src+0x110>)
 800eb0a:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800eb0e:	4934      	ldr	r1, [pc, #208]	; (800ebe0 <udp_sendto_if_src+0x124>)
 800eb10:	e7e2      	b.n	800ead8 <udp_sendto_if_src+0x1c>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800eb12:	f1ba 0f00 	cmp.w	sl, #0
 800eb16:	d104      	bne.n	800eb22 <udp_sendto_if_src+0x66>
 800eb18:	4b2c      	ldr	r3, [pc, #176]	; (800ebcc <udp_sendto_if_src+0x110>)
 800eb1a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800eb1e:	4931      	ldr	r1, [pc, #196]	; (800ebe4 <udp_sendto_if_src+0x128>)
 800eb20:	e7da      	b.n	800ead8 <udp_sendto_if_src+0x1c>
  if (pcb->local_port == 0) {
 800eb22:	8a42      	ldrh	r2, [r0, #18]
 800eb24:	b13a      	cbz	r2, 800eb36 <udp_sendto_if_src+0x7a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800eb26:	8932      	ldrh	r2, [r6, #8]
 800eb28:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d909      	bls.n	800eb44 <udp_sendto_if_src+0x88>
    return ERR_MEM;
 800eb30:	f04f 34ff 	mov.w	r4, #4294967295
 800eb34:	e7d5      	b.n	800eae2 <udp_sendto_if_src+0x26>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800eb36:	4601      	mov	r1, r0
 800eb38:	f7ff ff58 	bl	800e9ec <udp_bind>
    if (err != ERR_OK) {
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	d0f1      	beq.n	800eb26 <udp_sendto_if_src+0x6a>
 800eb42:	e7ce      	b.n	800eae2 <udp_sendto_if_src+0x26>
  if (pbuf_add_header(p, UDP_HLEN)) {
 800eb44:	2108      	movs	r1, #8
 800eb46:	4630      	mov	r0, r6
 800eb48:	f7fc f903 	bl	800ad52 <pbuf_add_header>
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d03a      	beq.n	800ebc6 <udp_sendto_if_src+0x10a>
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800eb50:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb54:	2108      	movs	r1, #8
 800eb56:	2022      	movs	r0, #34	; 0x22
 800eb58:	f7fc f99a 	bl	800ae90 <pbuf_alloc>
    if (q == NULL) {
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d0e6      	beq.n	800eb30 <udp_sendto_if_src+0x74>
    if (p->tot_len != 0) {
 800eb62:	8933      	ldrh	r3, [r6, #8]
 800eb64:	b113      	cbz	r3, 800eb6c <udp_sendto_if_src+0xb0>
      pbuf_chain(q, p);
 800eb66:	4631      	mov	r1, r6
 800eb68:	f7fc fac6 	bl	800b0f8 <pbuf_chain>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800eb6c:	896b      	ldrh	r3, [r5, #10]
 800eb6e:	2b07      	cmp	r3, #7
 800eb70:	d806      	bhi.n	800eb80 <udp_sendto_if_src+0xc4>
 800eb72:	4b16      	ldr	r3, [pc, #88]	; (800ebcc <udp_sendto_if_src+0x110>)
 800eb74:	f240 320e 	movw	r2, #782	; 0x30e
 800eb78:	491b      	ldr	r1, [pc, #108]	; (800ebe8 <udp_sendto_if_src+0x12c>)
 800eb7a:	4816      	ldr	r0, [pc, #88]	; (800ebd4 <udp_sendto_if_src+0x118>)
 800eb7c:	f000 fb06 	bl	800f18c <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800eb80:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800eb82:	8a78      	ldrh	r0, [r7, #18]
 800eb84:	f7fb fbb8 	bl	800a2f8 <lwip_htons>
 800eb88:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800eb8a:	4658      	mov	r0, fp
 800eb8c:	f7fb fbb4 	bl	800a2f8 <lwip_htons>
  udphdr->chksum = 0x0000;
 800eb90:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800eb92:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800eb94:	71a3      	strb	r3, [r4, #6]
 800eb96:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800eb98:	8928      	ldrh	r0, [r5, #8]
 800eb9a:	f7fb fbad 	bl	800a2f8 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eb9e:	2211      	movs	r2, #17
    udphdr->len = lwip_htons(q->tot_len);
 800eba0:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800eba2:	4641      	mov	r1, r8
 800eba4:	7afb      	ldrb	r3, [r7, #11]
 800eba6:	4628      	mov	r0, r5
 800eba8:	f8cd a008 	str.w	sl, [sp, #8]
 800ebac:	9201      	str	r2, [sp, #4]
 800ebae:	7aba      	ldrb	r2, [r7, #10]
 800ebb0:	9200      	str	r2, [sp, #0]
 800ebb2:	464a      	mov	r2, r9
 800ebb4:	f7fa fef0 	bl	8009998 <ip4_output_if_src>
  if (q != p) {
 800ebb8:	42b5      	cmp	r5, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ebba:	4604      	mov	r4, r0
  if (q != p) {
 800ebbc:	d091      	beq.n	800eae2 <udp_sendto_if_src+0x26>
    pbuf_free(q);
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	f7fc f8fe 	bl	800adc0 <pbuf_free>
 800ebc4:	e78d      	b.n	800eae2 <udp_sendto_if_src+0x26>
 800ebc6:	4635      	mov	r5, r6
 800ebc8:	e7d0      	b.n	800eb6c <udp_sendto_if_src+0xb0>
 800ebca:	bf00      	nop
 800ebcc:	08020a8c 	.word	0x08020a8c
 800ebd0:	08020b7f 	.word	0x08020b7f
 800ebd4:	0801d8d1 	.word	0x0801d8d1
 800ebd8:	08020b9e 	.word	0x08020b9e
 800ebdc:	08020bbe 	.word	0x08020bbe
 800ebe0:	08020be0 	.word	0x08020be0
 800ebe4:	08020c02 	.word	0x08020c02
 800ebe8:	08020c23 	.word	0x08020c23

0800ebec <udp_sendto_if>:
{
 800ebec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ebee:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800ebf0:	b950      	cbnz	r0, 800ec08 <udp_sendto_if+0x1c>
 800ebf2:	4b18      	ldr	r3, [pc, #96]	; (800ec54 <udp_sendto_if+0x68>)
 800ebf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ebf8:	4917      	ldr	r1, [pc, #92]	; (800ec58 <udp_sendto_if+0x6c>)
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ebfa:	4818      	ldr	r0, [pc, #96]	; (800ec5c <udp_sendto_if+0x70>)
 800ebfc:	f000 fac6 	bl	800f18c <iprintf>
 800ec00:	f06f 000f 	mvn.w	r0, #15
}
 800ec04:	b002      	add	sp, #8
 800ec06:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800ec08:	b921      	cbnz	r1, 800ec14 <udp_sendto_if+0x28>
 800ec0a:	4b12      	ldr	r3, [pc, #72]	; (800ec54 <udp_sendto_if+0x68>)
 800ec0c:	f240 2281 	movw	r2, #641	; 0x281
 800ec10:	4913      	ldr	r1, [pc, #76]	; (800ec60 <udp_sendto_if+0x74>)
 800ec12:	e7f2      	b.n	800ebfa <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ec14:	b922      	cbnz	r2, 800ec20 <udp_sendto_if+0x34>
 800ec16:	4b0f      	ldr	r3, [pc, #60]	; (800ec54 <udp_sendto_if+0x68>)
 800ec18:	f240 2282 	movw	r2, #642	; 0x282
 800ec1c:	4911      	ldr	r1, [pc, #68]	; (800ec64 <udp_sendto_if+0x78>)
 800ec1e:	e7ec      	b.n	800ebfa <udp_sendto_if+0xe>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ec20:	b924      	cbnz	r4, 800ec2c <udp_sendto_if+0x40>
 800ec22:	4b0c      	ldr	r3, [pc, #48]	; (800ec54 <udp_sendto_if+0x68>)
 800ec24:	f240 2283 	movw	r2, #643	; 0x283
 800ec28:	490f      	ldr	r1, [pc, #60]	; (800ec68 <udp_sendto_if+0x7c>)
 800ec2a:	e7e6      	b.n	800ebfa <udp_sendto_if+0xe>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec2c:	6805      	ldr	r5, [r0, #0]
 800ec2e:	b11d      	cbz	r5, 800ec38 <udp_sendto_if+0x4c>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ec30:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec34:	2ee0      	cmp	r6, #224	; 0xe0
 800ec36:	d105      	bne.n	800ec44 <udp_sendto_if+0x58>
      src_ip = netif_ip_addr4(netif);
 800ec38:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ec3a:	e9cd 4500 	strd	r4, r5, [sp]
 800ec3e:	f7ff ff3d 	bl	800eabc <udp_sendto_if_src>
 800ec42:	e7df      	b.n	800ec04 <udp_sendto_if+0x18>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ec44:	6866      	ldr	r6, [r4, #4]
 800ec46:	42b5      	cmp	r5, r6
 800ec48:	d101      	bne.n	800ec4e <udp_sendto_if+0x62>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	e7f5      	b.n	800ec3a <udp_sendto_if+0x4e>
        return ERR_RTE;
 800ec4e:	f06f 0003 	mvn.w	r0, #3
 800ec52:	e7d7      	b.n	800ec04 <udp_sendto_if+0x18>
 800ec54:	08020a8c 	.word	0x08020a8c
 800ec58:	08020c51 	.word	0x08020c51
 800ec5c:	0801d8d1 	.word	0x0801d8d1
 800ec60:	08020c6c 	.word	0x08020c6c
 800ec64:	08020c88 	.word	0x08020c88
 800ec68:	08020ca6 	.word	0x08020ca6

0800ec6c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	460d      	mov	r5, r1
 800ec70:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec72:	4604      	mov	r4, r0
 800ec74:	b948      	cbnz	r0, 800ec8a <udp_connect+0x1e>
 800ec76:	4b16      	ldr	r3, [pc, #88]	; (800ecd0 <udp_connect+0x64>)
 800ec78:	f240 4235 	movw	r2, #1077	; 0x435
 800ec7c:	4915      	ldr	r1, [pc, #84]	; (800ecd4 <udp_connect+0x68>)
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ec7e:	4816      	ldr	r0, [pc, #88]	; (800ecd8 <udp_connect+0x6c>)
 800ec80:	f000 fa84 	bl	800f18c <iprintf>
 800ec84:	f06f 000f 	mvn.w	r0, #15
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
}
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ec8a:	b921      	cbnz	r1, 800ec96 <udp_connect+0x2a>
 800ec8c:	4b10      	ldr	r3, [pc, #64]	; (800ecd0 <udp_connect+0x64>)
 800ec8e:	f240 4236 	movw	r2, #1078	; 0x436
 800ec92:	4912      	ldr	r1, [pc, #72]	; (800ecdc <udp_connect+0x70>)
 800ec94:	e7f3      	b.n	800ec7e <udp_connect+0x12>
  if (pcb->local_port == 0) {
 800ec96:	8a42      	ldrh	r2, [r0, #18]
 800ec98:	b16a      	cbz	r2, 800ecb6 <udp_connect+0x4a>
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ec9a:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800ec9c:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ec9e:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800eca0:	7c23      	ldrb	r3, [r4, #16]
 800eca2:	f043 0304 	orr.w	r3, r3, #4
 800eca6:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eca8:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <udp_connect+0x74>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	4610      	mov	r0, r2
 800ecae:	b940      	cbnz	r0, 800ecc2 <udp_connect+0x56>
  pcb->next = udp_pcbs;
 800ecb0:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800ecb2:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800ecb4:	e7e8      	b.n	800ec88 <udp_connect+0x1c>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ecb6:	4601      	mov	r1, r0
 800ecb8:	f7ff fe98 	bl	800e9ec <udp_bind>
    if (err != ERR_OK) {
 800ecbc:	2800      	cmp	r0, #0
 800ecbe:	d0ec      	beq.n	800ec9a <udp_connect+0x2e>
 800ecc0:	e7e2      	b.n	800ec88 <udp_connect+0x1c>
    if (pcb == ipcb) {
 800ecc2:	42a0      	cmp	r0, r4
 800ecc4:	d001      	beq.n	800ecca <udp_connect+0x5e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ecc6:	68c0      	ldr	r0, [r0, #12]
 800ecc8:	e7f1      	b.n	800ecae <udp_connect+0x42>
      return ERR_OK;
 800ecca:	2000      	movs	r0, #0
 800eccc:	e7dc      	b.n	800ec88 <udp_connect+0x1c>
 800ecce:	bf00      	nop
 800ecd0:	08020a8c 	.word	0x08020a8c
 800ecd4:	08020d3c 	.word	0x08020d3c
 800ecd8:	0801d8d1 	.word	0x0801d8d1
 800ecdc:	08020d55 	.word	0x08020d55
 800ece0:	20010e10 	.word	0x20010e10

0800ece4 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800ece4:	b930      	cbnz	r0, 800ecf4 <udp_recv+0x10>
 800ece6:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <udp_recv+0x18>)
 800ece8:	f240 428a 	movw	r2, #1162	; 0x48a
 800ecec:	4904      	ldr	r1, [pc, #16]	; (800ed00 <udp_recv+0x1c>)
 800ecee:	4805      	ldr	r0, [pc, #20]	; (800ed04 <udp_recv+0x20>)
 800ecf0:	f000 ba4c 	b.w	800f18c <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800ecf4:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	08020a8c 	.word	0x08020a8c
 800ed00:	08020d8d 	.word	0x08020d8d
 800ed04:	0801d8d1 	.word	0x0801d8d1

0800ed08 <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800ed08:	4601      	mov	r1, r0
 800ed0a:	b930      	cbnz	r0, 800ed1a <udp_remove+0x12>
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <udp_remove+0x3c>)
 800ed0e:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800ed12:	490d      	ldr	r1, [pc, #52]	; (800ed48 <udp_remove+0x40>)
 800ed14:	480d      	ldr	r0, [pc, #52]	; (800ed4c <udp_remove+0x44>)
 800ed16:	f000 ba39 	b.w	800f18c <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800ed1a:	4a0d      	ldr	r2, [pc, #52]	; (800ed50 <udp_remove+0x48>)
 800ed1c:	6813      	ldr	r3, [r2, #0]
 800ed1e:	4283      	cmp	r3, r0
 800ed20:	d105      	bne.n	800ed2e <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800ed22:	68c3      	ldr	r3, [r0, #12]
 800ed24:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800ed26:	2000      	movs	r0, #0
 800ed28:	f7fb be20 	b.w	800a96c <memp_free>
 800ed2c:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0f9      	beq.n	800ed26 <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800ed32:	68da      	ldr	r2, [r3, #12]
 800ed34:	2a00      	cmp	r2, #0
 800ed36:	d0f6      	beq.n	800ed26 <udp_remove+0x1e>
 800ed38:	428a      	cmp	r2, r1
 800ed3a:	d1f7      	bne.n	800ed2c <udp_remove+0x24>
        pcb2->next = pcb->next;
 800ed3c:	68ca      	ldr	r2, [r1, #12]
 800ed3e:	60da      	str	r2, [r3, #12]
        break;
 800ed40:	e7f1      	b.n	800ed26 <udp_remove+0x1e>
 800ed42:	bf00      	nop
 800ed44:	08020a8c 	.word	0x08020a8c
 800ed48:	08020da3 	.word	0x08020da3
 800ed4c:	0801d8d1 	.word	0x0801d8d1
 800ed50:	20010e10 	.word	0x20010e10

0800ed54 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800ed54:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800ed56:	2000      	movs	r0, #0
 800ed58:	f7fb fdec 	bl	800a934 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	b128      	cbz	r0, 800ed6c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800ed60:	2220      	movs	r2, #32
 800ed62:	2100      	movs	r1, #0
 800ed64:	f000 fa09 	bl	800f17a <memset>
    pcb->ttl = UDP_TTL;
 800ed68:	23ff      	movs	r3, #255	; 0xff
 800ed6a:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	bd10      	pop	{r4, pc}

0800ed70 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800ed70:	f7ff bff0 	b.w	800ed54 <udp_new>

0800ed74 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed74:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800ed76:	b138      	cbz	r0, 800ed88 <udp_netif_ip_addr_changed+0x14>
 800ed78:	6803      	ldr	r3, [r0, #0]
 800ed7a:	b12b      	cbz	r3, 800ed88 <udp_netif_ip_addr_changed+0x14>
 800ed7c:	b121      	cbz	r1, 800ed88 <udp_netif_ip_addr_changed+0x14>
 800ed7e:	680b      	ldr	r3, [r1, #0]
 800ed80:	b113      	cbz	r3, 800ed88 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed82:	4b06      	ldr	r3, [pc, #24]	; (800ed9c <udp_netif_ip_addr_changed+0x28>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	b903      	cbnz	r3, 800ed8a <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800ed88:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800ed8a:	681c      	ldr	r4, [r3, #0]
 800ed8c:	6802      	ldr	r2, [r0, #0]
 800ed8e:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800ed90:	bf04      	itt	eq
 800ed92:	680a      	ldreq	r2, [r1, #0]
 800ed94:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	e7f5      	b.n	800ed86 <udp_netif_ip_addr_changed+0x12>
 800ed9a:	bf00      	nop
 800ed9c:	20010e10 	.word	0x20010e10

0800eda0 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800eda0:	8943      	ldrh	r3, [r0, #10]
 800eda2:	2b0e      	cmp	r3, #14
{
 800eda4:	b570      	push	{r4, r5, r6, lr}
 800eda6:	4604      	mov	r4, r0
 800eda8:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800edaa:	d91a      	bls.n	800ede2 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800edac:	7bc3      	ldrb	r3, [r0, #15]
 800edae:	b91b      	cbnz	r3, 800edb8 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800edb0:	f891 3034 	ldrb.w	r3, [r1, #52]	; 0x34
 800edb4:	3301      	adds	r3, #1
 800edb6:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800edb8:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800edba:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800edbc:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800edbe:	07d9      	lsls	r1, r3, #31
 800edc0:	d50a      	bpl.n	800edd8 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d111      	bne.n	800edea <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800edc6:	7843      	ldrb	r3, [r0, #1]
 800edc8:	b933      	cbnz	r3, 800edd8 <ethernet_input+0x38>
 800edca:	7883      	ldrb	r3, [r0, #2]
 800edcc:	2b5e      	cmp	r3, #94	; 0x5e
 800edce:	d103      	bne.n	800edd8 <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800edd0:	7b63      	ldrb	r3, [r4, #13]
 800edd2:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800edd6:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800edd8:	2e08      	cmp	r6, #8
 800edda:	d010      	beq.n	800edfe <ethernet_input+0x5e>
 800eddc:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ede0:	d01d      	beq.n	800ee1e <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ede2:	4620      	mov	r0, r4
 800ede4:	f7fb ffec 	bl	800adc0 <pbuf_free>
  return ERR_OK;
 800ede8:	e017      	b.n	800ee1a <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800edea:	2206      	movs	r2, #6
 800edec:	4913      	ldr	r1, [pc, #76]	; (800ee3c <ethernet_input+0x9c>)
 800edee:	f000 f991 	bl	800f114 <memcmp>
 800edf2:	2800      	cmp	r0, #0
 800edf4:	d1f0      	bne.n	800edd8 <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800edf6:	7b63      	ldrb	r3, [r4, #13]
 800edf8:	f043 0308 	orr.w	r3, r3, #8
 800edfc:	e7eb      	b.n	800edd6 <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800edfe:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800ee02:	071a      	lsls	r2, r3, #28
 800ee04:	d5ed      	bpl.n	800ede2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ee06:	210e      	movs	r1, #14
 800ee08:	4620      	mov	r0, r4
 800ee0a:	f7fb ffa5 	bl	800ad58 <pbuf_remove_header>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	d1e7      	bne.n	800ede2 <ethernet_input+0x42>
        ip4_input(p, netif);
 800ee12:	4629      	mov	r1, r5
 800ee14:	4620      	mov	r0, r4
 800ee16:	f7fa fcf9 	bl	800980c <ip4_input>
}
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ee1e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
 800ee22:	071b      	lsls	r3, r3, #28
 800ee24:	d5dd      	bpl.n	800ede2 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ee26:	210e      	movs	r1, #14
 800ee28:	4620      	mov	r0, r4
 800ee2a:	f7fb ff95 	bl	800ad58 <pbuf_remove_header>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1d7      	bne.n	800ede2 <ethernet_input+0x42>
        etharp_input(p, netif);
 800ee32:	4629      	mov	r1, r5
 800ee34:	4620      	mov	r0, r4
 800ee36:	f7fa f925 	bl	8009084 <etharp_input>
      break;
 800ee3a:	e7ee      	b.n	800ee1a <ethernet_input+0x7a>
 800ee3c:	08014abc 	.word	0x08014abc

0800ee40 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ee40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee44:	460d      	mov	r5, r1
 800ee46:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee48:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800ee4c:	4616      	mov	r6, r2
 800ee4e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee50:	f7fb fa52 	bl	800a2f8 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee54:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800ee56:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ee58:	4628      	mov	r0, r5
 800ee5a:	f7fb ff7a 	bl	800ad52 <pbuf_add_header>
 800ee5e:	b9e0      	cbnz	r0, 800ee9a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ee60:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800ee62:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	600b      	str	r3, [r1, #0]
 800ee6a:	88bb      	ldrh	r3, [r7, #4]
 800ee6c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ee6e:	6833      	ldr	r3, [r6, #0]
 800ee70:	f8c1 3006 	str.w	r3, [r1, #6]
 800ee74:	88b3      	ldrh	r3, [r6, #4]
 800ee76:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ee78:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ee7c:	2b06      	cmp	r3, #6
 800ee7e:	d006      	beq.n	800ee8e <ethernet_output+0x4e>
 800ee80:	4b08      	ldr	r3, [pc, #32]	; (800eea4 <ethernet_output+0x64>)
 800ee82:	f240 1233 	movw	r2, #307	; 0x133
 800ee86:	4908      	ldr	r1, [pc, #32]	; (800eea8 <ethernet_output+0x68>)
 800ee88:	4808      	ldr	r0, [pc, #32]	; (800eeac <ethernet_output+0x6c>)
 800ee8a:	f000 f97f 	bl	800f18c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ee8e:	69a3      	ldr	r3, [r4, #24]
 800ee90:	4629      	mov	r1, r5
 800ee92:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800ee94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800ee98:	4718      	bx	r3
}
 800ee9a:	f06f 0001 	mvn.w	r0, #1
 800ee9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea2:	bf00      	nop
 800eea4:	08020dbb 	.word	0x08020dbb
 800eea8:	08020e2d 	.word	0x08020e2d
 800eeac:	0801d8d1 	.word	0x0801d8d1

0800eeb0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800eeb0:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800eeb2:	2304      	movs	r3, #4
{
 800eeb4:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800eeb6:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800eeb8:	4668      	mov	r0, sp
 800eeba:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800eebc:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800eebe:	f7f7 f8a1 	bl	8006004 <osMessageCreate>
 800eec2:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800eec4:	fab0 f080 	clz	r0, r0
 800eec8:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800eeca:	4240      	negs	r0, r0
 800eecc:	b002      	add	sp, #8
 800eece:	bd10      	pop	{r4, pc}

0800eed0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800eed0:	b510      	push	{r4, lr}
 800eed2:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800eed4:	6800      	ldr	r0, [r0, #0]
 800eed6:	f7f7 f90c 	bl	80060f2 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800eeda:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800eedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800eee0:	f7f7 b90e 	b.w	8006100 <osMessageDelete>

0800eee4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800eee4:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800eee6:	2200      	movs	r2, #0
 800eee8:	6800      	ldr	r0, [r0, #0]
 800eeea:	f7f7 f891 	bl	8006010 <osMessagePut>
 800eeee:	3000      	adds	r0, #0
 800eef0:	bf18      	it	ne
 800eef2:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800eef4:	4240      	negs	r0, r0
 800eef6:	bd08      	pop	{r3, pc}

0800eef8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800eef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eefa:	4617      	mov	r7, r2
 800eefc:	b085      	sub	sp, #20
 800eefe:	4606      	mov	r6, r0
 800ef00:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800ef02:	f7f6 ffbc 	bl	8005e7e <osKernelSysTick>
 800ef06:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800ef08:	b177      	cbz	r7, 800ef28 <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800ef0a:	463a      	mov	r2, r7
 800ef0c:	6831      	ldr	r1, [r6, #0]
 800ef0e:	a801      	add	r0, sp, #4
 800ef10:	f7f7 f8a6 	bl	8006060 <osMessageGet>

    if(event.status == osEventMessage)
 800ef14:	9b01      	ldr	r3, [sp, #4]
 800ef16:	2b10      	cmp	r3, #16
 800ef18:	d10d      	bne.n	800ef36 <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800ef1a:	9b02      	ldr	r3, [sp, #8]
 800ef1c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800ef1e:	f7f6 ffae 	bl	8005e7e <osKernelSysTick>
 800ef22:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ef24:	b005      	add	sp, #20
 800ef26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800ef28:	f04f 32ff 	mov.w	r2, #4294967295
 800ef2c:	6831      	ldr	r1, [r6, #0]
 800ef2e:	a801      	add	r0, sp, #4
 800ef30:	f7f7 f896 	bl	8006060 <osMessageGet>
 800ef34:	e7f1      	b.n	800ef1a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3a:	e7f3      	b.n	800ef24 <sys_arch_mbox_fetch+0x2c>

0800ef3c <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ef3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef3e:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800ef40:	2200      	movs	r2, #0
 800ef42:	6801      	ldr	r1, [r0, #0]
 800ef44:	a801      	add	r0, sp, #4
 800ef46:	f7f7 f88b 	bl	8006060 <osMessageGet>

  if(event.status == osEventMessage)
 800ef4a:	9b01      	ldr	r3, [sp, #4]
 800ef4c:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800ef4e:	bf05      	ittet	eq
 800ef50:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800ef52:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800ef54:	f04f 30ff 	movne.w	r0, #4294967295
    *msg = (void *)event.value.v;
 800ef58:	6023      	streq	r3, [r4, #0]
  }
}
 800ef5a:	b004      	add	sp, #16
 800ef5c:	bd10      	pop	{r4, pc}

0800ef5e <sys_mbox_valid>:
 800ef5e:	6800      	ldr	r0, [r0, #0]
 800ef60:	3000      	adds	r0, #0
 800ef62:	bf18      	it	ne
 800ef64:	2001      	movne	r0, #1
 800ef66:	4770      	bx	lr

0800ef68 <sys_mbox_set_invalid>:
 800ef68:	2300      	movs	r3, #0
 800ef6a:	6003      	str	r3, [r0, #0]
 800ef6c:	4770      	bx	lr

0800ef6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ef6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef70:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800ef72:	2400      	movs	r4, #0
 800ef74:	a802      	add	r0, sp, #8
{
 800ef76:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ef78:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800ef7a:	f840 4d04 	str.w	r4, [r0, #-4]!
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800ef7e:	f7f7 f801 	bl	8005f84 <osSemaphoreCreate>
 800ef82:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800ef84:	b130      	cbz	r0, 800ef94 <sys_sem_new+0x26>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ef86:	b945      	cbnz	r5, 800ef9a <sys_sem_new+0x2c>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800ef88:	4629      	mov	r1, r5
 800ef8a:	f7f7 f811 	bl	8005fb0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ef8e:	4628      	mov	r0, r5
}
 800ef90:	b002      	add	sp, #8
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	e7fa      	b.n	800ef90 <sys_sem_new+0x22>
  return ERR_OK;
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	e7f8      	b.n	800ef90 <sys_sem_new+0x22>

0800ef9e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ef9e:	b570      	push	{r4, r5, r6, lr}
 800efa0:	460e      	mov	r6, r1
 800efa2:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800efa4:	f7f6 ff6b 	bl	8005e7e <osKernelSysTick>
 800efa8:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800efaa:	b146      	cbz	r6, 800efbe <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800efac:	4631      	mov	r1, r6
 800efae:	6828      	ldr	r0, [r5, #0]
 800efb0:	f7f6 fffe 	bl	8005fb0 <osSemaphoreWait>
 800efb4:	b958      	cbnz	r0, 800efce <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800efb6:	f7f6 ff62 	bl	8005e7e <osKernelSysTick>
 800efba:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800efbe:	f04f 31ff 	mov.w	r1, #4294967295
 800efc2:	6828      	ldr	r0, [r5, #0]
 800efc4:	f7f6 fff4 	bl	8005fb0 <osSemaphoreWait>
 800efc8:	2800      	cmp	r0, #0
 800efca:	d1f8      	bne.n	800efbe <sys_arch_sem_wait+0x20>
 800efcc:	e7f3      	b.n	800efb6 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800efce:	f04f 30ff 	mov.w	r0, #4294967295
 800efd2:	e7f3      	b.n	800efbc <sys_arch_sem_wait+0x1e>

0800efd4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800efd4:	6800      	ldr	r0, [r0, #0]
 800efd6:	f7f7 b811 	b.w	8005ffc <osSemaphoreRelease>

0800efda <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800efda:	6800      	ldr	r0, [r0, #0]
 800efdc:	f7f7 b810 	b.w	8006000 <osSemaphoreDelete>

0800efe0 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800efe0:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800efe2:	3000      	adds	r0, #0
 800efe4:	bf18      	it	ne
 800efe6:	2001      	movne	r0, #1
 800efe8:	4770      	bx	lr

0800efea <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800efea:	2300      	movs	r3, #0
 800efec:	6003      	str	r3, [r0, #0]
}
 800efee:	4770      	bx	lr

0800eff0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800eff0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800eff2:	4803      	ldr	r0, [pc, #12]	; (800f000 <sys_init+0x10>)
 800eff4:	f7f6 ff6f 	bl	8005ed6 <osMutexCreate>
 800eff8:	4b02      	ldr	r3, [pc, #8]	; (800f004 <sys_init+0x14>)
 800effa:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800effc:	bd08      	pop	{r3, pc}
 800effe:	bf00      	nop
 800f000:	08014ac8 	.word	0x08014ac8
 800f004:	20010e18 	.word	0x20010e18

0800f008 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f008:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800f00a:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800f00c:	4604      	mov	r4, r0
  osMutexDef(MUTEX);
 800f00e:	a802      	add	r0, sp, #8
 800f010:	f840 3d04 	str.w	r3, [r0, #-4]!
  *mutex = osMutexCreate(osMutex(MUTEX));
 800f014:	f7f6 ff5f 	bl	8005ed6 <osMutexCreate>
 800f018:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800f01a:	fab0 f080 	clz	r0, r0
 800f01e:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800f020:	4240      	negs	r0, r0
 800f022:	b002      	add	sp, #8
 800f024:	bd10      	pop	{r4, pc}

0800f026 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800f026:	f04f 31ff 	mov.w	r1, #4294967295
 800f02a:	6800      	ldr	r0, [r0, #0]
 800f02c:	f7f6 bf56 	b.w	8005edc <osMutexWait>

0800f030 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800f030:	6800      	ldr	r0, [r0, #0]
 800f032:	f7f6 bf79 	b.w	8005f28 <osMutexRelease>

0800f036 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800f036:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f038:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800f03c:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800f03e:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800f040:	f8ad 100c 	strh.w	r1, [sp, #12]
 800f044:	2100      	movs	r1, #0
 800f046:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800f04a:	4611      	mov	r1, r2
 800f04c:	f7f6 ff1e 	bl	8005e8c <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800f050:	b007      	add	sp, #28
 800f052:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f058 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800f058:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800f05a:	4b04      	ldr	r3, [pc, #16]	; (800f06c <sys_arch_protect+0x14>)
 800f05c:	f04f 31ff 	mov.w	r1, #4294967295
 800f060:	6818      	ldr	r0, [r3, #0]
 800f062:	f7f6 ff3b 	bl	8005edc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800f066:	2001      	movs	r0, #1
 800f068:	bd08      	pop	{r3, pc}
 800f06a:	bf00      	nop
 800f06c:	20010e18 	.word	0x20010e18

0800f070 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800f070:	4b01      	ldr	r3, [pc, #4]	; (800f078 <sys_arch_unprotect+0x8>)
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	f7f6 bf58 	b.w	8005f28 <osMutexRelease>
 800f078:	20010e18 	.word	0x20010e18

0800f07c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800f07c:	b570      	push	{r4, r5, r6, lr}
 800f07e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800f080:	4605      	mov	r5, r0
 800f082:	b1a8      	cbz	r0, 800f0b0 <fs_open+0x34>
 800f084:	b1a1      	cbz	r1, 800f0b0 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800f086:	4c0c      	ldr	r4, [pc, #48]	; (800f0b8 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800f088:	6861      	ldr	r1, [r4, #4]
 800f08a:	4630      	mov	r0, r6
 800f08c:	f7f1 f8d8 	bl	8000240 <strcmp>
 800f090:	b940      	cbnz	r0, 800f0a4 <fs_open+0x28>
      file->data = (const char *)f->data;
 800f092:	68a3      	ldr	r3, [r4, #8]
 800f094:	602b      	str	r3, [r5, #0]
      file->len = f->len;
 800f096:	68e3      	ldr	r3, [r4, #12]
      file->index = f->len;
      file->pextension = NULL;
 800f098:	60e8      	str	r0, [r5, #12]
      file->index = f->len;
 800f09a:	e9c5 3301 	strd	r3, r3, [r5, #4]
      file->flags = f->flags;
 800f09e:	7c23      	ldrb	r3, [r4, #16]
 800f0a0:	742b      	strb	r3, [r5, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800f0a2:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800f0a4:	6824      	ldr	r4, [r4, #0]
 800f0a6:	2c00      	cmp	r4, #0
 800f0a8:	d1ee      	bne.n	800f088 <fs_open+0xc>
  return ERR_VAL;
 800f0aa:	f06f 0005 	mvn.w	r0, #5
 800f0ae:	e7f8      	b.n	800f0a2 <fs_open+0x26>
    return ERR_ARG;
 800f0b0:	f06f 000f 	mvn.w	r0, #15
 800f0b4:	e7f5      	b.n	800f0a2 <fs_open+0x26>
 800f0b6:	bf00      	nop
 800f0b8:	08014acc 	.word	0x08014acc

0800f0bc <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800f0bc:	4770      	bx	lr
	...

0800f0c0 <__errno>:
 800f0c0:	4b01      	ldr	r3, [pc, #4]	; (800f0c8 <__errno+0x8>)
 800f0c2:	6818      	ldr	r0, [r3, #0]
 800f0c4:	4770      	bx	lr
 800f0c6:	bf00      	nop
 800f0c8:	20000050 	.word	0x20000050

0800f0cc <__libc_init_array>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	4e0d      	ldr	r6, [pc, #52]	; (800f104 <__libc_init_array+0x38>)
 800f0d0:	4c0d      	ldr	r4, [pc, #52]	; (800f108 <__libc_init_array+0x3c>)
 800f0d2:	1ba4      	subs	r4, r4, r6
 800f0d4:	10a4      	asrs	r4, r4, #2
 800f0d6:	2500      	movs	r5, #0
 800f0d8:	42a5      	cmp	r5, r4
 800f0da:	d109      	bne.n	800f0f0 <__libc_init_array+0x24>
 800f0dc:	4e0b      	ldr	r6, [pc, #44]	; (800f10c <__libc_init_array+0x40>)
 800f0de:	4c0c      	ldr	r4, [pc, #48]	; (800f110 <__libc_init_array+0x44>)
 800f0e0:	f001 f9a2 	bl	8010428 <_init>
 800f0e4:	1ba4      	subs	r4, r4, r6
 800f0e6:	10a4      	asrs	r4, r4, #2
 800f0e8:	2500      	movs	r5, #0
 800f0ea:	42a5      	cmp	r5, r4
 800f0ec:	d105      	bne.n	800f0fa <__libc_init_array+0x2e>
 800f0ee:	bd70      	pop	{r4, r5, r6, pc}
 800f0f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0f4:	4798      	blx	r3
 800f0f6:	3501      	adds	r5, #1
 800f0f8:	e7ee      	b.n	800f0d8 <__libc_init_array+0xc>
 800f0fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f0fe:	4798      	blx	r3
 800f100:	3501      	adds	r5, #1
 800f102:	e7f2      	b.n	800f0ea <__libc_init_array+0x1e>
 800f104:	08020f00 	.word	0x08020f00
 800f108:	08020f00 	.word	0x08020f00
 800f10c:	08020f00 	.word	0x08020f00
 800f110:	08020f04 	.word	0x08020f04

0800f114 <memcmp>:
 800f114:	b530      	push	{r4, r5, lr}
 800f116:	2400      	movs	r4, #0
 800f118:	42a2      	cmp	r2, r4
 800f11a:	d101      	bne.n	800f120 <memcmp+0xc>
 800f11c:	2000      	movs	r0, #0
 800f11e:	e007      	b.n	800f130 <memcmp+0x1c>
 800f120:	5d03      	ldrb	r3, [r0, r4]
 800f122:	3401      	adds	r4, #1
 800f124:	190d      	adds	r5, r1, r4
 800f126:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f12a:	42ab      	cmp	r3, r5
 800f12c:	d0f4      	beq.n	800f118 <memcmp+0x4>
 800f12e:	1b58      	subs	r0, r3, r5
 800f130:	bd30      	pop	{r4, r5, pc}

0800f132 <memcpy>:
 800f132:	b510      	push	{r4, lr}
 800f134:	1e43      	subs	r3, r0, #1
 800f136:	440a      	add	r2, r1
 800f138:	4291      	cmp	r1, r2
 800f13a:	d100      	bne.n	800f13e <memcpy+0xc>
 800f13c:	bd10      	pop	{r4, pc}
 800f13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f146:	e7f7      	b.n	800f138 <memcpy+0x6>

0800f148 <memmove>:
 800f148:	4288      	cmp	r0, r1
 800f14a:	b510      	push	{r4, lr}
 800f14c:	eb01 0302 	add.w	r3, r1, r2
 800f150:	d807      	bhi.n	800f162 <memmove+0x1a>
 800f152:	1e42      	subs	r2, r0, #1
 800f154:	4299      	cmp	r1, r3
 800f156:	d00a      	beq.n	800f16e <memmove+0x26>
 800f158:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f15c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f160:	e7f8      	b.n	800f154 <memmove+0xc>
 800f162:	4283      	cmp	r3, r0
 800f164:	d9f5      	bls.n	800f152 <memmove+0xa>
 800f166:	1881      	adds	r1, r0, r2
 800f168:	1ad2      	subs	r2, r2, r3
 800f16a:	42d3      	cmn	r3, r2
 800f16c:	d100      	bne.n	800f170 <memmove+0x28>
 800f16e:	bd10      	pop	{r4, pc}
 800f170:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f174:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f178:	e7f7      	b.n	800f16a <memmove+0x22>

0800f17a <memset>:
 800f17a:	4402      	add	r2, r0
 800f17c:	4603      	mov	r3, r0
 800f17e:	4293      	cmp	r3, r2
 800f180:	d100      	bne.n	800f184 <memset+0xa>
 800f182:	4770      	bx	lr
 800f184:	f803 1b01 	strb.w	r1, [r3], #1
 800f188:	e7f9      	b.n	800f17e <memset+0x4>
	...

0800f18c <iprintf>:
 800f18c:	b40f      	push	{r0, r1, r2, r3}
 800f18e:	4b0a      	ldr	r3, [pc, #40]	; (800f1b8 <iprintf+0x2c>)
 800f190:	b513      	push	{r0, r1, r4, lr}
 800f192:	681c      	ldr	r4, [r3, #0]
 800f194:	b124      	cbz	r4, 800f1a0 <iprintf+0x14>
 800f196:	69a3      	ldr	r3, [r4, #24]
 800f198:	b913      	cbnz	r3, 800f1a0 <iprintf+0x14>
 800f19a:	4620      	mov	r0, r4
 800f19c:	f000 faa0 	bl	800f6e0 <__sinit>
 800f1a0:	ab05      	add	r3, sp, #20
 800f1a2:	9a04      	ldr	r2, [sp, #16]
 800f1a4:	68a1      	ldr	r1, [r4, #8]
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f000 fdb3 	bl	800fd14 <_vfiprintf_r>
 800f1ae:	b002      	add	sp, #8
 800f1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b4:	b004      	add	sp, #16
 800f1b6:	4770      	bx	lr
 800f1b8:	20000050 	.word	0x20000050

0800f1bc <_puts_r>:
 800f1bc:	b570      	push	{r4, r5, r6, lr}
 800f1be:	460e      	mov	r6, r1
 800f1c0:	4605      	mov	r5, r0
 800f1c2:	b118      	cbz	r0, 800f1cc <_puts_r+0x10>
 800f1c4:	6983      	ldr	r3, [r0, #24]
 800f1c6:	b90b      	cbnz	r3, 800f1cc <_puts_r+0x10>
 800f1c8:	f000 fa8a 	bl	800f6e0 <__sinit>
 800f1cc:	69ab      	ldr	r3, [r5, #24]
 800f1ce:	68ac      	ldr	r4, [r5, #8]
 800f1d0:	b913      	cbnz	r3, 800f1d8 <_puts_r+0x1c>
 800f1d2:	4628      	mov	r0, r5
 800f1d4:	f000 fa84 	bl	800f6e0 <__sinit>
 800f1d8:	4b23      	ldr	r3, [pc, #140]	; (800f268 <_puts_r+0xac>)
 800f1da:	429c      	cmp	r4, r3
 800f1dc:	d117      	bne.n	800f20e <_puts_r+0x52>
 800f1de:	686c      	ldr	r4, [r5, #4]
 800f1e0:	89a3      	ldrh	r3, [r4, #12]
 800f1e2:	071b      	lsls	r3, r3, #28
 800f1e4:	d51d      	bpl.n	800f222 <_puts_r+0x66>
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	b1db      	cbz	r3, 800f222 <_puts_r+0x66>
 800f1ea:	3e01      	subs	r6, #1
 800f1ec:	68a3      	ldr	r3, [r4, #8]
 800f1ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f1f2:	3b01      	subs	r3, #1
 800f1f4:	60a3      	str	r3, [r4, #8]
 800f1f6:	b9e9      	cbnz	r1, 800f234 <_puts_r+0x78>
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	da2e      	bge.n	800f25a <_puts_r+0x9e>
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	210a      	movs	r1, #10
 800f200:	4628      	mov	r0, r5
 800f202:	f000 f8bd 	bl	800f380 <__swbuf_r>
 800f206:	3001      	adds	r0, #1
 800f208:	d011      	beq.n	800f22e <_puts_r+0x72>
 800f20a:	200a      	movs	r0, #10
 800f20c:	e011      	b.n	800f232 <_puts_r+0x76>
 800f20e:	4b17      	ldr	r3, [pc, #92]	; (800f26c <_puts_r+0xb0>)
 800f210:	429c      	cmp	r4, r3
 800f212:	d101      	bne.n	800f218 <_puts_r+0x5c>
 800f214:	68ac      	ldr	r4, [r5, #8]
 800f216:	e7e3      	b.n	800f1e0 <_puts_r+0x24>
 800f218:	4b15      	ldr	r3, [pc, #84]	; (800f270 <_puts_r+0xb4>)
 800f21a:	429c      	cmp	r4, r3
 800f21c:	bf08      	it	eq
 800f21e:	68ec      	ldreq	r4, [r5, #12]
 800f220:	e7de      	b.n	800f1e0 <_puts_r+0x24>
 800f222:	4621      	mov	r1, r4
 800f224:	4628      	mov	r0, r5
 800f226:	f000 f8fd 	bl	800f424 <__swsetup_r>
 800f22a:	2800      	cmp	r0, #0
 800f22c:	d0dd      	beq.n	800f1ea <_puts_r+0x2e>
 800f22e:	f04f 30ff 	mov.w	r0, #4294967295
 800f232:	bd70      	pop	{r4, r5, r6, pc}
 800f234:	2b00      	cmp	r3, #0
 800f236:	da04      	bge.n	800f242 <_puts_r+0x86>
 800f238:	69a2      	ldr	r2, [r4, #24]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	dc06      	bgt.n	800f24c <_puts_r+0x90>
 800f23e:	290a      	cmp	r1, #10
 800f240:	d004      	beq.n	800f24c <_puts_r+0x90>
 800f242:	6823      	ldr	r3, [r4, #0]
 800f244:	1c5a      	adds	r2, r3, #1
 800f246:	6022      	str	r2, [r4, #0]
 800f248:	7019      	strb	r1, [r3, #0]
 800f24a:	e7cf      	b.n	800f1ec <_puts_r+0x30>
 800f24c:	4622      	mov	r2, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 f896 	bl	800f380 <__swbuf_r>
 800f254:	3001      	adds	r0, #1
 800f256:	d1c9      	bne.n	800f1ec <_puts_r+0x30>
 800f258:	e7e9      	b.n	800f22e <_puts_r+0x72>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	200a      	movs	r0, #10
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	6022      	str	r2, [r4, #0]
 800f262:	7018      	strb	r0, [r3, #0]
 800f264:	e7e5      	b.n	800f232 <_puts_r+0x76>
 800f266:	bf00      	nop
 800f268:	08020e84 	.word	0x08020e84
 800f26c:	08020ea4 	.word	0x08020ea4
 800f270:	08020e64 	.word	0x08020e64

0800f274 <puts>:
 800f274:	4b02      	ldr	r3, [pc, #8]	; (800f280 <puts+0xc>)
 800f276:	4601      	mov	r1, r0
 800f278:	6818      	ldr	r0, [r3, #0]
 800f27a:	f7ff bf9f 	b.w	800f1bc <_puts_r>
 800f27e:	bf00      	nop
 800f280:	20000050 	.word	0x20000050

0800f284 <rand>:
 800f284:	b538      	push	{r3, r4, r5, lr}
 800f286:	4b13      	ldr	r3, [pc, #76]	; (800f2d4 <rand+0x50>)
 800f288:	681c      	ldr	r4, [r3, #0]
 800f28a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f28c:	b97b      	cbnz	r3, 800f2ae <rand+0x2a>
 800f28e:	2018      	movs	r0, #24
 800f290:	f000 fb14 	bl	800f8bc <malloc>
 800f294:	4a10      	ldr	r2, [pc, #64]	; (800f2d8 <rand+0x54>)
 800f296:	4b11      	ldr	r3, [pc, #68]	; (800f2dc <rand+0x58>)
 800f298:	63a0      	str	r0, [r4, #56]	; 0x38
 800f29a:	e9c0 2300 	strd	r2, r3, [r0]
 800f29e:	4b10      	ldr	r3, [pc, #64]	; (800f2e0 <rand+0x5c>)
 800f2a0:	6083      	str	r3, [r0, #8]
 800f2a2:	230b      	movs	r3, #11
 800f2a4:	8183      	strh	r3, [r0, #12]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f2ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f2b0:	480c      	ldr	r0, [pc, #48]	; (800f2e4 <rand+0x60>)
 800f2b2:	690a      	ldr	r2, [r1, #16]
 800f2b4:	694b      	ldr	r3, [r1, #20]
 800f2b6:	4c0c      	ldr	r4, [pc, #48]	; (800f2e8 <rand+0x64>)
 800f2b8:	4350      	muls	r0, r2
 800f2ba:	fb04 0003 	mla	r0, r4, r3, r0
 800f2be:	fba2 2304 	umull	r2, r3, r2, r4
 800f2c2:	4403      	add	r3, r0
 800f2c4:	1c54      	adds	r4, r2, #1
 800f2c6:	f143 0500 	adc.w	r5, r3, #0
 800f2ca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f2ce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	20000050 	.word	0x20000050
 800f2d8:	abcd330e 	.word	0xabcd330e
 800f2dc:	e66d1234 	.word	0xe66d1234
 800f2e0:	0005deec 	.word	0x0005deec
 800f2e4:	5851f42d 	.word	0x5851f42d
 800f2e8:	4c957f2d 	.word	0x4c957f2d

0800f2ec <siprintf>:
 800f2ec:	b40e      	push	{r1, r2, r3}
 800f2ee:	b500      	push	{lr}
 800f2f0:	b09c      	sub	sp, #112	; 0x70
 800f2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f2f4:	9002      	str	r0, [sp, #8]
 800f2f6:	9006      	str	r0, [sp, #24]
 800f2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2fc:	4809      	ldr	r0, [pc, #36]	; (800f324 <siprintf+0x38>)
 800f2fe:	9107      	str	r1, [sp, #28]
 800f300:	9104      	str	r1, [sp, #16]
 800f302:	4909      	ldr	r1, [pc, #36]	; (800f328 <siprintf+0x3c>)
 800f304:	f853 2b04 	ldr.w	r2, [r3], #4
 800f308:	9105      	str	r1, [sp, #20]
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	a902      	add	r1, sp, #8
 800f310:	f000 fbde 	bl	800fad0 <_svfiprintf_r>
 800f314:	9b02      	ldr	r3, [sp, #8]
 800f316:	2200      	movs	r2, #0
 800f318:	701a      	strb	r2, [r3, #0]
 800f31a:	b01c      	add	sp, #112	; 0x70
 800f31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f320:	b003      	add	sp, #12
 800f322:	4770      	bx	lr
 800f324:	20000050 	.word	0x20000050
 800f328:	ffff0208 	.word	0xffff0208

0800f32c <strcat>:
 800f32c:	b510      	push	{r4, lr}
 800f32e:	4603      	mov	r3, r0
 800f330:	781a      	ldrb	r2, [r3, #0]
 800f332:	1c5c      	adds	r4, r3, #1
 800f334:	b93a      	cbnz	r2, 800f346 <strcat+0x1a>
 800f336:	3b01      	subs	r3, #1
 800f338:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f33c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f340:	2a00      	cmp	r2, #0
 800f342:	d1f9      	bne.n	800f338 <strcat+0xc>
 800f344:	bd10      	pop	{r4, pc}
 800f346:	4623      	mov	r3, r4
 800f348:	e7f2      	b.n	800f330 <strcat+0x4>

0800f34a <strcpy>:
 800f34a:	4603      	mov	r3, r0
 800f34c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f350:	f803 2b01 	strb.w	r2, [r3], #1
 800f354:	2a00      	cmp	r2, #0
 800f356:	d1f9      	bne.n	800f34c <strcpy+0x2>
 800f358:	4770      	bx	lr

0800f35a <strncmp>:
 800f35a:	b510      	push	{r4, lr}
 800f35c:	b16a      	cbz	r2, 800f37a <strncmp+0x20>
 800f35e:	3901      	subs	r1, #1
 800f360:	1884      	adds	r4, r0, r2
 800f362:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f366:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d103      	bne.n	800f376 <strncmp+0x1c>
 800f36e:	42a0      	cmp	r0, r4
 800f370:	d001      	beq.n	800f376 <strncmp+0x1c>
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f5      	bne.n	800f362 <strncmp+0x8>
 800f376:	1a98      	subs	r0, r3, r2
 800f378:	bd10      	pop	{r4, pc}
 800f37a:	4610      	mov	r0, r2
 800f37c:	e7fc      	b.n	800f378 <strncmp+0x1e>
	...

0800f380 <__swbuf_r>:
 800f380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f382:	460e      	mov	r6, r1
 800f384:	4614      	mov	r4, r2
 800f386:	4605      	mov	r5, r0
 800f388:	b118      	cbz	r0, 800f392 <__swbuf_r+0x12>
 800f38a:	6983      	ldr	r3, [r0, #24]
 800f38c:	b90b      	cbnz	r3, 800f392 <__swbuf_r+0x12>
 800f38e:	f000 f9a7 	bl	800f6e0 <__sinit>
 800f392:	4b21      	ldr	r3, [pc, #132]	; (800f418 <__swbuf_r+0x98>)
 800f394:	429c      	cmp	r4, r3
 800f396:	d12a      	bne.n	800f3ee <__swbuf_r+0x6e>
 800f398:	686c      	ldr	r4, [r5, #4]
 800f39a:	69a3      	ldr	r3, [r4, #24]
 800f39c:	60a3      	str	r3, [r4, #8]
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	071a      	lsls	r2, r3, #28
 800f3a2:	d52e      	bpl.n	800f402 <__swbuf_r+0x82>
 800f3a4:	6923      	ldr	r3, [r4, #16]
 800f3a6:	b363      	cbz	r3, 800f402 <__swbuf_r+0x82>
 800f3a8:	6923      	ldr	r3, [r4, #16]
 800f3aa:	6820      	ldr	r0, [r4, #0]
 800f3ac:	1ac0      	subs	r0, r0, r3
 800f3ae:	6963      	ldr	r3, [r4, #20]
 800f3b0:	b2f6      	uxtb	r6, r6
 800f3b2:	4283      	cmp	r3, r0
 800f3b4:	4637      	mov	r7, r6
 800f3b6:	dc04      	bgt.n	800f3c2 <__swbuf_r+0x42>
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4628      	mov	r0, r5
 800f3bc:	f000 f926 	bl	800f60c <_fflush_r>
 800f3c0:	bb28      	cbnz	r0, 800f40e <__swbuf_r+0x8e>
 800f3c2:	68a3      	ldr	r3, [r4, #8]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	60a3      	str	r3, [r4, #8]
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	1c5a      	adds	r2, r3, #1
 800f3cc:	6022      	str	r2, [r4, #0]
 800f3ce:	701e      	strb	r6, [r3, #0]
 800f3d0:	6963      	ldr	r3, [r4, #20]
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	4283      	cmp	r3, r0
 800f3d6:	d004      	beq.n	800f3e2 <__swbuf_r+0x62>
 800f3d8:	89a3      	ldrh	r3, [r4, #12]
 800f3da:	07db      	lsls	r3, r3, #31
 800f3dc:	d519      	bpl.n	800f412 <__swbuf_r+0x92>
 800f3de:	2e0a      	cmp	r6, #10
 800f3e0:	d117      	bne.n	800f412 <__swbuf_r+0x92>
 800f3e2:	4621      	mov	r1, r4
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f000 f911 	bl	800f60c <_fflush_r>
 800f3ea:	b190      	cbz	r0, 800f412 <__swbuf_r+0x92>
 800f3ec:	e00f      	b.n	800f40e <__swbuf_r+0x8e>
 800f3ee:	4b0b      	ldr	r3, [pc, #44]	; (800f41c <__swbuf_r+0x9c>)
 800f3f0:	429c      	cmp	r4, r3
 800f3f2:	d101      	bne.n	800f3f8 <__swbuf_r+0x78>
 800f3f4:	68ac      	ldr	r4, [r5, #8]
 800f3f6:	e7d0      	b.n	800f39a <__swbuf_r+0x1a>
 800f3f8:	4b09      	ldr	r3, [pc, #36]	; (800f420 <__swbuf_r+0xa0>)
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	bf08      	it	eq
 800f3fe:	68ec      	ldreq	r4, [r5, #12]
 800f400:	e7cb      	b.n	800f39a <__swbuf_r+0x1a>
 800f402:	4621      	mov	r1, r4
 800f404:	4628      	mov	r0, r5
 800f406:	f000 f80d 	bl	800f424 <__swsetup_r>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d0cc      	beq.n	800f3a8 <__swbuf_r+0x28>
 800f40e:	f04f 37ff 	mov.w	r7, #4294967295
 800f412:	4638      	mov	r0, r7
 800f414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f416:	bf00      	nop
 800f418:	08020e84 	.word	0x08020e84
 800f41c:	08020ea4 	.word	0x08020ea4
 800f420:	08020e64 	.word	0x08020e64

0800f424 <__swsetup_r>:
 800f424:	4b32      	ldr	r3, [pc, #200]	; (800f4f0 <__swsetup_r+0xcc>)
 800f426:	b570      	push	{r4, r5, r6, lr}
 800f428:	681d      	ldr	r5, [r3, #0]
 800f42a:	4606      	mov	r6, r0
 800f42c:	460c      	mov	r4, r1
 800f42e:	b125      	cbz	r5, 800f43a <__swsetup_r+0x16>
 800f430:	69ab      	ldr	r3, [r5, #24]
 800f432:	b913      	cbnz	r3, 800f43a <__swsetup_r+0x16>
 800f434:	4628      	mov	r0, r5
 800f436:	f000 f953 	bl	800f6e0 <__sinit>
 800f43a:	4b2e      	ldr	r3, [pc, #184]	; (800f4f4 <__swsetup_r+0xd0>)
 800f43c:	429c      	cmp	r4, r3
 800f43e:	d10f      	bne.n	800f460 <__swsetup_r+0x3c>
 800f440:	686c      	ldr	r4, [r5, #4]
 800f442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f446:	b29a      	uxth	r2, r3
 800f448:	0715      	lsls	r5, r2, #28
 800f44a:	d42c      	bmi.n	800f4a6 <__swsetup_r+0x82>
 800f44c:	06d0      	lsls	r0, r2, #27
 800f44e:	d411      	bmi.n	800f474 <__swsetup_r+0x50>
 800f450:	2209      	movs	r2, #9
 800f452:	6032      	str	r2, [r6, #0]
 800f454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f458:	81a3      	strh	r3, [r4, #12]
 800f45a:	f04f 30ff 	mov.w	r0, #4294967295
 800f45e:	e03e      	b.n	800f4de <__swsetup_r+0xba>
 800f460:	4b25      	ldr	r3, [pc, #148]	; (800f4f8 <__swsetup_r+0xd4>)
 800f462:	429c      	cmp	r4, r3
 800f464:	d101      	bne.n	800f46a <__swsetup_r+0x46>
 800f466:	68ac      	ldr	r4, [r5, #8]
 800f468:	e7eb      	b.n	800f442 <__swsetup_r+0x1e>
 800f46a:	4b24      	ldr	r3, [pc, #144]	; (800f4fc <__swsetup_r+0xd8>)
 800f46c:	429c      	cmp	r4, r3
 800f46e:	bf08      	it	eq
 800f470:	68ec      	ldreq	r4, [r5, #12]
 800f472:	e7e6      	b.n	800f442 <__swsetup_r+0x1e>
 800f474:	0751      	lsls	r1, r2, #29
 800f476:	d512      	bpl.n	800f49e <__swsetup_r+0x7a>
 800f478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f47a:	b141      	cbz	r1, 800f48e <__swsetup_r+0x6a>
 800f47c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f480:	4299      	cmp	r1, r3
 800f482:	d002      	beq.n	800f48a <__swsetup_r+0x66>
 800f484:	4630      	mov	r0, r6
 800f486:	f000 fa21 	bl	800f8cc <_free_r>
 800f48a:	2300      	movs	r3, #0
 800f48c:	6363      	str	r3, [r4, #52]	; 0x34
 800f48e:	89a3      	ldrh	r3, [r4, #12]
 800f490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f494:	81a3      	strh	r3, [r4, #12]
 800f496:	2300      	movs	r3, #0
 800f498:	6063      	str	r3, [r4, #4]
 800f49a:	6923      	ldr	r3, [r4, #16]
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	89a3      	ldrh	r3, [r4, #12]
 800f4a0:	f043 0308 	orr.w	r3, r3, #8
 800f4a4:	81a3      	strh	r3, [r4, #12]
 800f4a6:	6923      	ldr	r3, [r4, #16]
 800f4a8:	b94b      	cbnz	r3, 800f4be <__swsetup_r+0x9a>
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4b4:	d003      	beq.n	800f4be <__swsetup_r+0x9a>
 800f4b6:	4621      	mov	r1, r4
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	f000 f9bf 	bl	800f83c <__smakebuf_r>
 800f4be:	89a2      	ldrh	r2, [r4, #12]
 800f4c0:	f012 0301 	ands.w	r3, r2, #1
 800f4c4:	d00c      	beq.n	800f4e0 <__swsetup_r+0xbc>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60a3      	str	r3, [r4, #8]
 800f4ca:	6963      	ldr	r3, [r4, #20]
 800f4cc:	425b      	negs	r3, r3
 800f4ce:	61a3      	str	r3, [r4, #24]
 800f4d0:	6923      	ldr	r3, [r4, #16]
 800f4d2:	b953      	cbnz	r3, 800f4ea <__swsetup_r+0xc6>
 800f4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f4dc:	d1ba      	bne.n	800f454 <__swsetup_r+0x30>
 800f4de:	bd70      	pop	{r4, r5, r6, pc}
 800f4e0:	0792      	lsls	r2, r2, #30
 800f4e2:	bf58      	it	pl
 800f4e4:	6963      	ldrpl	r3, [r4, #20]
 800f4e6:	60a3      	str	r3, [r4, #8]
 800f4e8:	e7f2      	b.n	800f4d0 <__swsetup_r+0xac>
 800f4ea:	2000      	movs	r0, #0
 800f4ec:	e7f7      	b.n	800f4de <__swsetup_r+0xba>
 800f4ee:	bf00      	nop
 800f4f0:	20000050 	.word	0x20000050
 800f4f4:	08020e84 	.word	0x08020e84
 800f4f8:	08020ea4 	.word	0x08020ea4
 800f4fc:	08020e64 	.word	0x08020e64

0800f500 <__sflush_r>:
 800f500:	898a      	ldrh	r2, [r1, #12]
 800f502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f506:	4605      	mov	r5, r0
 800f508:	0710      	lsls	r0, r2, #28
 800f50a:	460c      	mov	r4, r1
 800f50c:	d458      	bmi.n	800f5c0 <__sflush_r+0xc0>
 800f50e:	684b      	ldr	r3, [r1, #4]
 800f510:	2b00      	cmp	r3, #0
 800f512:	dc05      	bgt.n	800f520 <__sflush_r+0x20>
 800f514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f516:	2b00      	cmp	r3, #0
 800f518:	dc02      	bgt.n	800f520 <__sflush_r+0x20>
 800f51a:	2000      	movs	r0, #0
 800f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f522:	2e00      	cmp	r6, #0
 800f524:	d0f9      	beq.n	800f51a <__sflush_r+0x1a>
 800f526:	2300      	movs	r3, #0
 800f528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f52c:	682f      	ldr	r7, [r5, #0]
 800f52e:	6a21      	ldr	r1, [r4, #32]
 800f530:	602b      	str	r3, [r5, #0]
 800f532:	d032      	beq.n	800f59a <__sflush_r+0x9a>
 800f534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f536:	89a3      	ldrh	r3, [r4, #12]
 800f538:	075a      	lsls	r2, r3, #29
 800f53a:	d505      	bpl.n	800f548 <__sflush_r+0x48>
 800f53c:	6863      	ldr	r3, [r4, #4]
 800f53e:	1ac0      	subs	r0, r0, r3
 800f540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f542:	b10b      	cbz	r3, 800f548 <__sflush_r+0x48>
 800f544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f546:	1ac0      	subs	r0, r0, r3
 800f548:	2300      	movs	r3, #0
 800f54a:	4602      	mov	r2, r0
 800f54c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f54e:	6a21      	ldr	r1, [r4, #32]
 800f550:	4628      	mov	r0, r5
 800f552:	47b0      	blx	r6
 800f554:	1c43      	adds	r3, r0, #1
 800f556:	89a3      	ldrh	r3, [r4, #12]
 800f558:	d106      	bne.n	800f568 <__sflush_r+0x68>
 800f55a:	6829      	ldr	r1, [r5, #0]
 800f55c:	291d      	cmp	r1, #29
 800f55e:	d848      	bhi.n	800f5f2 <__sflush_r+0xf2>
 800f560:	4a29      	ldr	r2, [pc, #164]	; (800f608 <__sflush_r+0x108>)
 800f562:	40ca      	lsrs	r2, r1
 800f564:	07d6      	lsls	r6, r2, #31
 800f566:	d544      	bpl.n	800f5f2 <__sflush_r+0xf2>
 800f568:	2200      	movs	r2, #0
 800f56a:	6062      	str	r2, [r4, #4]
 800f56c:	04d9      	lsls	r1, r3, #19
 800f56e:	6922      	ldr	r2, [r4, #16]
 800f570:	6022      	str	r2, [r4, #0]
 800f572:	d504      	bpl.n	800f57e <__sflush_r+0x7e>
 800f574:	1c42      	adds	r2, r0, #1
 800f576:	d101      	bne.n	800f57c <__sflush_r+0x7c>
 800f578:	682b      	ldr	r3, [r5, #0]
 800f57a:	b903      	cbnz	r3, 800f57e <__sflush_r+0x7e>
 800f57c:	6560      	str	r0, [r4, #84]	; 0x54
 800f57e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f580:	602f      	str	r7, [r5, #0]
 800f582:	2900      	cmp	r1, #0
 800f584:	d0c9      	beq.n	800f51a <__sflush_r+0x1a>
 800f586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f58a:	4299      	cmp	r1, r3
 800f58c:	d002      	beq.n	800f594 <__sflush_r+0x94>
 800f58e:	4628      	mov	r0, r5
 800f590:	f000 f99c 	bl	800f8cc <_free_r>
 800f594:	2000      	movs	r0, #0
 800f596:	6360      	str	r0, [r4, #52]	; 0x34
 800f598:	e7c0      	b.n	800f51c <__sflush_r+0x1c>
 800f59a:	2301      	movs	r3, #1
 800f59c:	4628      	mov	r0, r5
 800f59e:	47b0      	blx	r6
 800f5a0:	1c41      	adds	r1, r0, #1
 800f5a2:	d1c8      	bne.n	800f536 <__sflush_r+0x36>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d0c5      	beq.n	800f536 <__sflush_r+0x36>
 800f5aa:	2b1d      	cmp	r3, #29
 800f5ac:	d001      	beq.n	800f5b2 <__sflush_r+0xb2>
 800f5ae:	2b16      	cmp	r3, #22
 800f5b0:	d101      	bne.n	800f5b6 <__sflush_r+0xb6>
 800f5b2:	602f      	str	r7, [r5, #0]
 800f5b4:	e7b1      	b.n	800f51a <__sflush_r+0x1a>
 800f5b6:	89a3      	ldrh	r3, [r4, #12]
 800f5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5bc:	81a3      	strh	r3, [r4, #12]
 800f5be:	e7ad      	b.n	800f51c <__sflush_r+0x1c>
 800f5c0:	690f      	ldr	r7, [r1, #16]
 800f5c2:	2f00      	cmp	r7, #0
 800f5c4:	d0a9      	beq.n	800f51a <__sflush_r+0x1a>
 800f5c6:	0793      	lsls	r3, r2, #30
 800f5c8:	680e      	ldr	r6, [r1, #0]
 800f5ca:	bf08      	it	eq
 800f5cc:	694b      	ldreq	r3, [r1, #20]
 800f5ce:	600f      	str	r7, [r1, #0]
 800f5d0:	bf18      	it	ne
 800f5d2:	2300      	movne	r3, #0
 800f5d4:	eba6 0807 	sub.w	r8, r6, r7
 800f5d8:	608b      	str	r3, [r1, #8]
 800f5da:	f1b8 0f00 	cmp.w	r8, #0
 800f5de:	dd9c      	ble.n	800f51a <__sflush_r+0x1a>
 800f5e0:	4643      	mov	r3, r8
 800f5e2:	463a      	mov	r2, r7
 800f5e4:	6a21      	ldr	r1, [r4, #32]
 800f5e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f5e8:	4628      	mov	r0, r5
 800f5ea:	47b0      	blx	r6
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	dc06      	bgt.n	800f5fe <__sflush_r+0xfe>
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	e78e      	b.n	800f51c <__sflush_r+0x1c>
 800f5fe:	4407      	add	r7, r0
 800f600:	eba8 0800 	sub.w	r8, r8, r0
 800f604:	e7e9      	b.n	800f5da <__sflush_r+0xda>
 800f606:	bf00      	nop
 800f608:	20400001 	.word	0x20400001

0800f60c <_fflush_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	690b      	ldr	r3, [r1, #16]
 800f610:	4605      	mov	r5, r0
 800f612:	460c      	mov	r4, r1
 800f614:	b1db      	cbz	r3, 800f64e <_fflush_r+0x42>
 800f616:	b118      	cbz	r0, 800f620 <_fflush_r+0x14>
 800f618:	6983      	ldr	r3, [r0, #24]
 800f61a:	b90b      	cbnz	r3, 800f620 <_fflush_r+0x14>
 800f61c:	f000 f860 	bl	800f6e0 <__sinit>
 800f620:	4b0c      	ldr	r3, [pc, #48]	; (800f654 <_fflush_r+0x48>)
 800f622:	429c      	cmp	r4, r3
 800f624:	d109      	bne.n	800f63a <_fflush_r+0x2e>
 800f626:	686c      	ldr	r4, [r5, #4]
 800f628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f62c:	b17b      	cbz	r3, 800f64e <_fflush_r+0x42>
 800f62e:	4621      	mov	r1, r4
 800f630:	4628      	mov	r0, r5
 800f632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f636:	f7ff bf63 	b.w	800f500 <__sflush_r>
 800f63a:	4b07      	ldr	r3, [pc, #28]	; (800f658 <_fflush_r+0x4c>)
 800f63c:	429c      	cmp	r4, r3
 800f63e:	d101      	bne.n	800f644 <_fflush_r+0x38>
 800f640:	68ac      	ldr	r4, [r5, #8]
 800f642:	e7f1      	b.n	800f628 <_fflush_r+0x1c>
 800f644:	4b05      	ldr	r3, [pc, #20]	; (800f65c <_fflush_r+0x50>)
 800f646:	429c      	cmp	r4, r3
 800f648:	bf08      	it	eq
 800f64a:	68ec      	ldreq	r4, [r5, #12]
 800f64c:	e7ec      	b.n	800f628 <_fflush_r+0x1c>
 800f64e:	2000      	movs	r0, #0
 800f650:	bd38      	pop	{r3, r4, r5, pc}
 800f652:	bf00      	nop
 800f654:	08020e84 	.word	0x08020e84
 800f658:	08020ea4 	.word	0x08020ea4
 800f65c:	08020e64 	.word	0x08020e64

0800f660 <std>:
 800f660:	2300      	movs	r3, #0
 800f662:	b510      	push	{r4, lr}
 800f664:	4604      	mov	r4, r0
 800f666:	e9c0 3300 	strd	r3, r3, [r0]
 800f66a:	6083      	str	r3, [r0, #8]
 800f66c:	8181      	strh	r1, [r0, #12]
 800f66e:	6643      	str	r3, [r0, #100]	; 0x64
 800f670:	81c2      	strh	r2, [r0, #14]
 800f672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f676:	6183      	str	r3, [r0, #24]
 800f678:	4619      	mov	r1, r3
 800f67a:	2208      	movs	r2, #8
 800f67c:	305c      	adds	r0, #92	; 0x5c
 800f67e:	f7ff fd7c 	bl	800f17a <memset>
 800f682:	4b05      	ldr	r3, [pc, #20]	; (800f698 <std+0x38>)
 800f684:	6263      	str	r3, [r4, #36]	; 0x24
 800f686:	4b05      	ldr	r3, [pc, #20]	; (800f69c <std+0x3c>)
 800f688:	62a3      	str	r3, [r4, #40]	; 0x28
 800f68a:	4b05      	ldr	r3, [pc, #20]	; (800f6a0 <std+0x40>)
 800f68c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f68e:	4b05      	ldr	r3, [pc, #20]	; (800f6a4 <std+0x44>)
 800f690:	6224      	str	r4, [r4, #32]
 800f692:	6323      	str	r3, [r4, #48]	; 0x30
 800f694:	bd10      	pop	{r4, pc}
 800f696:	bf00      	nop
 800f698:	08010271 	.word	0x08010271
 800f69c:	08010293 	.word	0x08010293
 800f6a0:	080102cb 	.word	0x080102cb
 800f6a4:	080102ef 	.word	0x080102ef

0800f6a8 <_cleanup_r>:
 800f6a8:	4901      	ldr	r1, [pc, #4]	; (800f6b0 <_cleanup_r+0x8>)
 800f6aa:	f000 b885 	b.w	800f7b8 <_fwalk_reent>
 800f6ae:	bf00      	nop
 800f6b0:	0800f60d 	.word	0x0800f60d

0800f6b4 <__sfmoreglue>:
 800f6b4:	b570      	push	{r4, r5, r6, lr}
 800f6b6:	1e4a      	subs	r2, r1, #1
 800f6b8:	2568      	movs	r5, #104	; 0x68
 800f6ba:	4355      	muls	r5, r2
 800f6bc:	460e      	mov	r6, r1
 800f6be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f6c2:	f000 f951 	bl	800f968 <_malloc_r>
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	b140      	cbz	r0, 800f6dc <__sfmoreglue+0x28>
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	e9c0 1600 	strd	r1, r6, [r0]
 800f6d0:	300c      	adds	r0, #12
 800f6d2:	60a0      	str	r0, [r4, #8]
 800f6d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f6d8:	f7ff fd4f 	bl	800f17a <memset>
 800f6dc:	4620      	mov	r0, r4
 800f6de:	bd70      	pop	{r4, r5, r6, pc}

0800f6e0 <__sinit>:
 800f6e0:	6983      	ldr	r3, [r0, #24]
 800f6e2:	b510      	push	{r4, lr}
 800f6e4:	4604      	mov	r4, r0
 800f6e6:	bb33      	cbnz	r3, 800f736 <__sinit+0x56>
 800f6e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f6ec:	6503      	str	r3, [r0, #80]	; 0x50
 800f6ee:	4b12      	ldr	r3, [pc, #72]	; (800f738 <__sinit+0x58>)
 800f6f0:	4a12      	ldr	r2, [pc, #72]	; (800f73c <__sinit+0x5c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	6282      	str	r2, [r0, #40]	; 0x28
 800f6f6:	4298      	cmp	r0, r3
 800f6f8:	bf04      	itt	eq
 800f6fa:	2301      	moveq	r3, #1
 800f6fc:	6183      	streq	r3, [r0, #24]
 800f6fe:	f000 f81f 	bl	800f740 <__sfp>
 800f702:	6060      	str	r0, [r4, #4]
 800f704:	4620      	mov	r0, r4
 800f706:	f000 f81b 	bl	800f740 <__sfp>
 800f70a:	60a0      	str	r0, [r4, #8]
 800f70c:	4620      	mov	r0, r4
 800f70e:	f000 f817 	bl	800f740 <__sfp>
 800f712:	2200      	movs	r2, #0
 800f714:	60e0      	str	r0, [r4, #12]
 800f716:	2104      	movs	r1, #4
 800f718:	6860      	ldr	r0, [r4, #4]
 800f71a:	f7ff ffa1 	bl	800f660 <std>
 800f71e:	2201      	movs	r2, #1
 800f720:	2109      	movs	r1, #9
 800f722:	68a0      	ldr	r0, [r4, #8]
 800f724:	f7ff ff9c 	bl	800f660 <std>
 800f728:	2202      	movs	r2, #2
 800f72a:	2112      	movs	r1, #18
 800f72c:	68e0      	ldr	r0, [r4, #12]
 800f72e:	f7ff ff97 	bl	800f660 <std>
 800f732:	2301      	movs	r3, #1
 800f734:	61a3      	str	r3, [r4, #24]
 800f736:	bd10      	pop	{r4, pc}
 800f738:	08020e60 	.word	0x08020e60
 800f73c:	0800f6a9 	.word	0x0800f6a9

0800f740 <__sfp>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	4b1b      	ldr	r3, [pc, #108]	; (800f7b0 <__sfp+0x70>)
 800f744:	681e      	ldr	r6, [r3, #0]
 800f746:	69b3      	ldr	r3, [r6, #24]
 800f748:	4607      	mov	r7, r0
 800f74a:	b913      	cbnz	r3, 800f752 <__sfp+0x12>
 800f74c:	4630      	mov	r0, r6
 800f74e:	f7ff ffc7 	bl	800f6e0 <__sinit>
 800f752:	3648      	adds	r6, #72	; 0x48
 800f754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f758:	3b01      	subs	r3, #1
 800f75a:	d503      	bpl.n	800f764 <__sfp+0x24>
 800f75c:	6833      	ldr	r3, [r6, #0]
 800f75e:	b133      	cbz	r3, 800f76e <__sfp+0x2e>
 800f760:	6836      	ldr	r6, [r6, #0]
 800f762:	e7f7      	b.n	800f754 <__sfp+0x14>
 800f764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f768:	b16d      	cbz	r5, 800f786 <__sfp+0x46>
 800f76a:	3468      	adds	r4, #104	; 0x68
 800f76c:	e7f4      	b.n	800f758 <__sfp+0x18>
 800f76e:	2104      	movs	r1, #4
 800f770:	4638      	mov	r0, r7
 800f772:	f7ff ff9f 	bl	800f6b4 <__sfmoreglue>
 800f776:	6030      	str	r0, [r6, #0]
 800f778:	2800      	cmp	r0, #0
 800f77a:	d1f1      	bne.n	800f760 <__sfp+0x20>
 800f77c:	230c      	movs	r3, #12
 800f77e:	603b      	str	r3, [r7, #0]
 800f780:	4604      	mov	r4, r0
 800f782:	4620      	mov	r0, r4
 800f784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f786:	4b0b      	ldr	r3, [pc, #44]	; (800f7b4 <__sfp+0x74>)
 800f788:	6665      	str	r5, [r4, #100]	; 0x64
 800f78a:	e9c4 5500 	strd	r5, r5, [r4]
 800f78e:	60a5      	str	r5, [r4, #8]
 800f790:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f794:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f798:	2208      	movs	r2, #8
 800f79a:	4629      	mov	r1, r5
 800f79c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f7a0:	f7ff fceb 	bl	800f17a <memset>
 800f7a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f7a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f7ac:	e7e9      	b.n	800f782 <__sfp+0x42>
 800f7ae:	bf00      	nop
 800f7b0:	08020e60 	.word	0x08020e60
 800f7b4:	ffff0001 	.word	0xffff0001

0800f7b8 <_fwalk_reent>:
 800f7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7bc:	4680      	mov	r8, r0
 800f7be:	4689      	mov	r9, r1
 800f7c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f7c4:	2600      	movs	r6, #0
 800f7c6:	b914      	cbnz	r4, 800f7ce <_fwalk_reent+0x16>
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f7d2:	3f01      	subs	r7, #1
 800f7d4:	d501      	bpl.n	800f7da <_fwalk_reent+0x22>
 800f7d6:	6824      	ldr	r4, [r4, #0]
 800f7d8:	e7f5      	b.n	800f7c6 <_fwalk_reent+0xe>
 800f7da:	89ab      	ldrh	r3, [r5, #12]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d907      	bls.n	800f7f0 <_fwalk_reent+0x38>
 800f7e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	d003      	beq.n	800f7f0 <_fwalk_reent+0x38>
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	4640      	mov	r0, r8
 800f7ec:	47c8      	blx	r9
 800f7ee:	4306      	orrs	r6, r0
 800f7f0:	3568      	adds	r5, #104	; 0x68
 800f7f2:	e7ee      	b.n	800f7d2 <_fwalk_reent+0x1a>

0800f7f4 <__swhatbuf_r>:
 800f7f4:	b570      	push	{r4, r5, r6, lr}
 800f7f6:	460e      	mov	r6, r1
 800f7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7fc:	2900      	cmp	r1, #0
 800f7fe:	b096      	sub	sp, #88	; 0x58
 800f800:	4614      	mov	r4, r2
 800f802:	461d      	mov	r5, r3
 800f804:	da07      	bge.n	800f816 <__swhatbuf_r+0x22>
 800f806:	2300      	movs	r3, #0
 800f808:	602b      	str	r3, [r5, #0]
 800f80a:	89b3      	ldrh	r3, [r6, #12]
 800f80c:	061a      	lsls	r2, r3, #24
 800f80e:	d410      	bmi.n	800f832 <__swhatbuf_r+0x3e>
 800f810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f814:	e00e      	b.n	800f834 <__swhatbuf_r+0x40>
 800f816:	466a      	mov	r2, sp
 800f818:	f000 fd90 	bl	801033c <_fstat_r>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	dbf2      	blt.n	800f806 <__swhatbuf_r+0x12>
 800f820:	9a01      	ldr	r2, [sp, #4]
 800f822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f82a:	425a      	negs	r2, r3
 800f82c:	415a      	adcs	r2, r3
 800f82e:	602a      	str	r2, [r5, #0]
 800f830:	e7ee      	b.n	800f810 <__swhatbuf_r+0x1c>
 800f832:	2340      	movs	r3, #64	; 0x40
 800f834:	2000      	movs	r0, #0
 800f836:	6023      	str	r3, [r4, #0]
 800f838:	b016      	add	sp, #88	; 0x58
 800f83a:	bd70      	pop	{r4, r5, r6, pc}

0800f83c <__smakebuf_r>:
 800f83c:	898b      	ldrh	r3, [r1, #12]
 800f83e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f840:	079d      	lsls	r5, r3, #30
 800f842:	4606      	mov	r6, r0
 800f844:	460c      	mov	r4, r1
 800f846:	d507      	bpl.n	800f858 <__smakebuf_r+0x1c>
 800f848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	6123      	str	r3, [r4, #16]
 800f850:	2301      	movs	r3, #1
 800f852:	6163      	str	r3, [r4, #20]
 800f854:	b002      	add	sp, #8
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	ab01      	add	r3, sp, #4
 800f85a:	466a      	mov	r2, sp
 800f85c:	f7ff ffca 	bl	800f7f4 <__swhatbuf_r>
 800f860:	9900      	ldr	r1, [sp, #0]
 800f862:	4605      	mov	r5, r0
 800f864:	4630      	mov	r0, r6
 800f866:	f000 f87f 	bl	800f968 <_malloc_r>
 800f86a:	b948      	cbnz	r0, 800f880 <__smakebuf_r+0x44>
 800f86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f870:	059a      	lsls	r2, r3, #22
 800f872:	d4ef      	bmi.n	800f854 <__smakebuf_r+0x18>
 800f874:	f023 0303 	bic.w	r3, r3, #3
 800f878:	f043 0302 	orr.w	r3, r3, #2
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	e7e3      	b.n	800f848 <__smakebuf_r+0xc>
 800f880:	4b0d      	ldr	r3, [pc, #52]	; (800f8b8 <__smakebuf_r+0x7c>)
 800f882:	62b3      	str	r3, [r6, #40]	; 0x28
 800f884:	89a3      	ldrh	r3, [r4, #12]
 800f886:	6020      	str	r0, [r4, #0]
 800f888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f88c:	81a3      	strh	r3, [r4, #12]
 800f88e:	9b00      	ldr	r3, [sp, #0]
 800f890:	6163      	str	r3, [r4, #20]
 800f892:	9b01      	ldr	r3, [sp, #4]
 800f894:	6120      	str	r0, [r4, #16]
 800f896:	b15b      	cbz	r3, 800f8b0 <__smakebuf_r+0x74>
 800f898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f89c:	4630      	mov	r0, r6
 800f89e:	f000 fd5f 	bl	8010360 <_isatty_r>
 800f8a2:	b128      	cbz	r0, 800f8b0 <__smakebuf_r+0x74>
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f023 0303 	bic.w	r3, r3, #3
 800f8aa:	f043 0301 	orr.w	r3, r3, #1
 800f8ae:	81a3      	strh	r3, [r4, #12]
 800f8b0:	89a3      	ldrh	r3, [r4, #12]
 800f8b2:	431d      	orrs	r5, r3
 800f8b4:	81a5      	strh	r5, [r4, #12]
 800f8b6:	e7cd      	b.n	800f854 <__smakebuf_r+0x18>
 800f8b8:	0800f6a9 	.word	0x0800f6a9

0800f8bc <malloc>:
 800f8bc:	4b02      	ldr	r3, [pc, #8]	; (800f8c8 <malloc+0xc>)
 800f8be:	4601      	mov	r1, r0
 800f8c0:	6818      	ldr	r0, [r3, #0]
 800f8c2:	f000 b851 	b.w	800f968 <_malloc_r>
 800f8c6:	bf00      	nop
 800f8c8:	20000050 	.word	0x20000050

0800f8cc <_free_r>:
 800f8cc:	b538      	push	{r3, r4, r5, lr}
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	2900      	cmp	r1, #0
 800f8d2:	d045      	beq.n	800f960 <_free_r+0x94>
 800f8d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8d8:	1f0c      	subs	r4, r1, #4
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	bfb8      	it	lt
 800f8de:	18e4      	addlt	r4, r4, r3
 800f8e0:	f000 fd60 	bl	80103a4 <__malloc_lock>
 800f8e4:	4a1f      	ldr	r2, [pc, #124]	; (800f964 <_free_r+0x98>)
 800f8e6:	6813      	ldr	r3, [r2, #0]
 800f8e8:	4610      	mov	r0, r2
 800f8ea:	b933      	cbnz	r3, 800f8fa <_free_r+0x2e>
 800f8ec:	6063      	str	r3, [r4, #4]
 800f8ee:	6014      	str	r4, [r2, #0]
 800f8f0:	4628      	mov	r0, r5
 800f8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8f6:	f000 bd56 	b.w	80103a6 <__malloc_unlock>
 800f8fa:	42a3      	cmp	r3, r4
 800f8fc:	d90c      	bls.n	800f918 <_free_r+0x4c>
 800f8fe:	6821      	ldr	r1, [r4, #0]
 800f900:	1862      	adds	r2, r4, r1
 800f902:	4293      	cmp	r3, r2
 800f904:	bf04      	itt	eq
 800f906:	681a      	ldreq	r2, [r3, #0]
 800f908:	685b      	ldreq	r3, [r3, #4]
 800f90a:	6063      	str	r3, [r4, #4]
 800f90c:	bf04      	itt	eq
 800f90e:	1852      	addeq	r2, r2, r1
 800f910:	6022      	streq	r2, [r4, #0]
 800f912:	6004      	str	r4, [r0, #0]
 800f914:	e7ec      	b.n	800f8f0 <_free_r+0x24>
 800f916:	4613      	mov	r3, r2
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	b10a      	cbz	r2, 800f920 <_free_r+0x54>
 800f91c:	42a2      	cmp	r2, r4
 800f91e:	d9fa      	bls.n	800f916 <_free_r+0x4a>
 800f920:	6819      	ldr	r1, [r3, #0]
 800f922:	1858      	adds	r0, r3, r1
 800f924:	42a0      	cmp	r0, r4
 800f926:	d10b      	bne.n	800f940 <_free_r+0x74>
 800f928:	6820      	ldr	r0, [r4, #0]
 800f92a:	4401      	add	r1, r0
 800f92c:	1858      	adds	r0, r3, r1
 800f92e:	4282      	cmp	r2, r0
 800f930:	6019      	str	r1, [r3, #0]
 800f932:	d1dd      	bne.n	800f8f0 <_free_r+0x24>
 800f934:	6810      	ldr	r0, [r2, #0]
 800f936:	6852      	ldr	r2, [r2, #4]
 800f938:	605a      	str	r2, [r3, #4]
 800f93a:	4401      	add	r1, r0
 800f93c:	6019      	str	r1, [r3, #0]
 800f93e:	e7d7      	b.n	800f8f0 <_free_r+0x24>
 800f940:	d902      	bls.n	800f948 <_free_r+0x7c>
 800f942:	230c      	movs	r3, #12
 800f944:	602b      	str	r3, [r5, #0]
 800f946:	e7d3      	b.n	800f8f0 <_free_r+0x24>
 800f948:	6820      	ldr	r0, [r4, #0]
 800f94a:	1821      	adds	r1, r4, r0
 800f94c:	428a      	cmp	r2, r1
 800f94e:	bf04      	itt	eq
 800f950:	6811      	ldreq	r1, [r2, #0]
 800f952:	6852      	ldreq	r2, [r2, #4]
 800f954:	6062      	str	r2, [r4, #4]
 800f956:	bf04      	itt	eq
 800f958:	1809      	addeq	r1, r1, r0
 800f95a:	6021      	streq	r1, [r4, #0]
 800f95c:	605c      	str	r4, [r3, #4]
 800f95e:	e7c7      	b.n	800f8f0 <_free_r+0x24>
 800f960:	bd38      	pop	{r3, r4, r5, pc}
 800f962:	bf00      	nop
 800f964:	200069d0 	.word	0x200069d0

0800f968 <_malloc_r>:
 800f968:	b570      	push	{r4, r5, r6, lr}
 800f96a:	1ccd      	adds	r5, r1, #3
 800f96c:	f025 0503 	bic.w	r5, r5, #3
 800f970:	3508      	adds	r5, #8
 800f972:	2d0c      	cmp	r5, #12
 800f974:	bf38      	it	cc
 800f976:	250c      	movcc	r5, #12
 800f978:	2d00      	cmp	r5, #0
 800f97a:	4606      	mov	r6, r0
 800f97c:	db01      	blt.n	800f982 <_malloc_r+0x1a>
 800f97e:	42a9      	cmp	r1, r5
 800f980:	d903      	bls.n	800f98a <_malloc_r+0x22>
 800f982:	230c      	movs	r3, #12
 800f984:	6033      	str	r3, [r6, #0]
 800f986:	2000      	movs	r0, #0
 800f988:	bd70      	pop	{r4, r5, r6, pc}
 800f98a:	f000 fd0b 	bl	80103a4 <__malloc_lock>
 800f98e:	4a21      	ldr	r2, [pc, #132]	; (800fa14 <_malloc_r+0xac>)
 800f990:	6814      	ldr	r4, [r2, #0]
 800f992:	4621      	mov	r1, r4
 800f994:	b991      	cbnz	r1, 800f9bc <_malloc_r+0x54>
 800f996:	4c20      	ldr	r4, [pc, #128]	; (800fa18 <_malloc_r+0xb0>)
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	b91b      	cbnz	r3, 800f9a4 <_malloc_r+0x3c>
 800f99c:	4630      	mov	r0, r6
 800f99e:	f000 fc57 	bl	8010250 <_sbrk_r>
 800f9a2:	6020      	str	r0, [r4, #0]
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	f000 fc52 	bl	8010250 <_sbrk_r>
 800f9ac:	1c43      	adds	r3, r0, #1
 800f9ae:	d124      	bne.n	800f9fa <_malloc_r+0x92>
 800f9b0:	230c      	movs	r3, #12
 800f9b2:	6033      	str	r3, [r6, #0]
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	f000 fcf6 	bl	80103a6 <__malloc_unlock>
 800f9ba:	e7e4      	b.n	800f986 <_malloc_r+0x1e>
 800f9bc:	680b      	ldr	r3, [r1, #0]
 800f9be:	1b5b      	subs	r3, r3, r5
 800f9c0:	d418      	bmi.n	800f9f4 <_malloc_r+0x8c>
 800f9c2:	2b0b      	cmp	r3, #11
 800f9c4:	d90f      	bls.n	800f9e6 <_malloc_r+0x7e>
 800f9c6:	600b      	str	r3, [r1, #0]
 800f9c8:	50cd      	str	r5, [r1, r3]
 800f9ca:	18cc      	adds	r4, r1, r3
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f000 fcea 	bl	80103a6 <__malloc_unlock>
 800f9d2:	f104 000b 	add.w	r0, r4, #11
 800f9d6:	1d23      	adds	r3, r4, #4
 800f9d8:	f020 0007 	bic.w	r0, r0, #7
 800f9dc:	1ac3      	subs	r3, r0, r3
 800f9de:	d0d3      	beq.n	800f988 <_malloc_r+0x20>
 800f9e0:	425a      	negs	r2, r3
 800f9e2:	50e2      	str	r2, [r4, r3]
 800f9e4:	e7d0      	b.n	800f988 <_malloc_r+0x20>
 800f9e6:	428c      	cmp	r4, r1
 800f9e8:	684b      	ldr	r3, [r1, #4]
 800f9ea:	bf16      	itet	ne
 800f9ec:	6063      	strne	r3, [r4, #4]
 800f9ee:	6013      	streq	r3, [r2, #0]
 800f9f0:	460c      	movne	r4, r1
 800f9f2:	e7eb      	b.n	800f9cc <_malloc_r+0x64>
 800f9f4:	460c      	mov	r4, r1
 800f9f6:	6849      	ldr	r1, [r1, #4]
 800f9f8:	e7cc      	b.n	800f994 <_malloc_r+0x2c>
 800f9fa:	1cc4      	adds	r4, r0, #3
 800f9fc:	f024 0403 	bic.w	r4, r4, #3
 800fa00:	42a0      	cmp	r0, r4
 800fa02:	d005      	beq.n	800fa10 <_malloc_r+0xa8>
 800fa04:	1a21      	subs	r1, r4, r0
 800fa06:	4630      	mov	r0, r6
 800fa08:	f000 fc22 	bl	8010250 <_sbrk_r>
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d0cf      	beq.n	800f9b0 <_malloc_r+0x48>
 800fa10:	6025      	str	r5, [r4, #0]
 800fa12:	e7db      	b.n	800f9cc <_malloc_r+0x64>
 800fa14:	200069d0 	.word	0x200069d0
 800fa18:	200069d4 	.word	0x200069d4

0800fa1c <__ssputs_r>:
 800fa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa20:	688e      	ldr	r6, [r1, #8]
 800fa22:	429e      	cmp	r6, r3
 800fa24:	4682      	mov	sl, r0
 800fa26:	460c      	mov	r4, r1
 800fa28:	4690      	mov	r8, r2
 800fa2a:	4699      	mov	r9, r3
 800fa2c:	d837      	bhi.n	800fa9e <__ssputs_r+0x82>
 800fa2e:	898a      	ldrh	r2, [r1, #12]
 800fa30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fa34:	d031      	beq.n	800fa9a <__ssputs_r+0x7e>
 800fa36:	6825      	ldr	r5, [r4, #0]
 800fa38:	6909      	ldr	r1, [r1, #16]
 800fa3a:	1a6f      	subs	r7, r5, r1
 800fa3c:	6965      	ldr	r5, [r4, #20]
 800fa3e:	2302      	movs	r3, #2
 800fa40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fa44:	fb95 f5f3 	sdiv	r5, r5, r3
 800fa48:	f109 0301 	add.w	r3, r9, #1
 800fa4c:	443b      	add	r3, r7
 800fa4e:	429d      	cmp	r5, r3
 800fa50:	bf38      	it	cc
 800fa52:	461d      	movcc	r5, r3
 800fa54:	0553      	lsls	r3, r2, #21
 800fa56:	d530      	bpl.n	800faba <__ssputs_r+0x9e>
 800fa58:	4629      	mov	r1, r5
 800fa5a:	f7ff ff85 	bl	800f968 <_malloc_r>
 800fa5e:	4606      	mov	r6, r0
 800fa60:	b950      	cbnz	r0, 800fa78 <__ssputs_r+0x5c>
 800fa62:	230c      	movs	r3, #12
 800fa64:	f8ca 3000 	str.w	r3, [sl]
 800fa68:	89a3      	ldrh	r3, [r4, #12]
 800fa6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa6e:	81a3      	strh	r3, [r4, #12]
 800fa70:	f04f 30ff 	mov.w	r0, #4294967295
 800fa74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa78:	463a      	mov	r2, r7
 800fa7a:	6921      	ldr	r1, [r4, #16]
 800fa7c:	f7ff fb59 	bl	800f132 <memcpy>
 800fa80:	89a3      	ldrh	r3, [r4, #12]
 800fa82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa8a:	81a3      	strh	r3, [r4, #12]
 800fa8c:	6126      	str	r6, [r4, #16]
 800fa8e:	6165      	str	r5, [r4, #20]
 800fa90:	443e      	add	r6, r7
 800fa92:	1bed      	subs	r5, r5, r7
 800fa94:	6026      	str	r6, [r4, #0]
 800fa96:	60a5      	str	r5, [r4, #8]
 800fa98:	464e      	mov	r6, r9
 800fa9a:	454e      	cmp	r6, r9
 800fa9c:	d900      	bls.n	800faa0 <__ssputs_r+0x84>
 800fa9e:	464e      	mov	r6, r9
 800faa0:	4632      	mov	r2, r6
 800faa2:	4641      	mov	r1, r8
 800faa4:	6820      	ldr	r0, [r4, #0]
 800faa6:	f7ff fb4f 	bl	800f148 <memmove>
 800faaa:	68a3      	ldr	r3, [r4, #8]
 800faac:	1b9b      	subs	r3, r3, r6
 800faae:	60a3      	str	r3, [r4, #8]
 800fab0:	6823      	ldr	r3, [r4, #0]
 800fab2:	441e      	add	r6, r3
 800fab4:	6026      	str	r6, [r4, #0]
 800fab6:	2000      	movs	r0, #0
 800fab8:	e7dc      	b.n	800fa74 <__ssputs_r+0x58>
 800faba:	462a      	mov	r2, r5
 800fabc:	f000 fc74 	bl	80103a8 <_realloc_r>
 800fac0:	4606      	mov	r6, r0
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d1e2      	bne.n	800fa8c <__ssputs_r+0x70>
 800fac6:	6921      	ldr	r1, [r4, #16]
 800fac8:	4650      	mov	r0, sl
 800faca:	f7ff feff 	bl	800f8cc <_free_r>
 800face:	e7c8      	b.n	800fa62 <__ssputs_r+0x46>

0800fad0 <_svfiprintf_r>:
 800fad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad4:	461d      	mov	r5, r3
 800fad6:	898b      	ldrh	r3, [r1, #12]
 800fad8:	061f      	lsls	r7, r3, #24
 800fada:	b09d      	sub	sp, #116	; 0x74
 800fadc:	4680      	mov	r8, r0
 800fade:	460c      	mov	r4, r1
 800fae0:	4616      	mov	r6, r2
 800fae2:	d50f      	bpl.n	800fb04 <_svfiprintf_r+0x34>
 800fae4:	690b      	ldr	r3, [r1, #16]
 800fae6:	b96b      	cbnz	r3, 800fb04 <_svfiprintf_r+0x34>
 800fae8:	2140      	movs	r1, #64	; 0x40
 800faea:	f7ff ff3d 	bl	800f968 <_malloc_r>
 800faee:	6020      	str	r0, [r4, #0]
 800faf0:	6120      	str	r0, [r4, #16]
 800faf2:	b928      	cbnz	r0, 800fb00 <_svfiprintf_r+0x30>
 800faf4:	230c      	movs	r3, #12
 800faf6:	f8c8 3000 	str.w	r3, [r8]
 800fafa:	f04f 30ff 	mov.w	r0, #4294967295
 800fafe:	e0c8      	b.n	800fc92 <_svfiprintf_r+0x1c2>
 800fb00:	2340      	movs	r3, #64	; 0x40
 800fb02:	6163      	str	r3, [r4, #20]
 800fb04:	2300      	movs	r3, #0
 800fb06:	9309      	str	r3, [sp, #36]	; 0x24
 800fb08:	2320      	movs	r3, #32
 800fb0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb0e:	2330      	movs	r3, #48	; 0x30
 800fb10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb14:	9503      	str	r5, [sp, #12]
 800fb16:	f04f 0b01 	mov.w	fp, #1
 800fb1a:	4637      	mov	r7, r6
 800fb1c:	463d      	mov	r5, r7
 800fb1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb22:	b10b      	cbz	r3, 800fb28 <_svfiprintf_r+0x58>
 800fb24:	2b25      	cmp	r3, #37	; 0x25
 800fb26:	d13e      	bne.n	800fba6 <_svfiprintf_r+0xd6>
 800fb28:	ebb7 0a06 	subs.w	sl, r7, r6
 800fb2c:	d00b      	beq.n	800fb46 <_svfiprintf_r+0x76>
 800fb2e:	4653      	mov	r3, sl
 800fb30:	4632      	mov	r2, r6
 800fb32:	4621      	mov	r1, r4
 800fb34:	4640      	mov	r0, r8
 800fb36:	f7ff ff71 	bl	800fa1c <__ssputs_r>
 800fb3a:	3001      	adds	r0, #1
 800fb3c:	f000 80a4 	beq.w	800fc88 <_svfiprintf_r+0x1b8>
 800fb40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb42:	4453      	add	r3, sl
 800fb44:	9309      	str	r3, [sp, #36]	; 0x24
 800fb46:	783b      	ldrb	r3, [r7, #0]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 809d 	beq.w	800fc88 <_svfiprintf_r+0x1b8>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	f04f 32ff 	mov.w	r2, #4294967295
 800fb54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb58:	9304      	str	r3, [sp, #16]
 800fb5a:	9307      	str	r3, [sp, #28]
 800fb5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb60:	931a      	str	r3, [sp, #104]	; 0x68
 800fb62:	462f      	mov	r7, r5
 800fb64:	2205      	movs	r2, #5
 800fb66:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fb6a:	4850      	ldr	r0, [pc, #320]	; (800fcac <_svfiprintf_r+0x1dc>)
 800fb6c:	f7f0 fb80 	bl	8000270 <memchr>
 800fb70:	9b04      	ldr	r3, [sp, #16]
 800fb72:	b9d0      	cbnz	r0, 800fbaa <_svfiprintf_r+0xda>
 800fb74:	06d9      	lsls	r1, r3, #27
 800fb76:	bf44      	itt	mi
 800fb78:	2220      	movmi	r2, #32
 800fb7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb7e:	071a      	lsls	r2, r3, #28
 800fb80:	bf44      	itt	mi
 800fb82:	222b      	movmi	r2, #43	; 0x2b
 800fb84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb88:	782a      	ldrb	r2, [r5, #0]
 800fb8a:	2a2a      	cmp	r2, #42	; 0x2a
 800fb8c:	d015      	beq.n	800fbba <_svfiprintf_r+0xea>
 800fb8e:	9a07      	ldr	r2, [sp, #28]
 800fb90:	462f      	mov	r7, r5
 800fb92:	2000      	movs	r0, #0
 800fb94:	250a      	movs	r5, #10
 800fb96:	4639      	mov	r1, r7
 800fb98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb9c:	3b30      	subs	r3, #48	; 0x30
 800fb9e:	2b09      	cmp	r3, #9
 800fba0:	d94d      	bls.n	800fc3e <_svfiprintf_r+0x16e>
 800fba2:	b1b8      	cbz	r0, 800fbd4 <_svfiprintf_r+0x104>
 800fba4:	e00f      	b.n	800fbc6 <_svfiprintf_r+0xf6>
 800fba6:	462f      	mov	r7, r5
 800fba8:	e7b8      	b.n	800fb1c <_svfiprintf_r+0x4c>
 800fbaa:	4a40      	ldr	r2, [pc, #256]	; (800fcac <_svfiprintf_r+0x1dc>)
 800fbac:	1a80      	subs	r0, r0, r2
 800fbae:	fa0b f000 	lsl.w	r0, fp, r0
 800fbb2:	4318      	orrs	r0, r3
 800fbb4:	9004      	str	r0, [sp, #16]
 800fbb6:	463d      	mov	r5, r7
 800fbb8:	e7d3      	b.n	800fb62 <_svfiprintf_r+0x92>
 800fbba:	9a03      	ldr	r2, [sp, #12]
 800fbbc:	1d11      	adds	r1, r2, #4
 800fbbe:	6812      	ldr	r2, [r2, #0]
 800fbc0:	9103      	str	r1, [sp, #12]
 800fbc2:	2a00      	cmp	r2, #0
 800fbc4:	db01      	blt.n	800fbca <_svfiprintf_r+0xfa>
 800fbc6:	9207      	str	r2, [sp, #28]
 800fbc8:	e004      	b.n	800fbd4 <_svfiprintf_r+0x104>
 800fbca:	4252      	negs	r2, r2
 800fbcc:	f043 0302 	orr.w	r3, r3, #2
 800fbd0:	9207      	str	r2, [sp, #28]
 800fbd2:	9304      	str	r3, [sp, #16]
 800fbd4:	783b      	ldrb	r3, [r7, #0]
 800fbd6:	2b2e      	cmp	r3, #46	; 0x2e
 800fbd8:	d10c      	bne.n	800fbf4 <_svfiprintf_r+0x124>
 800fbda:	787b      	ldrb	r3, [r7, #1]
 800fbdc:	2b2a      	cmp	r3, #42	; 0x2a
 800fbde:	d133      	bne.n	800fc48 <_svfiprintf_r+0x178>
 800fbe0:	9b03      	ldr	r3, [sp, #12]
 800fbe2:	1d1a      	adds	r2, r3, #4
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	9203      	str	r2, [sp, #12]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	bfb8      	it	lt
 800fbec:	f04f 33ff 	movlt.w	r3, #4294967295
 800fbf0:	3702      	adds	r7, #2
 800fbf2:	9305      	str	r3, [sp, #20]
 800fbf4:	4d2e      	ldr	r5, [pc, #184]	; (800fcb0 <_svfiprintf_r+0x1e0>)
 800fbf6:	7839      	ldrb	r1, [r7, #0]
 800fbf8:	2203      	movs	r2, #3
 800fbfa:	4628      	mov	r0, r5
 800fbfc:	f7f0 fb38 	bl	8000270 <memchr>
 800fc00:	b138      	cbz	r0, 800fc12 <_svfiprintf_r+0x142>
 800fc02:	2340      	movs	r3, #64	; 0x40
 800fc04:	1b40      	subs	r0, r0, r5
 800fc06:	fa03 f000 	lsl.w	r0, r3, r0
 800fc0a:	9b04      	ldr	r3, [sp, #16]
 800fc0c:	4303      	orrs	r3, r0
 800fc0e:	3701      	adds	r7, #1
 800fc10:	9304      	str	r3, [sp, #16]
 800fc12:	7839      	ldrb	r1, [r7, #0]
 800fc14:	4827      	ldr	r0, [pc, #156]	; (800fcb4 <_svfiprintf_r+0x1e4>)
 800fc16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc1a:	2206      	movs	r2, #6
 800fc1c:	1c7e      	adds	r6, r7, #1
 800fc1e:	f7f0 fb27 	bl	8000270 <memchr>
 800fc22:	2800      	cmp	r0, #0
 800fc24:	d038      	beq.n	800fc98 <_svfiprintf_r+0x1c8>
 800fc26:	4b24      	ldr	r3, [pc, #144]	; (800fcb8 <_svfiprintf_r+0x1e8>)
 800fc28:	bb13      	cbnz	r3, 800fc70 <_svfiprintf_r+0x1a0>
 800fc2a:	9b03      	ldr	r3, [sp, #12]
 800fc2c:	3307      	adds	r3, #7
 800fc2e:	f023 0307 	bic.w	r3, r3, #7
 800fc32:	3308      	adds	r3, #8
 800fc34:	9303      	str	r3, [sp, #12]
 800fc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc38:	444b      	add	r3, r9
 800fc3a:	9309      	str	r3, [sp, #36]	; 0x24
 800fc3c:	e76d      	b.n	800fb1a <_svfiprintf_r+0x4a>
 800fc3e:	fb05 3202 	mla	r2, r5, r2, r3
 800fc42:	2001      	movs	r0, #1
 800fc44:	460f      	mov	r7, r1
 800fc46:	e7a6      	b.n	800fb96 <_svfiprintf_r+0xc6>
 800fc48:	2300      	movs	r3, #0
 800fc4a:	3701      	adds	r7, #1
 800fc4c:	9305      	str	r3, [sp, #20]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	250a      	movs	r5, #10
 800fc52:	4638      	mov	r0, r7
 800fc54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc58:	3a30      	subs	r2, #48	; 0x30
 800fc5a:	2a09      	cmp	r2, #9
 800fc5c:	d903      	bls.n	800fc66 <_svfiprintf_r+0x196>
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d0c8      	beq.n	800fbf4 <_svfiprintf_r+0x124>
 800fc62:	9105      	str	r1, [sp, #20]
 800fc64:	e7c6      	b.n	800fbf4 <_svfiprintf_r+0x124>
 800fc66:	fb05 2101 	mla	r1, r5, r1, r2
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	4607      	mov	r7, r0
 800fc6e:	e7f0      	b.n	800fc52 <_svfiprintf_r+0x182>
 800fc70:	ab03      	add	r3, sp, #12
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	4622      	mov	r2, r4
 800fc76:	4b11      	ldr	r3, [pc, #68]	; (800fcbc <_svfiprintf_r+0x1ec>)
 800fc78:	a904      	add	r1, sp, #16
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	f3af 8000 	nop.w
 800fc80:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fc84:	4681      	mov	r9, r0
 800fc86:	d1d6      	bne.n	800fc36 <_svfiprintf_r+0x166>
 800fc88:	89a3      	ldrh	r3, [r4, #12]
 800fc8a:	065b      	lsls	r3, r3, #25
 800fc8c:	f53f af35 	bmi.w	800fafa <_svfiprintf_r+0x2a>
 800fc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc92:	b01d      	add	sp, #116	; 0x74
 800fc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc98:	ab03      	add	r3, sp, #12
 800fc9a:	9300      	str	r3, [sp, #0]
 800fc9c:	4622      	mov	r2, r4
 800fc9e:	4b07      	ldr	r3, [pc, #28]	; (800fcbc <_svfiprintf_r+0x1ec>)
 800fca0:	a904      	add	r1, sp, #16
 800fca2:	4640      	mov	r0, r8
 800fca4:	f000 f9c2 	bl	801002c <_printf_i>
 800fca8:	e7ea      	b.n	800fc80 <_svfiprintf_r+0x1b0>
 800fcaa:	bf00      	nop
 800fcac:	08020ec4 	.word	0x08020ec4
 800fcb0:	08020eca 	.word	0x08020eca
 800fcb4:	08020ece 	.word	0x08020ece
 800fcb8:	00000000 	.word	0x00000000
 800fcbc:	0800fa1d 	.word	0x0800fa1d

0800fcc0 <__sfputc_r>:
 800fcc0:	6893      	ldr	r3, [r2, #8]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	b410      	push	{r4}
 800fcc8:	6093      	str	r3, [r2, #8]
 800fcca:	da08      	bge.n	800fcde <__sfputc_r+0x1e>
 800fccc:	6994      	ldr	r4, [r2, #24]
 800fcce:	42a3      	cmp	r3, r4
 800fcd0:	db01      	blt.n	800fcd6 <__sfputc_r+0x16>
 800fcd2:	290a      	cmp	r1, #10
 800fcd4:	d103      	bne.n	800fcde <__sfputc_r+0x1e>
 800fcd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcda:	f7ff bb51 	b.w	800f380 <__swbuf_r>
 800fcde:	6813      	ldr	r3, [r2, #0]
 800fce0:	1c58      	adds	r0, r3, #1
 800fce2:	6010      	str	r0, [r2, #0]
 800fce4:	7019      	strb	r1, [r3, #0]
 800fce6:	4608      	mov	r0, r1
 800fce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcec:	4770      	bx	lr

0800fcee <__sfputs_r>:
 800fcee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf0:	4606      	mov	r6, r0
 800fcf2:	460f      	mov	r7, r1
 800fcf4:	4614      	mov	r4, r2
 800fcf6:	18d5      	adds	r5, r2, r3
 800fcf8:	42ac      	cmp	r4, r5
 800fcfa:	d101      	bne.n	800fd00 <__sfputs_r+0x12>
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e007      	b.n	800fd10 <__sfputs_r+0x22>
 800fd00:	463a      	mov	r2, r7
 800fd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd06:	4630      	mov	r0, r6
 800fd08:	f7ff ffda 	bl	800fcc0 <__sfputc_r>
 800fd0c:	1c43      	adds	r3, r0, #1
 800fd0e:	d1f3      	bne.n	800fcf8 <__sfputs_r+0xa>
 800fd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fd14 <_vfiprintf_r>:
 800fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	460c      	mov	r4, r1
 800fd1a:	b09d      	sub	sp, #116	; 0x74
 800fd1c:	4617      	mov	r7, r2
 800fd1e:	461d      	mov	r5, r3
 800fd20:	4606      	mov	r6, r0
 800fd22:	b118      	cbz	r0, 800fd2c <_vfiprintf_r+0x18>
 800fd24:	6983      	ldr	r3, [r0, #24]
 800fd26:	b90b      	cbnz	r3, 800fd2c <_vfiprintf_r+0x18>
 800fd28:	f7ff fcda 	bl	800f6e0 <__sinit>
 800fd2c:	4b7c      	ldr	r3, [pc, #496]	; (800ff20 <_vfiprintf_r+0x20c>)
 800fd2e:	429c      	cmp	r4, r3
 800fd30:	d158      	bne.n	800fde4 <_vfiprintf_r+0xd0>
 800fd32:	6874      	ldr	r4, [r6, #4]
 800fd34:	89a3      	ldrh	r3, [r4, #12]
 800fd36:	0718      	lsls	r0, r3, #28
 800fd38:	d55e      	bpl.n	800fdf8 <_vfiprintf_r+0xe4>
 800fd3a:	6923      	ldr	r3, [r4, #16]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d05b      	beq.n	800fdf8 <_vfiprintf_r+0xe4>
 800fd40:	2300      	movs	r3, #0
 800fd42:	9309      	str	r3, [sp, #36]	; 0x24
 800fd44:	2320      	movs	r3, #32
 800fd46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd4a:	2330      	movs	r3, #48	; 0x30
 800fd4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd50:	9503      	str	r5, [sp, #12]
 800fd52:	f04f 0b01 	mov.w	fp, #1
 800fd56:	46b8      	mov	r8, r7
 800fd58:	4645      	mov	r5, r8
 800fd5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fd5e:	b10b      	cbz	r3, 800fd64 <_vfiprintf_r+0x50>
 800fd60:	2b25      	cmp	r3, #37	; 0x25
 800fd62:	d154      	bne.n	800fe0e <_vfiprintf_r+0xfa>
 800fd64:	ebb8 0a07 	subs.w	sl, r8, r7
 800fd68:	d00b      	beq.n	800fd82 <_vfiprintf_r+0x6e>
 800fd6a:	4653      	mov	r3, sl
 800fd6c:	463a      	mov	r2, r7
 800fd6e:	4621      	mov	r1, r4
 800fd70:	4630      	mov	r0, r6
 800fd72:	f7ff ffbc 	bl	800fcee <__sfputs_r>
 800fd76:	3001      	adds	r0, #1
 800fd78:	f000 80c2 	beq.w	800ff00 <_vfiprintf_r+0x1ec>
 800fd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd7e:	4453      	add	r3, sl
 800fd80:	9309      	str	r3, [sp, #36]	; 0x24
 800fd82:	f898 3000 	ldrb.w	r3, [r8]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f000 80ba 	beq.w	800ff00 <_vfiprintf_r+0x1ec>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd96:	9304      	str	r3, [sp, #16]
 800fd98:	9307      	str	r3, [sp, #28]
 800fd9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd9e:	931a      	str	r3, [sp, #104]	; 0x68
 800fda0:	46a8      	mov	r8, r5
 800fda2:	2205      	movs	r2, #5
 800fda4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800fda8:	485e      	ldr	r0, [pc, #376]	; (800ff24 <_vfiprintf_r+0x210>)
 800fdaa:	f7f0 fa61 	bl	8000270 <memchr>
 800fdae:	9b04      	ldr	r3, [sp, #16]
 800fdb0:	bb78      	cbnz	r0, 800fe12 <_vfiprintf_r+0xfe>
 800fdb2:	06d9      	lsls	r1, r3, #27
 800fdb4:	bf44      	itt	mi
 800fdb6:	2220      	movmi	r2, #32
 800fdb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdbc:	071a      	lsls	r2, r3, #28
 800fdbe:	bf44      	itt	mi
 800fdc0:	222b      	movmi	r2, #43	; 0x2b
 800fdc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fdc6:	782a      	ldrb	r2, [r5, #0]
 800fdc8:	2a2a      	cmp	r2, #42	; 0x2a
 800fdca:	d02a      	beq.n	800fe22 <_vfiprintf_r+0x10e>
 800fdcc:	9a07      	ldr	r2, [sp, #28]
 800fdce:	46a8      	mov	r8, r5
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	250a      	movs	r5, #10
 800fdd4:	4641      	mov	r1, r8
 800fdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdda:	3b30      	subs	r3, #48	; 0x30
 800fddc:	2b09      	cmp	r3, #9
 800fdde:	d969      	bls.n	800feb4 <_vfiprintf_r+0x1a0>
 800fde0:	b360      	cbz	r0, 800fe3c <_vfiprintf_r+0x128>
 800fde2:	e024      	b.n	800fe2e <_vfiprintf_r+0x11a>
 800fde4:	4b50      	ldr	r3, [pc, #320]	; (800ff28 <_vfiprintf_r+0x214>)
 800fde6:	429c      	cmp	r4, r3
 800fde8:	d101      	bne.n	800fdee <_vfiprintf_r+0xda>
 800fdea:	68b4      	ldr	r4, [r6, #8]
 800fdec:	e7a2      	b.n	800fd34 <_vfiprintf_r+0x20>
 800fdee:	4b4f      	ldr	r3, [pc, #316]	; (800ff2c <_vfiprintf_r+0x218>)
 800fdf0:	429c      	cmp	r4, r3
 800fdf2:	bf08      	it	eq
 800fdf4:	68f4      	ldreq	r4, [r6, #12]
 800fdf6:	e79d      	b.n	800fd34 <_vfiprintf_r+0x20>
 800fdf8:	4621      	mov	r1, r4
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f7ff fb12 	bl	800f424 <__swsetup_r>
 800fe00:	2800      	cmp	r0, #0
 800fe02:	d09d      	beq.n	800fd40 <_vfiprintf_r+0x2c>
 800fe04:	f04f 30ff 	mov.w	r0, #4294967295
 800fe08:	b01d      	add	sp, #116	; 0x74
 800fe0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe0e:	46a8      	mov	r8, r5
 800fe10:	e7a2      	b.n	800fd58 <_vfiprintf_r+0x44>
 800fe12:	4a44      	ldr	r2, [pc, #272]	; (800ff24 <_vfiprintf_r+0x210>)
 800fe14:	1a80      	subs	r0, r0, r2
 800fe16:	fa0b f000 	lsl.w	r0, fp, r0
 800fe1a:	4318      	orrs	r0, r3
 800fe1c:	9004      	str	r0, [sp, #16]
 800fe1e:	4645      	mov	r5, r8
 800fe20:	e7be      	b.n	800fda0 <_vfiprintf_r+0x8c>
 800fe22:	9a03      	ldr	r2, [sp, #12]
 800fe24:	1d11      	adds	r1, r2, #4
 800fe26:	6812      	ldr	r2, [r2, #0]
 800fe28:	9103      	str	r1, [sp, #12]
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	db01      	blt.n	800fe32 <_vfiprintf_r+0x11e>
 800fe2e:	9207      	str	r2, [sp, #28]
 800fe30:	e004      	b.n	800fe3c <_vfiprintf_r+0x128>
 800fe32:	4252      	negs	r2, r2
 800fe34:	f043 0302 	orr.w	r3, r3, #2
 800fe38:	9207      	str	r2, [sp, #28]
 800fe3a:	9304      	str	r3, [sp, #16]
 800fe3c:	f898 3000 	ldrb.w	r3, [r8]
 800fe40:	2b2e      	cmp	r3, #46	; 0x2e
 800fe42:	d10e      	bne.n	800fe62 <_vfiprintf_r+0x14e>
 800fe44:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fe48:	2b2a      	cmp	r3, #42	; 0x2a
 800fe4a:	d138      	bne.n	800febe <_vfiprintf_r+0x1aa>
 800fe4c:	9b03      	ldr	r3, [sp, #12]
 800fe4e:	1d1a      	adds	r2, r3, #4
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	9203      	str	r2, [sp, #12]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	bfb8      	it	lt
 800fe58:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe5c:	f108 0802 	add.w	r8, r8, #2
 800fe60:	9305      	str	r3, [sp, #20]
 800fe62:	4d33      	ldr	r5, [pc, #204]	; (800ff30 <_vfiprintf_r+0x21c>)
 800fe64:	f898 1000 	ldrb.w	r1, [r8]
 800fe68:	2203      	movs	r2, #3
 800fe6a:	4628      	mov	r0, r5
 800fe6c:	f7f0 fa00 	bl	8000270 <memchr>
 800fe70:	b140      	cbz	r0, 800fe84 <_vfiprintf_r+0x170>
 800fe72:	2340      	movs	r3, #64	; 0x40
 800fe74:	1b40      	subs	r0, r0, r5
 800fe76:	fa03 f000 	lsl.w	r0, r3, r0
 800fe7a:	9b04      	ldr	r3, [sp, #16]
 800fe7c:	4303      	orrs	r3, r0
 800fe7e:	f108 0801 	add.w	r8, r8, #1
 800fe82:	9304      	str	r3, [sp, #16]
 800fe84:	f898 1000 	ldrb.w	r1, [r8]
 800fe88:	482a      	ldr	r0, [pc, #168]	; (800ff34 <_vfiprintf_r+0x220>)
 800fe8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe8e:	2206      	movs	r2, #6
 800fe90:	f108 0701 	add.w	r7, r8, #1
 800fe94:	f7f0 f9ec 	bl	8000270 <memchr>
 800fe98:	2800      	cmp	r0, #0
 800fe9a:	d037      	beq.n	800ff0c <_vfiprintf_r+0x1f8>
 800fe9c:	4b26      	ldr	r3, [pc, #152]	; (800ff38 <_vfiprintf_r+0x224>)
 800fe9e:	bb1b      	cbnz	r3, 800fee8 <_vfiprintf_r+0x1d4>
 800fea0:	9b03      	ldr	r3, [sp, #12]
 800fea2:	3307      	adds	r3, #7
 800fea4:	f023 0307 	bic.w	r3, r3, #7
 800fea8:	3308      	adds	r3, #8
 800feaa:	9303      	str	r3, [sp, #12]
 800feac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800feae:	444b      	add	r3, r9
 800feb0:	9309      	str	r3, [sp, #36]	; 0x24
 800feb2:	e750      	b.n	800fd56 <_vfiprintf_r+0x42>
 800feb4:	fb05 3202 	mla	r2, r5, r2, r3
 800feb8:	2001      	movs	r0, #1
 800feba:	4688      	mov	r8, r1
 800febc:	e78a      	b.n	800fdd4 <_vfiprintf_r+0xc0>
 800febe:	2300      	movs	r3, #0
 800fec0:	f108 0801 	add.w	r8, r8, #1
 800fec4:	9305      	str	r3, [sp, #20]
 800fec6:	4619      	mov	r1, r3
 800fec8:	250a      	movs	r5, #10
 800feca:	4640      	mov	r0, r8
 800fecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fed0:	3a30      	subs	r2, #48	; 0x30
 800fed2:	2a09      	cmp	r2, #9
 800fed4:	d903      	bls.n	800fede <_vfiprintf_r+0x1ca>
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d0c3      	beq.n	800fe62 <_vfiprintf_r+0x14e>
 800feda:	9105      	str	r1, [sp, #20]
 800fedc:	e7c1      	b.n	800fe62 <_vfiprintf_r+0x14e>
 800fede:	fb05 2101 	mla	r1, r5, r1, r2
 800fee2:	2301      	movs	r3, #1
 800fee4:	4680      	mov	r8, r0
 800fee6:	e7f0      	b.n	800feca <_vfiprintf_r+0x1b6>
 800fee8:	ab03      	add	r3, sp, #12
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	4622      	mov	r2, r4
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <_vfiprintf_r+0x228>)
 800fef0:	a904      	add	r1, sp, #16
 800fef2:	4630      	mov	r0, r6
 800fef4:	f3af 8000 	nop.w
 800fef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fefc:	4681      	mov	r9, r0
 800fefe:	d1d5      	bne.n	800feac <_vfiprintf_r+0x198>
 800ff00:	89a3      	ldrh	r3, [r4, #12]
 800ff02:	065b      	lsls	r3, r3, #25
 800ff04:	f53f af7e 	bmi.w	800fe04 <_vfiprintf_r+0xf0>
 800ff08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff0a:	e77d      	b.n	800fe08 <_vfiprintf_r+0xf4>
 800ff0c:	ab03      	add	r3, sp, #12
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	4622      	mov	r2, r4
 800ff12:	4b0a      	ldr	r3, [pc, #40]	; (800ff3c <_vfiprintf_r+0x228>)
 800ff14:	a904      	add	r1, sp, #16
 800ff16:	4630      	mov	r0, r6
 800ff18:	f000 f888 	bl	801002c <_printf_i>
 800ff1c:	e7ec      	b.n	800fef8 <_vfiprintf_r+0x1e4>
 800ff1e:	bf00      	nop
 800ff20:	08020e84 	.word	0x08020e84
 800ff24:	08020ec4 	.word	0x08020ec4
 800ff28:	08020ea4 	.word	0x08020ea4
 800ff2c:	08020e64 	.word	0x08020e64
 800ff30:	08020eca 	.word	0x08020eca
 800ff34:	08020ece 	.word	0x08020ece
 800ff38:	00000000 	.word	0x00000000
 800ff3c:	0800fcef 	.word	0x0800fcef

0800ff40 <_printf_common>:
 800ff40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff44:	4691      	mov	r9, r2
 800ff46:	461f      	mov	r7, r3
 800ff48:	688a      	ldr	r2, [r1, #8]
 800ff4a:	690b      	ldr	r3, [r1, #16]
 800ff4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ff50:	4293      	cmp	r3, r2
 800ff52:	bfb8      	it	lt
 800ff54:	4613      	movlt	r3, r2
 800ff56:	f8c9 3000 	str.w	r3, [r9]
 800ff5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ff5e:	4606      	mov	r6, r0
 800ff60:	460c      	mov	r4, r1
 800ff62:	b112      	cbz	r2, 800ff6a <_printf_common+0x2a>
 800ff64:	3301      	adds	r3, #1
 800ff66:	f8c9 3000 	str.w	r3, [r9]
 800ff6a:	6823      	ldr	r3, [r4, #0]
 800ff6c:	0699      	lsls	r1, r3, #26
 800ff6e:	bf42      	ittt	mi
 800ff70:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ff74:	3302      	addmi	r3, #2
 800ff76:	f8c9 3000 	strmi.w	r3, [r9]
 800ff7a:	6825      	ldr	r5, [r4, #0]
 800ff7c:	f015 0506 	ands.w	r5, r5, #6
 800ff80:	d107      	bne.n	800ff92 <_printf_common+0x52>
 800ff82:	f104 0a19 	add.w	sl, r4, #25
 800ff86:	68e3      	ldr	r3, [r4, #12]
 800ff88:	f8d9 2000 	ldr.w	r2, [r9]
 800ff8c:	1a9b      	subs	r3, r3, r2
 800ff8e:	42ab      	cmp	r3, r5
 800ff90:	dc28      	bgt.n	800ffe4 <_printf_common+0xa4>
 800ff92:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ff96:	6822      	ldr	r2, [r4, #0]
 800ff98:	3300      	adds	r3, #0
 800ff9a:	bf18      	it	ne
 800ff9c:	2301      	movne	r3, #1
 800ff9e:	0692      	lsls	r2, r2, #26
 800ffa0:	d42d      	bmi.n	800fffe <_printf_common+0xbe>
 800ffa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	47c0      	blx	r8
 800ffac:	3001      	adds	r0, #1
 800ffae:	d020      	beq.n	800fff2 <_printf_common+0xb2>
 800ffb0:	6823      	ldr	r3, [r4, #0]
 800ffb2:	68e5      	ldr	r5, [r4, #12]
 800ffb4:	f8d9 2000 	ldr.w	r2, [r9]
 800ffb8:	f003 0306 	and.w	r3, r3, #6
 800ffbc:	2b04      	cmp	r3, #4
 800ffbe:	bf08      	it	eq
 800ffc0:	1aad      	subeq	r5, r5, r2
 800ffc2:	68a3      	ldr	r3, [r4, #8]
 800ffc4:	6922      	ldr	r2, [r4, #16]
 800ffc6:	bf0c      	ite	eq
 800ffc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ffcc:	2500      	movne	r5, #0
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	bfc4      	itt	gt
 800ffd2:	1a9b      	subgt	r3, r3, r2
 800ffd4:	18ed      	addgt	r5, r5, r3
 800ffd6:	f04f 0900 	mov.w	r9, #0
 800ffda:	341a      	adds	r4, #26
 800ffdc:	454d      	cmp	r5, r9
 800ffde:	d11a      	bne.n	8010016 <_printf_common+0xd6>
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	e008      	b.n	800fff6 <_printf_common+0xb6>
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	4652      	mov	r2, sl
 800ffe8:	4639      	mov	r1, r7
 800ffea:	4630      	mov	r0, r6
 800ffec:	47c0      	blx	r8
 800ffee:	3001      	adds	r0, #1
 800fff0:	d103      	bne.n	800fffa <_printf_common+0xba>
 800fff2:	f04f 30ff 	mov.w	r0, #4294967295
 800fff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fffa:	3501      	adds	r5, #1
 800fffc:	e7c3      	b.n	800ff86 <_printf_common+0x46>
 800fffe:	18e1      	adds	r1, r4, r3
 8010000:	1c5a      	adds	r2, r3, #1
 8010002:	2030      	movs	r0, #48	; 0x30
 8010004:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010008:	4422      	add	r2, r4
 801000a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801000e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010012:	3302      	adds	r3, #2
 8010014:	e7c5      	b.n	800ffa2 <_printf_common+0x62>
 8010016:	2301      	movs	r3, #1
 8010018:	4622      	mov	r2, r4
 801001a:	4639      	mov	r1, r7
 801001c:	4630      	mov	r0, r6
 801001e:	47c0      	blx	r8
 8010020:	3001      	adds	r0, #1
 8010022:	d0e6      	beq.n	800fff2 <_printf_common+0xb2>
 8010024:	f109 0901 	add.w	r9, r9, #1
 8010028:	e7d8      	b.n	800ffdc <_printf_common+0x9c>
	...

0801002c <_printf_i>:
 801002c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010030:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010034:	460c      	mov	r4, r1
 8010036:	7e09      	ldrb	r1, [r1, #24]
 8010038:	b085      	sub	sp, #20
 801003a:	296e      	cmp	r1, #110	; 0x6e
 801003c:	4617      	mov	r7, r2
 801003e:	4606      	mov	r6, r0
 8010040:	4698      	mov	r8, r3
 8010042:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010044:	f000 80b3 	beq.w	80101ae <_printf_i+0x182>
 8010048:	d822      	bhi.n	8010090 <_printf_i+0x64>
 801004a:	2963      	cmp	r1, #99	; 0x63
 801004c:	d036      	beq.n	80100bc <_printf_i+0x90>
 801004e:	d80a      	bhi.n	8010066 <_printf_i+0x3a>
 8010050:	2900      	cmp	r1, #0
 8010052:	f000 80b9 	beq.w	80101c8 <_printf_i+0x19c>
 8010056:	2958      	cmp	r1, #88	; 0x58
 8010058:	f000 8083 	beq.w	8010162 <_printf_i+0x136>
 801005c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010060:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010064:	e032      	b.n	80100cc <_printf_i+0xa0>
 8010066:	2964      	cmp	r1, #100	; 0x64
 8010068:	d001      	beq.n	801006e <_printf_i+0x42>
 801006a:	2969      	cmp	r1, #105	; 0x69
 801006c:	d1f6      	bne.n	801005c <_printf_i+0x30>
 801006e:	6820      	ldr	r0, [r4, #0]
 8010070:	6813      	ldr	r3, [r2, #0]
 8010072:	0605      	lsls	r5, r0, #24
 8010074:	f103 0104 	add.w	r1, r3, #4
 8010078:	d52a      	bpl.n	80100d0 <_printf_i+0xa4>
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	6011      	str	r1, [r2, #0]
 801007e:	2b00      	cmp	r3, #0
 8010080:	da03      	bge.n	801008a <_printf_i+0x5e>
 8010082:	222d      	movs	r2, #45	; 0x2d
 8010084:	425b      	negs	r3, r3
 8010086:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801008a:	486f      	ldr	r0, [pc, #444]	; (8010248 <_printf_i+0x21c>)
 801008c:	220a      	movs	r2, #10
 801008e:	e039      	b.n	8010104 <_printf_i+0xd8>
 8010090:	2973      	cmp	r1, #115	; 0x73
 8010092:	f000 809d 	beq.w	80101d0 <_printf_i+0x1a4>
 8010096:	d808      	bhi.n	80100aa <_printf_i+0x7e>
 8010098:	296f      	cmp	r1, #111	; 0x6f
 801009a:	d020      	beq.n	80100de <_printf_i+0xb2>
 801009c:	2970      	cmp	r1, #112	; 0x70
 801009e:	d1dd      	bne.n	801005c <_printf_i+0x30>
 80100a0:	6823      	ldr	r3, [r4, #0]
 80100a2:	f043 0320 	orr.w	r3, r3, #32
 80100a6:	6023      	str	r3, [r4, #0]
 80100a8:	e003      	b.n	80100b2 <_printf_i+0x86>
 80100aa:	2975      	cmp	r1, #117	; 0x75
 80100ac:	d017      	beq.n	80100de <_printf_i+0xb2>
 80100ae:	2978      	cmp	r1, #120	; 0x78
 80100b0:	d1d4      	bne.n	801005c <_printf_i+0x30>
 80100b2:	2378      	movs	r3, #120	; 0x78
 80100b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100b8:	4864      	ldr	r0, [pc, #400]	; (801024c <_printf_i+0x220>)
 80100ba:	e055      	b.n	8010168 <_printf_i+0x13c>
 80100bc:	6813      	ldr	r3, [r2, #0]
 80100be:	1d19      	adds	r1, r3, #4
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6011      	str	r1, [r2, #0]
 80100c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100cc:	2301      	movs	r3, #1
 80100ce:	e08c      	b.n	80101ea <_printf_i+0x1be>
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	6011      	str	r1, [r2, #0]
 80100d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80100d8:	bf18      	it	ne
 80100da:	b21b      	sxthne	r3, r3
 80100dc:	e7cf      	b.n	801007e <_printf_i+0x52>
 80100de:	6813      	ldr	r3, [r2, #0]
 80100e0:	6825      	ldr	r5, [r4, #0]
 80100e2:	1d18      	adds	r0, r3, #4
 80100e4:	6010      	str	r0, [r2, #0]
 80100e6:	0628      	lsls	r0, r5, #24
 80100e8:	d501      	bpl.n	80100ee <_printf_i+0xc2>
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	e002      	b.n	80100f4 <_printf_i+0xc8>
 80100ee:	0668      	lsls	r0, r5, #25
 80100f0:	d5fb      	bpl.n	80100ea <_printf_i+0xbe>
 80100f2:	881b      	ldrh	r3, [r3, #0]
 80100f4:	4854      	ldr	r0, [pc, #336]	; (8010248 <_printf_i+0x21c>)
 80100f6:	296f      	cmp	r1, #111	; 0x6f
 80100f8:	bf14      	ite	ne
 80100fa:	220a      	movne	r2, #10
 80100fc:	2208      	moveq	r2, #8
 80100fe:	2100      	movs	r1, #0
 8010100:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010104:	6865      	ldr	r5, [r4, #4]
 8010106:	60a5      	str	r5, [r4, #8]
 8010108:	2d00      	cmp	r5, #0
 801010a:	f2c0 8095 	blt.w	8010238 <_printf_i+0x20c>
 801010e:	6821      	ldr	r1, [r4, #0]
 8010110:	f021 0104 	bic.w	r1, r1, #4
 8010114:	6021      	str	r1, [r4, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d13d      	bne.n	8010196 <_printf_i+0x16a>
 801011a:	2d00      	cmp	r5, #0
 801011c:	f040 808e 	bne.w	801023c <_printf_i+0x210>
 8010120:	4665      	mov	r5, ip
 8010122:	2a08      	cmp	r2, #8
 8010124:	d10b      	bne.n	801013e <_printf_i+0x112>
 8010126:	6823      	ldr	r3, [r4, #0]
 8010128:	07db      	lsls	r3, r3, #31
 801012a:	d508      	bpl.n	801013e <_printf_i+0x112>
 801012c:	6923      	ldr	r3, [r4, #16]
 801012e:	6862      	ldr	r2, [r4, #4]
 8010130:	429a      	cmp	r2, r3
 8010132:	bfde      	ittt	le
 8010134:	2330      	movle	r3, #48	; 0x30
 8010136:	f805 3c01 	strble.w	r3, [r5, #-1]
 801013a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801013e:	ebac 0305 	sub.w	r3, ip, r5
 8010142:	6123      	str	r3, [r4, #16]
 8010144:	f8cd 8000 	str.w	r8, [sp]
 8010148:	463b      	mov	r3, r7
 801014a:	aa03      	add	r2, sp, #12
 801014c:	4621      	mov	r1, r4
 801014e:	4630      	mov	r0, r6
 8010150:	f7ff fef6 	bl	800ff40 <_printf_common>
 8010154:	3001      	adds	r0, #1
 8010156:	d14d      	bne.n	80101f4 <_printf_i+0x1c8>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	b005      	add	sp, #20
 801015e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010162:	4839      	ldr	r0, [pc, #228]	; (8010248 <_printf_i+0x21c>)
 8010164:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010168:	6813      	ldr	r3, [r2, #0]
 801016a:	6821      	ldr	r1, [r4, #0]
 801016c:	1d1d      	adds	r5, r3, #4
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	6015      	str	r5, [r2, #0]
 8010172:	060a      	lsls	r2, r1, #24
 8010174:	d50b      	bpl.n	801018e <_printf_i+0x162>
 8010176:	07ca      	lsls	r2, r1, #31
 8010178:	bf44      	itt	mi
 801017a:	f041 0120 	orrmi.w	r1, r1, #32
 801017e:	6021      	strmi	r1, [r4, #0]
 8010180:	b91b      	cbnz	r3, 801018a <_printf_i+0x15e>
 8010182:	6822      	ldr	r2, [r4, #0]
 8010184:	f022 0220 	bic.w	r2, r2, #32
 8010188:	6022      	str	r2, [r4, #0]
 801018a:	2210      	movs	r2, #16
 801018c:	e7b7      	b.n	80100fe <_printf_i+0xd2>
 801018e:	064d      	lsls	r5, r1, #25
 8010190:	bf48      	it	mi
 8010192:	b29b      	uxthmi	r3, r3
 8010194:	e7ef      	b.n	8010176 <_printf_i+0x14a>
 8010196:	4665      	mov	r5, ip
 8010198:	fbb3 f1f2 	udiv	r1, r3, r2
 801019c:	fb02 3311 	mls	r3, r2, r1, r3
 80101a0:	5cc3      	ldrb	r3, [r0, r3]
 80101a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80101a6:	460b      	mov	r3, r1
 80101a8:	2900      	cmp	r1, #0
 80101aa:	d1f5      	bne.n	8010198 <_printf_i+0x16c>
 80101ac:	e7b9      	b.n	8010122 <_printf_i+0xf6>
 80101ae:	6813      	ldr	r3, [r2, #0]
 80101b0:	6825      	ldr	r5, [r4, #0]
 80101b2:	6961      	ldr	r1, [r4, #20]
 80101b4:	1d18      	adds	r0, r3, #4
 80101b6:	6010      	str	r0, [r2, #0]
 80101b8:	0628      	lsls	r0, r5, #24
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	d501      	bpl.n	80101c2 <_printf_i+0x196>
 80101be:	6019      	str	r1, [r3, #0]
 80101c0:	e002      	b.n	80101c8 <_printf_i+0x19c>
 80101c2:	066a      	lsls	r2, r5, #25
 80101c4:	d5fb      	bpl.n	80101be <_printf_i+0x192>
 80101c6:	8019      	strh	r1, [r3, #0]
 80101c8:	2300      	movs	r3, #0
 80101ca:	6123      	str	r3, [r4, #16]
 80101cc:	4665      	mov	r5, ip
 80101ce:	e7b9      	b.n	8010144 <_printf_i+0x118>
 80101d0:	6813      	ldr	r3, [r2, #0]
 80101d2:	1d19      	adds	r1, r3, #4
 80101d4:	6011      	str	r1, [r2, #0]
 80101d6:	681d      	ldr	r5, [r3, #0]
 80101d8:	6862      	ldr	r2, [r4, #4]
 80101da:	2100      	movs	r1, #0
 80101dc:	4628      	mov	r0, r5
 80101de:	f7f0 f847 	bl	8000270 <memchr>
 80101e2:	b108      	cbz	r0, 80101e8 <_printf_i+0x1bc>
 80101e4:	1b40      	subs	r0, r0, r5
 80101e6:	6060      	str	r0, [r4, #4]
 80101e8:	6863      	ldr	r3, [r4, #4]
 80101ea:	6123      	str	r3, [r4, #16]
 80101ec:	2300      	movs	r3, #0
 80101ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f2:	e7a7      	b.n	8010144 <_printf_i+0x118>
 80101f4:	6923      	ldr	r3, [r4, #16]
 80101f6:	462a      	mov	r2, r5
 80101f8:	4639      	mov	r1, r7
 80101fa:	4630      	mov	r0, r6
 80101fc:	47c0      	blx	r8
 80101fe:	3001      	adds	r0, #1
 8010200:	d0aa      	beq.n	8010158 <_printf_i+0x12c>
 8010202:	6823      	ldr	r3, [r4, #0]
 8010204:	079b      	lsls	r3, r3, #30
 8010206:	d413      	bmi.n	8010230 <_printf_i+0x204>
 8010208:	68e0      	ldr	r0, [r4, #12]
 801020a:	9b03      	ldr	r3, [sp, #12]
 801020c:	4298      	cmp	r0, r3
 801020e:	bfb8      	it	lt
 8010210:	4618      	movlt	r0, r3
 8010212:	e7a3      	b.n	801015c <_printf_i+0x130>
 8010214:	2301      	movs	r3, #1
 8010216:	464a      	mov	r2, r9
 8010218:	4639      	mov	r1, r7
 801021a:	4630      	mov	r0, r6
 801021c:	47c0      	blx	r8
 801021e:	3001      	adds	r0, #1
 8010220:	d09a      	beq.n	8010158 <_printf_i+0x12c>
 8010222:	3501      	adds	r5, #1
 8010224:	68e3      	ldr	r3, [r4, #12]
 8010226:	9a03      	ldr	r2, [sp, #12]
 8010228:	1a9b      	subs	r3, r3, r2
 801022a:	42ab      	cmp	r3, r5
 801022c:	dcf2      	bgt.n	8010214 <_printf_i+0x1e8>
 801022e:	e7eb      	b.n	8010208 <_printf_i+0x1dc>
 8010230:	2500      	movs	r5, #0
 8010232:	f104 0919 	add.w	r9, r4, #25
 8010236:	e7f5      	b.n	8010224 <_printf_i+0x1f8>
 8010238:	2b00      	cmp	r3, #0
 801023a:	d1ac      	bne.n	8010196 <_printf_i+0x16a>
 801023c:	7803      	ldrb	r3, [r0, #0]
 801023e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010242:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010246:	e76c      	b.n	8010122 <_printf_i+0xf6>
 8010248:	08020ed5 	.word	0x08020ed5
 801024c:	08020ee6 	.word	0x08020ee6

08010250 <_sbrk_r>:
 8010250:	b538      	push	{r3, r4, r5, lr}
 8010252:	4c06      	ldr	r4, [pc, #24]	; (801026c <_sbrk_r+0x1c>)
 8010254:	2300      	movs	r3, #0
 8010256:	4605      	mov	r5, r0
 8010258:	4608      	mov	r0, r1
 801025a:	6023      	str	r3, [r4, #0]
 801025c:	f7f0 fa02 	bl	8000664 <_sbrk>
 8010260:	1c43      	adds	r3, r0, #1
 8010262:	d102      	bne.n	801026a <_sbrk_r+0x1a>
 8010264:	6823      	ldr	r3, [r4, #0]
 8010266:	b103      	cbz	r3, 801026a <_sbrk_r+0x1a>
 8010268:	602b      	str	r3, [r5, #0]
 801026a:	bd38      	pop	{r3, r4, r5, pc}
 801026c:	20010e14 	.word	0x20010e14

08010270 <__sread>:
 8010270:	b510      	push	{r4, lr}
 8010272:	460c      	mov	r4, r1
 8010274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010278:	f000 f8bc 	bl	80103f4 <_read_r>
 801027c:	2800      	cmp	r0, #0
 801027e:	bfab      	itete	ge
 8010280:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010282:	89a3      	ldrhlt	r3, [r4, #12]
 8010284:	181b      	addge	r3, r3, r0
 8010286:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801028a:	bfac      	ite	ge
 801028c:	6563      	strge	r3, [r4, #84]	; 0x54
 801028e:	81a3      	strhlt	r3, [r4, #12]
 8010290:	bd10      	pop	{r4, pc}

08010292 <__swrite>:
 8010292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010296:	461f      	mov	r7, r3
 8010298:	898b      	ldrh	r3, [r1, #12]
 801029a:	05db      	lsls	r3, r3, #23
 801029c:	4605      	mov	r5, r0
 801029e:	460c      	mov	r4, r1
 80102a0:	4616      	mov	r6, r2
 80102a2:	d505      	bpl.n	80102b0 <__swrite+0x1e>
 80102a4:	2302      	movs	r3, #2
 80102a6:	2200      	movs	r2, #0
 80102a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102ac:	f000 f868 	bl	8010380 <_lseek_r>
 80102b0:	89a3      	ldrh	r3, [r4, #12]
 80102b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102ba:	81a3      	strh	r3, [r4, #12]
 80102bc:	4632      	mov	r2, r6
 80102be:	463b      	mov	r3, r7
 80102c0:	4628      	mov	r0, r5
 80102c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102c6:	f000 b817 	b.w	80102f8 <_write_r>

080102ca <__sseek>:
 80102ca:	b510      	push	{r4, lr}
 80102cc:	460c      	mov	r4, r1
 80102ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d2:	f000 f855 	bl	8010380 <_lseek_r>
 80102d6:	1c43      	adds	r3, r0, #1
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	bf15      	itete	ne
 80102dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80102de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80102e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80102e6:	81a3      	strheq	r3, [r4, #12]
 80102e8:	bf18      	it	ne
 80102ea:	81a3      	strhne	r3, [r4, #12]
 80102ec:	bd10      	pop	{r4, pc}

080102ee <__sclose>:
 80102ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102f2:	f000 b813 	b.w	801031c <_close_r>
	...

080102f8 <_write_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4c07      	ldr	r4, [pc, #28]	; (8010318 <_write_r+0x20>)
 80102fc:	4605      	mov	r5, r0
 80102fe:	4608      	mov	r0, r1
 8010300:	4611      	mov	r1, r2
 8010302:	2200      	movs	r2, #0
 8010304:	6022      	str	r2, [r4, #0]
 8010306:	461a      	mov	r2, r3
 8010308:	f7f0 f9cc 	bl	80006a4 <_write>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_write_r+0x1e>
 8010310:	6823      	ldr	r3, [r4, #0]
 8010312:	b103      	cbz	r3, 8010316 <_write_r+0x1e>
 8010314:	602b      	str	r3, [r5, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	20010e14 	.word	0x20010e14

0801031c <_close_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4c06      	ldr	r4, [pc, #24]	; (8010338 <_close_r+0x1c>)
 8010320:	2300      	movs	r3, #0
 8010322:	4605      	mov	r5, r0
 8010324:	4608      	mov	r0, r1
 8010326:	6023      	str	r3, [r4, #0]
 8010328:	f7f0 f9ca 	bl	80006c0 <_close>
 801032c:	1c43      	adds	r3, r0, #1
 801032e:	d102      	bne.n	8010336 <_close_r+0x1a>
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	b103      	cbz	r3, 8010336 <_close_r+0x1a>
 8010334:	602b      	str	r3, [r5, #0]
 8010336:	bd38      	pop	{r3, r4, r5, pc}
 8010338:	20010e14 	.word	0x20010e14

0801033c <_fstat_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4c07      	ldr	r4, [pc, #28]	; (801035c <_fstat_r+0x20>)
 8010340:	2300      	movs	r3, #0
 8010342:	4605      	mov	r5, r0
 8010344:	4608      	mov	r0, r1
 8010346:	4611      	mov	r1, r2
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	f7f0 f9bc 	bl	80006c6 <_fstat>
 801034e:	1c43      	adds	r3, r0, #1
 8010350:	d102      	bne.n	8010358 <_fstat_r+0x1c>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	b103      	cbz	r3, 8010358 <_fstat_r+0x1c>
 8010356:	602b      	str	r3, [r5, #0]
 8010358:	bd38      	pop	{r3, r4, r5, pc}
 801035a:	bf00      	nop
 801035c:	20010e14 	.word	0x20010e14

08010360 <_isatty_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4c06      	ldr	r4, [pc, #24]	; (801037c <_isatty_r+0x1c>)
 8010364:	2300      	movs	r3, #0
 8010366:	4605      	mov	r5, r0
 8010368:	4608      	mov	r0, r1
 801036a:	6023      	str	r3, [r4, #0]
 801036c:	f7f0 f9b0 	bl	80006d0 <_isatty>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_isatty_r+0x1a>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	b103      	cbz	r3, 801037a <_isatty_r+0x1a>
 8010378:	602b      	str	r3, [r5, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	20010e14 	.word	0x20010e14

08010380 <_lseek_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4c07      	ldr	r4, [pc, #28]	; (80103a0 <_lseek_r+0x20>)
 8010384:	4605      	mov	r5, r0
 8010386:	4608      	mov	r0, r1
 8010388:	4611      	mov	r1, r2
 801038a:	2200      	movs	r2, #0
 801038c:	6022      	str	r2, [r4, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	f7f0 f9a0 	bl	80006d4 <_lseek>
 8010394:	1c43      	adds	r3, r0, #1
 8010396:	d102      	bne.n	801039e <_lseek_r+0x1e>
 8010398:	6823      	ldr	r3, [r4, #0]
 801039a:	b103      	cbz	r3, 801039e <_lseek_r+0x1e>
 801039c:	602b      	str	r3, [r5, #0]
 801039e:	bd38      	pop	{r3, r4, r5, pc}
 80103a0:	20010e14 	.word	0x20010e14

080103a4 <__malloc_lock>:
 80103a4:	4770      	bx	lr

080103a6 <__malloc_unlock>:
 80103a6:	4770      	bx	lr

080103a8 <_realloc_r>:
 80103a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103aa:	4607      	mov	r7, r0
 80103ac:	4614      	mov	r4, r2
 80103ae:	460e      	mov	r6, r1
 80103b0:	b921      	cbnz	r1, 80103bc <_realloc_r+0x14>
 80103b2:	4611      	mov	r1, r2
 80103b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80103b8:	f7ff bad6 	b.w	800f968 <_malloc_r>
 80103bc:	b922      	cbnz	r2, 80103c8 <_realloc_r+0x20>
 80103be:	f7ff fa85 	bl	800f8cc <_free_r>
 80103c2:	4625      	mov	r5, r4
 80103c4:	4628      	mov	r0, r5
 80103c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103c8:	f000 f826 	bl	8010418 <_malloc_usable_size_r>
 80103cc:	42a0      	cmp	r0, r4
 80103ce:	d20f      	bcs.n	80103f0 <_realloc_r+0x48>
 80103d0:	4621      	mov	r1, r4
 80103d2:	4638      	mov	r0, r7
 80103d4:	f7ff fac8 	bl	800f968 <_malloc_r>
 80103d8:	4605      	mov	r5, r0
 80103da:	2800      	cmp	r0, #0
 80103dc:	d0f2      	beq.n	80103c4 <_realloc_r+0x1c>
 80103de:	4631      	mov	r1, r6
 80103e0:	4622      	mov	r2, r4
 80103e2:	f7fe fea6 	bl	800f132 <memcpy>
 80103e6:	4631      	mov	r1, r6
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff fa6f 	bl	800f8cc <_free_r>
 80103ee:	e7e9      	b.n	80103c4 <_realloc_r+0x1c>
 80103f0:	4635      	mov	r5, r6
 80103f2:	e7e7      	b.n	80103c4 <_realloc_r+0x1c>

080103f4 <_read_r>:
 80103f4:	b538      	push	{r3, r4, r5, lr}
 80103f6:	4c07      	ldr	r4, [pc, #28]	; (8010414 <_read_r+0x20>)
 80103f8:	4605      	mov	r5, r0
 80103fa:	4608      	mov	r0, r1
 80103fc:	4611      	mov	r1, r2
 80103fe:	2200      	movs	r2, #0
 8010400:	6022      	str	r2, [r4, #0]
 8010402:	461a      	mov	r2, r3
 8010404:	f7f0 f968 	bl	80006d8 <_read>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d102      	bne.n	8010412 <_read_r+0x1e>
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	b103      	cbz	r3, 8010412 <_read_r+0x1e>
 8010410:	602b      	str	r3, [r5, #0]
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	20010e14 	.word	0x20010e14

08010418 <_malloc_usable_size_r>:
 8010418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801041c:	1f18      	subs	r0, r3, #4
 801041e:	2b00      	cmp	r3, #0
 8010420:	bfbc      	itt	lt
 8010422:	580b      	ldrlt	r3, [r1, r0]
 8010424:	18c0      	addlt	r0, r0, r3
 8010426:	4770      	bx	lr

08010428 <_init>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	bf00      	nop
 801042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042e:	bc08      	pop	{r3}
 8010430:	469e      	mov	lr, r3
 8010432:	4770      	bx	lr

08010434 <_fini>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	bf00      	nop
 8010438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043a:	bc08      	pop	{r3}
 801043c:	469e      	mov	lr, r3
 801043e:	4770      	bx	lr
